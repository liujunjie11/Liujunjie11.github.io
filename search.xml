<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL语句疑惑记录]]></title>
    <url>%2F2018%2F11%2F15%2FMySQL%E8%AF%AD%E5%8F%A5%E7%96%91%E6%83%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[主要是记录一些比较有疑惑的语句，方便以后的查找以及回忆。 LIMIT子句 主要参考：https://www.yiibai.com/mysql/limit.html LIMIT子句语法： 12345SELECT column1,column2,...FROM tableLIMIT offset , count; SQL我们来查看LIMIT子句参数： offset参数:指定要返回的第一行的偏移量。第一行的偏移量为0，而不是1。 count:指定要返回的最大行数。 使用带有一个参数的LIMIT子句时，此参数将用于确定从结果集的开头返回的最大行数。 12345SELECT column1,column2,...FROM tableLIMIT count; SQL上面的查询等同： 12345SELECT column1,column2,...FROM tableLIMIT 0 , count; 实例说明12345678910111213141516mysql&gt; SELECT productCode, productName, buypriceFROM productsORDER BY buyprice DESC;+-------------+--------------------------------------+----------+| productCode | productName | buyprice |+-------------+--------------------------------------+----------+| S10_4962 | 1962 LanciaA Delta 16V | 103.42 || S18_2238 | 1998 Chrysler Plymouth Prowler | 101.51 || S10_1949 | 1952 Alpine Renault 1300 | 98.58 || S24_3856 | 1956 Porsche 356A Coupe | 98.3 || S12_1108 | 2001 Ferrari Enzo | 95.59 || S12_1099 | 1968 Ford Mustang | 95.34 |... ....+-------------+--------------------------------------+----------+110 rows in set 默认语句为输出最前面的几行： 12345678910111213141516171819202122mysql&gt; SELECT customernumber, customername, creditlimitFROM customersORDER BY creditlimit DESCLIMIT 5;相当于：mysql&gt; SELECT customernumber, customername, creditlimitFROM customersORDER BY creditlimit DESCLIMIT 0, 5; #从第一个偏移量的指定开始向下输出指定行数的所有内容。+----------------+------------------------------+-------------+| customernumber | customername | creditlimit |+----------------+------------------------------+-------------+| 141 | Euro+ Shopping Channel | 227600 || 124 | Mini Gifts Distributors Ltd. | 210500 || 298 | Vida Sport, Ltd | 141300 || 151 | Muscle Machine Inc | 138500 || 187 | AV Stores, Co. | 136800 |+----------------+------------------------------+-------------+5 rows in set 简要深入理解偏移量的作用： 123456789101112131415161718192021222324252627282930313233343536mysql&gt; SELECT productCode, productName, buyprice FROM productsORDER BY buyprice DESCLIMIT 1, 1; #偏移量从0开始，所以要指定从1开始，然后取一行记录，以行数为1的指定仅输出一行对应的内容。+-------------+--------------------------------+----------+| productCode | productName | buyprice |+-------------+--------------------------------+----------+| S18_2238 | 1998 Chrysler Plymouth Prowler | 101.51 |+-------------+--------------------------------+----------+1 row in set#如下几个深入理解mysql&gt; SELECT productCode, productName, buyprice FROM productsORDER BY buyprice DESCLIMIT 0, 1; #这时指定第一行(偏移量默认为第一行取0)+-------------+--------------------------------+----------+| productCode | productName | buyprice |+-------------+--------------------------------+----------+| S10_4962 | 1962 LanciaA Delta 16V | 103.42 |+-------------+--------------------------------+----------+1 row in setmysql&gt; SELECT productCode, productName, buyprice FROM productsORDER BY buyprice DESCLIMIT 0, 2; #从已指定第一行偏移量开始输出以此为基础的指定行数的以下所有内容+-------------+--------------------------------------+----------+| productCode | productName | buyprice |+-------------+--------------------------------------+----------+| S10_4962 | 1962 LanciaA Delta 16V | 103.42 || S18_2238 | 1998 Chrysler Plymouth Prowler | 101.51 |+----------------+------------------------------+-------------+2 rows in set 总结：offset就是相当于一个定位，count就是要返回指定的最大行数。 ORDER BY ASC/DESCASC:[A~Z], [1~N]… DESC:[Z~A}, [N~1]… A，B，…Z。Z相当于最大的。 经度(Longitude) 纬度(Latitude)经度(Longitude)：东经，西经。 东经正数，西经为负数。越大越靠东。 纬度(Latitude)：南纬，北纬。 北纬为正数，南纬为负数。越大越靠北。 方便记忆：东经，东北正。 参考：https://baike.baidu.com/item/%E7%BB%8F%E7%BA%AC%E5%BA%A6]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL学习资源与实践学习]]></title>
    <url>%2F2018%2F11%2F13%2FMySQL%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[最近心血来潮想写几个SQL玩玩，在此会分享学习的书籍资源以及YouTube教程使用语法的实践项目，以及会进行一系列的简单实践。这里通过在YouTube上的一个大佬的视频来进行在线的实践即可。 就是这个视频。 可主要参考书籍疯狂Java讲义(李刚)来进行学习，当然还有参考其他的经典书籍以备用学习，这类书籍很多，就不在此一一说明了。 《疯狂Java讲义》书籍的配套资源地址：https://github.com/DoingLee MySQL学习这一部分由于一些基础性的基本知识在上面和下面的书籍中已经是多如牛毛了，我就不重复说明了，需要的自行下载去了解吧。可结合书中直接开始语法的学习！实际上几个实用性强的语句就那么几个。 书籍资源分享 MySQL必知必会.pdf SQL语法查询(W3school).pdf MySQL完全教程.pdf MySQL经典教程.pdf 码农教程 就这么多吧，都是网上的人们分享出来的。 网页在线学习 sqlbolt 强烈推荐！还可在线实践(结合上面的视频一起来即可)。 MySQL教程(菜鸟教程) MySQL教程(w3cschool) MySQL教程(易百教程) 相较于上面的书籍，在线教程更加的通俗易懂，可先通过这些入门简单认识一下以及学习语法，不懂的更深的部分可查看书籍即可。 YouTube上的资源 https://www.youtube.com/results?search_query=mysql 就这么简单～ 实践学习强烈建议先根据视频学习！根据上面的YouTube教程结合sqlbolt网站一步步来即可～若是英文看不懂，可结合上面的书籍资源以及在线资源查询即可。实践才是掌握一门语言的最快方法！ 有时根据网速快慢加载的数据库可能有点慢，等待一下即可。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习计算机组成、计算机系统资源分享]]></title>
    <url>%2F2018%2F11%2F13%2F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[一直想写一些关于计算机的基础知识的，但是我又看到许多的优秀书籍以及优秀文章，我从其中也学习到了非常的东西，也解开了我的许多疑惑，在此感谢那些人们的付出～ 回到正题，自己一直想写，但是由于时间问题以及质量不能保证…所以我打算将一些优秀的资源拿出来分享好了，也解决了自己的那块心头肉。 以下资源是我从网上收集到的，仅用于学习使用。 云盘资源分享 深入理解计算机系统（原书第三版）.pdf 一本非常好的书！！ 计算机组成.pdf 计算机操作系统（第3版）_汤小丹.pdf 计算机是怎么跑起来的.pdf 一本科普书吧，很简单，但是够用了。 计算机组成.pdf Linux设备驱动程序(中文版第三版).pdf Linux内核完全注释.pdf 深入Linux内核架构.pdf 以上都是网上收集的电子书，我个人平时喜欢看书，基本上都是电子书，有收集很多技术类的电子书，都是根据需求来收集的。 最近看到的相关的优秀文章 印象系列-理解进程的存在 印象系列-磁盘和内存的基本认识 印象系列-linux内核启动过程 从I/O到索引的那些事 以上都是一个作者写的，最近在学习MySQL时无意中看到的，很好的文章。 还是要多看书学习才行。]]></content>
      <categories>
        <category>资源分享</category>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>资源分享</tag>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客图片外链从七牛云移至腾讯云]]></title>
    <url>%2F2018%2F11%2F11%2FHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E5%A4%96%E9%93%BE%E4%BB%8E%E4%B8%83%E7%89%9B%E4%BA%91%E7%A7%BB%E8%87%B3%E8%85%BE%E8%AE%AF%E4%BA%91%2F</url>
    <content type="text"><![CDATA[最近发现博客中的一些文章图片无法正常显示了，查看了一些文章之后，发现原来是测试域名失效了…我的图片存放了这么多…全都不能用了，妈蛋啊！ 我研究了一下关于它的这个恢复的方法，需要实名不说了，还要我的网站备案，不可能的绝对不可能的，我要走了，再见了，七牛云！！ 我要搬去腾讯云了。以下是我的记录。 将七牛云的图片下载至本地过程操作具体需要用到七牛云命令行工具(qshell)，将曾经上传上去的图片批量下载到本地然后使用腾讯云再次慢慢整理即可… 可参考官方介绍：使用 qshell 进行批量删除 由于我在七牛云上的图片有一部分可以显示，一部分无法显示，但是这个量真的太大了，我不打算一个一个替换了，之后的图片我就直接用腾讯云来充当图床好了…唉…心累。 关于在腾讯云的图床操作可参考： 使用腾讯云对象存储作为图床 更新我通过一个兄弟买了一个已备案的域名，在这里跟着设置了一下，就OK了，接下来我需要将以前的在文件中域名更改为现在的就行了，图片就能正常显示出来了。为了更有效率的处理可以自己写个脚本或者是利用好一些编译软件替换掉域名即可： 我用的Macdown编译软件，平时用这个来写博客的。 另外可以用公用的图床(以下为推荐的参考链接)： https://sspai.com/post/40499 https://blog.nfz.moe/archives/collection-of-image-hosting.html 不过为了稳定，我是真的不想从来一遍了…文件太多了。所以我买了个备案的域名。]]></content>
      <categories>
        <category>笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Hexo</tag>
        <tag>七牛云</tag>
        <tag>腾讯云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（Mac）Julia的下载及结合notebook使用]]></title>
    <url>%2F2018%2F11%2F09%2F%EF%BC%88Mac%EF%BC%89Julia%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%8F%8A%E7%BB%93%E5%90%88notebook%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[关于Julia这个语言，这是一个鲜为人知的语言，听说在处理数值分析方面还不错，最近也总是无意间看到，所以想试试看看，就在此顺便记录一下安装的过程以及如何在notebook中运行的过程。 安装Julia 在这里下载：https://julialang.org/downloads/ 或者是在Mac上可用homebrew命令行: 1brew cask install julia 可参考：https://julialang.org/downloads/platform.html#macos 我使用直接下载安装的方式。 配置环境变量1234567vi ~/.bash_profile #打开配置文件#输入对应目录#Juliaexport PATH="/Applications/Julia-1.0.app/Contents/Resources/julia/bin:$&#123;PATH&#125;"source ~/.bash_profile #快速生效 这样之后在终端直接输入Julia即可使用Julia了。 notebook中运行下载相关的内核就OK了。 打开Julia终端进程： 12using PkgPkg.add("IJulia") 重启notebook，发现可以了。 可参考： https://github.com/JuliaLang/IJulia.jl https://www.youtube.com/watch?v=uRIQXJXRtqg 最后附上几个学习链接： 一个简单的Julia教程（一） 这篇文章有介绍用其他运行Julia的方案。 Julia中文discourse Julia 解决了 C++/Python/Matlab 的哪些痛点？ 怎么看待新出的 Julia 语言？它的前景怎么样？]]></content>
      <categories>
        <category>软件使用</category>
        <category>Julia</category>
      </categories>
      <tags>
        <tag>Jupyter Notebook</tag>
        <tag>Julia</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python结合OCR以及Opencv提取并且实时翻译图片内容]]></title>
    <url>%2F2018%2F11%2F08%2FPython%E7%BB%93%E5%90%88OCR%E4%BB%A5%E5%8F%8AOpencv%E6%8F%90%E5%8F%96%E5%B9%B6%E4%B8%94%E5%AE%9E%E6%97%B6%E7%BF%BB%E8%AF%91%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[本文讲述基于python的一些模块进行图片内容的提取、图片内容的翻译。本文主要进行记录一些在实践中的构想以及遇到的问题，并且记录上一些实现的代码，因为技术含量实在是不怎么高的，不过若是自己玩玩，参加那种水比赛也许能获得个不错的名次，或者是应付个学生报告什么的… 由于时间关系，本文多数只是起到一个构想记录的效用。 基于OCR的图片内容提取在python使用到的模块是pytesseract，关于简要的下载介绍什么的可见：Python–文字识别–Tesseract。 运行代码： 123456import pytesseractimport cv2image = cv2.imread('/Users/junjieliu/Desktop/1.png')text = pytesseract.image_to_string(image)print(text) 在此记录一下在使用过程中的出现的问题： 问题一：1Error: [Errno 2] No such file or directory using pytesser 之后我参考了：https://stackoverflow.com/questions/35609773/oserror-errno-2-no-such-file-or-directory-using-pytesser 我使用了其中的前面的几个答案的方案，结果出现了下面的错误… 问题二：1PermissionError: [Errno 13] Permission denied 之后我参考了：https://github.com/madmaze/pytesseract/issues/62 但是依旧得不到解决。 解决方案：使用命令行： 1which tesseract 找到了它的位置（没想到Mac自带的一个？）： 1/usr/local/bin/tesseract 然后虽然在替换了地址之后可以正常运行代码了(即tesseract_cmd = “/usr/local/bin/tesseract”)，就会变得很麻烦，因为自带的根本难以进行扩展。 将下载好的加入环境变量替换掉原装的： 1vi ~/.bash_profile 写入： 12#tesseractexport PATH="/usr/local/Cellar/tesseract/4.0.0/bin:$PATH" 立即生效： 1source ~/.bash_profile 之后再使用命令行which tesseract,就会发现变了位置，更改tesseract_cmd = “/usr/local/Cellar/tesseract/4.0.0/bin/tesseract”，之后程序就能成功运行并且可以得到以后的更多的扩展使用了，比如语言包的选择。 在线提取图片文字小工具提取这一块的具体过程就不多说了，简单记录一下结合其他技术可以实现的想法： 可结合Pyqt5的GUI界面化开发，输入图片的目录地址，下方即出现提取的内容。 在以上的基础上结合爬虫实现翻译。 可参考我以前写的文章：python3爬虫与GUI-基于有道词典的词典小工具 这样一来这个小工具就能出来了。这里就这样吧，因为时间关系加上实现的过程不是很难，所以就不多说了。 关于提取的精确度可移步参考更强大的工具：deep_ocr 结合OpenCV实时翻译这里主要是我在参考了：用OpenCV和Python识别二维码和条形码这篇文章之后结合本身的需求出现的启发。 这是我经过修改之后的代码（添加并且修改了几行代码）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465from imutils.video import VideoStreamfrom pyzbar import pyzbarimport datetimeimport imutilsimport timeimport cv2cap = cv2.VideoCapture(0)vs = VideoStream(src=0).start()time.sleep(2.0)# open the output CSV file for writing and initialize the set of# barcodes found thus farcsv = open("barcodes.csv", "w")found = set()# loop over the frames from the video streamwhile True: # grab the frame from the threaded video stream and resize it to # have a maximum width of 400 pixels frame = vs.read() frame = imutils.resize(frame, width=400) # find the barcodes in the frame and decode each of the barcodes barcodes = pyzbar.decode(frame) # loop over the detected barcodes for barcode in barcodes: # extract the bounding box location of the barcode and draw # the bounding box surrounding the barcode on the image (x, y, w, h) = barcode.rect cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2) # the barcode data is a bytes object so if we want to draw it # on our output image we need to convert it to a string first barcodeData = barcode.data.decode("utf-8") barcodeType = barcode.type # draw the barcode data and barcode type on the image text = "&#123;&#125; (&#123;&#125;)".format(barcodeData, barcodeType) cv2.putText(frame, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2) # if the barcode text is currently not in our CSV file, write # the timestamp + barcode qto disk and update the set if barcodeData not in found: csv.write("&#123;&#125;,&#123;&#125;\n".format(datetime.datetime.now(), barcodeData)) csv.flush() found.add(barcodeData) # show the output frame cv2.imshow("Barcode Scanner", frame) key = cv2.waitKey(1) &amp; 0xFF # if the `q` key was pressed, break from the loop if key == ord("q"): break# close the output CSV file do a bit of cleanupprint("[INFO] cleaning up...")cap.release() # 释放摄像头csv.close()cv2.destroyAllWindows()vs.stop() 性能得到了一点的优化，少写了点代码。效果没变化。 关于实现实时翻译的效果，这里可结合上面的有道爬虫与OpenCV来完成。基本上进行一些修改就行了，实现的过程不算太难。多参考官方文档以及他人的做法即能实现。 大概的代码样本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990# coding:utf-8from imutils.video import VideoStreamimport datetimeimport imutilsimport timeimport cv2import hashlibimport requestsimport jsonimport randomcap = cv2.VideoCapture(0)# initialize the video stream and allow the camera sensor to warm upprint("starting video stream...")# vs = VideoStream(src=0).start()vs = VideoStream(src=0).start()time.sleep(2.0)csv = open("barcodes.csv", "w")found = set()while True: # grab the frame from the threaded video stream and resize it to # have a maximum width of 400 pixels frame = vs.read() frame = imutils.resize(frame, width=400) word = frame for words in word: r = str(int(time.time() * 1000 + random.randint(1, 10))) # 模仿JS代码的仿写 S = 'fanyideskweb' n = words D = "ebSeFb%=XZ%T[KZ)c(sy!" # 在完整的JS代码中可找到 o = hashlib.md5((S + n + str(r) + D).encode('utf-8')).hexdigest() data = &#123; 'i': words, 'from': 'AUTO', 'to': 'AUTO', 'smartresult': 'dict', 'client': S, 'salt': r, 'sign': o, 'doctype': 'json', 'version': '2.1', 'keyfrom': 'fanyi.web', 'action': 'FY_BY_REALTIME', 'typoResult': 'false' &#125; url = 'http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule' # 在代理中需要加入cookies信息，否则会出现代码错误信息的返回 header = &#123; 'Cookie': 'OUTFOX_SEARCH_USER_ID=432464843@10.168.8.76; _ntes_nnid=25aff2b1480f17471ca1585f6f2f4293,1512024136653; OUTFOX_SEARCH_USER_ID_NCOO=132154936.07902834; JSESSIONID=aaa3TFIg-JJJN4xEog6mw; ___rl__test__cookies=1525691300664', 'Referer': 'http://fanyi.youdao.com/', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36' &#125; response = requests.post(url=url, headers=header, data=data) response.encoding = 'utf-8' translateResult = json.loads(response.text)["translateResult"][0][0]['tgt'] #(x, y, w, h) = words.rect cv2.rectangle(frame, (10, 10), (20, 20), (0, 0, 255), 2) cv2.putText(frame, translateResult, (10, 10 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2) # if the text is currently not in our CSV file, write # the timestamp + text qto disk and update the set if translateResult not in found: csv.write("&#123;&#125;,&#123;&#125;\n".format(datetime.datetime.now(), translateResult)) csv.flush() found.add(translateResult) # show the output frame cv2.imshow("Translate Discern", frame) key = cv2.waitKey(1) &amp; 0xFF # if the `q` key was pressed, break from the loop if key == ord("q"): break# close the output CSV file do a bit of cleanupprint("cleaning up...")cap.release() # 释放摄像头csv.close()cv2.destroyAllWindows()vs.stop() 可参考： 深度学习 + OpenCV，Python实现实时视频目标检测 OpenCV Python接口 Zero-parameter, automatic Canny edge detection with Python and OpenCV Opencv获取身份证号码区域 最后记录一下在下载tesseract之后的提示，有一天可能会用到： 12345678910111213icu4c is keg-only, which means it was not symlinked into /usr/local,because macOS provides libicucore.dylib (but nothing else).If you need to have icu4c first in your PATH run: echo &apos;export PATH=&quot;/usr/local/opt/icu4c/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile echo &apos;export PATH=&quot;/usr/local/opt/icu4c/sbin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profileFor compilers to find icu4c you may need to set: export LDFLAGS=&quot;-L/usr/local/opt/icu4c/lib&quot; export CPPFLAGS=&quot;-I/usr/local/opt/icu4c/include&quot;For pkg-config to find icu4c you may need to set: export PKG_CONFIG_PATH=&quot;/usr/local/opt/icu4c/lib/pkgconfig&quot;]]></content>
      <categories>
        <category>Python</category>
        <category>OCR</category>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OCR</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kaggle比赛：数字识别的多种算法实现]]></title>
    <url>%2F2018%2F11%2F07%2FKaggle%E6%AF%94%E8%B5%9B%EF%BC%9A%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E7%9A%84%E5%A4%9A%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[关于Kaggle大赛就不多说了，我打算进一步了解一下入门级的比赛之后再另作参加项目/比赛的打算，在此之前需要更多的实践才行。 以下是我学习的地址(在一个GitHub大神分享的相关的资源)： https://github.com/apachecn/kaggle/blob/dev/competitions/getting-started/digit-recognizer/knn算法描述.md 里面有多种可以实现的算法的代码以及思想，我在此进行进一步的整理，进行一个简单的代码记录，以及会进行一点修改以符合我自身的情况。 需要的数据下载地址：https://www.kaggle.com/c/digit-recognizer/data KNN实现]]></content>
      <categories>
        <category>Kaggle</category>
        <category>机器学习</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Kaggle</tag>
        <tag>机器学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python机器学习系列：均值平移(Mean Shift)算法的实现及应用]]></title>
    <url>%2F2018%2F10%2F30%2Fpython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9A%E5%9D%87%E5%80%BC%E5%B9%B3%E7%A7%BB(Mean%20Shift)%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[这里是对应的课程地址：https://pythonprogramming.net/hierarchical-clustering-mean-shift-machine-learning-tutorial/?completed=/k-means-from-scratch-2-machine-learning-tutorial/ 关于这个算法更像是无监督学习，它相较于K-Means算法不用指定K的个数，可以自动的通过求解一个向量，使得圆心一直往数据集密度最大的方向移动。说的再简单一点，就是每次迭代的时候，都是找到圆里面点的平均位置作为新的圆心位置。 可参考：机器学习（十）Mean Shift 聚类算法、爬山算法 在原作者的原代码上进行一些符合当今实际情况的修改。 均值平移(Mean Shift)的实现首先通过代码来理解看看他是个什么情况： 12345678910111213141516171819202122232425262728293031323334import numpy as npfrom sklearn.cluster import MeanShiftfrom sklearn.datasets.samples_generator import make_blobsimport matplotlib.pyplot as pltfrom mpl_toolkits.mplot3d import Axes3Dplt.style.use('ggplot')centers = [[1,1,1], [5,5,5], [3,10,10]]#样本以及聚类型X, label = make_blobs(n_samples=100, centers=centers, cluster_std=1.5) #样本数量，中心点，方差设置ms = MeanShift()ms.fit(X)labels = ms.labels_cluster_centers = ms.cluster_centers_n_clusters = len(np.unique(labels))print(labels,cluster_centers)colors = ['r','g','k']fig = plt.figure()ax = fig.add_subplot(111, projection = '3d')#画出所有的样本点for i in range(len(X)): ax.scatter(X[i][0], X[i][1], X[i][2], c=colors[labels[i]], marker='o')#画出中心点ax.scatter(cluster_centers[:,0], cluster_centers[:,1], cluster_centers[:,2],marker='x', color='k', s=150, linewidths=5, zorder=1) #zorder参数的数值越小表示越早画上去，在图表在叠加状态下时有一定的调整作用，比如不让画出来的交叉图分不清等问题# ax.scatter(cluster_centers[0], cluster_centers[1], cluster_centers[2],marker='x', color='k', s=150, linewidths=5, zorder=10)还是跟上面的有区别的，自行检查。print(cluster_centers[:,0])plt.show() 结果展示： 直接移步这里看吧：https://pythonprogramming.net/hierarchical-clustering-mean-shift-machine-learning-tutorial/ 对我来说，作者的关于均值平移(Mean Shift)算法的教程文章实在是看不下去了… 关于原作者的均值平移(Mean Shift)算法的实现 直接移步这里吧：https://pythonprogramming.net/weighted-bandwidth-mean-shift-machine-learning-tutorial/ 原作者的代码不怎么合意，并且不能怎么真正的展现出来实现的意义，我不怎么认同，所以只贴上链接在此。 关于均值平移(Mean Shift)算法的项目应用在原作者中是关于上次中的titanic数据集。 数据地址：https://pythonprogramming.net/static/downloads/machine-learning-data/titanic.xls 这里是实现的地址：https://pythonprogramming.net/mean-shift-titanic-dataset-machine-learning-tutorial/ 对我来说，这个算法应用到这个数据集上是有一点牵强的，没必要的…因为选择这样的数据集来进行试验品实在有点晦涩难懂不合适。 铺助理解链接 numpy.array_equal mplot3d tutorial sklearn 中 make_blobs模块使用 机器学习（十）Mean Shift 聚类算法 matplotlib.pyplot.plot()函数中参数zorder 就这样吧，其实我也很期待写下神经网络的记录教程～]]></content>
      <categories>
        <category>机器学习</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python机器学习系列：K-均值算法(K-Means)的实现及应用]]></title>
    <url>%2F2018%2F10%2F26%2Fpython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9AK-%E5%9D%87%E5%80%BC%E7%AE%97%E6%B3%95(K-Means)%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[对应的课程地址：https://pythonprogramming.net/machine-learning-clustering-introduction-machine-learning-tutorial/?completed=/support-vector-machine-parameters-machine-learning-tutorial/ K-均值算法(K-Means)属于无监督学习、聚类算法。即将无标签的数据集进行分类，并且无训练过程(监督学习的数据集才存在训练一说)等，又可理解为自动分类器。 本文对于原作者的代码进行了一点修改以符合当今情况。 K-均值算法(K-Means)的实现这个算法不算是很难理解，实际上很容易理解，在此就不多废话了。 简单说说等下代码实现的思想原理以及相关的需要注意的一些东西。关于这个实现的过程中，会想从前一样，使用自制的数据集样本，在其中会选择两个作为最初的中心点(亦可通过洗牌后进行选择)，然后将剩下的数据集与这两个中心点进行计算，通过得出的距离大小使得离得哪个中心点近就归属于那个中心点的分类处(非0即1的分类)，接着会从这些已经各就各位的点中得出平均点。我们会设置一个最大迭代次数以及一个固定公差数(迭代次数在此不够严谨，仅仅起到学习认知的作用)，关于这个公差数是起到一个监督的作用，若是在未得出平均点之前的数据点与中心点之间的公差数值大于固定公差数阈值，就说明优化失败了，之后这次的优化就忽略，直接进行下一次的优化过程(得出最佳平均点就是一次又一次优化的过程，最终目标就是得出最佳的平均点，最具代表性的点)。最终我们会通过数据可视化来进行图表结果的展示。 以下是实现代码。 实现代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import numpy as np 自制训练数据集X = np.array([[1,2], [1.5,1.8], [5,8], [8,8], [1,0.6], [9,11], [1,3], [8,9], [0,3], [5,4], [6,4]])class K_Means(): def __init__(self, k=2, tol=0.001, max_iter=300): self.k = k self.tol = tol self.max_iter = max_iter #最大迭代次数 def fit(self, data): self.centroids = &#123;&#125; #质点圆心 #取两个作为中心点 for i in range(self.k): self.centroids[i] = data[i] for i in range(self.max_iter): self.classifications = &#123;&#125; for i in range(self.k): self.classifications[i] = [] for featureset in data: #计算点与点之间的距离,分配数据集进入各自合适的阵营 distances = [np.linalg.norm(featureset-self.centroids[centroid]) for centroid in self.centroids] classification = distances.index(min(distances)) #取最小的距离索引位置点 self.classifications[classification].append(featureset) prev_centroids = dict(self.centroids) #保留现在的原数据，之后计算公差要用到 for classification in self.classifications: #得出平均点 self.centroids[classification] = np.average(self.classifications[classification], axis=0) optimized = True for c in self.centroids: original_centroid = prev_centroids[c] current_centroid = self.centroids[c] if np.sum((current_centroid - original_centroid)/original_centroid*100.0) &gt; self.tol: print(np.sum((current_centroid - original_centroid)/original_centroid*100)) optimized = False if optimized: break def predict(self, data): #代入数据集与圆心点进行距离计算，并且进行分类0/1 distances = [np.linalg.norm(data-self.centroids[centroid]) for centroid in self.centroids] classification = distances.index(min(distances)) return classification 下面是训练过程以及图表展示相关的代码： 1234567891011121314151617181920import matplotlib.pyplot as pltplt.style.use('ggplot')colors = ['g', 'r', 'c', 'b', 'k'] clf = K_Means()clf.fit(X)# 可视化中心原点for centroid in clf.centroids: plt.scatter(clf.centroids[centroid][0], clf.centroids[centroid][1], marker='o', color='k', s=150, linewidths=5)#可视化已分类好的各就各位的点for classification in clf.classifications: color = colors[classification] for featrueset in clf.classifications[classification]: plt.scatter(featrueset[0], featrueset[1], marker='x', color=color, s=150, linewidths=5)plt.show() 完整代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586import matplotlib.pyplot as pltimport numpy as npplt.style.use('ggplot')# 自制训练数据集X = np.array([[1,2], [1.5,1.8], [5,8], [8,8], [1,0.6], [9,11], [1,3], [8,9], [0,3], [5,4], [6,4]])colors = ['g', 'r', 'c', 'b', 'k'] print(colors)class K_Means(): def __init__(self, k=2, tol=0.001, max_iter=300): self.k = k self.tol = tol self.max_iter = max_iter #最大迭代次数 def fit(self, data): self.centroids = &#123;&#125; #质点圆心 #取两个作为中心点 for i in range(self.k): self.centroids[i] = data[i] for i in range(self.max_iter): self.classifications = &#123;&#125; for i in range(self.k): self.classifications[i] = [] for featureset in data: #计算点与点之间的距离,分配数据集进入各自合适的阵营 distances = [np.linalg.norm(featureset-self.centroids[centroid]) for centroid in self.centroids] classification = distances.index(min(distances)) #取最小的距离索引位置点 self.classifications[classification].append(featureset) prev_centroids = dict(self.centroids) #保留现在的原数据，之后计算公差要用到 for classification in self.classifications: #得出平均点 self.centroids[classification] = np.average(self.classifications[classification], axis=0) optimized = True for c in self.centroids: original_centroid = prev_centroids[c] current_centroid = self.centroids[c] if np.sum((current_centroid - original_centroid)/original_centroid*100.0) &gt; self.tol: print(np.sum((current_centroid - original_centroid)/original_centroid*100)) optimized = False if optimized: break def predict(self, data): #代入数据集与圆心点进行距离计算，并且进行分类0/1 distances = [np.linalg.norm(data-self.centroids[centroid]) for centroid in self.centroids] classification = distances.index(min(distances)) return classification clf = K_Means()clf.fit(X)# 可视化中心原点for centroid in clf.centroids: plt.scatter(clf.centroids[centroid][0], clf.centroids[centroid][1], marker='o', color='k', s=150, linewidths=5)#可视化已分类好的各就各位的点for classification in clf.classifications: color = colors[classification] for featrueset in clf.classifications[classification]: plt.scatter(featrueset[0], featrueset[1], marker='x', color=color, s=150, linewidths=5)plt.show() 铺助理解链接： np.mean()和Python NumPy中的np.average()有什么区别？ 关于numpy mean函数的axis参数 matplotlib.pyplot.plot Python-Matplotlib 9 颜色和样式 展示结果 这样在这里就完成了实现的过程。这个算法真的不怎么难，至少相较于上次的SVM来说。 项目应用sklearn的K-Means模型训练这次用到的数据是再熟悉不过的titanic数据集，就是预测生死的那个kaggle入门级比赛的那个，哈哈。 数据地址：https://pythonprogramming.net/static/downloads/machine-learning-data/titanic.xls 在利用这个数据时，先将数据集进行简单的数据预处理，以及将非数值数据进行简单的数值转换(即将非数值型数值转换为数值型数据)，之后代入现成的sklearn对应的K-Means模型进行训练，最后得出预测准确性。 下面是代码实现部分： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import matplotlib.pyplot as pltimport numpy as npfrom sklearn.cluster import KMeansfrom sklearn import preprocessingimport pandas as pdplt.style.use('ggplot')df = pd.read_excel('titanic.xls')#简单的数据预处理df.drop(['body','name'], 1, inplace=True)df.fillna(0, inplace=True)#处理非数值数据def handle_non_numerical_data(df): columns = df.columns.values for column in columns: #取出各个列名作为遍历的基调 text_digit_vals = &#123;&#125; def convert_to_int(val): return text_digit_vals[val] if df[column].dtype != np.int64 and df[column].dtype != np.float64: column_contents = df[column].values.tolist() #转换为列表类型以便下方处理 unique_elements = set(column_contents) #去掉重复值 x = 0 for unique in unique_elements: if unique not in text_digit_vals: text_digit_vals[unique] = x #即在此将非数值的数据改为了数值型数据集 x+=1 df[column] = list(map(convert_to_int, df[column])) #将列名替代掉上面的unique非数值列名 return dfdf = handle_non_numerical_data(df)df.drop(['sex','boat'], 1, inplace=True)X = np.array(df.drop(['survived'], 1).astype(float))X = preprocessing.scale(X) #进行缩放，标准化y = np.array(df['survived'])clf = KMeans(n_clusters=2) #得出0/1clf.fit(X)correct = 0for i in range(len(X)): predict_me = np.array(X[i].astype(float)) predict_me = predict_me.reshape(-1, len(predict_me)) #得出每排的数据集 prediction = clf.predict(predict_me) if prediction[0] == y[i]: correct += 1 print(correct/len(X)) 铺助理解链接： sklearn中文主页 Python map() 函数 Scikit-learn Preprocessing 预处理 python进行数据处理——pandas的drop函数 下面是得出的结果： 由于数据简单的预处理了一下，所以准确性在0.3～0.7之间。 sklearn的K-Means模型自制数据集训练这是用自制的数据集进行的模型训练，最后将结果进行图表展示，可以更好的理解这个在sklearn模块中的现成K-Means模型的运作情况。 以下是相关的代码实现： 1234567891011121314151617181920212223242526import matplotlib.pyplot as pltimport numpy as npfrom sklearn.cluster import KMeansplt.style.use('ggplot')X = np.array([[1,2], [1.5,1.8], [5,8], [8,8], [1,0.6], [9,11]])clf = KMeans(n_clusters=2) #聚点设置，必须小于数据集的长度clf.fit(X)centroids = clf.cluster_centers_ #聚类中心坐标labels = clf.labels_ #标签colors = ['g.','r.','c.','b.'] #点加颜色配合for i in range(len(X)): plt.plot(X[i][0], X[i][1], colors[labels[i]], markersize = 25)plt.scatter(centroids[:,0], centroids[:,1], marker='x', s=150, linewidths=5) plt.show() 结果图表展示： 还是不错的，有助于理解学习。 用手动实现的K-Means算法训练数据集在此将要使用上面实现的K-Means算法来训练上面的titanic数据集，将会输出预测准确性。 下面是实现的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import matplotlib.pyplot as pltimport numpy as npplt.style.use('ggplot')class K_Means(): def __init__(self, k=2, tol=0.001, max_iter=300): self.k = k self.tol = tol self.max_iter = max_iter #最大迭代次数 def fit(self, data): self.centroids = &#123;&#125; #质点圆心 #取两个作为中心点 for i in range(self.k): self.centroids[i] = data[i] for i in range(self.max_iter): self.classifications = &#123;&#125; for i in range(self.k): self.classifications[i] = [] for featureset in data: #计算点与点之间的距离,分配数据集进入各自合适的阵营 distances = [np.linalg.norm(featureset-self.centroids[centroid]) for centroid in self.centroids] classification = distances.index(min(distances)) #取最小的距离索引位置点 self.classifications[classification].append(featureset) prev_centroids = dict(self.centroids) #保留现在的原数据，之后计算公差要用到 for classification in self.classifications: #得出平均点 self.centroids[classification] = np.average(self.classifications[classification], axis=0) optimized = True for c in self.centroids: original_centroid = prev_centroids[c] current_centroid = self.centroids[c] if np.sum((current_centroid - original_centroid)/original_centroid*100.0) &gt; self.tol: print(np.sum((current_centroid - original_centroid)/original_centroid*100)) optimized = False if optimized: break def predict(self, data): #代入数据集与圆心点进行距离计算，并且进行分类0/1 distances = [np.linalg.norm(data-self.centroids[centroid]) for centroid in self.centroids] classification = distances.index(min(distances)) return classificationdf = pd.read_excel('titanic.xls')#简单的数据预处理df.drop(['body','name'], 1, inplace=True)df.fillna(0, inplace=True)#处理非数值数据def handle_non_numerical_data(df): columns = df.columns.values for column in columns: #取出各个列名作为遍历的基调 text_digit_vals = &#123;&#125; def convert_to_int(val): return text_digit_vals[val] if df[column].dtype != np.int64 and df[column].dtype != np.float64: column_contents = df[column].values.tolist() #转换为列表类型以便下方处理 unique_elements = set(column_contents) #去掉重复值 x = 0 for unique in unique_elements: if unique not in text_digit_vals: text_digit_vals[unique] = x #即在此将非数值的数据改为了数值型数据集 x+=1 df[column] = list(map(convert_to_int, df[column])) #将列名替代掉上面的unique非数值列名 return dfdf = handle_non_numerical_data(df)df.drop(['sex','boat'], 1, inplace=True)X = np.array(df.drop(['survived'], 1).astype(float))X = preprocessing.scale(X) #进行缩放，标准化y = np.array(df['survived'])clf = K_Means()clf.fit(X)correct = 0for i in range(len(X)): predic_me = np.array(X[i].astype(float)) predic_me = predic_me.reshape(-1, len(predic_me)) prediction = clf.predict(predic_me) if prediction == y[i]: correct += 1print(correct/len(X)) 只是上面代码的连接罢了，代码本身也不难理解。 下面是输出的预测准确性： 额…效果不咋地… 这样一来这篇文章可以接近尾声了…不懂的地方可以去对应的课程去看看，还有的是，多看书，利用好搜索引擎。]]></content>
      <categories>
        <category>机器学习</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于在Mac下的python文字转语音库pyttsx3]]></title>
    <url>%2F2018%2F10%2F23%2F%E5%85%B3%E4%BA%8E%E5%9C%A8Mac%E4%B8%8B%E7%9A%84python%E6%96%87%E5%AD%97%E8%BD%AC%E8%AF%AD%E9%9F%B3%E5%BA%93pyttsx3%2F</url>
    <content type="text"><![CDATA[最近写python机器学习教程有点累了..就玩一些其他的东西，就包括了这个文字转语音的python3库pyttsx3。 其中也遇到了一些问题，在此记录一下。 关于下载运行的问题在使用命令行pip install pyttsx3下载之后，我在终端写下了如下代码： 12import pyttsx3engine = pyttsx3.init() 结果出现了No module named &#39;Foundation&#39;的错误问题。 解决方案下载模块pyobjc. 1pip install pyobjc 估计是跟调用系统一些模块有关，毕竟这个库是跟macOS关系还是挺深的…自行了解，没想到这个库可以调用Objective-C的库来进行macOS上的应用程序开发… 以下是WiKi的解释： PyObjC是Python和Objective-C编程语言之间的双向桥梁，允许程序员使用Python扩展现有的Objective-C库，例如Apple的Cocoa框架。 PyObjC用于在纯Python中开发macOS应用程序。 对GNUstep的支持也很有限，GNUstep是Cocoa的开源，跨平台实现。 下载完成这个库之后，再运行上面的代码就没有出错了。 参考链接：https://blog.csdn.net/noway5456/article/details/78905275 关于pyttsx3读中文字的问题这个问题其实是跟系统的语音设置相关的，看下图吧。 我在系统默认的语音类型(在图中两者之间切换)： 然后又用代码查看pyttsx3的对应默认声音： 发现了其实pyttsx3的语音是根据本地语音相关的，这又一步说明为何要安装pyobjc这个铺助模块的意义。 在读取英文或中文时，设置一下本地的默认语音即可。]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>问题记录笔记</tag>
        <tag>Pyttsx3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python机器学习系列：支持向量机(SVM)的应用以及实现]]></title>
    <url>%2F2018%2F10%2F23%2Fpython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9A%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA-SVM-%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[我记录下的这些东西，如果是有哪些不懂得地方，我强烈建议参考我在这里的书籍。另外还有《机器学习实战》，《深度学习》这本花书等，利用好搜索引擎也是一大好利器。 关于这篇文章，我还是和以前记录相关的机器学习知识之类篇章一样的风格。 不懂可进入这里的对应的教程，看不懂可借助翻译插件/软件(实际上借助这些看起来轻松多了，看英文头疼的厉害，如果是对于初学者)。 SVM的实现SVM算法是有一点难理解的，但是坚持看一些文章和上面说的那些书籍之后就会发现其实也就那么回事。 关于SVM的实现(仅作通俗说明，以二维为例)：由于这个算法是根据支持向量得出两个函数，而我们取的是这两条线性函数的距离的中间值，从而得到了决策边界函数，这样任务也就完成了。但是由于参数的不同，取这个决策边界是可以有多个甚至是无穷个的，那么取得最优的参数是可以利用梯度下降算法的(符合凸二次规划)。得到了最优的参数就可以得出决策边界的函数了。 涉及到不少的数学知识…我想我大概是说对了吧，哈哈… 为了实现这个算法，必须要提前了解这算法相关的知识，不然真的是寸步难行啊。 下面是铺助理解链接，不懂还要翻书看吴恩达老师的教程： 二次规划 干货 | 从超平面到SVM（一） 浅谈最优化问题的KKT条件 以下就是完整的实现代码了： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110import numpy as npclass Support_Vector_Machine: def __init__(self, visualization=True): self.visualization = visualization self.colors = &#123;1:'r', -1:'b'&#125; if self.visualization: self.fig = plt.figure() self.ax = self.fig.add_subplot(1,1,1) def fit(self, data): self.data = data opt_dict = &#123;&#125; transforms = [[1,1], [-1,1], [-1,-1], [1,-1]] all_data = [] for yi in self.data: for featureset in self.data[yi]: for feature in featureset: all_data.append(feature) self.max_feature_value = max(all_data) self.min_feature_value = min(all_data) all_data = None #指定梯度下降的步子大小 step_sizes = [self.max_feature_value * 0.1, self.max_feature_value * 0.01, self.max_feature_value * 0.001,] #b的假设大小，最为重要的是参数w，而不是参数b b_range_multiple = 2 b_multiple =5 latest_optimum = self.max_feature_value*10 #最大的步子 for step in step_sizes: w = np.array([latest_optimum, latest_optimum]) optimized = False while not optimized: for b in np.arange(-1*(self.max_feature_value * b_range_multiple), self.max_feature_value * b_range_multiple, step * b_multiple): for transformation in transforms: w_t = w*transformation found_option = True for i in self.data: for xi in self.data[i]: yi = i if not yi*(np.dot(w_t, xi)+b) &gt;= 1: found_option = False #如果约束优化条件成立 if found_option: opt_dict[np.linalg.norm(w_t)] = [w_t, b] #若是值为负数则停止进一步的优化步子 if w[0] &lt;0: optimized = True print('Optimized a step.') else: w = w - step norms = sorted([n for n in opt_dict]) opt_choice = opt_dict[norms[0]] self.w = opt_choice[0] self.b = opt_choice[1] latest_optimum = opt_choice[0][0]+step*2 for i in self.data: for xi in self.data[i]: yi = i print(xi, ':', yi*(np.dot(self.w, xi)+self.b)) #预测部分 def predict(self, features): classification = np.sign(np.dot(np.array(features), self.w)+self.b) if classification != 0 and self.visualization: self.ax.scatter(features[0], features[1], s=200, marker='*', c=self.colors[classification]) return classification #可视化部分 def visualize(self): [[self.ax.scatter(x[0], x[1], s=100, color=self.colors[i]) for x in data_dict[i]] for i in data_dict] def hyperplane(x, w, b, v): return (-w[0]*x-b+v) / w[1] datarange = (self.min_feature_value*0.9, self.max_feature_value*1.1) hyp_x_min = datarange[0] hyp_x_max = datarange[1] psv1 = hyperplane(hyp_x_min, self.w, self.b, 1) psv2 = hyperplane(hyp_x_max, self.w, self.b, 1) self.ax.plot([hyp_x_min, hyp_x_max], [psv1,psv2], 'k') nsv1 = hyperplane(hyp_x_min, self.w, self.b, -1) nsv2 = hyperplane(hyp_x_max, self.w, self.b, -1) self.ax.plot([hyp_x_min, hyp_x_max], [nsv1,nsv2], 'k') db1 = hyperplane(hyp_x_min, self.w, self.b, 0) db2 = hyperplane(hyp_x_max, self.w, self.b, 0) self.ax.plot([hyp_x_min, hyp_x_max], [db1, db2], 'y--') plt.show() 铺助理解链接： Python 中的range(),arange()函数 python中np.multiply（）、np.dot（）和星号（*）三种乘法运算的区别（转） 简要数据集预测以及结果可视化以下是完整代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140import matplotlib.pyplot as pltimport numpy as npplt.style.use('ggplot')class Support_Vector_Machine: def __init__(self, visualization=True): self.visualization = visualization self.colors = &#123;1:'r', -1:'b'&#125; if self.visualization: self.fig = plt.figure() self.ax = self.fig.add_subplot(1,1,1) def fit(self, data): self.data = data opt_dict = &#123;&#125; transforms = [[1,1], [-1,1], [-1,-1], [1,-1]] all_data = [] for yi in self.data: for featureset in self.data[yi]: for feature in featureset: all_data.append(feature) self.max_feature_value = max(all_data) self.min_feature_value = min(all_data) all_data = None #指定梯度下降的步子大小 step_sizes = [self.max_feature_value * 0.1, self.max_feature_value * 0.01, self.max_feature_value * 0.001,] #b的假设大小，最为重要的是参数w，而不是参数b b_range_multiple = 2 b_multiple =5 latest_optimum = self.max_feature_value*10 #最大的步子 for step in step_sizes: w = np.array([latest_optimum, latest_optimum]) optimized = False while not optimized: for b in np.arange(-1*(self.max_feature_value * b_range_multiple), self.max_feature_value * b_range_multiple, step * b_multiple): for transformation in transforms: w_t = w*transformation found_option = True for i in self.data: for xi in self.data[i]: yi = i if not yi*(np.dot(w_t, xi)+b) &gt;= 1: found_option = False #如果约束优化条件成立 if found_option: opt_dict[np.linalg.norm(w_t)] = [w_t, b] #若是值为负数则停止进一步的优化步子 if w[0] &lt;0: optimized = True print('Optimized a step.') else: w = w - step norms = sorted([n for n in opt_dict]) opt_choice = opt_dict[norms[0]] self.w = opt_choice[0] self.b = opt_choice[1] latest_optimum = opt_choice[0][0]+step*2 for i in self.data: for xi in self.data[i]: yi = i print(xi, ':', yi*(np.dot(self.w, xi)+self.b)) #预测部分 def predict(self, features): classification = np.sign(np.dot(np.array(features), self.w)+self.b) if classification != 0 and self.visualization: self.ax.scatter(features[0], features[1], s=200, marker='*', c=self.colors[classification]) return classification #可视化部分 def visualize(self): [[self.ax.scatter(x[0], x[1], s=100, color=self.colors[i]) for x in data_dict[i]] for i in data_dict] def hyperplane(x, w, b, v): return (-w[0]*x-b+v) / w[1] datarange = (self.min_feature_value*0.9, self.max_feature_value*1.1) hyp_x_min = datarange[0] hyp_x_max = datarange[1] psv1 = hyperplane(hyp_x_min, self.w, self.b, 1) psv2 = hyperplane(hyp_x_max, self.w, self.b, 1) self.ax.plot([hyp_x_min, hyp_x_max], [psv1,psv2], 'k') nsv1 = hyperplane(hyp_x_min, self.w, self.b, -1) nsv2 = hyperplane(hyp_x_max, self.w, self.b, -1) self.ax.plot([hyp_x_min, hyp_x_max], [nsv1,nsv2], 'k') db1 = hyperplane(hyp_x_min, self.w, self.b, 0) db2 = hyperplane(hyp_x_max, self.w, self.b, 0) self.ax.plot([hyp_x_min, hyp_x_max], [db1, db2], 'y--') plt.show()#训练数据集data_dict = &#123;-1:np.array([[1,7], [2,8], [3,8],]), 1:np.array([[5,1], [6,-1], [7,3],])&#125;svm = Support_Vector_Machine()svm.fit(data=data_dict)#预测数据集predict_us = [[0,10], [1,3], [3,4], [3,5], [5,5], [5,6], [6,-5], [5,8]]for p in predict_us: svm.predict(p)svm.visualize() 这样一来就完成了算法的实现了，可视化的图表如下： 实际上这只是算法的简单实现，许多的细节并没有照顾到。而且这个算法的基础必须要牢固，不然很难理解上面的代码。 SVM进阶相关到核函数，硬间隔最大化，软间隔最大化等知识，其中的核函数，软间隔最大化针对于非线性数据(即线性不可分)，硬间隔最大化针对于线性可分数据类型，这需要自行去了解、理解。在上面说的书籍中可以找到相关的知识。 以下是关于核函数，软间隔最大化的针对于非线性数据python代码的实现，可以理解为SVM的底层实现的一部分，可以更好的理解内部实现的于原理。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251# Mathieu Blondel, September 2010# License: BSD 3 clause# http://www.mblondel.org/journal/2010/09/19/support-vector-machines-in-python/# visualizing what translating to another dimension does# and bringing back to 2D:# https://www.youtube.com/watch?v=3liCbRZPrZA# Docs: http://cvxopt.org/userguide/coneprog.html#quadratic-programming# Docs qp example: http://cvxopt.org/examples/tutorial/qp.html# Nice tutorial:# https://courses.csail.mit.edu/6.867/wiki/images/a/a7/Qp-cvxopt.pdfimport numpy as npfrom numpy import linalgimport cvxoptimport cvxopt.solvers def linear_kernel(x1, x2): return np.dot(x1, x2)def polynomial_kernel(x, y, p=3): return (1 + np.dot(x, y)) ** pdef gaussian_kernel(x, y, sigma=5.0): return np.exp(-linalg.norm(x-y)**2 / (2 * (sigma ** 2)))class SVM(object): def __init__(self, kernel=linear_kernel, C=None): self.kernel = kernel self.C = C if self.C is not None: self.C = float(self.C) def fit(self, X, y): n_samples, n_features = X.shape # Gram matrix K = np.zeros((n_samples, n_samples)) for i in range(n_samples): for j in range(n_samples): K[i,j] = self.kernel(X[i], X[j]) P = cvxopt.matrix(np.outer(y,y) * K) q = cvxopt.matrix(np.ones(n_samples) * -1) A = cvxopt.matrix(y, (1,n_samples)) b = cvxopt.matrix(0.0) if self.C is None: G = cvxopt.matrix(np.diag(np.ones(n_samples) * -1)) h = cvxopt.matrix(np.zeros(n_samples)) else: tmp1 = np.diag(np.ones(n_samples) * -1) tmp2 = np.identity(n_samples) G = cvxopt.matrix(np.vstack((tmp1, tmp2))) tmp1 = np.zeros(n_samples) tmp2 = np.ones(n_samples) * self.C h = cvxopt.matrix(np.hstack((tmp1, tmp2))) # solve QP problem solution = cvxopt.solvers.qp(P, q, G, h, A, b) # Lagrange multipliers a = np.ravel(solution['x']) # Support vectors have non zero lagrange multipliers sv = a &gt; 1e-5 ind = np.arange(len(a))[sv] self.a = a[sv] self.sv = X[sv] self.sv_y = y[sv] print("%d support vectors out of %d points" % (len(self.a), n_samples)) # Intercept self.b = 0 for n in range(len(self.a)): self.b += self.sv_y[n] self.b -= np.sum(self.a * self.sv_y * K[ind[n],sv]) self.b /= len(self.a) # Weight vector if self.kernel == linear_kernel: self.w = np.zeros(n_features) for n in range(len(self.a)): self.w += self.a[n] * self.sv_y[n] * self.sv[n] else: self.w = None def project(self, X): if self.w is not None: return np.dot(X, self.w) + self.b else: y_predict = np.zeros(len(X)) for i in range(len(X)): s = 0 for a, sv_y, sv in zip(self.a, self.sv_y, self.sv): s += a * sv_y * self.kernel(X[i], sv) y_predict[i] = s return y_predict + self.b def predict(self, X): return np.sign(self.project(X))if __name__ == "__main__": import pylab as pl def gen_lin_separable_data(): # generate training data in the 2-d case mean1 = np.array([0, 2]) mean2 = np.array([2, 0]) cov = np.array([[0.8, 0.6], [0.6, 0.8]]) X1 = np.random.multivariate_normal(mean1, cov, 100) y1 = np.ones(len(X1)) X2 = np.random.multivariate_normal(mean2, cov, 100) y2 = np.ones(len(X2)) * -1 return X1, y1, X2, y2 def gen_non_lin_separable_data(): mean1 = [-1, 2] mean2 = [1, -1] mean3 = [4, -4] mean4 = [-4, 4] cov = [[1.0,0.8], [0.8, 1.0]] X1 = np.random.multivariate_normal(mean1, cov, 50) X1 = np.vstack((X1, np.random.multivariate_normal(mean3, cov, 50))) y1 = np.ones(len(X1)) X2 = np.random.multivariate_normal(mean2, cov, 50) X2 = np.vstack((X2, np.random.multivariate_normal(mean4, cov, 50))) y2 = np.ones(len(X2)) * -1 return X1, y1, X2, y2 def gen_lin_separable_overlap_data(): # generate training data in the 2-d case mean1 = np.array([0, 2]) mean2 = np.array([2, 0]) cov = np.array([[1.5, 1.0], [1.0, 1.5]]) X1 = np.random.multivariate_normal(mean1, cov, 100) y1 = np.ones(len(X1)) X2 = np.random.multivariate_normal(mean2, cov, 100) y2 = np.ones(len(X2)) * -1 return X1, y1, X2, y2 def split_train(X1, y1, X2, y2): X1_train = X1[:90] y1_train = y1[:90] X2_train = X2[:90] y2_train = y2[:90] X_train = np.vstack((X1_train, X2_train)) y_train = np.hstack((y1_train, y2_train)) return X_train, y_train def split_test(X1, y1, X2, y2): X1_test = X1[90:] y1_test = y1[90:] X2_test = X2[90:] y2_test = y2[90:] X_test = np.vstack((X1_test, X2_test)) y_test = np.hstack((y1_test, y2_test)) return X_test, y_test def plot_margin(X1_train, X2_train, clf): def f(x, w, b, c=0): # given x, return y such that [x,y] in on the line # w.x + b = c return (-w[0] * x - b + c) / w[1] pl.plot(X1_train[:,0], X1_train[:,1], "ro") pl.plot(X2_train[:,0], X2_train[:,1], "bo") pl.scatter(clf.sv[:,0], clf.sv[:,1], s=100, c="g") # w.x + b = 0 a0 = -4; a1 = f(a0, clf.w, clf.b) b0 = 4; b1 = f(b0, clf.w, clf.b) pl.plot([a0,b0], [a1,b1], "k") # w.x + b = 1 a0 = -4; a1 = f(a0, clf.w, clf.b, 1) b0 = 4; b1 = f(b0, clf.w, clf.b, 1) pl.plot([a0,b0], [a1,b1], "k--") # w.x + b = -1 a0 = -4; a1 = f(a0, clf.w, clf.b, -1) b0 = 4; b1 = f(b0, clf.w, clf.b, -1) pl.plot([a0,b0], [a1,b1], "k--") pl.axis("tight") pl.show() def plot_contour(X1_train, X2_train, clf): pl.plot(X1_train[:,0], X1_train[:,1], "ro") pl.plot(X2_train[:,0], X2_train[:,1], "bo") pl.scatter(clf.sv[:,0], clf.sv[:,1], s=100, c="g") X1, X2 = np.meshgrid(np.linspace(-6,6,50), np.linspace(-6,6,50)) X = np.array([[x1, x2] for x1, x2 in zip(np.ravel(X1), np.ravel(X2))]) Z = clf.project(X).reshape(X1.shape) pl.contour(X1, X2, Z, [0.0], colors='k', linewidths=1, origin='lower') pl.contour(X1, X2, Z + 1, [0.0], colors='grey', linewidths=1, origin='lower') pl.contour(X1, X2, Z - 1, [0.0], colors='grey', linewidths=1, origin='lower') pl.axis("tight") pl.show() def test_linear(): X1, y1, X2, y2 = gen_lin_separable_data() X_train, y_train = split_train(X1, y1, X2, y2) X_test, y_test = split_test(X1, y1, X2, y2) clf = SVM() clf.fit(X_train, y_train) y_predict = clf.predict(X_test) correct = np.sum(y_predict == y_test) print("%d out of %d predictions correct" % (correct, len(y_predict))) plot_margin(X_train[y_train==1], X_train[y_train==-1], clf) def test_non_linear(): X1, y1, X2, y2 = gen_non_lin_separable_data() X_train, y_train = split_train(X1, y1, X2, y2) X_test, y_test = split_test(X1, y1, X2, y2) clf = SVM(polynomial_kernel) clf.fit(X_train, y_train) y_predict = clf.predict(X_test) correct = np.sum(y_predict == y_test) print("%d out of %d predictions correct" % (correct, len(y_predict))) plot_contour(X_train[y_train==1], X_train[y_train==-1], clf) def test_soft(): X1, y1, X2, y2 = gen_lin_separable_overlap_data() X_train, y_train = split_train(X1, y1, X2, y2) X_test, y_test = split_test(X1, y1, X2, y2) clf = SVM(C=1000.1) clf.fit(X_train, y_train) y_predict = clf.predict(X_test) correct = np.sum(y_predict == y_test) print("%d out of %d predictions correct" % (correct, len(y_predict))) plot_contour(X_train[y_train==1], X_train[y_train==-1], clf) #test_linear() #test_non_linear() test_soft() 具体相关说明可见对应的课程地址。 更多的铺助链接： pythonC最优化模块库：VXOPT二次编程文档 CVXOPT进行二次编程的更深入的示例 用于支持向量机优化的库 SVM的应用还是利用了在上个文章python机器学习系列：K近邻算法(KNN)的实现及应用的实现及应用/)的实际数据集。只是将sklearn模块中的现成的拿来用了。 代码如下： 1234567891011121314151617181920212223242526272829303132import numpy as npfrom sklearn import preprocessing, neighbors, svmfrom sklearn.model_selection import train_test_splitimport pandas as pddf = pd.read_csv('breast-cancer-wisconsin.data')df.replace('?',-99999,inplace=True) #替换异常值为-99999，inplace=True表示文件中也将进行同步更改#去除不相关的特征列df.drop(['Id'], 1, inplace=True)X = np.array(df.drop(['Class'], 1)) #去除标签列，自制数据集y = np.array(df['Class'])X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)clf = svm.SVC() #分类SVMclf.fit(X_train, y_train)accuracy = clf.score(X_test, y_test) #得出准确值print(accuracy)#创建数据集来进行简单的预测example_maasurse = np.array([[4,2,1,1,2,1,2,1,2],[4,2,1,1,2,2,2,2,1]])example_maasurse = example_maasurse.reshape(len(example_maasurse),-1) #重朔,其中的-1可理解为，只想输出2行的情况下，后面的列我写上-1由numpy自行得出对应相符的数组，有点抽象...其实也就那么回事prediction = clf.predict(example_maasurse)print(prediction) 结果跟上篇介绍的用KNN的结果几乎一样，就不展示了。 关于现成算法的参数的使用可移步： sklearn中文主页 这样这篇文章基本上就这样了，需要更新的话再来补充。]]></content>
      <categories>
        <category>机器学习</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决eclipse中运行Django时出现错误Django not found]]></title>
    <url>%2F2018%2F10%2F21%2F%E8%A7%A3%E5%86%B3eclipse%E4%B8%AD%E8%BF%90%E8%A1%8CDjango%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AFDjango-not-found%2F</url>
    <content type="text"><![CDATA[打算在eclipse中运行Django项目，结果发现出现了错误Django not found，如下图(网上找的一张，忘记截图了..)： 图片来源：https://blog.csdn.net/wlsyn/article/details/49784263?utm_source=blogxgwz2 试了一些网上所谓的重新嵌入解释器目录的方法，还有重装Django的方法，都没有什么用。 但是我真的不想放弃啊，eclipse那么好用，而且在其中运行Django是那么的方便… 解决方案git下载GitHub上的Django使用命令行： 1git clone https://github.com/django/django.git 参考：https://www.djangoproject.com/download/ 移动安装包之后将下载好的移动到要用到的python版本中的site-packages中，如我的目录/anaconda3/lib/python3.6/site-packages/。 eclipse配置之后打开eclipse配置界面，看图吧，一图胜千言。 之后应用、关闭。 然后再建立Django项目时就不会再出现错误Django not found了。 测试和建立项目过程不妨可以参考以下链接： http://www.cnblogs.com/lanxuezaipiao/p/3283932.html 我就不重复制造轮子了。 测试成功之后： Yes,it`s successful!]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Eclipse</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
        <tag>问题记录笔记</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python机器学习系列：K近邻算法(KNN)的实现及应用]]></title>
    <url>%2F2018%2F10%2F21%2Fpython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9AK%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95(KNN)%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[还是老样子，这篇文章不适合纯粹的小白，仅仅注重实践，基础知识说的比较浅，基本上一笔带过。 我在作者的原代码和数据上进行了一点修改以符合当今的实际情况。 此篇文章将实现K近邻算法的基本原理，以及实现K邻近算法并且应用到实际数据集之中，之后会有一个实战项目。 算法实现欧几里得原理以及代码实现欧几里得公式： 实际上很简单，想想求解两点值之间的距离的问题吧… 代码实现： 12345678from math import sqrt#数据自制feature_1 = [1,3]feature_2 = [2,6]euclidean_distance = sqrt((variable_2[0]-variable_1[0])**2 + (variable_2[1]-variable_1[1])**2)print(euclidean_distance) 这里是中文相关一节的地址：https://www.yxgapp.com/video/c8426884-2b56-494f-a274-0aa3105503f1.html 实现KNNKNN的工作机制(来自志华哥的《机器学习》)： 给定测试样本，基于某种距离度量找出训练集中与其最近的k个训练样本，然后基于这k个“邻居”的信息来进行预测，通常，在分类任务中可使用“投票法”(在本文当中明显就是分类问题)，即选择这k个样本中出现最多的类别标记作为预测结果；在回归任务中可使用“平均法”，即将这k个样本的实值输出标记的平均值作为预测结果；还可基于距离远近进行加权平均或加权投票，距离越近的样本权重越大。 这样就能好理解之后写的算法了，这毕竟不是给纯粹的小白写的。 简单说说下面写的代码的原理：通过原有的数值与新的数值代入欧几里得原理得出各点与新数值的距离，然后对这些数值进行从小到大排序并且选取前面K个数值(即所谓的K近邻)作为选择值，之后选择第一个最近的(距离最小的)作为新数据的标签。 12345678910111213141516171819202122232425262728293031323334import numpy as npimport matplotlib.pyplot as pltimport warningsfrom collections import Counter#自制数据集dataset = &#123;'k':[[1,2],[2,3],[3,1]], 'r':[[6,5],[7,7],[8,6]]&#125; #这个字典的key值为何这样命名看到下面就知道了，作为color参数的输入new_features = [5,7]def k_nearest_neighbors(data, predict_feature, k=3): #特别说明：k值在sklearn中的模型默认为5 if len(data) &gt;= k: warnings.warn('你这样就没有意义了...笨猪！') distances = [] for group in data: for features in data[group]: #这两段代码与for group, features in dateset.items():意义一致 euclidean_distance = np.linalg.norm(np.array(features)-np.array(predict_feature)) #使用numpy的相关的模块会显得更加的快速以及更加的高级 distances.append([euclidean_distance, group]) votes = [i[1] for i in sorted(distances)[:k]] #从小到大的排序，选择出现在前面的K个样本作为投票得出的结果 vote_result = Counter(votes).most_common(1)[0][0] return vote_resultresult = k_nearest_neighbors(dataset, new_features, k=3)print(result)plt.style.use('ggplot')#可通过图表展示出结果信息[[plt.scatter(ii[0],ii[1], s=20, color=i) for ii in dateset[i]] for i in dateset] #color输出为'r'，可见上面作者命名的含义result = k_nearest_neighbors(dataset, new_features)plt.scatter(new_features[0], new_features[1], s=20, color = result) #color输出为'r'，可见上面作者命名的含义plt.show() 可帮助理解的链接： Python标准库——collections模块的Counter类 np.linalg.norm(求范数) 看完并且理解了上面的代码之后，你就会发现KNN算法为何对于异常值不敏感了吧，因为异常值太大，得出的距离也很大，所以一般在投票选择排序时就被out了。 展示图表以及运行结果如图： 这样就一目了然了。 项目实践 数据来源：https://archive.ics.uci.edu/ml/datasets.html 这是加州大学的一个用于机器学习数据的仓库，基本上是开放数据给我们使用的。 项目使用的数据下载页面：https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic) 项目使用的数据下载链接：https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/ 下载其中的breast-cancer-wisconsin.data，查看特征系数情况查看breast-cancer-wisconsin.names。 因为需要对数据进行一些特征增加的修改，所以我贴上修改后的数据在下，也可查看上面的作者的YouTube教程来进行修改。 修改后的数据集：https://pan.baidu.com/s/1J-G6ESB-JXFfBk8yTl8lmw 也就是添加了特征名而已。 这是一个关于乳腺癌判断的数据集。从breast-cancer-wisconsin.names中可得知缺失的数据由&#39;?&#39;来表示。 Missing attribute values: 16 There are 16 instances in Groups 1 to 6 that contain a single missing (i.e., unavailable) attribute value, now denoted by “?”. 这样一来就能开始整个项目了。 数据预处理数据集中的特征意喻： 123456789101112131415Attribute Information: (class attribute has been moved to last column) # Attribute Domain -- ----------------------------------------- 1. Sample code number id number 2. Clump Thickness 1 - 10 3. Uniformity of Cell Size 1 - 10 4. Uniformity of Cell Shape 1 - 10 5. Marginal Adhesion 1 - 10 6. Single Epithelial Cell Size 1 - 10 7. Bare Nuclei 1 - 10 8. Bland Chromatin 1 - 10 9. Normal Nucleoli 1 - 10 10. Mitoses 1 - 10 11. Class: (2 for benign(良性), 4 for malignant(恶性)) 因为缺失的数据并不多，并且在我修改了那几个缺失值测试了好几次用于训练之后发现差距基本上可以忽略，所以这里的关于缺失值改为异常值来处理，因为基本上对于模型训练基本上没有什么影响。 12345678import numpy as npimport pandas as pddf = pd.read_csv('breast-cancer-wisconsin.data')df.replace('?',-99999,inplace=True) #替换异常值为-99999，inplace=True表示文件中也将进行同步更改#去除不相关的特征列df.drop(['Id'], 1, inplace=True) 数据量本身也就是那么点…所以数据预处理也就这样了…KNN算法对于异常值不敏感。 模型训练及预测分割数据集，进行训练，并且制作简易数据集来进行预测。 123456789101112131415161718192021from sklearn import preprocessing,neighborsfrom sklearn.model_selection import train_test_splitX = np.array(df.drop(['Class'], 1)) #去除标签列，自制数据集y = np.array(df['Class'])X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)clf = neighbors.KNeighborsClassifier()clf.fit(X_train, y_train)accuracy = clf.score(X_test, y_test) #得出准确值print(accuracy)#创建数据集来进行简单的预测example_maasurse = np.array([[4,2,1,1,2,1,2,1,2],[4,2,1,1,2,2,2,2,1]])example_maasurse = example_maasurse.reshape(len(example_maasurse),-1) #重朔,其中的-1可理解为，只想输出2行的情况下，后面的列我写上-1由numpy自行得出对应相符的数组，有点抽象...其实也就那么回事prediction = clf.predict(example_maasurse)print(prediction) 输出如下： 如果还是对于这条代码example_maasurse.reshape(len(example_maasurse),-1)中的-1还是不理解，可参考如下链接或者是官网： Python中reshape函数参数-1的意思？ numpy.reshape Python Numpy中reshape函数参数-1的含义 其实也就那么回事… 完整代码1234567891011121314151617181920212223242526import numpy as npfrom sklearn import preprocessing,neighborsfrom sklearn.model_selection import train_test_splitimport pandas as pddf = pd.read_csv('breast-cancer-wisconsin.data')df.replace('?',-99999,inplace=True) df.drop(['Id'], 1, inplace=True)X = np.array(df.drop(['Class'], 1)) y = np.array(df['Class'])X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)clf = neighbors.KNeighborsClassifier()clf.fit(X_train, y_train)accuracy = clf.score(X_test, y_test) print(accuracy)example_maasurse = np.array([[4,2,1,1,2,1,2,1,2],[4,2,1,1,2,2,2,2,1]])example_maasurse = example_maasurse.reshape(len(example_maasurse),-1)prediction = clf.predict(example_maasurse)print(prediction) 用手动实现的KNN训练此数据集代入以上的实际数据，转换数据类型打乱整体(俗称“洗牌”)的数据集并且分割对应标签制作成可代入上面写的算法中的数据集形式，然后根据计算出的距离结合K的取值得出最终的测试数据集的整体预测标签(计算在训练数据集与测试数据集之间进行)，然后将预测得出的标签与实际的结果进行比较，最终即可得出整体的算法准确性(Accuracy)。 下面是实现的整体代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import numpy as npimport matplotlib.pyplot as pltimport warningsfrom collections import Counterdef k_nearest_neighbors(data, predict_feature, k=3): #特别说明：k值在sklearn中的模型默认为5 if len(data) &gt;= k: warnings.warn('你这样就没有意义了...笨猪！') distances = [] for group in data: for features in data[group]: #这两段代码与for group, features in dateset.items():意义一致 euclidean_distance = np.linalg.norm(np.array(features)-np.array(predict_feature)) #使用numpy的相关的模块会显得更加的快速以及更加的高级 distances.append([euclidean_distance, group]) votes = [i[1] for i in sorted(distances)[:k]] #从小到大的排序，选择出现在前面的K个样本作为投票得出的结果 vote_result = Counter(votes).most_common(1)[0][0] confidence = Counter(votes).most_common(1)[0][1] / k #在预测的样本中正确预测的比例，但是数据量小，一般不靠谱，所以不采用，当然可写入代码中以便学习 return vote_result, confidencedf = pd.read_csv('breast-cancer-wisconsin.data')df.replace('?', -99999, inplace=True)df.drop(['Id'], 1, inplace=True)full_data = df.astype(float).values.tolist() #转化为float、列表类型以便下面的随机打乱random.shuffle(full_data) #随机打乱所有数据,洗牌函数test_size = 0.2train_set = &#123;2:[], 4:[]&#125;test_set = &#123;2:[], 4:[]&#125;#取训练数据集比例0.8:0.2train_data = full_data[:-int(test_size*len(full_data))]test_data = full_data[-int(test_size*len(full_data)):]#数据分割对应for i in train_data: train_set[i[-1]].append(i[:-1]) #模版套入对应数据即可for i in test_data: test_set[i[-1]].append(i[:-1]) correct = 0total = 0for group in test_set: for data in test_set[group]: #亦可理解为for group, data in test_set.items(): vote, confidence = k_nearest_neighbors(train_set, data, k=5) if group == vote: correct += 1 #若是准确预测了则加1 total += 1print('Accuracy:', correct/total) 铺助理解：Python3 shuffle() 函数 运行可得预测准确性： 其中有必要说明一下：Accuracy与confidence的关系，就相当于查准率(Precision)(预测正确的样本数与总体使用样本数的比例)和查全率(Recall)(预测正确样本数与全部使用数据数量的比例)的关系。另外补充一点关于平常常用的score参数的计算公式： 这些知识都是基础知识，可在网友整理的吴恩达老师的机器学习笔记中找到，也可完整的学习相关的知识，吴恩达老师的必看啊。 最后以上的算法没有完全的实现，仅仅是实现基础的构想，还需要改进的地方有很多，比如数据量大了一点之后，需要用到的多线程等。 另外，KNN算法的优缺点值得去了解，上面我也说过一点，比如数据量大了之后它的效率会受到影响，但是它对于异常值处理的都很好，基本上不受异常值之类的影响等，自行翻书了解去吧。]]></content>
      <categories>
        <category>机器学习</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python机器学习系列：线性回归算法的实现]]></title>
    <url>%2F2018%2F10%2F19%2Fpython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9A%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[本来不想写太多关于这方面的基础知识的，但是为了加强理解，我想不妨直接写博文记录也是一个好的选择，也可以顺便帮助需要的人，何乐而不为呢？ 那么开始吧。我在原课程的基础上进行那么一点点修改。 这是我学习的相应的课程地址：https://pythonprogramming.net/how-to-program-best-fit-line-machine-learning-tutorial/?completed=/how-to-program-best-fit-line-slope-machine-learning-tutorial/ 这不是一个小白教程，需要自行取了解一些基础知识，基础知识我仅仅是一笔带过。 算法原理众所周知，线性回归算法是以一条直线来将一些散点进行分类的算法，而这条直线通常可理解为y(x)=mx+b/y=mx+b这样的函数(这是最简单的线性回归算法实例)，其中m为直线的斜率，而y为直线的截距，而x为直线的自变量。 如下图，我们要将图1的散点，通过图2一条直线进行适当良好的分类开来： 图1 图2 求解m:如图： 求解b:如图： 实际上这与所谓的感知机是一样的原理(相关的知识可见李航老师的书籍《统计需诶下方法》)。再者，经过python实现编写对应的公式再进行可视化验证即可完成任务了。 算法实现因为仅仅是为了说明算法的实现，所以数值就随便取的来用了。 数值取值：1234import numpy as np xs = np.array([1,2,3,4,5,6],dtype=np.float64)ys = np.array([5,4,6,5,6,7],dtype=np.float64) 代码实现公式原理1234567891011from statistics import mean def best_fit_slope_and_intercept(xs,ys): #实现m参数，两种实现方法 #m = (mean(xs)*mean(ys) - mean(xs*ys)) / (mean(xs)*mean(xs) - mean(xs*xs)) m = (mean(xs)*mean(ys) - mean(xs*ys)) / (mean(xs)**2 - mean(xs**2)) #实现b参数 b = mean(ys)-m*mean(xs) return m,b 画图预测展示123456789101112131415161718import matplotlib.pyplot as pltplt.style.use('ggplot') m,b = best_fit_slope_and_intercept(xs,ys)regression_line = [(m*x)+b for x in xs] #y(x)的实现 #趋势直线点向predict_x = 9predict_y = (m*predict_x)+b #散点图plt.scatter(xs,ys)plt.scatter(predict_x,predict_y)plt.plot(xs,regression_line) #直线描绘plt.show() 如图： 这样就完成任务了。 完整代码12345678910111213141516171819202122232425262728293031from statistics import meanimport numpy as npimport matplotlib.pyplot as pltplt.style.use('ggplot')xs = np.array([1,2,3,4,5,6],dtype=np.float64)ys = np.array([5,4,6,5,6,7],dtype=np.float64)# print(xs,ys)def best_fit_slope_and_intercept(xs,ys): #m = (mean(xs)*mean(ys) - mean(xs*ys)) / (mean(xs)*mean(xs) - mean(xs*xs)) m = (mean(xs)*mean(ys) - mean(xs*ys)) / (mean(xs)**2 - mean(xs**2)) b = mean(ys)-m*mean(xs) return m,bm,b = best_fit_slope_and_intercept(xs,ys)regression_line = [(m*x)+b for x in xs] #y(x)的实现predict_x = 9predict_y = (m*predict_x)+bplt.scatter(xs,ys)plt.scatter(predict_x,predict_y)plt.plot(xs,regression_line) #直线描绘plt.show() 铺助理解链接 Python 运算符 statistics — 统计学计算 补充R平方理论以及检验假设强烈建议查看书籍学习了解相关的统计知识： 商务与经济统计：https://pan.baidu.com/s/1O9G7l4QbeqOPsPs_90lFGA 这是一本好书。 关于R平方理论又称决定系数/判定系数。这是检验一个线性回归中y变量的变差与x变量的变差比例的系数，比例越大说明这个线性方程的拟合效果越好(可简单的理解为，它就是衡量一个线性回归算法的拟合精确度的)。它与相关系数也是有关系的。 可查看百度文库的解释 就不再多说了，这篇文章不是给小白看的教程，只注重实践部分。 公式图一： 这个公式还可变换为： 其中r^2 = SSR/SST = 1 - SSE/SST亦成立，所以这里的r^2 = SSR/SST = 1 - SSE/SST公式即对应着图一的公式，这样就好理解下面写的代码了。 目的是检验上方的ys取值(即测试数据点的坐标y轴线的取值点)与训练得出的y(x)(即上方程序中的regression_line)的拟合效果如何(会有一个量化值出现)。 可参考： 线性回归中的相关度和决定系数 Coefficient of Determination (R-Squared) 代码实现演示12345678910111213#平方误差函数def squared_error(ys_orig, ys_line): return sum((ys_line-ys_orig)**2)def coefficient_of_determination(ys_orig, ys_line): y_mean_line = [mean(ys_orig) for y in ys_orig] squared_error_regr = squared_error(ys_orig, ys_line) #SSE squared_error_y_mean = squared_error(y_mean_line, ys_orig) #SST return 1 - (squared_error_regr / squared_error_y_mean) print(y_mean_line)r_squared = coefficient_of_determination(ys, regression_line)print(r_squared) 代入以上完整代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344from statistics import meanimport numpy as npimport matplotlib.pyplot as plt plt.style.use('ggplot')xs = np.array([1,2,3,4,5,6],dtype=np.float64)ys = np.array([5,4,6,5,6,7],dtype=np.float64)# print(xs,ys)def best_fit_slope_and_intercept(xs,ys): #m = (mean(xs)*mean(ys) - mean(xs*ys)) / (mean(xs)*mean(xs) - mean(xs*xs)) m = (mean(xs)*mean(ys) - mean(xs*ys)) / (mean(xs)**2 - mean(xs**2)) b = mean(ys)-m*mean(xs) return m,bdef squared_error(ys_orig, ys_line): return sum((ys_line-ys_orig)**2)def coefficient_of_determination(ys_orig, ys_line): y_mean_line = [mean(ys_orig) for y in ys_orig] squared_error_regr = squared_error(ys_orig, ys_line) #SSE squared_error_y_mean = squared_error(y_mean_line, ys_orig) #SST return 1 - (squared_error_regr / squared_error_y_mean) print(y_mean_line)m,b = best_fit_slope_and_intercept(xs,ys)regression_line = [(m*x)+b for x in xs] #y(x)的实现r_squared = coefficient_of_determination(ys, regression_line)print(r_squared)#predict_x = 9#predict_y = (m*predict_x)+b#plt.scatter(xs,ys)#plt.scatter(predict_x,predict_y)#plt.plot(xs,regression_line) #直线描绘#plt.show() 将会输出一个R的平方值，用以衡量拟合效果如何。 关于检验假设关于检验假设，这是一个可检验数据是否符合相关算法的一个验证，也可理解为先假设，然后去验证对不对(验证假设对不对)。这可与关于R平方理论(输出效果量化值)结合，从而可得出算法对于多类不同数据的拟合效果如何。 在此之后将通过伪随机生成器(可理解只要是计算机生成的随机数都是伪随机数)来进行一段实例演示。 随机数：真随机数和伪随机数 代码实现演示这里既是一个简单的随机数据生成器，与相关性、方差有关，为其中的参数选择。 1234567891011121314151617181920import random#数据量的多少，方差，平均每个点步骤(与相关性的取值有关)，相关性设定,默认无相关性def create_dataset(hm, variance, step=2, correlation=False): val = 1 #初始值 ys = [] for i in range(hm): y = val + random.randrange(-variance,variance) ys.append(y) #若为正相关 if correlation and correlation == 'pos': val += step elif correlation and correlation =='neg': val -= step xs = [i for i in range(len(ys))] #xs为平常的顺序取值数 return np.array(xs, dtype=np.float64), np.array(ys, dtype=np.float64)xs, ys = create_dataset(40, 40, 2, correlation='pos') 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566from statistics import meanimport numpy as npimport matplotlib.pyplot as pltimport randomplt.style.use('ggplot')# xs = np.array([1,2,3,4,5,6],dtype=np.float64)# ys = np.array([5,4,6,5,6,7],dtype=np.float64)#数据量的多少，方差，平均每个点步骤(与相关性的取值有关)，相关性设定,默认无相关性def create_dataset(hm, variance, step=2, correlation=False): val = 1 #初始值 ys = [] for i in range(hm): y = val + random.randrange(-variance,variance) ys.append(y) #若为正相关 if correlation and correlation == 'pos': val += step elif correlation and correlation =='neg': val -= step xs = [i for i in range(len(ys))] #xs为平常的顺序取值数 return np.array(xs, dtype=np.float64), np.array(ys, dtype=np.float64) def best_fit_slope_and_intercept(xs,ys): #实现m参数 #m = (mean(xs)*mean(ys) - mean(xs*ys)) / (mean(xs)*mean(xs) - mean(xs*xs)) m = (mean(xs)*mean(ys) - mean(xs*ys)) / (mean(xs)**2 - mean(xs**2)) #实现b参数 b = mean(ys)-m*mean(xs) return m,b#平方误差函数def squared_error(ys_orig, ys_line): return sum((ys_line-ys_orig)**2)def coefficient_of_determination(ys_orig, ys_line): y_mean_line = [mean(ys_orig) for y in ys_orig] squared_error_regr = squared_error(ys_orig, ys_line) #SSE squared_error_y_mean = squared_error(y_mean_line, ys_orig) #SST return 1 - (squared_error_regr / squared_error_y_mean) print(y_mean_line)xs, ys = create_dataset(40, 40, 2, correlation='pos') m,b = best_fit_slope_and_intercept(xs,ys)regression_line = [(m*x)+b for x in xs] #y(x)的实现r_squared = coefficient_of_determination(ys, regression_line)print(r_squared)#趋势点向predict_x = 9predict_y = (m*predict_x)+b#散点图plt.scatter(xs,ys)plt.scatter(predict_x,predict_y)plt.plot(xs,regression_line) #直线描绘plt.show() Python randrange() 函数 结果展示会输出一个R平方值和一张由于随机数据为基础的训练图表。]]></content>
      <categories>
        <category>机器学习</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python机器学习系列：预测房价并且可视化]]></title>
    <url>%2F2018%2F10%2F18%2Fpython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9A%E9%A2%84%E6%B5%8B%E6%88%BF%E4%BB%B7%E5%B9%B6%E4%B8%94%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[这篇文章不是给纯粹的小白看的，需要一定的基础，需要小白补充一定的基础知识，在我的博客有相关的资源介绍。 在这里记录下这篇文章时因为很实用，并且也希望以此帮助需要的人。 这是我在YouTube上学习到的。 中文地址(不全)：https://www.yxgapp.com/channel/349.html 对应的网页课程地址在此：https://pythonprogramming.net/forecasting-predicting-machine-learning-tutorial/ 在作者的基础上进行了一点点的改动。说明一下：相关的库自行安装，就不一一废话了。 项目开始项目过程：从开放的数据接口拿到数据，并且做简单的数据处理，自行做好数据标签用于算法训练，之后在利用相关的模块做好预测得到的数值与相应的时间值的对接，得出数据的图表(包括预测部分)，项目完成。 获取数据以及简单数据处理代码： 123456789101112131415161718192021import quandl,mathimport numpy as npfrom sklearn import preprocessingfrom sklearn.model_selection import train_test_splitfrom sklearn.linear_model import LinearRegression#获取公共数据接口df = quandl.get("WIKI/GOOGL")#简单的数据特征处理、整理，目的是得出“标签”特征列（因为仅仅是做到实践的效果，所以就不多说了，看代码便知）。df = df[['Adj. Open', 'Adj. High', 'Adj. Low', 'Adj. Close', 'Adj. Volume']] #取用时需要用大括号df['HL_PCT'] = (df['Adj. High'] - df['Adj. Close']) / df['Adj. Close'] * 100.0df['PCT_change'] = (df['Adj. Close'] - df['Adj. Open']) /df['Adj. Open'] * 100.0df = df[['Adj. Close', 'Adj. Volume','HL_PCT','PCT_change']]forecast_col = 'Adj. Close'df.fillna(value=-99999, inplace=True)forecast_out = int(math.ceil(0.01 * len(df)))#得出标签特征列，以便直接用于训练df['label'] = df[forecast_col].shift(-forecast_out) 关于quandl,是个公开的数据网站，有免费的，也有收费的，它有很好的支持python的数据接口。可用pip install quandl下载相关的支持模块。如果有时获取数据出错了，重新运行直到没错误出现为止。 算法预测代码： 1234567891011121314151617181920X = np.array(df.drop(['label'], 1))X = preprocessing.scale(X)#这里是取数据的后面一小部分用于预测得出的数值使用X_lately = X[-forecast_out:]X = X[:-forecast_out]df.dropna(inplace=True)y = np.array(df['label'])#数据分割X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)clf = LinearRegression(n_jobs=-1)clf.fit(X_train, y_train)#预测准确性confidence = clf.score(X_test, y_test)#最后预测的数值部分forecast_set = clf.predict(X_lately) 这里是简单的预测部分了，其中有一些简单的数据处理部分。 时间与预测值的对应以及图表的描绘代码： 12345678910111213141516171819202122232425262728import datetimeimport matplotlib.pyplot as plt#matplotlib的美化图表风格plt.style.use('ggplot')#预测标签df['Forecast'] = np.nan#获取源数据最后一天日期last_date = df.iloc[-1].namelast_unix = last_date.timestamp()one_day = 86400 #一天的时间戳next_unix = last_unix + one_dayfor i in forecast_set: next_date = datetime.datetime.fromtimestamp(next_unix) next_unix += 86400 #将此日期对应的前面五列不相干的均设为nan，而仅仅加上预测的数值，即仅仅有相应的时间对应相应的预测数值 df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i] #如果这里不理解的话，可以查看df的head和tail部分试试，就能一目了然了#图表描绘df['Adj. Close'].plot()df['Forecast'].plot()plt.legend(loc=4)plt.xlabel('Date')plt.ylabel('Price')plt.show() 这里有些难理解，但是其实很好理解，只是一些代码根本没见到过，所以导致阅读障碍。 估计有人不理解这段df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]代码，我来简单说明一下。 12345678910111213141516171819202122232425262728293031323334353637for i in forecast_set: next_date = datetime.datetime.fromtimestamp(next_unix) next_unix += 86400 df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]print(df.head()) 输出： Adj. Close Adj. Volume HL_PCT PCT_change label ForecastDate 2004-08-19 50.322842 44659000.0 3.712563 0.324968 69.078238 NaN2004-08-20 54.322689 22834300.0 0.710922 7.227007 67.839414 NaN2004-08-23 54.869377 18256100.0 3.729433 -1.227880 68.912727 NaN2004-08-24 52.597363 15247300.0 6.417469 -5.726357 70.668146 NaN2004-08-25 53.164113 9188600.0 1.886792 1.183658 71.219849 NaN print(df.tail())输出： Adj. Close Adj. Volume HL_PCT PCT_change label \Date 2018-03-08 08:00:00 NaN NaN NaN NaN NaN 2018-03-09 08:00:00 NaN NaN NaN NaN NaN 2018-03-10 08:00:00 NaN NaN NaN NaN NaN 2018-03-11 08:00:00 NaN NaN NaN NaN NaN 2018-03-12 08:00:00 NaN NaN NaN NaN NaN Forecast Date 2018-03-08 08:00:00 1113.922012 2018-03-09 08:00:00 1071.104993 2018-03-10 08:00:00 1043.810593 2018-03-11 08:00:00 1073.778780 2018-03-12 08:00:00 1022.639186 就是这样，已经很明了了，就是仅仅为了让预测的时间对应预测的房价数值而已。 什么是时间戳?简单说说：时间戳是自1970年1月1日（00:00:00 UTC/GMT）以来的秒数。它也被称为Unix时间戳（Unix Timestam、Unix epoch、POSIX time、Unix timestamp）是从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数，不考虑闰秒。 UNIX时间戳的0按照ISO 8601规范为：1970-01-01T00:00:00Z 一个小时表示为UNIX时间戳格式为：3600秒；一天表示为UNIX时间戳为86400秒，闰秒不计算。 来自：http://www.htmer.com/article/420.htm 完整代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import quandl,math,datetimeimport numpy as npfrom sklearn import preprocessing,svmfrom sklearn.model_selection import train_test_splitfrom sklearn.linear_model import LinearRegressionimport matplotlib.pyplot as pltplt.style.use('ggplot')df = quandl.get("WIKI/GOOGL")df = df[['Adj. Open', 'Adj. High', 'Adj. Low', 'Adj. Close', 'Adj. Volume']] #取用时需要用大括号df['HL_PCT'] = (df['Adj. High'] - df['Adj. Close']) / df['Adj. Close'] * 100.0df['PCT_change'] = (df['Adj. Close'] - df['Adj. Open']) /df['Adj. Open'] * 100.0df = df[['Adj. Close', 'Adj. Volume','HL_PCT','PCT_change']]forecast_col = 'Adj. Close'df.fillna(value=-99999, inplace=True)forecast_out = int(math.ceil(0.01 * len(df)))df['label'] = df[forecast_col].shift(-forecast_out)X = np.array(df.drop(['label'], 1))X = preprocessing.scale(X)X_lately = X[-forecast_out:]X = X[:-forecast_out]df.dropna(inplace=True)y = np.array(df['label'])X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)clf = LinearRegression(n_jobs=-1)clf.fit(X_train, y_train)confidence = clf.score(X_test, y_test)forecast_set = clf.predict(X_lately)df['Forecast'] = np.nanlast_date = df.iloc[-1].namelast_unix = last_date.timestamp()one_day = 86400next_unix = last_unix + one_dayfor i in forecast_set: next_date = datetime.datetime.fromtimestamp(next_unix) next_unix += 86400 df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]df['Adj. Close'].plot()df['Forecast'].plot()plt.legend(loc=4)plt.xlabel('Date')plt.ylabel('Price')plt.show() 最终效果展示 可以查看到预测的部分展示。 补助链接这里是帮助理解的链接。 python pandas库常用函数之shift详解 样式美化matplotlib.pyplot.style.use定制画布风格 PYTHON-基础-时间日期处理小结 Pandas 选择数据 Legend 图例 值得说明一下Legend 图例的一些知识： 使用plt.legend(loc=n)中n的选择代表什么： 1234567891011'best' : 0, 'upper right' : 1,'upper left' : 2,'lower left' : 3,'lower right' : 4,'right' : 5,'center left' : 6,'center right' : 7,'lower center' : 8,'upper center' : 9,'center' : 10。 补充添加序列化保存预测模型添加了如何将预测代码序列化的过程加相关的代码。 序列化可简单理解为：先保存了这个预测的模型(序列化的过程)，然后我们可以拿出这个模型直接进行以后的预测(反序列化的过程)。 加上代码： 12345678import picklewith open('houseforecastmodel.pickle','wb') as f: #下载模型 pickle.dump(clf,f)pickle_in = open('houseforecastmodel.pickle','rb')clf = pickle.load(pickle_in) #加载模型 完整代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import quandl,math,datetimeimport numpy as npfrom sklearn import preprocessing,svmfrom sklearn.model_selection import train_test_splitfrom sklearn.linear_model import LinearRegressionimport matplotlib.pyplot as pltimport pickleplt.style.use('ggplot')df = quandl.get("WIKI/GOOGL")df = df[['Adj. Open', 'Adj. High', 'Adj. Low', 'Adj. Close', 'Adj. Volume']] #取用时需要用大括号df['HL_PCT'] = (df['Adj. High'] - df['Adj. Close']) / df['Adj. Close'] * 100.0df['PCT_change'] = (df['Adj. Close'] - df['Adj. Open']) /df['Adj. Open'] * 100.0df = df[['Adj. Close', 'Adj. Volume','HL_PCT','PCT_change']]forecast_col = 'Adj. Close'df.fillna(value=-99999, inplace=True)forecast_out = int(math.ceil(0.01 * len(df)))df['label'] = df[forecast_col].shift(-forecast_out)X = np.array(df.drop(['label'], 1))X = preprocessing.scale(X)X_lately = X[-forecast_out:]X = X[:-forecast_out]df.dropna(inplace=True)y = np.array(df['label'])X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)clf = LinearRegression(n_jobs=-1)clf.fit(X_train, y_train)with open('houseforecastmodel.pickle','wb') as f: #下载模型 pickle.dump(clf,f)pickle_in = open('houseforecastmodel.pickle','rb')clf = pickle.load(pickle_in) #加载模型confidence = clf.score(X_test, y_test)forecast_set = clf.predict(X_lately)df['Forecast'] = np.nanlast_date = df.iloc[-1].namelast_unix = last_date.timestamp()one_day = 86400next_unix = last_unix + one_dayfor i in forecast_set: next_date = datetime.datetime.fromtimestamp(next_unix) next_unix += 86400 df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]df['Adj. Close'].plot()df['Forecast'].plot()plt.legend(loc=4)plt.xlabel('Date')plt.ylabel('Price')plt.show() 在运行一遍以上的代码之后，就可以直接从保存的文件来加载模型来预测数据啦，如下可测试： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import quandl,math,datetimeimport numpy as npfrom sklearn import preprocessing,svmfrom sklearn.model_selection import train_test_splitfrom sklearn.linear_model import LinearRegressionimport matplotlib.pyplot as pltimport pickleplt.style.use('ggplot')df = quandl.get("WIKI/GOOGL")df = df[['Adj. Open', 'Adj. High', 'Adj. Low', 'Adj. Close', 'Adj. Volume']] #取用时需要用大括号df['HL_PCT'] = (df['Adj. High'] - df['Adj. Close']) / df['Adj. Close'] * 100.0df['PCT_change'] = (df['Adj. Close'] - df['Adj. Open']) /df['Adj. Open'] * 100.0df = df[['Adj. Close', 'Adj. Volume','HL_PCT','PCT_change']]forecast_col = 'Adj. Close'df.fillna(value=-99999, inplace=True)forecast_out = int(math.ceil(0.01 * len(df)))df['label'] = df[forecast_col].shift(-forecast_out)X = np.array(df.drop(['label'], 1))X = preprocessing.scale(X)X_lately = X[-forecast_out:]X = X[:-forecast_out]df.dropna(inplace=True)y = np.array(df['label'])X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)#clf = LinearRegression(n_jobs=-1)#clf.fit(X_train, y_train)#with open('houseforecastmodel.pickle','wb') as f: #下载模型 #pickle.dump(clf,f)pickle_in = open('houseforecastmodel.pickle','rb')clf = pickle.load(pickle_in) #加载模型confidence = clf.score(X_test, y_test)forecast_set = clf.predict(X_lately)df['Forecast'] = np.nanlast_date = df.iloc[-1].namelast_unix = last_date.timestamp()one_day = 86400next_unix = last_unix + one_dayfor i in forecast_set: next_date = datetime.datetime.fromtimestamp(next_unix) next_unix += 86400 df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]df['Adj. Close'].plot()df['Forecast'].plot()plt.legend(loc=4)plt.xlabel('Date')plt.ylabel('Price')plt.show() 得出的结果与上方展示的一致。 了解pickle pickle 保存数据 pickle — Python object serialization scikit-learn系列之如何存储和导入机器学习模型]]></content>
      <categories>
        <category>机器学习</category>
        <category>Python</category>
        <category>数据分析</category>
        <category>数据挖掘</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下安装lightGBM]]></title>
    <url>%2F2018%2F10%2F16%2FMac%E4%B8%8B%E5%AE%89%E8%A3%85lightGBM%2F</url>
    <content type="text"><![CDATA[最近需要这个算法做点东西，在此记录一下安装的过程。 安装过程用homebrew安装相关的插件： 12brew install cmakebrew install gcc --without-multilib 在安装之后如果在使用cmake ..命令行出现了关于在下载的cmake的相关的问题时，可以考虑brew uninstall cmake，然后重新下载。这种问题我就遇上了… 下载好gcc之后，我配置了一下环境问题，如图： 使用命令行vi ~/.bash_profile配置环境变量问题。 接下来是git下载相关的GitHub资源： 1git clone --recursive https://github.com/Microsoft/LightGBM 依次使用下方命令： 123456cd LightGBMexport CXX=g++-8 CC=gcc-8mkdir build cd buildcmake ..make -j4 这样只要相关的插件下载完全了，一般就没什么问题出现了。 之后可以使用pip命令下载了： 1pip install --no-binary :all: lightgbm 由于不是很懂这个命令，我又使用了pip install lightgbm。 验证如图： 用的是anaconda默认的python3环境。 遇到的错误问题如下类似问题： OSError: dlopen(/usr/local/lib/python3.6/site-packages/lightgbm/lib_lightgbm.so, 6): Library not loaded: /usr/local/opt/gcc/lib/gcc/7/libgomp.1.dylib Referenced from: /usr/local/lib/python3.6/site-packages/lightgbm/lib_lightgbm.so Reason: image not found 解决方案：https://github.com/Microsoft/LightGBM/issues/1369 参考 http://lightgbm.apachecn.org/cn/latest/Installation-Guide.html https://blog.csdn.net/fitzgerald0/article/details/78321527?utm_source=blogxgwz4 https://github.com/Microsoft/LightGBM/issues/1369smartjpa.com]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
        <category>机器学习</category>
        <category>LightGBM</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>机器学习</tag>
        <tag>Mac</tag>
        <tag>LightGBM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac上下载xgboost]]></title>
    <url>%2F2018%2F10%2F15%2FMac%E4%B8%8A%E4%B8%8B%E8%BD%BDxgboost%2F</url>
    <content type="text"><![CDATA[这会有事了，感觉有必要记录一下。 最近想搞搞kaggle的入门级比赛，参考他人的kernel用到了xgboost，但是安装时遇到了一些坑，特别是官网的安装教程…真的让人吐血，根本不能解决我要安装的欲望。以下是我参考了一些文章并且成功安装的经验记录。 安装过程先用homebrew下载相关的依赖： 1brew install gcc --without-multilib 加上--without-multilib目的是开启默认不开启支持多线程的插件。 然后git下载在GitHub上的xgboost： 1git clone --recursive https://github.com/dmlc/xgboost 最好下载在根目录。 下载完成之后： 1cd xgboost 修改相关的配置文件： 1vi config.mk 实际上这个文件有好多个，我最终都修改成一致的了…如下图 修改内容为，改成用homebrew下载的gcc版本目录地址： export CC = /usr/local/Cellar/gcc/8.2.0/bin/gcc-8 export CXX = /usr/local/Cellar/gcc/8.2.0/bin/g++-8 export MPICXX = /usr/local/Cellar/gcc/8.2.0/bin/mpicxx 如图： 之后使用命令行： 12cp make/config.mk ./config.mkmake -j4 -j4是开启4个线程的意思。 之后就是编译成包的过程了： 12cd python-package python setup.py install 我用的是anaconda的python版本。 验证如图： 这样就大功告成了。 期间遇到过的问题问题一：XGBoostLibraryNotFound: Cannot find XGBoost Libarary in the candidate path, did you install compilers and run build.sh in root path? List of candidates: /home/dmlc/anaconda/lib/python3.6/site-packages/xgboost-0.4-py3.6.egg/xgboost/libxgboostwrapper.so /home/dmlc/anaconda/lib/python3.6/site-packages/xgboost-0.4-py3.6.egg/xgboost/../../wrapper/libxgboostwrapper.so /home/dmlc/anaconda/lib/python3.6/site-packages/xgboost-0.4-py3.6.egg/xgboost/./wrapper/libxgboostwrapper.so 此类问题，可能是git clone --recursive https://github.com/dmlc/xgboost下载执行未完全。 问题二使用命令行make -j4时出现： clang: error: unsupported option &apos;-fopenmp&apos; 如图： 解决方案： export CC = /usr/local/Cellar/gcc/8.2.0/bin/gcc-8 export CXX = /usr/local/Cellar/gcc/8.2.0/bin/g++-8 export MPICXX = /usr/local/Cellar/gcc/8.2.0/bin/mpicxx 这只是未能识别相关插件的问题，修改文件config.mk相关的部分如上即可。 在此参考了：https://stackoverflow.com/questions/36211018/clang-error-errorunsupported-option-fopenmp-on-mac-osx-el-capitan-buildin 参考链接 https://www.jianshu.com/p/c2b0c3067d84 https://www.jianshu.com/p/76ff402a8b58 https://zhuanlan.zhihu.com/p/23996104smartjpa.com]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
        <category>机器学习</category>
        <category>Xgboost</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>机器学习</tag>
        <tag>Mac</tag>
        <tag>Xgboost</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[思考意义]]></title>
    <url>%2F2018%2F10%2F15%2F%E6%80%9D%E8%80%83%E6%84%8F%E4%B9%89%2F</url>
    <content type="text"><![CDATA[追个不舍，活着的意义是什么，我还在寻找。 但现在我想我有些开怀了。 从来到走，不谈虚无，我想记录一些实在的心里话。 我向着“大爱”，做我能做和我想做的事，而我在平凡，苟活之间有些小的挣扎，但我依然也对什么虚荣不感冒。我矛盾，还是无法完全说服自己。我有些犹豫，这世间的种种诱惑真的有些感染到我，曾经的我，不为所动，但如今我愿意去了解更多存在于在这世间的人们，我变得有些“贪恋”人间了，如今的世界在我眼里更偏向像是个乌托邦式。 但是现在冷静下来想想，原来还是我向着“大爱”的心绪不宁了。我自相矛盾有时就会无缘无故的在我思维里像是小鹿乱撞一样，到头来也是把我自己搞得哭笑不得。 我想接下传承的接力棒，做我能做和做我想做的事。我也想尽一份力，帮助需要的所有，我愿意付出，但不会盲目。 得先是我自己，体验生而为“人”的人生生活。生而为“人”，有着各自的灵魂，做自己是生为“人”的基本原则。 我知道我的答案可能只是暂时的，但只会比现在更加积极。 即刻想想，现在心血来潮记录的这些东西也不足挂齿了，心里想说的话是永远说不完，写不完的，我再想想我执着着记录这些东西是为什么，不过是为了记录当今这个时段我内心的部分想法罢了。 看了看，又是草草了事呐～]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[吾道]]></title>
    <url>%2F2018%2F10%2F13%2F%E5%90%BE%E9%81%93%2F</url>
    <content type="text"><![CDATA[道非道，自成道。 吾道，非常言道，非万物道，吾道属吾道。 吾道，在吾一念之间，可从无，可从有。 吾道，吾道，还在继往开来之时。 吾道，与时无关，与实无关，可有可无。 吾道，贪恋未来，不念过往。 吾道之成，在终了之时。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客绑定独立域名以及转移云服务器]]></title>
    <url>%2F2018%2F10%2F12%2FHexo%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%E4%BB%A5%E5%8F%8A%E8%BD%AC%E7%A7%BB%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[最近对我的博客进行了一系列大换血，以前的样子太难看了，而且速度也一直不怎么满意，这次想好好的修改一下，其中包括了买了个域名，转移到了云服务器上运行。 当然在昨天开始就开始折腾了，所以把所有想要记录的都在此记录一下。 大换血修改设置关于这个我就贴上相关的链接好了，毕竟重复造轮子不是我的初衷。 一些对我有帮助的链接，谢谢分享的网友们： Hexo NexT主题内接入网页在线联系功能 hexo的next主题个性化教程：打造炫酷网站 hexo博客解决不蒜子统计无法显示问题 Next主题背景个性化DIY Hexo设置主题以及Next主题个性设置 2017版 Hexo Next主题侧边栏 Sidebar 配置自动展开教程 Hexo主页显示摘要 hexo next主题如何在首页摘要里显示文章图片？ HEXO下的语法高亮拓展修改 打造个性超赞博客Hexo+NexT+GithubPages的超深度优化 HEXO+NEXT主题个性化配置 以上就不在写明作者了，都是一些比较有帮助的文章。 在此简单说明一下关于我在next主题设置头像的问题，其实在主页的_config.yml设置一下就可以得出头像了，如下图，我将图片发在七牛云上，将外链拿到这里存放就好了。 关于hexo博客绑定域名关于这个事我简单说一下好了，先放有用的链接，再稍微补充一下。 绑定Github上的个人博客到Godaddy域名 Github Page + Hexo + Godaddy 搭建一个个性域名的博客网站 基于github和hexo搭建博客—-绑定个人域名 GoDaddy不支持支付宝的解决办法 GoDaddy优惠码 补充说明关于查找GitHub pages的ip两种方法： 第一种： ping liujunjie11.github.io ping自己的博客目录地址 如图： 第二种： 打开网站https://help.github.com/articles/troubleshooting-custom-domains/，拉到下面查看相关的IP，如图： 建立CNAME文件的存放目录是要放在Hexo项目的sources目录下的，我为了保险在next的sources目录下也放了一份。 补充的就这么点了。 Hexo转移到云服务器这地方因为不怎么懂而且自身能力也不够，所以遇到了很多的坑，唉，有些人可能自己都搞不清楚就写文章了，搞完所有流程又不对…真的是无力吐槽了，花费了那么多精力。现在还没搞好，到时候补上需要说明的。 因为GitHub允许每个仓库在1GB左右的空间，而我现在寄托在GitHub的博客大小才130M…so,我现在不打算转移到云服务器了，到时候再说吧。 GitHub的仓库内存说明：https://help.github.com/articles/what-is-my-disk-quota/ 贴上参考过的链接： 阿里云VPS搭建自己的的Hexo博客 VPS服务器搭建Hexo博客教程 利用云服务器搭架Hexo个人博客 HEXO 部署到云服务器详细指南 也就是在云服务器上建好一些需要的软件，然后就像使用命令hexo g -d一样上传GitHub一样，并不需要重新开始所有。]]></content>
      <categories>
        <category>笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于错误ERROR Asset render failed: css/main.css]]></title>
    <url>%2F2018%2F10%2F11%2F%E5%85%B3%E4%BA%8E%E9%94%99%E8%AF%AFERROR-Asset-render-failed-css-main-css%2F</url>
    <content type="text"><![CDATA[在修改一些字体的时候使用hexo s/hexo s -debug时出现了以下错误： ERROR Asset render failed: css/main.css Error: /Users/junjieliu/liujunjie11.github.io/themes/next/source/css/main.styl:14:27 10| 11| // Variables Layer 12| // -------------------------------------------------- 13| for $variable in $variables 14| @import &quot;_variables/&quot; + $variable; ---------------------------------^ 15| 16| 17| // Mixins Layer failed to locate @import file _variables/base.styl 如图： 解决方案有个文件在我修改了一个字体参数之后出现了(如图)。还好我记得前面打开目录时是没有这个文件存在的，之后我把它删除再使用上面的命令就没有再报错了。 这个文件估计是在第一次修改相关文件的参数时才会出现，删除之后就能恢复正常了。 更新在删除之后发现问题还是解决不了，折腾了一下，去文件所指的目录地址去看了一下，发现了以下问题(如图)： 在此处的文件名自己发生了改变了，而且不知为何当初自己进了垃圾桶…把名字改回来base.styl之后再使用命令就没有再出现以上错误了。 以下是这次错误相关的文件目录：]]></content>
      <categories>
        <category>笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>问题记录笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac升级到Mojave版本之后的Safari插件问题]]></title>
    <url>%2F2018%2F10%2F11%2FMac%E5%8D%87%E7%BA%A7%E5%88%B0Mojave%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8E%E7%9A%84Safari%E6%8F%92%E4%BB%B6%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在升级到了Mojave最新版本之后的最大问题发现就是Safari浏览器之前一些常用的插件不能用了，其他的对我来说都是优点，系统比以前更加流畅了，优化了不少。 废话不多说了，我在此仅列出我常用的插件列表以及如何再次正常使用它们。 插件一：Search Engine Switcher这款插件能够使得在使用浏览器搜索关键词时可以在百度、谷歌之间的搜索引擎变换搜索相关内容。在升级之后本来不被Safari支持了。 解决方案打开新版的app store搜索关键词Search Engine Switcher直接下载即可用了。 插件二：Adblock Plus这是一个让人头疼的问题，没有了之后广告太多了，受不了，找了一些付费的替代品，但是还是都不如Adblock Plus好用，在逛国外的一些论坛时发现了一个解决方案。 解决方案下载Adblock Plus的最后一个在Safari的插件版本即可完美解决这个问题，不用去app store下载了，那个根本没什么用。 具体的可以先去下载这个插件即可直接使用了： https://uploadfiles.io/3q7wu 这个链接是国外网友的分享，链接在此：https://forums.macrumors.com/threads/adblock-plus-not-working.2121621/ 这是他的原话：Here you go dude: https://ufile.io/3q7wuIt’s the original AdBlock.safariextz latest version! Just put it in the folder I mentioned above and enable it in Safari’s preferences. It should work. Good luck! 下载完之后会跳转到这个网页：https://safari-extensions.apple.com/details/?id=com.betafish.adblockforsafari-UAMUU4S2D9 直接下载就是了，一切和从前一样了… 如果在你下载之后没有得到什么实质性的作用，不妨可以看看官方的解释： 在 2019 年的某个时候，我们将停止对传统扩展的支持，极少数特例除外。 我们强烈建议您迁移到我们的新 Mac 应用上来。 我们将在新的应用上投入全部精力，让 AdBlock for Safari 成为 Apple 设备上最好的广告拦截工具。 这是好像有点运气成分的… 就这样了，that’s all!good luck~~]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[旅程]]></title>
    <url>%2F2018%2F09%2F29%2F%E6%97%85%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[一段在活着的人生旅程是相对矛盾的，常常也因此而把自己堵塞的一言不能发。 观看完《云图》之后引发了我的一系列思考，虽然在曾经都有过接触的那些思想，但是从书上或者是自己思考得出的相比，从电影的形式来进行描述何尝不是一种更好的选择。《云图》是一部好作品，她给我的启示对于我想要寻找的答案来说是有一定推进作用的，不知怎么的我想记下现在所想的一些东西，不妨叫其为，“观《云图》有感吧”。 人与人之间是相互牵连着的，每个人的所作所为都会对在这世上的人产生一定的影响的，继而形成一个链式反应，“人类是命运共同体”，这样理解也不为过。我看完《云图》感受是一股“勿以善小而不为”的感受的，当然这部作品本身给我的信息远不止如此。她另外给了我的信息是：捍卫心中认为正确的真相、真理，哪怕付出所有；勇敢去做自己认为对的事情，哪怕只有自身一人的力量那般微不足道。在上的前提是我们真的是我们自己，不受世间规则的约束，不受世间传统的的纠缠。 “稳定的发展”不应成为“被规则”的理由。世界的稳定维持，好似是有一股神秘的力量在背后发挥着作用，这股力量引导着世世代代的人们生活着的世界从有到现在，如今的人们把这股力量称为世间的自然秩序。多数的人们怕破坏了这秩序，世间的稳定发展会发生动摇，会引来这股神秘力量的报复，久而久之秩序成为了一种活着的人们都应该要被遵守的规则，秩序规则，规则秩序，源远流长，不声不息。所以会有大多数人会为了“稳定的发展”而也会要求其他人不要不遵守这些规则，更不允许被破坏这些股规则。该称之为一般的“伟大”吗？套着“稳定”外衣的“规则”。这股秩序规则的存在恰恰也是限制当世人们的一条锁链，给人的感觉就是一切都是被安排好的，一切都是冥冥中自有的存在与发生，这难道不是一种“洗脑”吗？大多数人们会因此变得沉默，他们以为这就是一切早已安排好的天命，而我只需要静静的，毫无波澜的干自己该做的事便好。这是一种对鲜活生命的摧残，一种对生命的不尊重，一种教人们对自己生命的不负责。一条生命在诞生之时，他就是独立的，并且一直都是独立的，孤独？“孤独”不过是煽情的人们用来安慰、说服自己的字词理由罢了。人，生而孤独，生而独立，所以这世间的规则并不是我们应当铭记于心的，而应该是我们根据自己的选择去选择的，世间规则不应当成为生而为人的我们的必须枷锁。但是世间也需要规则，也需要秩序，这一点也是毫无破绽的。我可以适当的遵守一定规则，但我永远不会将其铭记于心，更不会让其成为我自由生长的一把枷锁。“规则”有时一旦被另有企图的人们所利用，稍加不当作为一种源远流长，依旧可能会成为一些人们堕落的根源。 一个人真正的成长与成熟不是学会了如何精通这世间的规则继而将此铭记于心成为一个形态意识上的墨守陈规的人，而是一个在知晓了这世间大多数的规则之下，却依旧能做自己的人。前者已经失去了自我，不再是一个真正独立的人了。 活在这世间，实属不易，有牵绊，有诱惑，有不解。守护本心，活成自己有时变得那么难，那么难，很多时候我们难真正的成为自己，过着自己理想的生活，做着自己喜欢的事。但是这些都不能成为理由而不去成为自己，多些在自己的空间里多加思考会发现这原本只是两回事的存在罢了。 守护那来之不易的真相，并且舍得去奉献。 人生来的旅程，一千个人有一千颗心，有一千个自己的存在。世间因此也变得“矛盾”，还是本身就是一个矛盾体？无论如何，人类命运体中伴随着矛盾是不可避免的事实，那是因为”我们“的存在。这世间值得一走，一走一停，探究其秘，何乐而不为。 我曾看到一句话我很喜欢： 笑对人生，独立寰宇。 完。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网，自建VPS-SS应用]]></title>
    <url>%2F2018%2F09%2F28%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%8C%E8%87%AA%E5%BB%BAVPS-SS%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[最近因为需求想自己搭建一个VPS加SS应用。用的是Vultr这个平台。 唉…这东西的教程已经是满大街都是了，我就不重复造轮子了，现在的轮子还没有失效。 具体的服务器租建过程可参考： 自建ss服务器教程 科学上网的终极姿势-在-vultr-vps-上搭建 Vultr的vps搭建shadowsocks翻墙 超详细 Vultr（VPS）搭建 SS / 新手图文指导教程 如何查看修改ss服务器的端口密码 shadowsocks多端口密码手动配置方法 SS多用户配置 Linux查看端口占用情况和开启端口命令 Linux下iptables 禁止端口和开放端口 关于在TCP Fast Open过程中命令行增加的一些补充(我自己加上的)： 每一次的…ipv4…之外我都加上了…ipv6…的一样的命令行。 如：echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen另外加上了：echo 3 &gt; /proc/sys/net/ipv6/tcp_fastopen 如：net.ipv4.tcp_fastopen = 3另外加上了：net.ipv6.tcp_fastopen = 3 … 其中注意的细节是： 开通服务器时，当出现了ip，不要立马去ping或者用xshell去连接，再等5分钟之后，有个缓冲时间。 注意加密算法的对齐填写。 后续补充… 简单说说体验吧，用的是在日本的服务器，经过上面的参考之后，换了好几台服务器才有了现在的暂时稳定…另外要补充一下：如果在使用命令行ssh root@&lt;ip&gt;不通时(即没有提示要求输入密码登陆的出现的其他情况，比如超时)，直接重新另外开一台就是了，不用再花多余的时间去测试了。 我一共换了好几台才有3台是可以用的…心累…可能是我太急了？？有可能。 补充：目前上YouTube测试最高连接可以达到25M/s…超级快的哈哈哈哈～～估计还可以上升～～～美滋滋～～ 补充说明最近添加了多个用户的设置，即添加了多个独立端口以及独立密码，均需要将端口添加至服务器端口列表才行，并且还要注意添加tcp/udp协议，这很重要。]]></content>
      <categories>
        <category>软件使用</category>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>SS</tag>
        <tag>科学上网</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读西游，得“真经”]]></title>
    <url>%2F2018%2F09%2F27%2F%E8%AF%BB%E8%A5%BF%E6%B8%B8%EF%BC%8C%E5%BE%97%E2%80%9C%E7%9C%9F%E7%BB%8F%E2%80%9D%2F</url>
    <content type="text"><![CDATA[这次兴趣来了想读读西游原著，之前也读过一些金典原著，都是读过几章节便草草了事了… 由于很喜欢孙悟空这个角色，所以才有心血来潮之意想认真读读，其中又惊又喜，发现了一个不同的孙悟空，各位对西游感兴趣的真应该好好读读呀。 西游记原著下载链接 西游记乃是我等先辈所流传下来的文化宝藏，值得我等后辈花点时间精力来进行基本上的纠正解读，以此来”普度众生”，哈哈。 所以，记下的这篇文章仅是起到普及有关西游知识之用。 西游记别全名见文第一章： 诗曰: 混沌未分天地乱，茫茫渺渺无人见。 自从盘古破鸿蒙，开辟从兹清浊辨。 覆载群生仰至仁，发明万物皆成善。 欲知造化会元功，须看西游释厄传。 在此我们可以看到西游记的别全名为“西游释厄传”。 孙悟空“美猴王”一称呼由来见文第一章： …石猿端坐上面道: “列位呵，‘人而无信，不知其可。’你们才说有本事进得来，出得去，不伤身体者，就拜他 为王。我如今进来又出去，出去又进来，寻了这一个洞天与列位安眠稳睡，各享成家之福， 何不拜我为王?”众猴听说，即拱伏无违。一个个序齿排班，朝上礼拜，都称“千岁大王”。 自此，石猴高登王位，将“石”字儿隐了，遂称美猴王。… 进得来进得去指的是水帘洞。以上解读已经清晰明了，孙悟空以大胆之能征服了众猴，使得众猴甘拜称呼孙悟空为“美猴王”了。在这之后作者本人也经常引用“美猴王”来称呼孙悟空，这就容易造成人们也如出一辙的叫孙悟空为美猴王了，更有甚者，以为孙悟空长得漂亮…其实不然，可见我下面的纠正解读。 孙悟空为何要执意学道，离走花果山？见文第一章： …一日，与群猴喜宴之间，忽然忧恼，堕下泪来。众猴慌忙罗拜道:“大王何为烦恼?”猴王道:“我虽在欢喜之时，却有一点儿远虑，故此烦恼。” 众猴又笑道:“大王好不知足!我等日日欢会，在仙山福地，古洞神州，不伏麒麟辖，不伏凤 凰管，又不伏人间王位所拘束，自由自在，乃无量之福，为何远虑而忧也?”猴王道:“今日 虽不归人王法律，不惧禽兽威服，将来年老血衰，暗中有阎王老子管着，一旦身亡，可不枉 生世界之中，不得久住天人之内?”众猴闻此言，一个个掩面悲啼，俱以无常为虑。只见那班部中，忽跳出一个通背猿猴，厉声高叫道:“大王若是这般远虑，真所谓道心开 发也!如今五虫之内，惟有三等名色，不伏阎王老子所管。”猴王道:“你知那三等人?”猿 猴道:“乃是佛与仙与神圣三者，躲过轮回，不生不灭，与天地山川齐寿。”猴王道:“此三者 居于何所?”猿猴道:“他只在阎浮世界之中，古洞仙山之内。”猴王闻之，满心欢喜，道: “我明日就辞汝等下山，云游海角，远涉天涯，务必访此三者，学一个不老长生，常躲过阎 君之难。”噫!这句话，顿教跳出轮回网，致使齐天大圣成。众猴鼓掌称扬，都道:“善哉! 善哉!我等明日越岭登山，广寻些果品，大设筵宴送大王也。”… 在此的“猴王”指的是孙悟空。孙悟空是个有情有义有担当的首领，是个为民为小的们为花果山着想的好大王，他有远见并且有勇有谋有智慧，愿意为了小的们独自一人去花费数年走尽千山万水，忍受人间俗人们的骂和打去寻求永生之道,以便学成之后带回来教授与小的们。在花果山他是个不折不扣的英雄。这也是为何孙悟空每次一回来花果山(在电视剧中就能感受到)就那么深得猴心，猴们和他的感情相互都很深的原因。其中论据可见下文证： …次日，美猴王早起， 教:“小的们，替我折些枯松，编作筏子，取个竹竿作篙，收拾些果品之类，我将去也。”果 独自登筏，尽力撑开，飘飘荡荡，径向大海波中，趁天风，来渡南赡部洲地界。… …猴王参访仙道，无缘得遇。在于南赡部洲，串长城，游小县，不觉八九年馀。忽行至西洋大海，他想着海外必有神仙。独自个依前作筏，又飘过西海，直至西牛贺洲地界。… …祖师道:“既是逐渐行来的也罢。你姓甚么?”猴王又道:“我无性。人若骂我，我也不 恼;若打我，我也不嗔，只是陪个礼儿就罢了。一生无性。”… 孙悟空的本性暂且不谈孙悟空自从石中蹦出来以能力以胆量征服众猴称王得“美猴王”美名的事(不是强迫众猴俯首称臣)，况且可见下文： …将那跑不动的拿住一个，剥了他衣裳，也学人 穿在身上，摇摇摆摆，穿州过府，在市尘中，学人礼，学人话。朝餐夜宿，一心里访问佛仙 神圣之道，觅个长生不老之方。…(兽有兽语，孙悟空与小的们交谈用的不是人语。) …猴王用手扯住樵夫道:“老兄， 你便同我去去。若还得了好处，决不忘你指引之恩。”樵夫道:“你这汉子，甚不通变。我方 才这般与你说了，你还不省?假若我与你去了，却不误了我的生意?老母何人奉养?我要斫 柴，你自去，自去。”… 祖师道:“既是逐渐行来的也罢。你姓甚么?”猴王又道:“我无性。人若骂我，我也不 恼;若打我，我也不嗔，只是陪个礼儿就罢了。一生无性。”… 经过上面的简单分析解读，孙悟空生来性本善，在人间行走懂得去粗取精，学人礼貌行事，也学人懂得用回报来感谢他人帮忙，是只好学并且懂得精学，聪明的猴子(遵守人间规则方才能在人间行走的游刃有余)。另外也可这么分析，他生来就是无性的，如同一张白纸，这原因已经明了，不再啰嗦了，明者自明。 “孙悟空”名字的由来见文第一章： …祖师道:“既是逐渐行来的也罢。你姓甚么?”猴王又道:“我无性。人若骂我，我也不 恼;若打我，我也不嗔，只是陪个礼儿就罢了。一生无性。”祖师道:“不是这个性。你父母 原来姓甚么?”猴王道:“我也无父母。”祖师道:“既无父母，想是树上生的?”猴王道:“我 虽不是树生，却是石里长的。我只记得花果山上有一块仙石，其年石破，我便生也。”祖师闻 言，暗喜道:“这等说，却是天地生成的。你起来走走我看。”猴王纵身跳起，拐呀拐的走了 两遍。祖师笑道:“你身躯虽是鄙陋，却像个食松果的猢狲。我与你就身上取个姓氏，意思教 你姓‘猢’。猢字去了个兽傍，乃是古月。古者，老也;月者，阴也。老阴不能化育，教你姓 ‘狲’倒好。狲字去了兽傍，乃是个子系。子者，儿男也;系者，婴细也。正合婴儿之本论。 教你姓‘孙’罢。”猴王听说，满心欢喜，朝上叩头道:“好!好!好!今日方知姓也。万望 师父慈悲!既然有姓，再乞赐个名字，却好呼唤。”祖师道:“我门中有十二个字，分派起名 到你乃第十辈之小徒矣。”猴王道:“那十二个字?”祖师道:“乃广、大、智、慧、真、如、 性、海、颖、悟、圆、觉十二字。排到你，正当‘悟’字。与你起个法名叫做‘孙悟空’好 么?”猴王笑道:“好!好!好!自今就叫做孙悟空也!”正是:鸿蒙初辟原无姓，打破顽空 须悟空。… 在上“祖师”所指须菩提祖师；“猴王”即指美猴王是也(在此处的“美猴王”其实是花果山上的猴臣子们所奉石猴之名)。 孙悟空为何不能继续留在须菩提祖师身边得道见文第二章： …一日，春归夏至，大众都在松树下会讲多时。大众曰:“悟空，你是那世修来的缘法?前 日师父拊耳低言，传与你的躲三灾变化之法，可都会么?”悟空笑道:“不瞒诸兄长说，一则 是师父传授，二来也是我昼夜殷勤，那几般儿都会了。”大众道:“趁此良时，你试演演，让 我等看看。”悟空闻说，抖搜精神，卖弄手段道:“众师兄请出个题目。要我变化甚么?”大 众道:“就变棵松树罢。”悟空捻着诀，念动咒语，摇身一变，就变做一棵松树。真个是:郁郁含烟贯四时，凌云直上秀贞姿。全无一点妖猴像，尽是经霜耐雪枝。大众见了，鼓掌呀呀大笑。都道:“好猴儿!好猴儿!” 不觉的嚷闹，惊动了祖师。祖师急拽杖出门来问道:“是何人在此喧哗?”大众闻呼，慌忙检 束，整衣向前。悟空也现了本相，杂在丛中道:“启上尊师，我等在此会讲，更无外姓喧哗。” 祖师怒喝道:“你等大呼小叫，全不像个修行的体段!修行的人，口开神气散，舌动是非生。 如何在此嚷笑?”大众道:“不敢瞒师父，适才孙悟空演变化耍子。教他变棵松树，果然是棵 松树，弟子们俱称扬喝采，故高声惊冒尊师，望乞恕罪。”祖师道:“你等起去。”叫:“悟空， 过来!我问你弄甚么精神，变甚么松树?这个工夫，可好在人前卖弄?假如你见别人有，不 要求他?别人见你有，必然求你。你若畏祸，却要传他;若不传他，必然加害:你之性命又 不可保。”悟空叩道:“只望师父恕罪!”祖师道:“我也不罪你，但只是你去吧。”悟空闻此言， 满眼堕泪道:“师父教我往那里去?”祖师道:“你从那里来，便从那里去就是了。”悟空顿然 醒悟道:“我自东胜神洲傲来国花果山水帘洞来的。”祖师道:“你快回去，全你性命，若在此 间，断然不可!”悟空领罪，“上告尊师，我也离家有二十年矣，虽是回顾旧日儿孙，但念师 父厚恩未报，不敢去。”祖师道:“那里甚么恩义?你只是不惹祸不牵带我就罢了!”悟空见没奈何，只得拜辞，与众相别。祖师道:“你这去，定生不良。凭你怎么惹祸行凶， 却不许说是我的徒弟。你说出半个字来，我就知之，把你这猢狲剥皮锉骨，将神魂贬在九幽 之处，教你万劫不得翻身!”悟空道:“决不敢提起师父一字，只说是我自家会的便罢。”… 大众在此指的是须菩提祖师的弟子们(其中包括孙悟空)。孙悟空生来便有一番天赋，学东西很快，深得须菩提祖师喜爱，这一番天赋必与孙悟空其本就是天地日月精华所铸成有关。如上文亦知，孙悟空也是个有情有义，有血有肉之物。另外可在此收获到重要信息，孙悟空本身的能力其实是很有限的，他从一穷二白花费数年之久来此学道，他虽然得须菩提祖师喜爱私下传授了几功夫，但是从上可知他只是个“半路被出师”的学徒罢了，这些都能为以后他能力不足的体现做伏笔。孙悟空并不是有可以“无法无天”的本事的，而且孙悟空本身性格也不够“无法无天”，而是拘于温和有礼的类型，这点从我上面的解读可得知一二。 筋斗云的由来见下文第二章： …祖师道:“凡诸仙腾云，皆跌足而起，你却不是这般。我才见你去，连扯方才 跳上。我今只就你这个势，传你个‘筋斗云’罢。”悟空又礼拜恳求，祖师却又传个口诀道: “这朵云，捻着诀，念动真言，攒紧了拳，对身一抖，跳将起来，一筋斗就有十万八千里路哩!”大众听说，一个个嘻嘻笑道:“悟空造化!若会这个法儿，与人家当铺兵，送文书，递 报单，不管那里都寻了饭吃!”师徒们天昏各归洞府。这一夜，悟空即运神炼法，会了筋斗云。 逐日家无拘无束，自在逍遥此一长生之美。… 从上可知，筋斗云是诸神仙的标配，其中可能就名字的叫法不同且配置各有不同而已(比如太白金星的叫做“祥云”，配置不及孙悟空的筋斗云快疾)，而且另外要说的是关于总是说的孙悟空一跟头十万八千里，其实也是跟筋斗云是有关系的，并不是单纯的以跟头就可以达到十万八千里路的。 “祥云”不及孙悟空的筋斗云快疾证据： …那太白金星与美猴王，同出了洞天深处，一齐驾云而起。原来悟空筋斗云比众不同，十 分快疾，把个金星撇在脑后，先至南天门外。… 孙悟空的大概真实样子孙悟空的大概样子以作者的描述为准。 见下文第一章： …石猴却又瞑目蹲身，往里一跳，叫道:“都随我进来!进来!”那些猴有胆大的，都跳进去了;胆小的，一个个伸头 缩颈，抓耳挠腮，大声叫喊，缠一会，也都进去了。跳过桥头，一个个抢盆夺碗，占灶争床， 搬过来，移过去，正是猴性顽劣，再无一个宁时，只搬得力倦神疲方止。石猿端坐上面道:… …祖师闻言，咄的一声，跳下高台，手持戒尺，指定悟空道:“你这猢狲，这般不学，那般 不学，却待怎么?”走上前，将悟空头上打了三下，倒背着手，走入里面，将中门关了，撇 下大众而去。… …悟空 道:“我也头圆顶天，足方履地，一般有九窍四肢，五脏六腑，何以比人不同?”祖师道:“你 虽然像人，却比人少腮。”原来那猴子孤拐面，凹脸尖嘴。… …魔王 笑道:“我常闻得那些猴精说他有个大王，出家修行去，想是今番来了。你们见他怎生打扮， 有甚器械?”小妖道:“他也没甚么器械，光着个头，穿一领红色衣，勒一条黄绦，足下踏一 对乌靴，不僧不俗，又不像道士神仙，赤手空拳，在门外叫哩。”… …魔王见了，笑道:“你身不满四尺，年不过 三旬，手内又无兵器，怎么大胆猖狂，要寻我见甚么上下?”悟空骂道:“你这泼魔，原来没 眼!你量我小，要大却也不难。你量我无兵器，我两只手勾着天边月哩!你不要怕，只吃老 孙一拳!”纵一纵，跳上去，劈脸就打。那魔王伸手架住道:“你这般矬矮，我这般高长，你 要使拳，我要使刀，使刀就杀了你，也吃人笑，待我放下刀，与你使路拳看。”… …唬得那牛头鬼东躲西藏，马面鬼南奔北跑，众鬼卒奔上森罗殿，报着:“大王!祸 事!祸事!外面一个毛脸雷公，打将来了!”… …身穿金甲亮堂堂，头戴金冠光映映。手举金箍棒一根，足踏云鞋皆相称。 一双怪眼似明星，两耳过肩查又硬。挺挺身才变化多，声音响亮如钟磬。 尖嘴咨牙弼马温，心高要做齐天圣。… 以上的关键词我也已经标出来了，根据上方的关键词基本上能得出孙悟空的真实模样轮廓了，就不废言了。 孙悟空为何一把毫毛可变许多个猴子出来？见下文第二章： …悟空见他凶猛， 即使身外身法，拔一把毫毛，丢在口中嚼碎，望空中喷去，叫一声“变!”，即变做三二百个 小猴，周围攒簇。原来人得仙体，出神变化，无方不知。这猴王自从了道之后，身上有八万四千毛羽，根根能变，应物随心。那些小猴，眼乖会跳，刀来砍不着，枪去不能伤。… …好猴王，即拔一 把毫毛，入口嚼烂，喷将处去，念动咒语，叫声:“变!”变做千百个小猴，都乱搬乱抢… 以上。孙悟空得道已成为仙体，有不死之身除外，还有其他的一些隐藏技能…毛变猴子不过是其中一角。 孙悟空有不死之身的部分证据： …悟空备细言了一遍，众猴称扬不尽道:“大王去到 那方，不意学得这般手段!”悟空又道:“我当年别汝等，随波逐流，飘过东洋大海，径至南 赡部洲，学成人像，着此衣，穿此履，摆摆摇摇，云游八九年馀，更不曾有道;又渡西洋大 海，到西牛贺洲地界，访问多时，幸遇一老祖，传了我与天同寿的真功果，不死长生的大法门。”众猴称贺。都道:“万劫难逢也!”… 孙悟空与二郎神谁更强？在孙悟空“封做‘齐天大 圣’，先有官无禄。着他代管蟠桃园;他即偷桃;又走至瑶池，偷肴，偷酒，搅乱大会;仗酒 又暗入兜率宫，偷老君仙丹，反出天宫。玉帝复遣十万天兵，亦不能收伏。”**“后观世音举二郎 真君同他义兄弟追杀。”** 实际上是二郎神携自己的义兄弟大战孙悟空一人，但是他的义兄弟们虽然发挥的作用不大，但是多多少少也是对于两人的战斗是有一定影响的，不妨听我慢慢说来。 …真君与大圣斗经三百馀合，不知胜负。那真君抖擞神威，摇身一变，变得身高万丈，两只手，举着三尖两刃神锋，好便似华山顶上之峰，青脸獠牙，朱红头发，恶狠狠，望大圣着头就砍。这大圣也使神通，变得与二郎身躯一样，嘴脸一般，举一条如意金箍棒，却就是昆仑顶上擎天之柱，抵住二郎神，唬得那马、流元帅，战兢兢，摇不得旌旗;崩、巴二将，虚怯怯，使不得刀剑。这阵上，康、张、姚、李、郭申、直健，传号令，撒放草头神，向他那水帘洞外，纵着鹰犬，搭弩张弓，一齐掩杀。可怜冲散妖猴四健将，捉拿灵怪二三千!那些猴，抛戈弃甲，撇剑抛枪;跑的跑，喊的喊;上山的上山，归洞的归洞;好似夜猫惊宿鸟，飞洒满天星。众兄弟得胜不题。却说真君与大圣变做法天象地的规模，正斗时，大圣忽见本营中妖猴惊散，自觉心慌， 收了法象，掣棒抽身就起。真君见他败走，大步赶上道:“那里走，趁早归降，饶你性命!” 大圣不恋战，只情跑起，将近洞口，正撞着康、张、姚、李四太尉，郭申、直健二将军，一 齐帅众挡住道:“泼猴!那里走!”大圣慌了手脚，就把金箍棒捏做绣花针，藏在耳内，摇身 一变，变作个麻雀儿，飞在树稍头钉住。那六兄弟，慌慌张张，前后寻觅不见，一齐吆喝道: “走了这猴精也!走了这猴精也!”… 二郎神的义兄弟们在孙悟空与二郎神单挑时攻打孙悟空的“后宫”，导致孙悟空心态发生变化，战斗好似是孙悟空处于一种劣势了。实际上在单独与二郎神单挑时，孙悟空的实力并不比二郎神的实力差。有人可能会有疑问，说孙悟空的变化都被二郎神给看破了，这一点就能看出二郎神实力更胜一筹，非也非也，且看： …正嚷间，真君到了，问:“兄弟们，赶到那厢不见了?”众神道:“才在这里围住，就不 见了。”二郎圆睁凤眼观看，见大圣变了麻雀儿，钉在树上，就收了法象，撇了神锋，卸下弹 弓，摇身一变，变作个雀鹰儿，抖开翅，飞将去扑打。大圣见了，搜的一翅飞起，去变作一 只大鹚老，冲天而去。二郎见了，急抖翎毛，摇身一变，变作一只大海鹤，钻上云霄来衔。 大圣又将身按下，入涧中，变作一个鱼儿，淬入水内。二郎赶至涧边，不见踪迹。心中暗想 道:“这猢狲必然下水去也。定变作鱼虾之类。等我再变变拿他。”果一变变作个鱼鹰儿，飘 荡在下溜头波面上。等待片时，那大圣变鱼儿，顺水正游，忽见一只飞禽，似青鹞，毛片不 青;似鹭鸶，顶上无缨;似老鹳，腿又不红:“想是二郎变化了等我哩!⋯⋯”急转头，打个 花就走。二郎看见道:“打花的鱼儿，似鲤鱼，尾巴不红;似鳜鱼，花鳞不见;似黑鱼，头上 无星;似鲂鱼，腮上无针。他怎么见了我就回去了?必然是那猴变的。”赶上来，刷的啄一嘴。 那大圣就撺出水中，一变，变作一条水蛇，游近岸，钻入草中。二郎因衔他不着，他见水响 中，见一条蛇撺出去，认得是大圣，急转身，又变了一只朱绣顶的灰鹤，伸着一个长嘴，与 一把尖头铁钳子相似，径来吃这水蛇。水蛇跳一跳，又变做一只花鸨，木木樗樗的，立在蓼 汀之上。二郎见他变得低贱，——花鸨乃鸟中至贱至淫之物，不拘鸾、凤、鹰、鸦都与交群——故此不去拢傍，即现原身，走将去，取过弹弓拽满，一弹子把他打个〔足龙〕踵。那大圣趁着机会，滚下山崖，伏在那里又变，变一座土地庙儿;大张着口，似个庙门;牙齿变做门扇，舌头变做菩萨，眼睛变做窗棂。只有尾巴不好收拾，竖在后面，变做一根旗竿。真君赶到崖下，不见打倒的鸨鸟，只有一间小庙，急睁凤眼，仔细看之，见旗竿立在后面，笑道:“是这猢狲了!他今又在那里哄我。我也曾见庙宇，更不曾见一个旗竿竖在后面的。 断是这畜生弄谊!他若哄我进去，他便一口咬住。我怎肯进去?等我掣拳先捣窗棂，后踢门 扇!”大圣听得，心惊道:“好狠!好狠!门扇是我牙齿，窗棂是我眼睛;若打了牙，捣了眼， 却怎么是好?”扑的一个虎跳，又冒在空中不见。… 综上分析，两者在这方面其实也是没个高下。 那么二郎神是如何拿下孙悟空，继而得到玉帝舅舅的奖赏的呢？不说那“李天王高擎照妖镜，与哪吒住立云端”相助之外，其实还有高人相助的(天兵天将在此仅是补下天罗地网之用，与分析实力基本上不挂钩，在此忽略不计)： …早有些天丁、力士接着，开门遥观，只见众天丁布罗 网，围住四面;李天王与哪吒，擎照妖镜，立在空中;真君把大圣围绕中间，纷纷赌斗呢。 菩萨开口对老君说:“贫僧所举二郎神如何?——果有神通，已把那大圣围困，只是未得擒拿。 我如今助他一功，决拿住他也。”老君道:“菩萨将甚兵器?怎能助他?”菩萨道:“我将那净 瓶杨柳抛下去，打那猴头;即不能打死，也打一跌，教二郎小圣，好去拿他。”老君道:“你 这瓶是个磁器，准打着他便好;如打不着他的头，或撞着他的铁棒，却不打碎了?你且莫动 手，等我老君助他一功。”菩萨道:“你有甚么兵器?”老君道:“有，有，有。”捋起衣袖， 左膊上，取下一个圈子，说道:“这件兵器，乃锟钢抟炼的，被我将还丹点成，养就一身灵气， 善能变化，水火不侵，又能套诸物;一名‘金钢琢’，又名‘金钢套’。当年过函关，化胡为 佛，甚是亏他。早晚最可防身。等我丢下去打他一下。”话毕，自天门上往下一掼，滴流流，径落花果山营盘里，可可的着猴王头上一下。猴王 只顾苦战七圣，却不知天上坠下这兵器，打中了天灵，立不稳脚，跌了一跤，爬将起来就跑; 被二郎爷爷的细犬赶上，照腿肚子上一口，又扯了一跌。他睡倒在地，骂道:“这个亡人!你 不去妨家长，却来咬老孙!”急翻身爬不起来，被七圣一拥按住，即将绳索捆绑，使勾刀穿了 琵琶骨，再不能变化。… 以上分析来看，孙悟空的实力与二郎神相比较，两者估计是不相上下的，如果“极端“一点的话估计也是孙悟空更胜一筹，原因在上，不再多言。 孙悟空闹天宫部分实情孙悟空并没有打入凌霄殿，更没有玉帝躲藏椅下一幕： …那二圣得了旨，径到灵山胜境，雷音宝刹之前，对四金刚、八菩萨礼毕，即烦转达。众 神随至宝莲台下启知，如来召请。二圣礼佛三匝，侍立台下。如来问:“玉帝何事，烦二圣下 凡?”二圣即启道:“向时花果山产一猴，在那里弄神通，聚众猴搅乱世界。玉帝降招安旨， 封为‘弼马温’，他嫌官小反去。当遣李天王、哪吒太子擒拿未获，复招安他，封做‘齐天大 圣’，先有官无禄。着他代管蟠桃园;他即偷桃;又走至瑶池，偷肴，偷酒，搅乱大会;仗酒 又暗入兜率宫，偷老君仙丹，反出天宫。玉帝复遣十万天兵，亦不能收伏。后观世音举二郎 真君同他义兄弟追杀，他变化多端，亏老君抛金钢琢打重，二郎方得拿住。解赴御前，即命 斩之。刀砍斧剁，火烧雷打，俱不能伤，老君准奏领去，以火煅炼。四十九日开鼎，他却又 跳出八卦炉，打退天丁，径入通明殿里，灵霄殿外;被佑圣真君的佐使王灵官挡住苦战，又 调三十六员雷将，把他困在垓心，终不能相近。事在紧急，因此，玉帝特请如来救驾。”如来 闻说，即对众菩萨道:“汝等在此稳坐法庭，休得乱了禅位，待我炼魔救驾去来。”… 玉帝是传旨如来来救驾： …善时成佛与成仙，恶处披毛并带角。无穷变化闹天宫，雷将神兵不可捉。当时众神把大圣攒在一处，却不能近身，乱嚷乱斗，早惊动玉帝。遂传旨着游弈灵官同翊圣真君上西方请佛老降伏。… 五行山指哪五行？见下文： …好大圣，急纵身又要跳出，被佛祖翻掌一扑，把这猴王推出西天门外，将五指化作金、 木、水、火、土五座联山，唤名“五行山”，轻轻的把他压住。众雷神与阿傩、迦叶，一个个 合掌称扬道:“善哉!善哉!… 以上。 最后，为何仅指明还原这些内容因为很喜欢孙悟空这个角色，也比较喜欢“齐天大圣”那段恩怨情怀，所以仅在此还原这段剧情。再者因为这段剧情被人喜欢的也多，继而被人更改的也多，所以如今的“齐天大圣”好像真的是给大多数没看过原著的人“无法无天”、bug一般的存在，所以我认为有必要写下这篇文章以作指正、纠正，“普度众生”，哈哈。 仅此。 另外说一句，80年代拍的那部西游记的一系列曲目如今听起来真的是非常不错，这些曲目的原作者为许镜清老先生。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Macbook上玩PS/win本游戏]]></title>
    <url>%2F2018%2F09%2F18%2F%E5%9C%A8Macbook%E4%B8%8A%E7%8E%A9PS-win%E6%9C%AC%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[昨天想在电脑上玩玩龙珠电光火石3，这是一款我小时候经常喜欢玩的游戏呢，哈哈，甚是怀念～ 话不多说，因为手上设备是Macbook，所以研究了一下，但是并不难，开始下面的教程吧。 安装虚拟机第一步当然是安装好我们的虚拟机了，这款虚拟机是微软开发的一款可以实现与Macbook文件共享的软件。什么叫文件共享？简单的说就是我们可以通过Mac上的下载软件下载好游戏以及模拟器之后直接打开window虚拟机则可以直接玩耍啦，因为文件是共享的！ 这款要收费…所以不妨可参考哦我曾经的博文，里面有破解安装的链接： 关于Parallels-Desktop13的简单使用 这样虚拟机的问题就解决了～环境已经没问题啦，但是我还是要说明一下，这个虚拟机真的非常的强大啊～,我在玩游戏时没有一点点延迟，所以用这个来玩win本游戏又有何不可？当然分配内存大一点基本上是没什么问题的，所以用Macbook玩win本游戏就此也随便搞定了～ 安装wii模拟器以及游戏这里以安装wii模拟器以及七龙珠电光火石3游戏镜像为例。 直接参考这一篇吧，一路安装好就行了： https://jingyan.baidu.com/article/3f16e00308e4482591c103df.html 补充一个快速下载龙珠电光火石3的迅雷链接(复制粘贴即可)： ed2k://|file|%5B%E9%BE%99%E7%8F%A0Z.%E7%94%B5%E5%85%89%E7%81%AB%E7%9F%B33%5D.Dragon.Ball.Z.Sparking.Meteor.JPN.Wii.iso|4699979776|bdd5b903db318f4f20f9326ee0dbbb5f|h=mkxmrsue6bqztfa2dqm22324rzzobfss|/ 如果链接失效了不妨可以留言我，我已经保存了，现在的这个链接还没有失效。 安装之后不知如何打开？请看此处的链接：https://tieba.baidu.com/p/3069784385?red_tag=0039514238 另外，我要补充一下，就是在初次打开时会出现错误‘Failed to load any D3DX9 dll, update your DX9 runtime, please’，解决方案在这里：下载DirectX驱动 在这里参考了：https://forums.dolphin-emu.org/Thread-dxd39-dll-loading-error 这样就能完成基本上的任务了，不过就是要用键盘来进行操作啊，很麻烦，不如看看这个手柄连接模拟器的教程吧。 手柄设置补充，图一为设置手柄接入虚拟机，图二为虚拟机系统接入手柄，之后一一设置好按键对应即可： 图一： 图二： 这样就完成了所有的任务了，开始游戏吧～ 补充：手柄在wii模拟器上的按键设置。 可参考： https://zhidao.baidu.com/question/1767290945679820540.html?qbl=relate_question_1 https://zhidao.baidu.com/question/1446133145568041260.html?qbl=relate_question_1 最后介绍几款小时候觉得很好玩的游戏： 奥特曼进化格斗3以及资源:https://tieba.baidu.com/p/3223685286?pn=13 数码宝贝编年史以及资源：https://tieba.baidu.com/p/1974490485 龙珠电光火石3教程参考：https://tieba.baidu.com/p/3069784385?red_tag=0039514238 上面的资源我均有备份，如果是失效了不妨可以留言补上。 以上。happy time~ 补充关于wii模拟器减速的问题： 看下图进行适当设置即可：]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Mac</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初学机器学习指南]]></title>
    <url>%2F2018%2F09%2F16%2F%E5%88%9D%E5%AD%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[老早就想写下这一篇文章了，对我来说这个意义很大。 以下是我开始真正学习机器学习的入门经历，在这个过程中我感到异常的轻松(在仅仅是了解学习机器学习知识的过程中)，为何说是“真正的”开始学习呢？因为之前有过接触但是进度很慢…我相信有许多的人在选择如何入门的时候肯定也有这样的麻烦。废话不多说，开始说说如何以我的方法尽快入门吧。希望以此来帮助需要的人。 入门：看书，看视频，记笔记，回顾思考。 无非就是这样的套路。顺序不重要，但是在此间交叉切换的过程却很重要。你不可能在入门的过程中一直的保持看书或者是看视频，so,我的意思已经明了，明者自明，哈哈，但是学会记笔记的却是最重要的，这点我有亲身体验，相信你也是。 以kaggle为起点我开始学习机器学习是因为我想着入数据挖掘的坑，我对kaggle早已有过了解，我在掌握一点点的机器学习概念(没错，仅仅是概念)之后就奋不顾身的投入到了kaggle的一个入门级比赛当中去了。补充一下，在这之前我是有写过数据分析的一些小程序的… 这个实践的入门级比赛即是：Exploring Survival on the Titanic，经典的泰坦尼克号预测入门级比赛。 现在需要的即是查找一些文章来参考模仿并且投入实践，一切学习都是从模仿开始的，静下心来，一步步实践，遇到问题利用好搜索引擎。有相关的错误出现一般可以将错误信息复制粘贴到搜索引擎上，一般都会有答案出现(一般都是英语答案)。不要畏惧英语。 具体哪些文章可参考： 1，R实现：https://zhuanlan.zhihu.com/p/27655949 2，python实现：https://zhuanlan.zhihu.com/p/33733586 3，python实现：http://www.jasongj.com/ml/classification/ 文章是参考不完的，但是还有一个重要的推荐，那就是kaggle本身的资源利用，即在每一个比赛都有Kernel资源分享，那是做过的前辈分享的经验，务必利用好。 在这个过程中，你可能想放弃，因为你什么都不懂..但是，你也要坚持下去，至少把流程是怎么一回事搞清楚。期间你可能会遇到编码问题，还有一些意外的错误问题，还是一句话，利用好搜索引擎。 工具选择 Anaconda Anaconda其中内嵌的notebook 非常不错，看起来很舒服，但是也有一些缺点，基本上可以忽略。notebook写python写R都是可以的，具体我有写过一篇文章介绍。另外，出现的错误我也有相关的记录，自行根据需求查找。一句话说得好，一切发明都是根据需求产生的。 入门，机器学习理论视频 1，吴恩达机器学习 2，吴恩达深度学习 视频的话看这个基本上差不多做个了解，网易云课堂也可查到相关的视频。上面的链接里面有作者的笔记记录，可以看视频再来看一遍对应的笔记加深印象。记得做笔记。 笔记 1，斯坦福大学2014机器学习教程中文笔记目录 2，深度学习笔记目录 以上链接为为上面说的笔记目录，再结合视频看是一个不错的选择，里面记录有每一节的核心内容，总结的不错。 书籍 1，商务经济统计学 2，周志华机器学习 3，李航统计学习方法 4，数据挖掘概念与技术 5，备手数学书籍以便随时补充遗忘或者是不懂的相关的知识。 暂时记得这么多，届时补充。视频书籍交叉看最好，记得做笔记。现在的首要任务是搞清楚概念理论以及出现了一系列问题该如何使用选择。 项目实践自己找一些项目做做练手。最好是根据自身的需求，明者自明，话不多说。 最后暂时说这么多吧，以后看时间看需要再进行补充。这是一篇简易的机器学习入门指南。 补充：这个指南可能不适合你，因为我确确实实是有过一点点准备才开始的这个计划流程… 以上。共勉。]]></content>
      <categories>
        <category>机器学习</category>
        <category>资源分享</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>资源分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[接受“大和”？]]></title>
    <url>%2F2018%2F09%2F15%2F%E6%8E%A5%E5%8F%97%E2%80%9C%E5%A4%A7%E5%92%8C%E2%80%9D%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[不知不觉，自身的思想发生了一些变化，这种变化已维持好久了。 什么时候，曾经有些玩世不恭，对于什么事都“满腔热血”的我开始变得有些动摇了，开始变得接受这世界的“大同”思维了，我也因此而麻木了好许长的时间了。以“大同”思维来说服自己，让自己不再“焦虑”，这是我变化的根本啊。 今日忽地觉醒了，今日的我真的与从前的我在思维上有了很大的不同，在接受“大同”的抉择上我开始了质疑，是的，我承认因此我变得有些冷漠有些麻木了，我也因此付出了代价，变成了这世界千千万万麻木不仁者其中一员…我感到落寞。 我还记得这种思维是我在接触所谓哲学类书籍所产生的，开始以“世间普遍”来镇压着我的各种焦虑与猜疑直至今日此时此刻。由不堪变成了柔和甚至是一而再再而三的所谓的”理解“，我以为是我成长了，以为是我长大了…如今在此重新思考此类问题，我有些话想说。 成长是变得越来越愿意接受这世间的“大同”，但若是把握的不好，却是会变成认同这种“大同”，这是两个完全不同的抉择。而曾经的我就陷入了后者之中。 究竟是我选择认同了“大同”，还是“大同”说服了我？我想这两者均有在不同时期交叉出现过，我从此也慢慢变得落寞了… “大同”使我慢慢的愿意接受平庸！这是铁的事实，再者接受这世俗的说法，容易染上各种各样的颜色…我，终究还是太年轻了啊… 有一段时间，我没有把本心守护好，这是我最大的过失，我也因此付出了巨大的代价。是“安乐”？是“平庸世俗”？说到底不过是我意志上的欠缺罢了。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于错误Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks]]></title>
    <url>%2F2018%2F09%2F07%2F%E5%85%B3%E4%BA%8E%E9%94%99%E8%AF%AFError-Permission-denied-dir-s-mkdir-usr-local-Frameworks%2F</url>
    <content type="text"><![CDATA[最近在用homebrew下载东西遇到了如下错误： Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks 解决方案： 依次使用命令行： 123sudo mkdir /usr/local/Frameworkssudo chown $(whoami):admin /usr/local/Frameworks 这样重新使用之前的命令行即可正常行使了。 参考：https://github.com/Homebrew/homebrew-core/issues/19286]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
        <category>Homebrew</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[duet display在升级Macos 13.6之后崩溃的可行解决方法]]></title>
    <url>%2F2018%2F08%2F31%2Fduet-display%E5%9C%A8%E5%8D%87%E7%BA%A7Macos-13-6%E4%B9%8B%E5%90%8E%E5%B4%A9%E6%BA%83%E7%9A%84%E5%8F%AF%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[下午看见app store里有更新系统的提示，心里想着好久未曾更新过哥的mac系统了，之前一直怕升级有什么毛病，就一直停留在13.1的系统。结果一升级悲剧了，哥昨天刚刚买的duet display一打开不显灵了…妈个鸡… 想过换回以前的系统，懒得搞了，麻烦… 想过替代品，暂时找不到，另外一方面：没钱加不想花钱了… 一怒之下哥把duet display删除了重装。没想到效果出奇的好： 软件可以正常使用了，不过就是在iPad上的显示不是全屏了，多了下面的一大条黑边，但是功能是和以前一样的，没区别。 下面简单说说解决方案： 1、重装软件，仅Mac端； 2、在连接之后，顶部出现下边的镜像设置，如下设置： 3、在duet软件点击高级设置，如下设置： 不取消这个镜像小勾勾则永远不会成功！不然就是一系列的软件闪退！亲生经历，请勿模仿！！ 补充：今天更新了到了Mojavede版本，但是duet还是不能正常使用，但是只要调整一下分辨率就行了～，不妨可以自己试试看，我选择中间的那个分辨率的模式，在iPad上又是全屏幕啦～ 4、连接上之后在偏好系统中的显示器设置界面的排列如下设置： 根据自身情况将扩展屏设置放在左边或者是右边，即达到一个鼠标可以自由通行的效果。 就这样吧，软件虽然界面变小了一圈，但是也能接受。 还是那么流畅，还是那么好用，还是那么美滋滋～～]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
        <tag>duet display</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于错误'ValueError: Found array with 0 sample(s) (shape=(0, 4)) while a minimum of 1 is required.']]></title>
    <url>%2F2018%2F08%2F20%2F%E5%85%B3%E4%BA%8E%E9%94%99%E8%AF%AF-ValueError-Found-array-with-0-sample-s-shape-0-4-while-a-minimum-of-1-is-required%2F</url>
    <content type="text"><![CDATA[在参考他人的代码时运行出现了错误： ‘ValueError: Found array with 0 sample(s) (shape=(0, 4)) while a minimum of 1 is required.’ 这是因为数据的改动造成的，本身自己所有的数据与他人的不同… 解决方案： 在运行此相关的代码时重新运行一遍你的数据源程序(就是你的那个包涵数据源的变量的那段代码) 这个解决方案对我来说是可行的。我想我说的已经够明白了吧… 参考： https://www.jianshu.com/p/bbfbdedc3c1c]]></content>
      <categories>
        <category>笔记</category>
        <category>机器学习</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>Python</tag>
        <tag>问题记录笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python编程map函数及as_matrix函数简明]]></title>
    <url>%2F2018%2F08%2F17%2Fpython%E7%BC%96%E7%A8%8Bmap%E5%87%BD%E6%95%B0%E5%8F%8Aas-matrix%E5%87%BD%E6%95%B0%E7%AE%80%E6%98%8E%2F</url>
    <content type="text"><![CDATA[如题。 map函数属于python函数式编程，具体的就不说了，可参考官网说明或者是直接看大神说明：https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00141861202544241651579c69d4399a9aa135afef28c44000 在此简要说说如何理解，因为之前我有一点困惑。 已知： 12345&gt;&gt;&gt; def f(x):... return x * x...&gt;&gt;&gt; map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])[1, 4, 9, 16, 25, 36, 49, 64, 81] 那么在理解以下代码时： 12345678910Title_Dict = &#123;&#125;#进行添加工作,将其中相关的字词以统一字词以替换Title_Dict.update(dict.fromkeys(['Capt','Col','Major','Dr','Rev'],'Officer'))Title_Dict.update(dict.fromkeys(['Don','Sir','the Countess','Dona','Lady'],'Royalty'))Title_Dict.update(dict.fromkeys(['Mme','Ms','Mrs'],'Mrs'))Title_Dict.update(dict.fromkeys(['Mlle','Miss'],'Miss'))Title_Dict.update(dict.fromkeys(['Mr'],'Mr'))Title_Dict.update(dict.fromkeys(['Mme','Ms','Mrs'],'Master'))all_data['Title'] = all_data['Title'].map(Title_Dict)#(在此中相当于返回了设定的值，与函数式返回类似)新建立一个列表，并且将先前统一好的代入进行整体分类sns.barplot(x='Title',y='Survived',data=all_data,palette='Set2') 可以简单的理解为一个函数： 12if ['Capt','Col','Major','Dr','Rev']: return 'Officer' 这样在结合变量使用时就容易理解的多了～ 在说说as_matrix函数。 如下代码： 12345678910111213141516171819df = pd.DataFrame(np.random.randn(3,4) ,columns=list('abcd'))print (df)输出： a b c d0 0.702272 0.199382 0.590453 -0.1776941 0.692848 -1.113005 -0.373606 -0.2492162 -0.928320 -0.920277 0.804570 -0.383224print (df.values)输出：[[ 0.70227209 0.19938178 0.59045266 -0.17769368] [ 0.69284849 -1.11300544 -0.37360597 -0.24921559] [-0.92831955 -0.92027708 0.80457031 -0.38322414]] print (df.as_matrix(columns=None))输出：[[ 0.70227209 0.19938178 0.59045266 -0.17769368] [ 0.69284849 -1.11300544 -0.37360597 -0.24921559] [-0.92831955 -0.92027708 0.80457031 -0.38322414]] 参考代码来源：https://blog.csdn.net/yan456jie/article/details/52089128 实际上两者的转换就如同有无特征名称之间的来来往往… 之前有些困惑，现在简单理解了一点。]]></content>
      <categories>
        <category>Python</category>
        <category>Numpy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pandas.Series.str.get()的简单使用]]></title>
    <url>%2F2018%2F08%2F16%2Fpandas-Series-str-get-%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[关于这个函数可在官网找到：https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.get.html 实际上我在此只是起到一个翻译的作用… 这个函数语法如下： 1`Series.str.get(i)` 其中： Parameters: i : int类型输入，用于返回制定元素的一个位置(可理解为一个针对自身元素身上的一个索引) Returns:items : Series/Index of objects，即返回的数据类型 具体使用参考官网上的例子： 1234567891011121314151617181920212223242526272829&gt;&gt;&gt; s = pd.Series(["String", (1, 2, 3), ["a", "b", "c"], 123, -456, &#123;1:"Hello", "2":"World"&#125;])&gt;&gt;&gt; s0 String1 (1, 2, 3)2 [a, b, c]3 1234 -4565 &#123;1: 'Hello', '2': 'World'&#125;dtype: object&gt;&gt;&gt; s.str.get(1)0 t1 22 b3 NaN4 NaN5 Hellodtype: object&gt;&gt;&gt; s.str.get(-1)0 g1 32 c3 NaN4 NaN5 NaNdtype: object 好了就这样吧，记录这个是因为有预感以后会再次用到… 在此也简单的记录一下在pandas中的聚合groupby函数： 可简单的理解为聚合的部分变成了索引，之后的操作均是围绕着这些个被聚合的数转。]]></content>
      <categories>
        <category>Python</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于python函数式编程以及相关调用方法的简单思考]]></title>
    <url>%2F2018%2F08%2F16%2F%E5%85%B3%E4%BA%8Epython%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[最近在参加kaggle上的一个入门级的比赛，在参考他人的代码时学习到了应用一些东西，在这里说的python函数式编程实际上在看书时看到了好几遍了，但是在真正的应用时是有一股“意想不到的”欣喜感的，哈哈.. 在此简单记录一下，以便以后参考用。 在所谓的函数式编程中，若是简单的直接调用出结果那真的是大材小用了..实际上只是我认知较浅..哈哈~ 在使用这些函数时，我发现会有惊人的效果，而且可以达到理想的效果，就如在处理一些数据中结合本身的变量时真的有一股得心应手的感觉～～ 这里的变量一般为DataFrame的数据类型，也可称为一个特征向量，维度。 再者，如是需要以自定义的函数结合变量达到理想的效果，不妨可以试试apply这个方法，大胆的调用起来！真的是挺好的一个工具，哈哈。 学到了不少实用的东西～]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为Hexo博客(next主题)加上评论功能]]></title>
    <url>%2F2018%2F08%2F15%2F%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2-next%E4%B8%BB%E9%A2%98-%E5%8A%A0%E4%B8%8A%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[一直想加一个评论的功能，现在有时间了。 下面来说说简单的过程。 用的是来必力这个评论系统。 首先需要进入其中进行注册。 前面的注册过程具体参考下面这篇文章吧，但是后面的过程回来参考我的即可。 文章地址：https://segmentfault.com/a/1190000012918417 如上面的文章可知，每个人注册成功之后会有一个独立的uid。 接下来打开目录位置目标/Users/XX/XXXX/themes/next/_config.yml，搜索关键词liver，将此位置改成 livere: on: true #控制开关 livere_uid: 你的uid 如下图所示： 接下来进行最重要的一步，打开目录位置目标/Users/XX/XXXX/themes/next/layout/_partials/comments.swig，将其中的改成如下图所示： 保存之后再有顺序的使用命令： hexo s -debug #调试并且展示 hexo g -d #完成文件上传生成 另外可在自己的来必力设置界面设置成自己想要的样子： 之后打开自己的网站就可以看到效果如何啦： 参考&amp;最后参考：https://www.jianshu.com/p/f5c184047e72 实话说，加上评论功能之后网站加载时间多了那么几毫秒…总体来说还不错。另外我用的Mac，其他系统也无大碍，看目录位置即可。 最后补充一点: 有时这个评论系统加载不出来，可能有几点原因： 网速不行，加载过慢； 来比利系统上的cookie过期了，重新登陆管理界面看看； 待发掘…]]></content>
      <categories>
        <category>笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pandas.Dataframe.plot()及数值切片的一些记录]]></title>
    <url>%2F2018%2F08%2F13%2Fpandas-Dataframe-plot-%E5%8F%8A%E6%95%B0%E5%80%BC%E5%88%87%E7%89%87%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[在学习其相关的一些库时有一些自己的理解，简单记录记录，方便以后理解。 pandas.Dataframe.plot()此函数而言： x轴线对应着第一列值，y轴线对应着第二列值or后面的列，而其中的属性对应着将要标记在上方的标签展示使用。 在切片的理解中： [:]为全体； [1:] or [1]需要考虑从0开始的顺序； [:1]即直接从1开始，无需从0开始； [:,:]表示行与列。 [1::]表示从第二位置开始以1为跨度逐渐到最后一位(0为第一个位置)。 [::1]表示从第一个位置开始逐渐以1为跨度直至最后一个位置。 That’s all！]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习笔记</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下的matploylib绘图中文乱码问题]]></title>
    <url>%2F2018%2F08%2F08%2FMac%E4%B8%8B%E7%9A%84matploylib%E7%BB%98%E5%9B%BE%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最近在接触一些在notebook上用matploylib这个库绘图时出现了中文乱码的问题，就是常见的那种小方块式的中文乱码问题。 下面简单说说解决方法。 Mac本机上的字体册利用在打开Mac自带的字体册，可发现有许多的中文字体供我们选择使用，在此就能帮忙我们解决中文乱码的问题。 选择一个字体，找到他的文件位置在何处。之后需要添加的代码要用到。 这样就知道了位置的所在。 需要添加的代码如下添加代码，加上上面说的中文字体的所在位置，然后在每一次需要中文显示时，均要加上fontproperties=font（font即指下方的变量）。 12345678910111213from matplotlib.font_manager import FontPropertiesfont = FontProperties(fname='/Library/Fonts/Songti.ttc')&gt; 如：plt.subplot2grid((2,3),(1,0),colspan=2) #在此即为多行的占用data_train.Age[data_train.Pclass == 1].plot(kind='kde') #两者的结合绘图data_train.Age[data_train.Pclass == 2].plot(kind='kde')data_train.Age[data_train.Pclass == 3].plot(kind='kde')plt.xlabel('年龄',fontproperties=font)plt.ylabel('密度',fontproperties=font)plt.title('各等级的乘客年龄分布',fontproperties=font)plt.legend(('Pclass1','Pclass2','Pclass3'),loc='best') #多个说明，自动排好说明位置 这样中文乱码的问题就能得到完美的解决了…唉，网上的一些方案根本没有用啊，折腾了几个小时，心累..]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>Matploylib</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>问题记录笔记</tag>
        <tag>Matploylib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3爬虫与GUI:爬取腾讯视频]]></title>
    <url>%2F2018%2F07%2F24%2Fpython3%E7%88%AC%E8%99%AB%E4%B8%8EGUI%3A%E7%88%AC%E5%8F%96%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91%2F</url>
    <content type="text"><![CDATA[最近想研究一下用python爬虫爬一些经常看的视频网站，其中包括有腾讯视频、YouTube、Twitter。本文从腾讯开始，之后会慢慢的更新其他两个的。 腾讯视频我之前就有过尝试，结果都失败了(我的目标是直接爬取完整视频！实际上这视频分析来分析去都是分段来的..)花了不少时间，结果还是停留在了只能爬取分段视频的阶段..下面也来简单说说如何爬取一些分段片段！ 爬取视频片段分析在我们经过抓包的过程中可发现一些有用的信息，比如getinfo、getkey的数据包。下面简单分析一下，实际上只用到getinfo数据包的内容即可！ 为了简便直接放出相关的链接： getinfo:http://vv.video.qq.com/getinfo?vids={}&amp;platform=101001&amp;charge=0&amp;otype=xml getkey:http://vv.video.qq.com/getkey?otype=json&amp;platform=11&amp;format={}&amp;vid={}&amp;filename={}&amp;appver=3.2.19.333 再强调一下，实际上仅仅分析getinfo的相关的内容即可得出片段视频！ 随便以一个腾讯视频的链接来进行以下图片的简单说明，针对以上的相关的参数： 即：http://vv.video.qq.com/getinfo?vids=a00260ipkjg&amp;platform=101001&amp;charge=0&amp;otype=xml 视频的真实地址仅仅需要fn(filename)、fvkey(key)、URL(ui~url)这些参数即可。以下图将一一进行标出！ 之后将得出一片段的真实地址：http://218.8.55.13/vlive.qqvideo.tc.qq.com/AU8SqeoXTl1JLXdNhOFSXiMVi2va5Pws1sz4YXZ7sAxo/d002684wnon.m1.mp4?vkey=BCCD552375F7D76708838E84668FDE0E15051F1BE9FF349A31FE6CA14BDC8EAE35FEF2322A8FAEA590EB2FCB129B0C96595BB896DBB756581A9F307ADA7D259AD4371F820D6C25194FD296D3570997912221A33D6678597050700BA156442AB5CB137D70537A706F 只有几分钟.. 如上.. 研究来研究去，花费了不少的时间了，再研究下去也感觉没有多大的收获了..加上感觉也难以进行下去了，所以我决定：先暂停研究，用已有的工具来满足一下～。当然也离不开用python来模拟爬取了，哈哈～ 分析模拟结合网站工具来下载完整视频经过我的研究，腾讯视频那都是一个一个片段的来进行“输出”的，所以一个一个进行爬取之后(利用网站工具)，再利用python的一些模块进行合并，即可获得视频的完整版。当然这些过程均将用python来进行模拟！ 使用的网站工具：http://www.weibodang.cn/dang.php 打开此网站，输入刚刚的要下载的视频链接，点击获取视频之后会跳到另一个页面，会发现完整版的视频就是用几个片段分成的： 腾讯这个老狗.. 如上我们已得知所有相关的片段的真实地址了，接下来将它们都下载下来后合并即可得到一个完整的视频了，网速快的话实际上跟直接下载一个完整版的视频没什么两样，可能还要快，哈哈～ 至此，就都已经分析完了，只剩下代码的事了。 代码实现先说一下，这样的代码我写过太多次了..有点腻了…写不下去了，感觉总是在做一些重复的事，我就不打算写太多了，大概说一下思路吧，将各个片段下载来之后，再利用一个python处理视频的模块库将择好几个片段一同进行连接即可完成了。但是，貌似今天我看到好像没有分片段了？好像直接可以爬到完整版了？难道是错觉？算了，反正我也不怎么下载腾讯视频..哈哈～ 核心代码，剩下的代码可参考我的其他博文，自己写吧，腻死了..这段代码已经达到能够爬取到所有分片段了.. `12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 ''' Created on 2018年7月24日 @author: junjieliu ''' """ 函数目标：结合pyQT5界面化爬取腾讯视频 编写时间：2018-7.24 """ import time import requests import sys import re from PyQt5.QtCore import QCoreApplication from PyQt5.QtWidgets import (QPushButton, QWidget, QLineEdit, QTextEdit, QGridLayout, QApplication, QComboBox) from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.support.wait import WebDriverWait from urllib.parse import quote from pyquery import PyQuery as pq browser = webdriver.Chrome('/Users/junjieliu/Documents/webdirver小插件/chromedriver') # 设置显示等待，超过时间返回失败，否则就地正法！ wait = WebDriverWait(browser, 40) input_url = 'https://v.qq.com/x/cover/fzfi0p4etjrckhh/a00260ipkjg.html' url = 'http://www.weibodang.cn/dang.php' browser.get(url) input = wait.until( EC.presence_of_element_located((By.CSS_SELECTOR, '#aform &gt; div &gt; div &gt; div &gt; input'))) button = wait.until( EC.element_to_be_clickable((By.CSS_SELECTOR, '#aform &gt; div &gt; div &gt; div &gt; span &gt; input'))) # button = browser.find_element_by_name('check') input.clear() input.send_keys(input_url) button.click() html = browser.page_source # 直接爬取相关的内容，即播放地址，再进行一番清洗得到正确的地址 referer = re.findall(r'&lt;video src="(.*?)"', html, re.S) for_name = re.match(r'视频如下可直接播放，.*?："(.*?)"', html, re.S) print(for_name) for each in referer: results = each.replace(';', '&amp;') print(results)` 对了，GUI用的pyQT5在我之前的博文也有介绍了，不说了..我承认我有点懶～ 参考&amp;最后一些在学习过程中用处较大的放上来了，比较懶..当然也感谢其他那些无私奉献的人们，我也从中学习到了不少的东西，谢谢～ 1、https://blog.csdn.net/cplvfx/article/details/80080761 其中用到的一些模块不懂的还需自行去了解以及查找！ 更新如今在爬取片段的那个方法可以直接爬取到腾讯以前的旧的完整的视频了，好像没有什么分片段了…方法过程如上！新的视频但是还待解决。]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
        <tag>PyQt5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心声]]></title>
    <url>%2F2018%2F07%2F18%2F%E5%BF%83%E5%A3%B0%2F</url>
    <content type="text"><![CDATA[我已沉默了许久了。 直到今日我看到了一个视频链接，看到了下方的一个同胞说到“我一直在流泪，孩子。”。我的心顿时在流血一般的，泪水一度忍不住的留.. 现在中国的年轻一代们，你们为何不去了解政治？你们有什么理由不去了解自己国家的政治？看到身边的行尸走肉们，我有时感到一股孤独感由然而生。幸好，我并不是一个人坚持着，在世界的各个角落都有我的同胞都有人在关心着这个国家与这里的人民生活的怎么样，想到这里，我总是有一股欣慰感。 我不是什么象牙塔里的花朵，我也不想为谁辩论什么。我只是想关心我的国家，在这里，我出生在这里，在出生之后我知道我是一个中国人，我的一个“大家”叫中国，这里有我的许许多多的兄弟姐妹，大家相依为命，情同手足…这曾经是在我的梦里时常出现的幻梦，如今依旧不变着。 这里的土地应当由这里的人民来当家作主，不是从什么地方过来的二流子政权来把这里搞得民不聊生，人人自危，看看吧，如今的这片土地上，什么荒谬的事情每天都在发生，一次又一次的冲击着无数人的底线。没有最荒谬的事在这里，只有更为荒谬的。虽然主体都是人，难道就与政治没有关系？政治关系着社会人民生活的方方面面，有什么理由不关心自己国家的政治？作为一个中国人。 如今的这个国家有着一部分的人利用着这个体制获取着从多数人民身上得来的不义之财，打着各种为这个国家为人民着想的口号，吃着人血馒头，过着丝毫没有悔改，为所欲为的生活。这些人只要有存在的一天，就是这个国家最大的心患，是不必要的，需清除的寄生虫！他们带坏了整个国家社会的风气，导致一些臭味相投的人跟着这歪风，一起欺压压榨着我们的人民，有点少人因为被逼的放弃自己的底线、良知与善良？只有大家一同关注起来，一同团结起来才能将这些人绳之于法，用我们自己的真正的“法”！ 作为这个国家的一份子，在有些时候就不应该继续沉默着，勇敢的发出自己的声音，与更多的那些勇敢的人民一起前进！人们也不应太过于冷漠，这个国家社会终究是我们一个个组成，大家都心怀热情，保持善良的人格，理智的并且去热衷于帮助身边需要的每一个人！当身边越来越好一些了之后，整体才会慢慢的变好。 大家一起加油！！]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用PS软件的记录]]></title>
    <url>%2F2018%2F07%2F18%2F%E4%BD%BF%E7%94%A8PS%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[此文是关于PS软件的使用记录，因为使用的不多，但是是经常需要用到的一些小技巧，记录在此，以便日后查看。不定时更新。 图片合并1，在软件中新建一个默认的空白层，将需要合并的图片一并拖入其中，排版调整好，保存退出，即可完成合并任务。 去水印 大小水印均可去除使用。 1，https://jingyan.baidu.com/article/4ae03de3e41dd33eff9e6bb9.html 看其中教程视频的第一个方法即可完成任务。 2，https://jingyan.baidu.com/article/a24b33cd2361e819fe002bed.html 不稳定方法。]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[反思记录]]></title>
    <url>%2F2018%2F06%2F29%2F%E5%8F%8D%E6%80%9D%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[不知不觉又已经到了期末了，现在的我在花时间应付考试。 这个学期我学了一些什么，我细细的回想一看，发现真的是太少了，最大的收获即是学习了一些python爬虫，但是不得不说也其实就是一半吊子罢了。所以这一切的一切真的需要我去好好的反思一下了，当中有太多的三分钟热度了，我的懒惰也是一大通病。我花了不少的时间去学习，到现在来看，不过也就是昙花一现，真的是太少了，学的太少了，我的学习状态出现了问题，这一点倒是无可争议的。我如今真的发现了，我的问题就是太过于“顺其自然”了，我曾经的规划计划都被我放在脑后，这真的是错误到家了…真的是让我付出了沉重的代价–太多有限的时间！ 更为重要的是我的自律习惯也没有曾经的那一番更加坚决了，这都是我变得懒惰的真实写照，我开始变得安于现状了，这恰恰是致命的毛病，如果不改变，我想我真的会付出更多的代价！ 是的，我一度要求自己追求“自由”的方式去对待每一件事，但是如今的我好像真的是过度了，过度的安抚自己要“顺其自然”了… 我强调并且追寻“自由”，但现在的我好像不具备太多这样的选择，我想我需要做出改变。不能太安逸去选择，更不能太安逸的去做事。 我的问题就是：太过于放纵自己了，以致于真的浪费了不少的时间！]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel使用记录]]></title>
    <url>%2F2018%2F06%2F27%2FExcel%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[以下是我在学习Excel这个软件时的学习记录，以便以后方便查找，随便也希望可以帮助需要的人。不定时更新。 所有的学习来源均来自网络。 excel整列求和的两种方法 http://www.ittribalwo.com/article/1324.html]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[结合Chrome插件快速下载百度云文件]]></title>
    <url>%2F2018%2F06%2F25%2F%E7%BB%93%E5%90%88Chrome%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E4%BA%91%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[最近下载一个文件，需要用到百度云网盘，不耐烦啊，它不耐烦我肯定很烦了… 唉，坑爹的百度！ 不废话了，以下是结合Chrome下载的教程。 具体的前面步骤看这个(懒得写重复的文字了..)：https://blog.csdn.net/fkq_2016/article/details/78759244 需要补充的是，其实下载这个修改版的也不错，我用的就是这个修改版的。 在获取到了真实的地址之后我又结合经过破解之后的迅雷，哈哈哈，速度还是可以的！ 关于如何复制完全真实地址，可在Chrome商店中下载Chrome下载管理器，就像下面操作图一样！ 不过重中之重的问题在于，你要先能学会翻墙…]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Chrome</tag>
        <tag>百度网盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Jupyter Notebook中安装多种语言内核]]></title>
    <url>%2F2018%2F06%2F04%2F%E5%9C%A8Jupyter-Notebook%E4%B8%AD%E5%AE%89%E8%A3%85%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80%E5%86%85%E6%A0%B8%2F</url>
    <content type="text"><![CDATA[Jupyter Notrbook有一个好的编译界面，输出内容也一目了然，让人感觉像是发现了一个新大陆.. 下面来说说如何在其中安装多种语言内核。 支持的语言内核可查：https://github.com/jupyter/jupyter/wiki/Jupyter-kernels 安装python2内核因为我的默认已经安装了python3，所以就在此讲解一下如何安装python2内核。 在notebook为开启情况下，依次输入命令： pip install ipykernel python2 -m ipykernel install 参考：https://www.jianshu.com/p/8b90c2f12856 安装R内核上面的文章也有相关的介绍了。 但是在anaconda中一行命令即可完成下载： conda install r-essential 或者是 conda install -c r r-essentials 参考：https://kangliping.wordpress.com/2017/09/15/anaconda_r/ 下载第一次可能有几个包不成功，我经过重新输入命令行之后再次下载得到了解决。 安装bash内核新开一个终端，依次使用命令行： pip install bash_kernel python -m bash_kernel.install 参考：https://blog.csdn.net/SA14023053/article/details/52053649 安装基于Scala的spark应用 具体移步：https://blog.csdn.net/Xmo_jiao/article/details/72674687 其中需要的内容在spark启动页面中都能找到。没办法，内容太多，又懒得写.. 但是需要注意的每次均要启动spark再进行进一步的编程操作。在已经安装spark的前提下输入命令行：spark-shell启动spark。 安装Matlab内核可参考： Jupyter Notebook with MATLAB Matlab kernel for Jupyter 经测试，不怎么好用。 最后输入以下命令行查看已安装的内核列表： jupyter kernelspec list 先写这么多，以后有需要再进行补充。 关于在下载完之后发现启动内核失败(dead kernel的情况) 可参考以下链接： https://blog.csdn.net/liangdagongjue/article/details/79533538 https://blog.csdn.net/wobeatit/article/details/78885339 即实际上就是我将Anaconda升级之后出现了以上的dead kernel的情况，后来发现真的是软件更新没有跟上的问题，将notebook之类的一并更新一遍即可解决。 实际使用命令行如下： conda upgrade notebook conda upgrade jupyter conda update mkl 一并更新之后重新打开会发现一切都可以正常使用了。]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下载2018CAD破解]]></title>
    <url>%2F2018%2F05%2F29%2FMac%E4%B8%8B%E8%BD%BD2018CAD%E7%A0%B4%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[最近因为选修课要用到CAD，用的恰好是Mac book，就在此记录. 第一步下载先去官网下载好2018的试用版：https://www.autodesk.com.cn/products/autocad/free-trial#0 需要注意的是：选择企业注册就好，不然很麻烦… 第二步参考以下文章即可.. 参考：http://www.anyxz.com/index.php/2902.html 因为我只是完成作业就卸载了..所以一个试用版就足够..]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>CAD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解常用传统算法的合集资源总结]]></title>
    <url>%2F2018%2F05%2F10%2F%E7%90%86%E8%A7%A3%E5%B8%B8%E7%94%A8%E4%BC%A0%E7%BB%9F%E7%AE%97%E6%B3%95%E7%9A%84%E5%90%88%E9%9B%86%E8%B5%84%E6%BA%90%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[平时学习算法是为了理解其中的原理以及思想，另外还有各种算法之间的比较以及应用场景。下面是一些常用常见的传统算法，我在YouTube上找了一些可简单理解其原理思想的视频，真正的做到通俗易懂！ 另外关于算法的各种时间复杂度以及空间复杂度均在此小列出来。关于以下各种算法的应用场景实际上还是需要自己去结合这些算法的思想去选择的，就不在此多说了。 参考了许多的网页，包括YouTube，维基百科等灯，也从中学习到了许多，就是在此汇总一下。另外参考的网页就不一一列出来了，感谢他们/她们的付出与分享。 主要参考： http://wiki.jikexueyuan.com/project/data-structure-sorting/insertion-sort.html https://github.com/francistao/LearningNotes/blob/master/Part3/Algorithm/Sort/面试中的%2010%20大排序算法总结.md 常用排序算法总结(一):http://www.cnblogs.com/eniac12/p/5329396.html 常用排序算法总结(二):http://www.cnblogs.com/eniac12/p/5332117.html]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3爬虫与GUI:基于有道词典的词典小工具]]></title>
    <url>%2F2018%2F05%2F07%2Fpython3%E7%88%AC%E8%99%AB%E4%B8%8EGUI-%E5%9F%BA%E4%BA%8E%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8%E7%9A%84%E8%AF%8D%E5%85%B8%E5%B0%8F%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[最近看到了一篇文章，一个基于有道的词典小工具，心血来潮，想着自己来写一个试试看。 下面我将用python完成接口的对接(即进行抓包)，并且用pyQT5实现对应的GUI界面。接下来就是事件机制的编写了，这样任务就完成了。 分析在分析的过程中需要分析网页中的JS代码，因为有道现在使用加密算法来进行翻译结果的加密了。下面一一进行简单的说明。 首先用Chrome浏览器打开有道在线翻译页面，随便输入一个中文，会自动检测翻译成英文。(在我们已经都知道有道现在是加密的情况下我就不废话太多了，下面直接挑重点的说。)打开其自带的开发者工具查看到相关的包信息： 如果多翻译试几次翻译会发现上图所指的两个参数是持续变化的，还有一个i是输入的词，这个是在正常不过的，没什么疑义。 找到相应的JS整体代码为了知道加密算法的过程以及整个流程是怎么一回事，找到网页的整体JS代码是唯一的选择。 先借助火狐浏览器分析翻译的接口，可快速的发现JS代码的所在处： 知道了JS文件的所在处，我们可在Chrome浏览器下找到这个地址： 新建标签页打开： 发现这是一个混淆的JS代码，需要进行格式化才可知道其庐山真面目！推荐两个反混淆的网站：http://tool.oschina.net/codeformat/js ，http://www.bm8.com.cn/jsConfusion/ 将混淆的代码复制粘贴在以上任意的一个网站，选择点击格式化之后即可得最终正解代码，之后为了查找关键词，我将这些代码编入一个文件中(Mac直接用文本编辑创建新文件即可。)： 格式化之后的JS代码一览。 之后查找关键词salt，找到对应上方的所指的参数位置。其中的乱码不用管，对分析代码没什么影响。 分析内容过程分析了一下之后，在Chrome浏览器中运行一下相关的代码，然后进入关于时间戳转换的网站进行简单的转换，会发现这是一个有关时间戳的随机生成的一串数字： 结合上下文(即salt关键词的上下一点范围即可)，发现有md5算法的字样出现了。 代码中关键的相关的内容。之后我们会用python来模拟这些代码来进行相关参数的输出。 用Chrome试着运行一下。 将运行之后的数字填入转换得出结果。 在得知了两个随着翻译变化的关键词之一salt的生成原理之后，再来看看最后一个突破点，即找到关键词sign的生成原理，在这之后利用python模仿运行生成再代人相关的参数即可完成需要的翻译结果的输出。 其实往上看一点点就能发现诀窍了： 结合md5算法以及必要的几个参数即可得出sign的生成值。 这样一来思路就都清晰明了了，仅仅需要代码的实现了。 代码以下代码已经套上了结合pyQt5开发出来了GUI的整体代码。 关于pyQt5不清楚可参考我之前的相关博文，或者是利用好搜索引擎。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137"""函数目标：基于有道的GUI搜索小工具编写时间：2018-5-08"""import time import requestsimport hashlibimport randomimport jsonimport sysfrom PyQt5.QtCore import QCoreApplicationfrom PyQt5.QtWidgets import (QPushButton, QWidget, QLabel, QLineEdit, QTextEdit, QGridLayout, QApplication, QComboBox)class Example(QWidget): def __init__(self): super().__init__() self.initUI() def save_translateResult(self, word): """ 本函数用于翻译结果的返回。 """ r = str(int(time.time() * 1000 + random.randint(1, 10))) # 模仿JS代码的仿写 S = 'fanyideskweb' n = word D = "ebSeFb%=XZ%T[KZ)c(sy!" # 在完整的JS代码中可找到 o = hashlib.md5((S + n + str(r) + D).encode('utf-8')).hexdigest() data = &#123; 'i': word, 'from': 'AUTO', 'to': 'AUTO', 'smartresult': 'dict', 'client': S, 'salt': r, 'sign': o, 'doctype': 'json', 'version': '2.1', 'keyfrom': 'fanyi.web', 'action': 'FY_BY_REALTIME', 'typoResult': 'false' &#125; url = 'http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule' # 在代理中需要加入cookies信息，否则会出现代码错误信息的返回 header = &#123; 'Cookie': XXXXXXXXXXXXXXXXXXXntes_nnid=25aff2b1480f17471ca1585f6f2f4293,15120241366', 'Referer': 'http://fanyi.youdao.com/', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36' &#125; response = requests.post(url=url, headers=header, data=data) response.encoding = 'utf-8' translateResult = json.loads(response.text)["translateResult"][0][0]['tgt'] return translateResult def take_test(self, word): """ 本函数用于输出测试。 """ try: return self.save_translateResult(word) except AttributeError: return "输入点有误/输出出现问题！！" def initUI(self): # 组件添加 combo = QComboBox(self) combo.addItem('有道词典') label = QLabel("请输入:") line = QLineEdit() button_1 = QPushButton('开始翻译', self) button_2 = QPushButton('退出', self) button_3 = QPushButton('清空', self) result = QTextEdit() # 布局设置 grip = QGridLayout() grip.setSpacing(4) grip.addWidget(label, 1, 0) grip.addWidget(line, 2, 0) grip.addWidget(button_3, 2, 1) grip.addWidget(button_1, 3, 0) grip.addWidget(button_2, 3, 1) grip.addWidget(result, 4, 0) self.setLayout(grip) combo.move(500, 0) # 基于Macbook设置基本的快捷键以及推出程序的信号槽 button_1.setShortcut('return') button_2.setShortcut('command+q') button_2.clicked.connect(QCoreApplication.instance().quit) button_3.setShortcut('esc') def translate(): """ 本函数用于返回翻译按钮之后的结果输出！ """ result.setText(self.take_test(line.text())) button_1.clicked.connect(translate) def clear(): """ 本函数用于输入输出框的清空！ """ line.setText("") result.setText("") button_3.clicked.connect(clear) # 设置窗口大小 self.setGeometry(500, 150, 600, 500) self.setWindowTitle("有道翻译小工具") self.show() if __name__ == "__main__": app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_()) 上面的cookies值是必须要的！否则会出现错误，当然，在上面的代码我的cookies数值我进行了隐藏更改，如果需要测试运行，可加上自己浏览器上有道在线翻译的cookies。 运行演示： 最后 代码中的模块可参考： 1. JavaScript parseInt() 函数：http://www.w3school.com.cn/js/jsref_parseInt.asp 2. time.time()：返回当前时间的时间戳。：http://qinxuye.me/article/details-about-time-module-in-python/ 3. random.randint：https://www.cnblogs.com/yd1227/archive/2011/03/18/1988015.html 4. hashlib:https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319556588648dd1fb0047a34d0c945ee33e8f4c90cc000 其他的自行查找。特别是pyQt5这个库，可查看我之前写的文章作为参考：https://liujunjie11.github.io/2018/04/28/python3爬虫与GUI：一个简易的搜索实用小工具/#more 参考： 1. http://study.163.com/course/courseLearn.htm?courseId=1004108008#/learn/video?lessonId=1047998193&amp;courseId=1004108008 2. https://cuiqingcai.com/5024.html 3. https://blog.csdn.net/karmacode/article/details/79145728 4. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319556588648dd1fb0047a34d0c945ee33e8f4c90cc000 5. http://qinxuye.me/article/details-about-time-module-in-python/ 6. https://www.cnblogs.com/yd1227/archive/2011/03/18/1988015.html 关于python的加密算法以及加密原理： 1. https://www.oudahe.com/p/python/z545/ 2. https://www.oudahe.com/p/python/z545/ 最后不懂的模块知识可利用好搜索引擎。 实际上也参考了我自己的文章： https://liujunjie11.github.io/2018/04/28/python3爬虫与GUI：一个简易的搜索实用小工具/#more 以及pyqt5的官网教程： https://maicss.gitbooks.io/pyqt5/content/事件和信号.html 关于将python文件打包生成app的工具库： py2app:.py –&gt; .dmg py2exe:.py –&gt; .exe]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
        <tag>PyQt5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(转)五大常用算法总结]]></title>
    <url>%2F2018%2F05%2F07%2F%E8%BD%AC-%E4%BA%94%E5%A4%A7%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[本文转自： 博客园：http://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741370.html作者：红脸书生 分治算法一、基本概念 在计算机科学中，分治法是一种很重要的算法。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)…… 任何一个可以用计算机求解的问题所需的计算时间都与其规模有关。问题的规模越小，越容易直接求解，解题所需的计算时间也越少。例如，对于n个元素的排序问题，当n=1时，不需任何计算。n=2时，只要作一次比较即可排好序。n=3时只要作3次比较即可，…。而当n较大时，问题就不那么容易处理了。要想直接解决一个规模较大的问题，有时是相当困难的。 二、基本思想及策略 分治法的设计思想是：将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。 分治策略是：对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其分解为k个规模较小的子问题，这些子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问题的解合并得到原问题的解。这种算法设计策略叫做分治法。 如果原问题可分割成k个子问题，1&lt;k≤n，且这些子问题都可解并可利用这些子问题的解求出原问题的解，那么这种分治法就是可行的。由分治法产生的子问题往往是原问题的较小模式，这就为使用递归技术提供了方便。在这种情况下，反复应用分治手段，可以使子问题与原问题类型一致而其规模却不断缩小，最终使子问题缩小到很容易直接求出其解。这自然导致递归过程的产生。分治与递归像一对孪生兄弟，经常同时应用在算法设计之中，并由此产生许多高效算法。 三、分治法适用的情况 分治法所能解决的问题一般具有以下几个特征： （1) 该问题的规模缩小到一定的程度就可以容易地解决 （2) 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。 （3) 利用该问题分解出的子问题的解可以合并为该问题的解； （4) 该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。 第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加； 第二条特征是应用分治法的前提它也是大多数问题可以满足的，此特征反映了递归思想的应用；、 第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法。 第四条特征涉及到分治法的效率，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但一般用动态规划法较好。 四、分治法的基本步骤分治法在每一层递归上都有三个步骤： step1 分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题； step2 解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题 step3 合并：将各个子问题的解合并为原问题的解。 它的一般的算法设计模式如下： Divide-and-Conquer(P) 1. if |P|≤n0 2. then return(ADHOC(P)) 3. 将P分解为较小的子问题 P1 ,P2 ,...,Pk 4. for i←1 to k 5. do yi ← Divide-and-Conquer(Pi) △ 递归解决Pi 6. T ← MERGE(y1,y2,...,yk) △ 合并子问题 7. return(T) 其中|P|表示问题P的规模；n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。ADHOC(P)是该分治法中的基本子算法，用于直接解小规模的问题P。因此，当P的规模不超过n0时直接用算法ADHOC(P)求解。算法MERGE(y1,y2,…,yk)是该分治法中的合并子算法，用于将P的子问题P1 ,P2 ,…,Pk的相应的解y1,y2,…,yk合并为P的解。 五、分治法的复杂性分析 一个分治法将规模为n的问题分成k个规模为n／m的子问题去解。设分解阀值n0=1，且adhoc解规模为1的问题耗费1个单位时间。再设将原问题分解为k个子问题以及用merge将k个子问题的解合并为原问题的解需用f(n)个单位时间。用T(n)表示该分治法解规模为|P|=n的问题所需的计算时间，则有： T（n）= k T(n/m)+f(n) 通过迭代法求得方程的解： 递归方程及其解只给出n等于m的方幂时T(n)的值，但是如果认为T(n)足够平滑，那么由n等于m的方幂时T(n)的值可以估计T(n)的增长速度。通常假定T(n)是单调上升的，从而当mi≤n&lt;mi+1时，T(mi)≤T(n)&lt;T(mi+1)。 六、可使用分治法求解的一些经典问题 （1）二分搜索 （2）大整数乘法 （3）Strassen矩阵乘法 （4）棋盘覆盖 （5）合并排序 （6）快速排序 （7）线性时间选择 （8）最接近点对问题 （9）循环赛日程表 （10）汉诺塔 七、依据分治法设计程序时的思维过程 实际上就是类似于数学归纳法，找到解决本问题的求解方程公式，然后根据方程公式设计递归程序。 1、一定是先找到最小问题规模时的求解方法 2、然后考虑随着问题规模增大时的求解方法 3、找到求解的递归函数式后（各种规模或因子），设计递归程序即可。 动态规划算法一、基本概念 动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。 二、基本思想与策略 基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。 由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。 与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）。 三、适用的情况能采用动态规划求解的问题的一般要具有3个性质： 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。 有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势） 四、求解的基本步骤 动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。如图所示。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。 初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态 图1 动态规划决策过程示意图 (1)划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。 (2)确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。 (3)确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。 (4)寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。一般，只要解决问题的阶段、状态和状态转移决策确定了，就可以写出状态转移方程（包括边界条件）。 实际应用中可以按以下几个简化的步骤进行设计： （1）分析最优解的性质，并刻画其结构特征。 （2）递归的定义最优解。 （3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值 （4）根据计算最优值时得到的信息，构造问题的最优解 五、算法实现的说明 动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。使用动态规划求解问题，最重要的就是确定动态规划三要素： （1）问题的阶段 （2）每个阶段的状态 （3）从前一个阶段转化到后一个阶段之间的递推关系。 递推关系必须是从次小的问题开始到较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。 确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策的阶段，列表示问题状态，表格需要填写的数据一般对应此问题的在某个阶段某个状态下的最优值（如最短路径，最长公共子序列，最大价值等），填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写表格，最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。 f(n,m)=max{f(n-1,m), f(n-1,m-w[n])+P(n,m)} 六、动态规划算法基本框架代码： for(j=1; j&lt;=m; j=j+1) // 第一个阶段 xn[j] = 初始值; for(i=n-1; i&gt;=1; i=i-1)// 其他n-1个阶段 for(j=1; j&gt;=f(i); j=j+1)//f(i)与i有关的表达式 xi[j]=j=max（或min）{g(xi-1[j1:j2]), ......, g(xi-1[jk:jk+1])}; t = g(x1[j1:j2]); // 由子问题的最优解求解整个问题的最优解的方案 print(x1[j1]); for(i=2; i&lt;=n-1; i=i+1） { t = t-xi-1[ji]; for(j=1; j&gt;=f(i); j=j+1) if(t=xi[ji]) break; } 贪心算法一、基本概念： 所谓贪心算法是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。 贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。 所以对所采用的贪心策略一定要仔细分析其是否满足无后效性。 二、贪心算法的基本思路：1.建立数学模型来描述问题。 2.把求解的问题分成若干个子问题。 3.对每一子问题求解，得到子问题的局部最优解。 4.把子问题的解局部最优解合成原来解问题的一个解。 三、贪心算法适用的问题 贪心策略适用的前提是：局部最优策略能导致产生全局最优解。实际上，贪心算法适用的情况很少。一般，对一个问题分析是否适用于贪心算法，可以先选择该问题下的几个实际数据进行分析，就可做出判断。 四、贪心算法的实现框架从问题的某一初始解出发； while （能朝给定总目标前进一步） { 利用可行的决策，求出可行解的一个解元素； } 由所有解元素组合成问题的一个可行解； 五、贪心策略的选择 因为用贪心算法只能通过解局部最优解的策略来达到全局最优解，因此，一定要注意判断问题是否适合采用贪心算法策略，找到的解是否一定是问题的最优解。 六、例题分析下面是一个可以试用贪心算法解的题目，贪心解的确不错，可惜不是最优解。 [背包问题]有一个背包，背包容量是M=150。有7个物品，物品可以分割成任意大小。 要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。 物品 A B C D E F G 重量 35 30 60 50 40 10 25 价值 10 40 30 50 35 40 30 分析： 目标函数： ∑pi最大 约束条件是装入的物品总重量不超过背包容量：∑wi&lt;=M( M=150) （1）根据贪心的策略，每次挑选价值最大的物品装入背包，得到的结果是否最优？ （2）每次挑选所占重量最小的物品装入是否能得到最优解？ （3）每次选取单位重量价值最大的物品，成为解本题的策略。 值得注意的是，贪心算法并不是完全不可以使用，贪心策略一旦经过证明成立后，它就是一种高效的算法。 贪心算法还是很常见的算法之一，这是由于它简单易行，构造贪心策略不是很困难。 可惜的是，它需要证明后才能真正运用到题目的算法中。 一般来说，贪心算法的证明围绕着：整个问题的最优解一定由在贪心策略中存在的子问题的最优解得来的。 对于例题中的3种贪心策略，都是无法成立（无法被证明）的，解释如下： （1）贪心策略：选取价值最大者。反例： W=30 物品：A B C 重量：28 12 12 价值：30 20 20 根据策略，首先选取物品A，接下来就无法再选取了，可是，选取B、C则更好。 （2）贪心策略：选取重量最小。它的反例与第一种策略的反例差不多。 （3）贪心策略：选取单位重量价值最大的物品。反例： W=30 物品：A B C 重量：28 20 10 价值：28 20 10 根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断，如果选择A，则答案错误。 回溯法1、概念 回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。 回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。 许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。 2、基本思想 在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。（其实回溯法就是对隐式图的深度优先搜索算法）。 若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。 而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。 3、用回溯法解题的一般步骤： （1）针对所给问题，确定问题的解空间：首先应明确定义问题的解空间，问题的解空间应至少包含问题的一个（最优）解。 （2）确定结点的扩展搜索规则 （3）以深度优先方式搜索解空间，并在搜索过程中用剪枝函数避免无效搜索。 4、算法框架（1）问题框架设问题的解是一个n维向量(a1,a2,………,an),约束条件是ai(i=1,2,3,…..,n)之间满足某种条件，记为f(ai)。 （2）非递归回溯框架 1: int a[n],i; 2: 初始化数组a[]; 3: i = 1; 4: while (i&gt;0(有路可走) and (未达到目标)) // 还未回溯到头 5: { 6: if(i &gt; n) // 搜索到叶结点 7: { 8: 搜索到一个解，输出； 9: } 10: else // 处理第i个元素 11: { 12: a[i]第一个可能的值； 13: while(a[i]在不满足约束条件且在搜索空间内) 3）递归的算法框架 回溯法是对解空间的深度优先搜索，在一般情况下使用递归函数来实现回溯法比较简单，其中i为搜索的深度，框架如下： 1: int a[n]; 2: try(int i) 3: { 4: if(i&gt;n) 5: 输出结果; 6: else 7: { 8: for(j = 下界; j &lt;= 上界; j=j+1) // 枚举i所有可能的路径 9: { 10: if(fun(j)) // 满足限界函数和约束条件 11: { 12: a[i] = j; 13: ... // 其他操作 分支限界法一、基本描述 类似于回溯法，也是一种在问题的解空间树T上搜索问题解的算法。但在一般情况下，分支限界法与回溯法的求解目标不同。回溯法的求解目标是找出T中满足约束条件的所有解，而分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束条件的解中找出使某一目标函数值达到极大或极小的解，即在某种意义下的最优解。 （1）分支搜索算法 所谓“分支”就是采用广度优先的策略，依次搜索E-结点的所有分支，也就是所有相邻结点，抛弃不满足约束条件的结点，其余结点加入活结点表。然后从表中选择一个结点作为下一个E-结点，继续搜索。 选择下一个E-结点的方式不同，则会有几种不同的分支搜索方式。 FIFO搜索 LIFO搜索 优先队列式搜索 （2）分支限界搜索算法二、分支限界法的一般过程 由于求解目标不同，导致分支限界法与回溯法在解空间树T上的搜索方式也不相同。回溯法以深度优先的方式搜索解空间树T，而分支限界法则以广度优先或以最小耗费优先的方式搜索解空间树T。 分支限界法的搜索策略是： 在扩展结点处，先生成其所有的儿子结点（分支），然后再从当前的活结点表中选择下一个扩展对点。为了有效地选择下一扩展结点，以加速搜索的进程，在每一活结点处，计算一个函数值（限界），并根据这些已计算出的函数值，从当前活结点表中选择一个最有利的结点作为扩展结点，使搜索朝着解空间树上有最优解的分支推进，以便尽快地找出一个最优解。 分支限界法常以广度优先或以最小耗费（最大效益）优先的方式搜索问题的解空间树。问题的解空间树是表示问题解空间的一棵有序树，常见的有子集树和排列树。在搜索问题的解空间树时，分支限界法与回溯法对当前扩展结点所使用的扩展方式不同。在分支限界法中，每一个活结点只有一次机会成为扩展结点。活结点一旦成为扩展结点，就一次性产生其所有儿子结点。在这些儿子结点中，那些导致不可行解或导致非最优解的儿子结点被舍弃，其余儿子结点被子加入活结点表中。此后，从活结点表中取下一结点成为当前扩展结点，并重复上述结点扩展过程。这个过程一直持续到找到所求的解或活结点表为空时为止。 三、回溯法和分支限界法的一些区别 有一些问题其实无论用回溯法还是分支限界法都可以得到很好的解决，但是另外一些则不然。也许我们需要具体一些的分析——到底何时使用分支限界而何时使用回溯呢？ 回溯法和分支限界法的一些区别： 方法对解空间树的搜索方式 存储结点的常用数据结构 结点存储特性常用应用 回溯法深度优先搜索堆栈活结点的所有可行子结点被遍历后才被从栈中弹出找出满足约束条件的所有解 分支限界法广度优先或最小消耗优先搜索队列、优先队列每个结点只有一次成为活结点的机会找出满足约束条件的一个解或特定意义下的最优解 策略是面向问题的，算法是面向实现的。 一、不同算法策略特点小结1、贪心策略 贪心策略一方面是求解过程比较简单的算法，另一方面它又是对能适用问题的条件要求最严格（即适用范围很小）的算法。 贪心策略解决问题是按一定顺序，在只考虑当前局部信息的情况下，就做出一定的决策，最终得出问题的解。 即：通过局部最优决策能得到全局最优决策 2、递推策略 递推也是由当前问题的逐步解决从而得到整个问题的解，依赖于信息间本身的递推关系，每一步不需要决策参与到算法中，更多用于计算 3、递归策略 递归常常用于分治算法、动态规划算法中。 递归是利用大问题与其子问题间的递推关系来解决问题的。 能采用递归策略的算法一般有以下特征： （1）为求解规模为N的问题，设法将它分解成规模较小的问题，然后从这些小问题的解方便地构造出大问题的解 （2）并且这些规模较小的问题也能采用同样的分解和综合方法，分解成更小的问题，并从这些更小的问题的解构造出规模较大问题的解 （3）特别的，当规模N = 1时，能直接得解 4、枚举策略 对问题所有的解逐一尝试，从而找出问题的真正解。一般用于决策类问题，很难找到大、小规模之间的关系，也不易对问题进行分解。 5、递归回溯策略 类似于枚举，通过尝试遍历问题各个可能解的通路，当发现此路不通时，回溯到上一步继续尝试别的通路。 6、分治策略 分治一般用于较复杂的问题，必须可以逐步被分解为容易解决的独立的子问题，这些子问题解决后，进而将它们的解“合成”，就得到较大问题的解，最终合成为总问题的解。 7、动态规划策略 与贪心类似，也是通过多阶段决策过程来解决问题。每个阶段决策的结果是一个决策结果序列，这个结果序列中，最终哪一个是最优的结果，取决于以后每个阶段的决策，当然每次决策结果序列都必须进行存储。因此是“高效率，高消费的算法”。 同时，它又与递归法类似，当问题不能分解为独立的阶段，却又符合最优化原理时，就可以使用动态规划法，通过递归决策过程，逐步找出子问题的最优解，从而决策出问题的解。 二、算法策略间的关系1、对问题进行分解的算法策略——分治法与动态规划法 共同点： （1）分治法与动态规划法实际上都是递归思想的运用 （2）二者的根本策略都是对问题进行分解，找到大规模与小规模的关系，然后通过解小规模的解，得出大规模的解 不同点：适用于分治法的问题分解成子问题后，各子问题间无公共子子问题，而动态规划法相反。 动态规划法 = 分治算法思想 + 解决子问题间的冗余情况 2、多阶段逐步解决问题的策略——贪心算法、递推法、递归法和动态规划法 贪心算法：每一步都根据策略得到一个结果，并传递到下一步，自顶向下，一步一步地做出贪心决策。 动态规划算法：每一步决策得到的不是一个唯一结果，而是一组中间结果（且这些结果在以后各步可能得到多次引用），只是每一步都使问题的规模逐步缩小，最终得到问题的一个结果。 递推、递归法：注重每一步之间的关系，决策的因素较少。递推法是根据关系从前向后推导，从小规模问题的结论推解出大问题的解。而递归法是根据关系从后向前使大问题转化为小问题，最后同样由小规模问题的解推解出大问题的解。 3、全面逐一尝试、比较——蛮力法、枚举法、递归回溯法蛮力策略（即枚举和递归回溯）： 当问题找不到信息间的相互关系、也不能将问题分解为独立的子问题，就只有把全部解都列出来之后，才能判定和推断出问题的解。 蛮力策略适用于规模不大的问题。 （1）枚举法：实现依赖于循环。所以一个枚举法只针对一个特定问题规模的情况，例如：八重循环嵌套解八皇后问题的算法。 （2）递归回溯法：适用于任意指定规模的情况，例如：递归回溯法解N皇后问题。 4、算法策略的中心思想 用算法策略将解决问题的过程归结为：用算法的基本工具“循环机制和递归机制”实现。 三、算法策略侧重的问题类型一般常遇到的问题分为四类： （1）判定性问题：可用递推法、递归法 （2）计算问题：可用递推法、递归法 （3）最优化问题：贪心算法、分治法、动态规划法、枚举法 （4）构造性问题：贪心算法、分治法、广度优先搜索、深度优先搜索 好]]></content>
      <categories>
        <category>笔记</category>
        <category>数据结构与算法</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>转载笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3爬取拉勾网职位信息]]></title>
    <url>%2F2018%2F05%2F05%2Fpython3%E7%88%AC%E5%8F%96%E6%8B%89%E5%8B%BE%E7%BD%91%E8%81%8C%E4%BD%8D%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[爬取拉勾网的最大障碍：普通模块难以实现翻页爬取。自己加了参数page，经过抓包查询之后也达不到我的理想要求。 没办法了，只好用selenium模块结合浏览器来实现边翻页边爬取了。 实际上比较浪费系统资源，这种情况不得已还是尽量别用的好。 在此记录下主要的过程，包括实现的代码。 还是要说明一下：不懂的地方还是需要自己去查询了解，代码不过就是几个模块的知识运用罢了。 前提启动Chrome**webdriver插件，之后复制其所在地址，加入代码中启动selenium模块程序。 启动插件。 本机此插件所在的目录位置。 分析过程经过简单的分析，发现页面的切换的同时URL没有任何的改变(这就是我为何要用selenium来爬取的原因！)： 我们的目标是，点击在此符合条件的发布公司链接，进入招聘信息详细的界面爬取详细的所有需要的信息： 一一进入进行爬取。 进入之后详细的招聘信息页面。 那么思路一下就出来了：用selenium模块实现翻页的功能，并且返回对应页面的源代码，并且一一进行分析提取即可。 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990"""函数目标：翻页爬取拉勾网的职位信息编写时间：2018-05-05"""from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.support.wait import WebDriverWaitfrom pyquery import PyQuery as pqfrom urllib.parse import quoteimport requestsimport reimport time # 启动对象驱动，并且设置预期的等待时间browser = webdriver.Chrome('/Users/junjieliu/Downloads/webdirver小插件/chromedriver')wait = WebDriverWait(browser, 10) def page_content(pages): """ 返回每一页的页面源代码，顾名知义，从URL中可知许多的筛选信息了，可自行选择， 在此仅以职位关键词职位作为输入。 """ print('-' * 10 + '正在爬取第' + str(pages) + '页的内容' + '.' * 6) keyword = '数据分析师' # 职位关键词 url = 'https://www.lagou.com/jobs/list_' + quote(keyword) + '?' + 'px=default&amp;gx=实习&amp;gj=&amp;xl=本科&amp;isSchoolJob=1&amp;city=全国#filterBox' browser.get(url) if pages &gt; 1: # 如果页面数大于1页则启用自动翻页 next_botton = wait.until( EC.element_to_be_clickable((By.CSS_SELECTOR, '#s_position_list &gt; div.item_con_pager &gt; div &gt; span.pager_next'))) next_botton.click() # 指定要爬取区域,非必须要写 wait.until( EC.presence_of_element_located((By.CSS_SELECTOR, '#s_position_list &gt; ul &gt; li.con_list_item'))) print('爬取此页源码成功！以下是本页一系列相关的内容：') informations_save() def informations_save(): """ 一一进入内部URL，爬取详细的招聘信息！ """ source_code = browser.page_source doc = pq(source_code) url = re.findall(r'class="position_link".*?href="(.*?)"', source_code, re.S) # @UndefinedVariable for i in range(0, len(url)): header = &#123; 'Connection': 'keep-alive', 'Host': 'www.lagou.com', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36' &#125; response = requests.get(url=url[i], headers=header) response.encoding = 'utf-8' doc1 = pq(response.text) infor = &#123; 'company':doc1.find('body &gt; div.position-head &gt; div &gt; div.position-content-l &gt; div &gt; div.company').text(), # 公司名称 'infor_url':doc1.find('#job_company &gt; dt &gt; a').attr('href'), # 此公司详细介绍网站 'position':doc1.find('body &gt; div.position-head &gt; div &gt; div.position-content-l &gt; div &gt; span.name').text(), # 职位 'salary':doc1.find('body &gt; div.position-head &gt; div &gt; div.position-content-l &gt; dd &gt; p:nth-child(1) &gt; span.salary').text(), # 工资 'locale':doc1.find('#job_detail &gt; dd.job-address.clearfix &gt; input[type="hidden"]:nth-child(6)').text().replace('/', ''), # 地点 'place':doc1.find('#job_detail &gt; dd.job-address.clearfix &gt; div.work_addr').text(), # 具体位置 'required':doc1.find('div.position-content-l &gt; dd &gt; p:nth-child(1) &gt; span:nth-child(3)').text().replace('/', ''), # 经验要求 'education':doc1.find('div.position-content-l &gt; dd &gt; p:nth-child(1) &gt; span:nth-child(4)').text().replace('/', ''), # 学历要求 'job_nature':doc1.find('div.position-content-l &gt; dd &gt; p:nth-child(1) &gt; span:nth-child(5)').text().replace('/', ''), # 工作性质 'attract':doc1.find('#job_detail &gt; dd.job-advantage').text().replace('\n', ' '), # 工作诱惑 'describe':doc1.find('#job_detail &gt; dd.job_bt').text().replace('\n', ' ') # 工作描述 &#125; print(infor) if __name__ == "__main__": pages = 6 # 总的页面数，从网页第一面就可知了，6是测试用的数字页码 for i in range(1, pages + 1): page_content(i) time.sleep(20) 最后我选择将爬取的内容保存至一个.txt文件下。 效果 运行之后的效果，有些爬取不了，明明源代码都没什么变化… 最后 这个代码的模型并不能爬取页面上对应的全部内容，这个我也是有点疑惑。 有时会跳到需要登录的界面，重新来几次就行了，总有一次能爬取。 有不懂的知识可参考：https://cuiqingcai.com/5630.html 以及相关的模块的官网亦可。]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构与算法书籍资源共享]]></title>
    <url>%2F2018%2F05%2F04%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%A6%E7%B1%8D%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[计算机程序设计艺术(卷1～卷四全)： https://pan.baidu.com/s/1922E16LZR0iXZHZQCgsbLg 算法导论(第三版)： https://pan.baidu.com/s/1XqAeeJx803rcVCx7QMA62g 以上资源来于网络，感谢默默分享的人们！ 还有一些其他的金典书籍，我都没怎么看啊..]]></content>
      <categories>
        <category>资源分享</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>资源分享</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络知识总结]]></title>
    <url>%2F2018%2F05%2F02%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[计算机网络也是计算机基础重要的一部分。 本来打算总结下关于计算机网络基础知识，发现下面的这些课件总结的已经非常好了，所以在此分享，我就不说多了… 下载课件：https://pan.baidu.com/s/1uodpU6E8n050QyazgdLXVw 说明： 课件来源：《数据通信与计算机网络》 还有以下这个： 下载课件：https://pan.baidu.com/s/1oCHb3GkybHn7vI-cvMCJIA]]></content>
      <categories>
        <category>资源分享</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>资源分享</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我对学习计算机基础的一些心得见解]]></title>
    <url>%2F2018%2F04%2F29%2F%E6%88%91%E5%AF%B9%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97%E8%A7%81%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[最近总是遇到了许多的瓶颈…即感觉认识的知道的太少了。 在前些天看到了一些关于python的优化内容之后，加上之前用python也有一段时间了，突然的感觉到一些基础细节才是最重要的，我意识到了这往往可能就是人与人技术之间的一个分水岭，也往往是突破瓶颈关键点，也往往能决定一个人技术的所在点。基础细节知识是能决定一个人能走多远的 平时在写程序时不应满足于功能的实现，更加应当注意那些可优化的细节问题，就好比一个算法的时间复杂度与空间复杂度一样的，写的每一个程序(无论那种编程语言)均有可优化的最优解选择。在我平时因为涉及的数据规模不大，这种问题目前是看不出来的，如果运用到的是一个数据规模大的问题上，优化必然是重要的，不可或缺的。 平时想问题总是感觉能联想到的知识太少，回过头来看，发现自己对计算机的认识本来也不够全面(注意是全面！而非透彻！)。这往往也限制了我许多的想象，从而造成了我的瓶颈突出明显。 说了这么多，只是想说一个问题：计算机基础知识(包括编程基础知识)是能决定一个人技术的高度的。至少我现在就有这种感觉，写一个程序不应满足于功能的实现，更应探索最优解的选择。这往往就是技术好与坏的一个区分标准吧。 关于如何学习以上说的基础知识，我有一些见解在此想要说明一下。 知识尽量要了解全面，不能为了速度而一知半解的，那样只会浪费时间，最后还是什么都不知道。 有些知识可能会引起我们的好奇，想要进一步理解透彻(彻彻底底)，但是这其中却是有太多的知识链关联着的…这点我深有体会。如果顺着知识链步步了解，我们的确也能学习到许多的知识，但是最后会发现其实这些在我们实际需要中根本没有多大的作用，仅仅当时作为一种科普了，当然现在学习到的知识也是以后我们技术的一种铺垫，如果实在有兴趣就当我没说，兴趣是学习一种知识最好的引导。 有些是需要理解透彻的，有些(大部分)可能仅仅是需要了解一下就好的。 根据目前的需求来进行学习也是一种好的驱动力。 一些必要的基础知识是需要了解的，比如学习了计算机概论，那一般以后买电脑时就会有自己的一些见解了。学习了数据结构与算法基础之后，编程时就不会仅仅以达到目的而“不择手段”编写程序了，因为再学习了这些基础知识之后我们脑子里必然会有一些规则“约束”了。 最后，我还是想说，对于底层的电路什么的那种我想我是不愿也是不情愿接触的…]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3爬虫与GUI：一个简易的搜索实用小工具]]></title>
    <url>%2F2018%2F04%2F28%2Fpython3%E7%88%AC%E8%99%AB%E4%B8%8EGUI%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E6%90%9C%E7%B4%A2%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[平时在获取爬虫之后，会不满足于仅仅得到了结果，而是想经过一个交互式的界面来进一步的完善，获取更多的功能，从而可以更好的展示数据。 下面运用了python的pyqt5库来进行GUI的设计。 用pyqt5这个库实现简单的界面化有两种方法： 编写代码(一般为几十行代码足够了)。 结合QT Creator来进行界面设计，加入信号与槽的机制，槽这一方面还是需要编写相应的几行代码。 下面一一进行简单的介绍。 代码编写方式假设我已经利用爬虫写出来了百度百科，维基百科的接口的代码程序，接下来仅仅需要设计好界面，再者之后利用好信号与槽的机制将接口代码与界面相连接即可完成一个简易的搜索实用小工具了。 在此简单理解一下信号与槽机制以及所谓的事件机制：比如我们有一个按钮，点击此按钮便弹出一个写有‘Hello’的窗口，点击到弹出新窗口的这一过程，有个响应的过程，我们可以理解为发送信号(点击按钮)，之后有弹出新窗口(响应),而这一系列过程包括弹出的内容我们可称之为事件。 关于学习pyqt5库的中文教程地址：https://maicss.gitbooks.io/pyqt5/content/事件和信号.html 从头开始看一下，之后再看这一篇大概就知道简单的交互式界面是如何生成的了。 简单描述一下思路：先设计布局好界面(包括定义好相关按钮的快捷键)，写入爬虫代码，信号与槽机制的连接设定，即完成了此次的任务。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108import sysimport urllib.request from bs4 import BeautifulSoupimport refrom urllib.parse import quote from PyQt5.QtWidgets import (QPushButton, QWidget, QLabel, QLineEdit, QTextEdit, QGridLayout, QApplication, QComboBox)from PyQt5.QtCore import QCoreApplicationclass Example(QWidget): def __init__(self): ''' 初始化 ''' super().__init__() self.initUI() def baidu_baike(self, entry): ''' 百度百科词条内容爬取代码 entry：词条 因为太懒了..所以爬取的代码没有自己写.. ''' url = 'https://baike.baidu.com/item/' + urllib.parse.quote(entry) html = urllib.request.urlopen(url) content = html.read().decode('utf-8') html.close() # lxml器进行解析 soup = BeautifulSoup(content, "lxml") text = soup.find('div', class_="lemma-summary").children # 簡介部分 intro_text = '' # 数据爬取 for x in text: word = re.sub(re.compile(r"&lt;(.+?)&gt;"), '', str(x)) words = re.sub(re.compile(r"\[(.+?)\]"), '', word) intro_text += words return intro_text # 返回文本(str格式) def intro_final(self, entry): ''' 异常处理 ''' try: return self.baidu_baike(entry) except AttributeError: return "词条定义不够清晰/词条目前未成立！" def initUI(self): # GUI布局及控件放置 search_label = QLabel("请输入搜索词条：") search_item = QLineEdit() combo = QComboBox(self) combo.addItem("百度百科") combo.addItem("维基百科(不可用)") btn1 = QPushButton("开始搜索", self) # shortcut快捷键的设置 btn1.setShortcut('return') btn2 = QPushButton("清空", self) btn2.setShortcut('esc') btn3 = QPushButton('退出', self) btn3.setShortcut('command+q') btn3.setShortcut('Ctrl+q') btn3.clicked.connect(QCoreApplication.instance().quit) search_result = QTextEdit() grid = QGridLayout() grid.setSpacing(5) grid.addWidget(search_label, 1, 0) grid.addWidget(btn3, 2, 1) grid.addWidget(search_item, 2, 0) grid.addWidget(btn1, 3, 0) grid.addWidget(btn2, 3, 1) grid.addWidget(search_result, 4, 0, 5 , 0) self.setLayout(grid) # 信号机制的设置，定义为一个方法作为反映的对象，这里很好理解 def search(): ''' 搜索信号反映的响应 ''' search_result.setText(self.intro_final(search_item.text())) btn1.clicked.connect(search) def clear(): ''' 清空信号反映的响应 ''' search_result.setText("") search_item.setText("") btn2.clicked.connect(clear) # 设置窗口大小 self.setGeometry(500, 150, 600, 500) self.setWindowTitle("搜索引擎GUI") self.show()if __name__ == "__main__": app = QApplication(sys.argv) ex = Example() sys.exit(app.exec_()) 以上有不懂的地方均可在pyqt5中文教程中找到思路。 效果图 结合QT Creator的界面设计结合QT Creator的界面，我们肯定会想到：那当我们进行界面设计完成之后，就算是转化为.py的python脚本，那我们又该如何定义信号与槽的机制以及事件的机制呢？ 下面的解说就是解决这个疑惑的。 第一步当然是去官网下载好软件了。 参考此篇文章：https://blog.csdn.net/win_turn/article/details/50465127 话不多说了，下载的时候其实有一个坑，即要记得下载有调试的那个版本，否则在设计界面时无法得到运行。 创建文件并且设计在这里仅仅是为了达到解说的目的所以简单设计一下就好，说说设计下面的思路：定义一个按钮(名为确定)，一个输入框，一个输出框，达到的目的是从输入框输入文字，按下确定按钮，输出框中输出与输入框一致的内容。 创建新的文件过程如图所示： 总之就是如上图一路点击下去即可。 之后会发现有这样的界面出现： 这个mainwindow.ui不说就能轻易知道就是用它来进行界面设计的。双击它即可进入设计界面(如图1)，当然可选择Qt Designer进行设计(对其右键可弹出选项，如图2)。 图1 图2 为了尽快达到写完的目的，我简单的来进行一下示范… 先在界面中，设计一个按钮： 然后添加下面两种组件： 定义信号与槽在这之前先将设计好的转为.pypython脚本文件。cd到相应的文件的目录下(即上面的mainwindow.ui所在的目录。注意，此步非常重要！)利用命令行：pyuic5 -o mainwindow.py mainwindow.ui 关于此命令行具体可参考：https://blog.csdn.net/yingmutongxue/article/details/8487348(在此需要注意的是，我使用的是pyqt5，所以对应的命令行应当是pyuic5开头，若是pyqt4，则为pyuic4开头了。) 这样在本目录下即可找到转为后的python文件了。 再者，我们需要在这个文件实现上面说的思路，即相应的信号与槽机制的代码。因为时间问题，就不在此实现了(是真的写不下去了…)。 在完成之后，我们直接将此调入eclipse的工程目录下(我用的是eclipse)，之后我们直接调用此文件即可。 123456789101112131415import sysfrom PyQt5.QtWidgets import QApplication , QMainWindowfrom mainwindow import *if __name__ == '__main__':# 主函数 app = QtWidgets.QApplication(sys.argv) MainWindow = QtWidgets.QMainWindow() ui = Ui_MainWindow() ui.setupUi(MainWindow) MainWindow.show() sys.exit(app.exec_()) 这样即可完成结合软件设计界面，并在python中运行的一条龙服务了… 其实在Qt creator中就有信号与槽机制以及快捷键的设置了，这个可参考：https://wizardforcel.gitbooks.io/qt-beginning/content/60.html(全面介绍了) 简单认识一下设计界面上的那些按钮功能(网上的图，出处忘记了…) 最后唉..突然感觉直接写代码都还要方便多了…结合软件设计搞的时间浪费的还要多… 参考： https://blog.csdn.net/jclian91/article/details/77407723 https://maicss.gitbooks.io/pyqt5/content/介绍.html(以上所有内容的拼接均可根据此pyqt5库中文教程来进行理解学习，还是一句话，要多动脑多动手实践。) https://cuiqingcai.com/5551.html（pyquery的使用教程） 关于将python文件打包生成app的工具库： py2app:.py –&gt; .dmg py2exe:.py –&gt; .exe 关于css选择器等其他内容的快速获取(基于chrome浏览器)： 看上方的动图，选择完之后粘贴即可得出对应的内容(可适当删除中间字段而不影响达到目的)，当然最好学会一点相关的内容，其实也不难上手。]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
        <category>PyQt5</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
        <tag>PyQt5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Mac的快捷键及fn键设置]]></title>
    <url>%2F2018%2F04%2F27%2F%E5%85%B3%E4%BA%8EMac%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8Afn%E9%94%AE%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[最近因为需要，就花了点时间看了一下。本文用于记录下一些常用的在Mac下的一些设置。 快捷键关于在认识Macbook的一些快捷键时，进入步骤：系统偏好设置 –&gt; 键盘–&gt;快捷键–&gt; 左边栏。一个一个都看看，发现快捷键系统的都在。 当然可根据需要自行更改。 fn健的设置按下fn健可显示F1～F12的按键，关于如何设置在特定的软件打开时无需按此就显示F1～F12的按键：系统偏好设置 –&gt; 键盘–&gt;快捷键–&gt;(fn)功能键–&gt;添加软件即可。在这之后会发现打开相应的软件之后，无需按下fn健即可显示出F1～F12的按键了。 关于设置文件的默认打开方式例子：右键打开一个文件，点击显示简介–&gt;打开方式–&gt;选择好想要默认打开用的软件–&gt;全部更改。再次打开此类型的文件均以选定的软件打开显示。 关闭软件通知有时用的破解软件经常提醒要更新…系统偏好设置 –&gt; 通知。里面设置停止通知即可。 最后如果有时发现没有相关的内容，可先重新启动，再次进行操作。不仅此类型的问题需要重新启动，只要是发现很系统奇怪跟往常不一致时均可通过重新启动来解决。 以后有需要用的上的再补上。 主要资料可参考Apple官网的说明即可。]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Jupyter Notebook的简单使用]]></title>
    <url>%2F2018%2F04%2F21%2F%E5%85%B3%E4%BA%8EJupyter-Notebook%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[关于Jupyter Notebook的介绍就不在此多说了。 官网教程： https://jupyter-notebook.readthedocs.io/en/stable/notebook.html 直接开始介绍整个流程好了。 先下载Anaconda，里面有包含了现成的Jupyter Notebook，之后我们打开Anaconda客户端即可直接使用Jupyter Notebook了。 Anaconda官网：https://www.anaconda.com/download/#macos 其中有两个版本，选择需要的下载的版本与完成之后打开的Jupyter Notebook中的python版本是一致的。 打开客户端，进入Jupyter Notebook： 在Jupyter Notebook中新建一个文本： 在创建了一个脚本文件之后的界面上的小图标各有不同的功能，可以自己点击一下就知道是怎么回事了，再不然可结合文档来进行操作即可。再者接下来就是根据个人的需要来进行编码了，更多的功能暂时用不到，可参考上面的官网教程。 关于Ipython教程可参考：https://itacey.gitbooks.io/learning_ipython/content/第一章.html 关于在Mac中使用Jupyter Notebook编码时的快捷键可参考：https://www.jianshu.com/p/20f6a77dd23c]]></content>
      <categories>
        <category>软件使用</category>
        <category>Python</category>
        <category>Anaconda</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建Django开发环境]]></title>
    <url>%2F2018%2F04%2F19%2F%E6%90%AD%E5%BB%BADjango%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[老早就想将一些数据库里的数据来进行交互式的实现了，之前看了有主要的两种方法： 一是pyQt5这个库，结合Qt creator来进行完成。 另外就是通过网页形式来进行交互式的实现了。 在接触了前者之后发现学习的时间成本比较高一些，所以打算选择后者了… 安装在终端使用命令行：pip3 install Django 默认python3进行。python2:pip install Django。两者均会下载Django库的最新版本，亦可指定下载那个版本。 测试安装：在编译器中： 1234567891011121314 import django # @UnresolvedImport if __name__ == '__main__': print(django.get_version())``` &gt; **在*eclipse*中会提示导入Django库找不到，但是运行是可以成功的，加上# @UnresolvedImport 让错误提示不再提示。**在终端，先打开*python*的编译环境，依次输入：```python import django print(django.get_version()) 以上两者均会输出下载的Django版本号。 测试Django运行项目建立cd 至编译器或者是IDE的开发环境的目录下，使用创建项目命令：django-admin startproject mysite（其中的mysite是项目名称）： 创建项目成功之后刷新在编译器的目录，我的是eclipse，可看到项目目录出来了： 测试在上面的基础下cd至新建的项目之下，启动主文件：python manage.py runserver，打开链接http://127.0.0.1:8000/ 出现了Django成功运行的网页： 最后 在eclipse中的导入Django提示错误，实际上运行无障碍。 详细可参考： https://docs.djangoproject.com/en/2.0/intro/tutorial01/ https://www.w3cschool.cn/django/dl5b8ozt.html]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Parallels Desktop13的简单使用]]></title>
    <url>%2F2018%2F04%2F17%2F%E5%85%B3%E4%BA%8EParallels-Desktop13%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Parallels Desktop13破解版的下载以及简单的操作可见：https://blog.csdn.net/weixin_41000111/article/details/79428402 本文仅仅是做一些补充。 关于新建一个虚拟机比如已经有了一个win系统的虚拟机，想建一个Linux的虚拟机。如下图所示，打开在右上角的Parallels Desktop的小图标，点击新建..即可。 之后的安装步骤会有点不一致，不过容易上手。 关于Parallels Desktop13的扩展功能打开在右上角的Parallels Desktop的小图标中的偏好设置，如下图所示下载Toolbox。打开之后发现会有许多的小工具，比如下方的视频下载工具可下载YouTube上的视频文件。更多的新功能可见官网：https://www.parallels.com/products/desktop/ 官网的介绍视频中有相关的详细介绍。 最后说说体验吧。与我之前用过的虚拟机软件VirtualBox相较，Parallels Desktop明显的运行起来比前者更为流畅，更为人性化一些，并且功能更为强大。]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Parallels Desktop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于在eclipse中运行scrapy项目]]></title>
    <url>%2F2018%2F04%2F13%2F%E5%85%B3%E4%BA%8E%E5%9C%A8eclipse%E4%B8%AD%E8%BF%90%E8%A1%8Cscrapy%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[关于在eclipse中运行爬虫scrapy框架的项目介绍如下。 scrapy官方文档：http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/shell.html 首先打开终端将cd至eclipse目录下的（即eclipse-workspace），使用命令行scrapy startproject tutorial（其中的tutorial是自由选择的），之后会生成一个目录，将其目录移至一个python工程下。 如上图。 在spider包下建立一个脚本文件（如上图我的那个first文件，名字随意），是用来写爬虫程序用的。之后在tutorial包下建立一个名为cmdline的脚本文件（名字随意）。 下面为了直接达到运行成功的目的，贴上测试用的代码。 first.py中的代码： 123456789101112131415import scrapyclass DmozSpider(scrapy.Spider): name = "first" #此处很重要 allowed_domains = ["dmoz.org"] start_urls = [ "http://www.dmoz.org/Computers/Programming/Languages/Python/Books/", "http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/" ] def parse(self, response): filename = response.url.split("/")[-2] with open(filename, 'wb') as f: f.write(response.body) cmdline.py中的代码： 12345from scrapy.cmdline import executeif __name__ == '__main__': #第三个参数就是上方的first文件名！其他两个参数如下正常 execute(argv=['scrapy', 'crawl', 'first']) items.py中的代码： import scrapy class TutorialItem(scrapy.Item): # define the fields for your item here like: # name = scrapy.Field() title = scrapy.Field() link = scrapy.Field() desc = scrapy.Field() 这个文件是与first文件有直接联系的。可参考官方文档介绍。 运行接下来直接运行cmdline.py可得出结果： 配置调试直接看下面的图上解说吧。 接下来点击debug。 最终两者均可达到输出的效果！ 参考： https://blog.csdn.net/otengyue/article/details/48065841 http://www.cnblogs.com/v-BigdoG-v/p/7393601.html]]></content>
      <categories>
        <category>Python</category>
        <category>Eclispe</category>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Eclispe</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于eclipse的风格与主题]]></title>
    <url>%2F2018%2F04%2F13%2F%E5%85%B3%E4%BA%8Eeclipse%E7%9A%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[eclipse的界面主题更换关于我的eclipse的界面主题更换（目前为eclipse Oxygen版本），在内置中已经可以作为一种选择了。 具体看图所示即可： 可供的选择有三种，其中的dark类型是比较护眼的，均可试试。 实际的dark展示： eclipse代码风格更换可参考此处：https://blog.csdn.net/zhouchangshi/article/details/37901519 其中已经有了许多的并且详细的介绍了。 其他 关于更换编译处的字体大小以及字体选择（如图）: 关于控制台的字体更改以及选择（如图）: 参考： https://jingyan.baidu.com/article/f96699bb9442f3894e3c1b15.html https://blog.csdn.net/zhouchangshi/article/details/37901519]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Eclispe</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Eclispe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3爬虫：爬取淘宝商品信息的两种方法]]></title>
    <url>%2F2018%2F04%2F08%2Fpython3%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E6%B7%98%E5%AE%9D%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[爬取淘宝信息： 1，可用selenium模块与driver Chrome插件自动化模拟爬取。 2， 进行抓包爬取。 下面一一进行介绍并且贴出实现代码。但是在此必须说明一下，因为时间有限，相关模块不懂的还需要自行搜索，在此不做教程解说，只提供分析思路与代码实现过程。 学习博客推荐：https://cuiqingcai.com，实际上我也是根据此博客学习到了一些知识，也是我参考学习的唯一博客。 自动化模拟爬取python爬虫的selenium模块是一个可以实现模拟浏览器相关动作，并且可跳过JavaScript动态渲染直接返回其网页源代码的一个自动化测试工具。如下我们需要爬取关键词为MacBook Pro的商品信息，可用它来实现自动翻页并且返回每一页的源代码直接进行相关信息的爬取。 分析过程下面直接进行分析过程。 首先打开淘宝主页：https://www.taobao.com ，进入其中输入关键词观察一下页面，可以看到下面翻页的一些跳转功能。（以下使用的都是Chrome自带的开发者工具） 因为要实现自动翻页的过程，则我们需要查看有关翻页这个功能按钮的源代码是什么样子。其中涉及到了输入框，然后点击旁边的确定按钮。 输入框对应的源代码。 确定按钮对应的源代码。 在知道了以上的一些按钮信息之后我们还需要知道翻页之后目前对应的页数在哪，以便在对应的页数正确之后，可以得到对应页面的源代码，这样可直接运用一些相关的模块进行节点锁定爬取即可。 确定页数码的源代码。 页面上商品信息的html源代码。 为什么要这样分析每一个相关功能的源代码？因为在selenium模块中可以实现自动化的过程，但是需要指定页面上相关的源代码才行，对于selenium来说等于开放了这个功能的接口一样。 思路分析：将要用相关模块挖掘源代码信息做为一个函数，将要爬取的页面源代码做为一个函数，其中实现自动翻页功能，即若是大于1，自动跳到其页面并且返回其页源代码，否则返回第一页页面的源代码。最后代入前者挖掘的函数。 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889''' 函数目标： 利用selenium的自动翻页进行爬去相关的内容 编写时间： 2018-04-07''' from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.support.wait import WebDriverWaitfrom urllib.parse import quotefrom pyquery import PyQuery as pq browser = webdriver.Chrome('/Users/junjieliu/Downloads/小插件/chromedriver')wait = WebDriverWait(browser, 10)keys = 'macbookpro'''' 函数说明：实现自动化翻页。 仅仅当需要时进行翻页的选项 '''def index_source(page): print('正在爬取第' + str(page) + '页内容..' + '\n' + '.' * 15) url = 'https://s.taobao.com/search?q=' + quote(keys) browser.get(url) # 果然页数大于1则自动翻页功能启动 if page &gt; 1: # 输入框定位 input = wait.until( EC.presence_of_element_located((By.CSS_SELECTOR, '#mainsrp-pager div.form &gt; input.input.J_Input'))) # 确定按钮定位 button = wait.until( EC.element_to_be_clickable((By.CSS_SELECTOR, '#mainsrp-pager div.form &gt; span.btn.J_Submit'))) # 清理，输入，点击一体化 input.clear() input.send_keys(page) button.click() ''' 获取源代码，传入爬取数据的函数 获取源代码过程： 第一步确定为在那一页 第二步确定爬取内容 ''' wait.until( EC.text_to_be_present_in_element((By.CSS_SELECTOR, '#mainsrp-pager li.item.active &gt; span.num'), str(page))) wait.until( EC.presence_of_element_located((By.CSS_SELECTOR, '.m-itemlist .items .item'))) print('获取本页源码成功，以下为相关的信息：' + '\n') get_product() ''' 函数说明： 用pyquery爬取其中的商品内容 '''def get_product(): html_source = browser.page_source doc = pq(html_source) items = doc('#mainsrp-itemlist .items .item').items() ''' 以下匹配内容可查看网页源代码可知 ''' for item in items: product_infos = &#123; 'img_url':'https:' + item.find('.pic .img').attr('data-src'), # 店铺主图片地址 'product_desc':item.find('.pic .img').attr('alt'), # 商品描述 'price':item.find('.price').text().replace('\n', ''), # 价格 'people':item.find('.deal-cnt').text(), # 购买人数 'shop_url':'https:' + item.find('.shop .shopname').attr('href'), # 店铺信息 'shop_name':item.find('.shop').text(), # 店铺名称 'shop_location':item.find('.location').text() # 店铺所在地 &#125; print(product_infos)if __name__ == '__main__': pages = 100 # 根据页面分析可知总共有100页的信息 for num in range(1, pages + 1): index_source(num) 当然还可以进行正则表达式的匹配来完成爬取，因为需要时间来测试相关的表达式，所以推荐用pyquery这个库来完成爬取工作，相比于使用过的beautiful模块以及正则表达式，我感觉轻松了不少。 抓包爬取以下的抓包是利用的Chrome浏览器完成的，在这之前说了，因为时间关系，关于抓包是什么就不在此做详细介绍了…相信你看了我下面的分析过程会隐约明白一点。 分析过程打开淘宝主页，输入关键词，在第一页上打开Chrome自带的开发者工具，这样就可以看到第一页的源代码信息了。以下图过程可以看到我们在第一页抓到的相关的淘宝API的数据包。里面有相关的商品信息，均为json格式。 其中的XHR格式不懂可参考此篇文章：https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest 浏览器新建一个标签页，打开上面的那个地址看看有什么。 经过一系列的测试发现了其中的那个参数bcoffset=是跳转的决定点，更改其值可得到不同的信息。这样我们进行思路分析就一目了然了。 思路分析：传入上面的说的API的URL，根据上面的那个参数的值更改，返回其中的文档信息，即可爬取到商品信息。 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950''' 函数说明： 利用抓包返回的信息直接爬取商品信息 编写时间： 2018-04-08''' import requestsimport reif __name__ == '__main__': # 设定爬取100页，实际上还要多... pages = 100 for num in range(1, pages + 1): print('开始爬取第' + str(num) + '页内容...' + '\n' + '.' * 10) url = 'https://s.taobao.com/api?_ksTS=1523191565870_226&amp;callback=jsonp227&amp;ajax=true&amp;m=customized&amp;stats_click=search_radio_all:1&amp;q=macbookpro&amp;p4ppushleft=1,48&amp;ntoffset=4&amp;s=36&amp;imgfile=&amp;initiative_id=staobaoz_20180408&amp;bcoffset=' + str(num) + '&amp;js=1&amp;ie=utf8&amp;rn=5bd3f39c2ca57f21abe4db8ca60ee49f' # 代理信息 header = &#123; 'cookie': 't=da97f7b09403e3340cd6d50780a9385e; cna=PoshExqPgw0CAQG9KdLV29qM; hng=CN%7Czh-CN%7CCNY%7C156; thw=cn; enc=MuF%2FWOzFnau5EcbgcPck31M%2FMhER8txA4ZnjdZI2Dt8xzHdAr%2FN4f0OsOD%2FUcrNpOZWIfEG0GSbPQ8C4U%2BU70A%3D%3D; mt=ci%3D-1_1; cookie2=1f17bf1dfa8b6cf01c17d0fe7306c672; v=0; _tb_token_=eaefe3a15f0bf; JSESSIONID=0BC0D7637EFFD50CA56F8A8F4E451813; isg=BD09zFTCO5bo0p_z6P-VaFHGTJ_3cnEiA2cTwf-D2RRsNl5oySop_Xqg5Wpwlonk', 'referer': 'https://s.taobao.com/search?q=macbookpro&amp;imgfile=&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20180408&amp;ie=utf8&amp;bcoffset=4&amp;p4ppushleft=1%2C48&amp;ntoffset=4&amp;s=0', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36', 'x-requested-with': 'XMLHttpRequest'&#125; responed = requests.get(url=url, headers=header) # 指定编码格式 responed.encoding = 'utf-8' re_text = responed.text ''' 进入数据清洗与筛选阶段 因为转化json格式始终失败...所以改用正则表达式来进行匹配 ''' print('获取源代码成功，以下为相关商品的信息：') target = re.findall(r'"raw_title":"(.*?)".*?"pic_url":"(.*?)".*?"view_price":"(.*?)".*?"item_loc":"(.*?)".*?"view_sales":"(.*?)".*?"user_id":"(.*?)".*?"nick":"(.*?)"', re_text, re.S) # @UndefinedVariable for each in target: product = &#123; 'shop_title':each[0], # 店铺主题 'pic_url':'https:' + each[1], # 店铺图片地址 'price':each[2], # 价格 'sales_people':each[4], # 购买人数 'shop_name':each[6], # 店铺名称 'loc':each[3], # 店铺所在地 'shop_url':'https://store.taobao.com/shop/view_shop.htm?user_number_id=' + each[5] # 店铺URL地址 &#125; print(product) 最后第二种方法期间原本以为可以先转化为json格式来进行处理，没想到发生了json.decoder.JSONDecodeError:的错误，结果改用正则表达式进行文本的挖掘，效率也是无形中得到了提升…在此我推荐用正则表达式来处理json格式的文档，这样在绝大多数情况下可能会有更高的效率！ 爬取到的数据可用来进行一些数据分析等等。有时想尝试用各种方法去爬取，但是因为学的东西真的多，所以就不一一尝试了，尽量使用简便的方法…不懂的朋友还需要多多学习，利用好搜索引擎！当然看书也是必须的。]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于记录Chromedriver的selenium.common.exceptions.WebDriverException: Message: 'chromedriver ' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home]]></title>
    <url>%2F2018%2F04%2F05%2F%E5%85%B3%E4%BA%8E%E8%AE%B0%E5%BD%95Chromedriver%E7%9A%84selenium-common-exceptions-WebDriverException-Message-chromedriver-executable-needs-to-be-in-PATH-Please-see-https-sites-google-com-a-chromium-org-chromedriver-home%2F</url>
    <content type="text"><![CDATA[最近学习一些python爬虫的框架，用selenium与Chromedriver插件结合Chrome浏览器来爬去网页源数据。 发现了如题的错误信息： selenium.common.exceptions.WebDriverException: Message: ‘chromedriver ‘ executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home 在已配置好系统环境的前提下，用如下代码指定位置，或者是将Chromedriver插件放在工程文件下，均得到了如上的错误信息。 from selenium import webdriver browser = webdriver.Chrome(&apos;/Users/junjieliu/Downloads/小插件/chromedriver&apos;) 解决方案如下操作，先将插件打开（即表示打开运行了，在需要使用时应当一直开着），跳出来了其所在位置，将其位置复制再运行上面的代码，发现跳出来了一个Chrome浏览器的空白页面，这表示已经成功了！ 成功的页面。]]></content>
      <categories>
        <category>笔记</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>网络爬虫</tag>
        <tag>Chromedriver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3爬取豆瓣Top250电影信息]]></title>
    <url>%2F2018%2F04%2F03%2Fpython3%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3Top250%E7%94%B5%E5%BD%B1%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[以下是通过正则表达式爬取的猫眼电影以及豆瓣电影的相关的电影信息的代码过程。 爬取猫眼电影分析打开Chrome的调试工具，可发现相关的信息都在，并且以翻页的形式来得到更多的电影信息。 我们可通过其爬取需要的信息，利用正则表达式来进行文本的挖掘。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647''' 函数目标： 爬取猫眼电影的top100信息 编写时间： 2018-03-28 ''''''import requestsimport reimport jsonif __name__ == '__main__': print('猫眼电影Top100信息如下：') #循环10次，得出页面上的Top100的电影信息 for i in range(0, 10): url = "http://maoyan.com/board/4?" header = &#123; 'Host':'maoyan.com', 'Referer':'http://maoyan.com/board/4?offset=20', 'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'&#125; paramters = &#123; 'offset': i * 10&#125; request_tasget = requests.get(url=url, headers=header, params=paramters) request_tasget.encoding = 'utf-8' # 实际上应该考虑考虑网的问题...连不上就一般没有数据返回了，找一个字符作为接口之后利用万能表达式即可 infos_list = re.findall( r'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?alt.*?src="(.*?)".*?&lt;a.*?&gt;(.*?)&lt;/a&gt;.*?"star"&gt;(.*?)&lt;/p&gt;.*?"releasetime"&gt;(.*?)&lt;/p&gt;.*?"integer"&gt;(.*?)&lt;/i&gt;.*?"fraction"&gt;(.*?)&lt;/i&gt;', request_tasget.text, re.S) # @UndefinedVariable #建立存储信息的字典 for each in infos_list: yields = &#123; 'index':each[0], 'image_info':each[1], 'name':each[2], 'actor':each[3].strip(), 'time':each[4], 'score':each[5] + each[6] &#125; print(yields) 爬取豆瓣电影分析与爬取猫眼电影信息一样，都是一样的，具体的差距还是在豆瓣上爬取信息需要cookie，具体可参考下面的代码。 代码''' 函数目标： 爬取豆瓣Top250的电影信息 编写时间： 2018-04-01 ''' import requests import re if __name__ == '__main__': print('以下为豆瓣Top250的电影信息：') # 从页面可看到一共有十页，每页上有25个电影的信息 for i in range(0, 10): url = "https://movie.douban.com/top250?" header = { 'Connection': 'keep-alive', 'Cookie': 'bid=x9ipkoKiQgw; _pk_ses.100001.4cf6=*; __utma=30149280.2001666009.1522587991.1522587991.1522587991.1; __utmb=30149280.0.10.1522587991; __utmc=30149280; __utmz=30149280.1522587991.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utma=223695111.1530785565.1522587991.1522587991.1522587991.1; __utmb=223695111.0.10.1522587991; __utmc=223695111; __utmz=223695111.1522587991.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); ll="118146"; _vwo_uuid_v2=D575771A914BC38B3B7D081C0A0296FDC|939d8f7fdff1f383a97d572dab39fa1a; _pk_id.100001.4cf6=1de732c7ac4dc22b.1522587990.1.1522588516.1522587990.; ct=y', 'Host': 'movie.douban.com', 'Referer': 'https://movie.douban.com/top250?start=25&amp;filter=', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36}' } paramters = { 'start': i * 25, 'filter':'' } tasget = requests.get(url=url, headers=header, params=paramters) tasget.encoding = 'utf-8' # 匹配正则表达式 infos = re.findall(r'&lt;li&gt;.*?&lt;em class=""&gt;(.*?)&lt;/em&gt;.*?alt=.*?src="(.*?)".*?"title"&gt;(.*?)&lt;/span&gt;.*?class="title"&gt;&amp;nbsp;/&amp;nbsp;(.*?)&lt;/span&gt;.*?"other"&gt;&amp;nbsp;/&amp;nbsp;(.*?)&lt;/span&gt;.*?&lt;p class=""&gt;(.*?)&amp;nbsp;&amp;nbsp;&amp;nbsp;(.*?)&lt;br&gt;(.*?)&amp;nbsp;/&amp;nbsp(.*?)&amp;nbsp;/&amp;nbsp(.*?)&lt;/p&gt;.*?average"&gt;(.*?)&lt;/span&gt;', tasget.text, re.S) # @UndefinedVariable # 建立一个空字典用于存储相关的信息 for each in infos: yields = { 'index':each[0], # 排名 'img_info':each[1], # 照片地址 'name':each[2].strip() + "/" + each[3].strip() + "/" + each[4].strip(), # 影片名称 'director':each[5].strip(), # 导演 'actor':each[6], # 演员 'time_cy':each[7].strip() + each[8], # 上演时间及地区 'type':each[9].strip(), # 影片类型 'score':each[10] # 评分 } print(yields) 最后简单说说其中的含义，表达式.*?是一个万能的匹配式，(.*?)是匹配想要爬取的内容，并且每一次伴随着一个索引号，每一个索引号对应着的信息不同。利用正则表达式可方便的进行文本与代码的分开挖掘，一般在写正则表达式时用html代码中的一些词来进行过渡就可以方便的写出来了。 多说无益，还是需要自己来进行代码的测试了解的。 参考的博客：https://cuiqingcai.com 可根据此博客来学习更多的爬虫知识。]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下的mysql安装以及相关的问题解决]]></title>
    <url>%2F2018%2F04%2F03%2FMac%E4%B8%8B%E7%9A%84mysql%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[最近因为学习到了爬虫的原因，存储数据需要mysql了，因为以前学习过其命令行，所以在之前安装过了，太久没用了，怎么开都不懂了，搞了几十分钟不想搞了，重新安装。下面记录下遇到的一些问题。 安装过程第一种方法进入官网下载对应Mac的mysql。 官网地址 第二种方法直接用命令行brew Install mysql。 前提是必须安装了homebrew。 配置以及开启过程配置过程在手动安装正后一步记下默认的密码（如下图）。 即QeV.a&gt;zGa1m3为默认密码。 在偏好系统中手动打开mysql应用。 之后打开终端，为其配置。（命令行如下依次） 1` vi ~/bash_profile ` 进入按字母i进入编辑模式，输入： export PATH=&quot;$PATH:/usr/local/mysql/bin&quot; 在此可能有疑惑，为什么可以直接mysql/bin？因为在我们手动下载mysql之后系统已经自动的复制了一遍，并且将其名为mysql，如图在/usr/local/可找到。 接着输入相关的命令…这时已经配置好了，按下esc健进入命令行模式，输入：wq,推出。之后为了快速见效输入source ~/bash_profile 启动过程输入命令行mysql -uroot -p,提示输入刚刚的默认密码，进入到了mysql的编译界面之后，我们修改默认密码，输入代码set PASSWORD =PASSWORD(&#39;123456&#39;); 其中的123456为新的密码。 之后为测试是否已经修改成功，输入exit();推出界面，输入命令行mysql -uroot -p,提示输入刚刚的新密码，成功进入编译界面。 卸载可参考：https://www.jianshu.com/p/b02be6026a2a 最后解决问题：ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: YES) 可参考：https://www.digitalocean.com/community/questions/setup-mysql-on-ubuntu-droplet-getting-error-error-1045-28000-access-denied-for-user-root-localhost-using-password-yes 解决进程问题 可参考：https://blog.csdn.net/liumaolincycle/article/details/51896592 补充有时下载完之后也会出现上面的那个问题，我是通过重新启动电脑之后获得了解决。]]></content>
      <categories>
        <category>Mac</category>
        <category>MySQL</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于解决python中UnicodeDecodeError: 'ascii' codec can't decode byte 0xe8 in position 67986: ordinal not in range(128)的问题]]></title>
    <url>%2F2018%2F03%2F28%2F%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3python%E4%B8%ADUnicodeDecodeError-ascii-codec-can-t-decode-byte-0xe8-in-position-67986-ordinal-not-in-range-128-%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在学习爬虫的过程中，在运行编者的代码时出现了UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe8 in position 67986: ordinal not in range(128)的编码问题。 具体原因是因为程序默认的解析编码格式发生了冲突造成的，简单来说就是需要解析的内容与API程序默认的解析编码格式不同，所以才会出现如上的错误。 因为是打算用python解析JS文件，所以我就贴上我的解决方案了： 1ctx = node.compile(open(file, encoding='utf-8').read()) 加上自行规定的解码格式即可。 解决来源于GitHub论坛…]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>问题记录笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于homebrew下载出现"Error/go/version missing for gotools resource!"错误的解决方案]]></title>
    <url>%2F2018%2F03%2F28%2F%E5%85%B3%E4%BA%8Ehomebrew%E4%B8%8B%E8%BD%BD%E5%87%BA%E7%8E%B0Error%3Ago%3Aversion%20missing%20for%20%20gotools%20resource!%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[最近用homebrew下载mongodb，发现出现了Error: go: version missing for “gotools” resource!的错误，试了几次都不行，最后在谷歌用英文搜索关键词在GitHub的一个论坛用相关的解决方案。 使用命令行 1git -C "$(brew --repo)" fetch --tags 之后再次输入： 1brew update --force 最后再次用命令行brew install mongodb，发现已经能够正确成功下载了。]]></content>
      <categories>
        <category>笔记</category>
        <category>数据库</category>
        <category>Homebrew</category>
        <category>Mongodb</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Homebrew</tag>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构与算法：线性表]]></title>
    <url>%2F2018%2F03%2F26%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%9A%E7%BA%BF%E6%80%A7%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[打算重新好好系统的学习数据结构了。这是开始。 因为概念已经是烂大街了，在此只记录下我用java或者是python实现相关功能的代码。 查找java实现]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机基础知识：认识计算机]]></title>
    <url>%2F2018%2F03%2F26%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%9A%E8%AE%A4%E8%AF%86%E8%AE%A1%E7%AE%97%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[计算机发展到了如今这样的一个地步实在让人感兴趣… 于是看了一些书和文章，想了解了解一个计算机是如何跑起来的。 机器本质 计算机的本质 计算机的本质：（电脑）计算机 = 计算机器 没错，如今我们使用的计算机就是和我们小学时按的那个只会加减乘除计算器的本质毫无区别。使用计算机时，我们会先通过键盘或者是语音输入想要了解的信息，之后计算机会通过内部一系列的运算之后，输出相关的界面信息到我们的屏幕上。那我们可理解计算机就是一通过我们输入，然后自己默默运算完输出结果的机器。电脑电脑，正所谓脑子就是人类的计算机器，电脑不过是插上电源才能运行的计算机器。 什么图画啊，文档内容等等均是先转化为相关的数字信息（如我们学过的二进制，十六进制等）后才在显示器上呈现出来的，所以在此可理解为什么还会有那么多各式各样的字符编码了吧。如中文编码常见的GB2312等。 计算机上的1与0 计算机是电子产品，其构造是由一些硬件组成。 再继续说说烂大街的绝大部分地球人都知道的事实：计算机只认识1和0。因为计算机是集成电路（IC）组成,运行起来接上电源之后需要传输数据了（即属于电子数字电路），而在数字电路中，二进制（binary）数是指用二进制记数系统，即以2为基数的记数系统表示的数字。这一系统中，通常用两个不同的符号0（代表零）和1（代表一）来表示。以2为基数代表系统是二进位制的。数字电子电路中，逻辑门的实现直接应用了二进制，因此现代的计算机和依赖计算机的设备里都用到二进制。每个数字称为一个位元（二进制位）或比特（Bit，Binary digit的缩写）。补充：比特是信息的最小单位， 字节是信息的基本单位。 结合上面的说明，可知道数据都是在计算机中以1和0组成的，一是因为计算机本身的结构所致，二是因为这样可方便的转化为其他的数字类型（包括十进制之类的）。对于计算机来说，什么都是数字。只是数字的组成不同而已。 参考 维基百科：https://zh.wikipedia.org/wiki/二进制 书籍：《计算机是怎么跑起来的》 矢泽久雄 著]]></content>
      <categories>
        <category>笔记</category>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下安装Redis以及其可视化客户端]]></title>
    <url>%2F2018%2F03%2F22%2FMac%E4%B8%8B%E5%AE%89%E8%A3%85Redis%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%A2%E6%88%B7%E7%AB%AF%2F</url>
    <content type="text"><![CDATA[最近想要用Nosql结合做一些小项目，用的是Mac，看到网上的教程有点乱七八糟的了，就打算记录下来了。 关于这个数据库就不在此介绍了。 安装过程 来到官网页面下载：https://redis.io/download 下载好之后解压，并且要知道目录文件在哪。现在打开终端，用命令 cd 文件目录地址，如我的是 cd /Users/junjieliu/Documents/编程文件/redis-4.0.8，之后使用命令 sudo make 成功之后出现如下图1所示，之后再使用命令 make test,成功之后出现如图2所示。 图1: 图2: 之后，编译安装：在终端中输入命令：sudo make install 启动Redis,输入命令redis-server 至此就安装成功了，以上命令有时可能会有出现错误的结果，多试试。 安装Redis Desktop Manager到此网站下载即可：https://sourceforge.net/projects/redis-desktop-manager.mirror/ 当然可见我的云盘分享：https://pan.baidu.com/s/1Bvc7_tZ5yUnnwfnH2bDocg 下载完之后将软件移植系统应用程序一栏，打开： 最后介绍好评高的一本电子书《Redis实战》： http://www.java1234.com/a/javabook/database/2017/0625/8356.html 进入网站即有相关的资源。]]></content>
      <categories>
        <category>笔记</category>
        <category>Redis</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用python/R数据分析可视化汽车使用燃料情况]]></title>
    <url>%2F2018%2F03%2F21%2F%E7%94%A8python%3AR%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B1%BD%E8%BD%A6%E4%BD%BF%E7%94%A8%E7%87%83%E6%96%99%E6%83%85%E5%86%B5%2F</url>
    <content type="text"><![CDATA[分析的是美国一个网站统计的多年汽车使用燃料情况的数据，需要从网上下载，在此利用好python爬虫大有裨益，可作为实战运行分析。 此篇文章案例来源于： 本书文章中用R语言实现的数据可视化，是从网上直接下的文件然后分析，我打算在此用python实现爬取相关文件，并且运用python进行可视化分析。 分析进入主页，得到了下载文件的主链接： 在此可见资源的下载地址： 接下来就是运用爬虫知识实现此文件的下载了。 爬虫代码我们可有这样的思路：从主页出发 –&gt; 爬取到下载文件页面的链接 –&gt; 再从此爬取到下载地址链接 –&gt; 之后运用相关的函数下载至本目录即可。以下是实现过程。 ''' 函数目标： 用python爬取相关的下载文件 编写时间： 2018-03-21 ''' import requests import re from bs4 import BeautifulSoup from urllib.request import urlretrieve ''' first_url方法获取进入下载页面的地址 运用了正则表达式的匹配方法 ''' def first_url(): url = 'https://www.fueleconomy.gov/' # 添加代理 header = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'zh-CN,zh', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', 'Host': 'www.fueleconomy.gov', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36}' } request = requests.get(url=url, headers=header) # 指定编码格式 request.encoding = 'utf-8' ''' 发现不用指定re.S亦可以完成匹配，用了反而会报错... 注意每次匹配到的数据之后还有索引要记得标明 ''' link = re.findall(r'&lt;a href="(.*?)"&gt;Developer Tools&lt;/a&gt;', request.text)[0] return link ''' second_url方法是用来获取下载文件的地址 方法也是运用了正则表达式 ''' def second_url(): # 进入下载资源的页面 se_url = 'https://www.fueleconomy.gov' + first_url() # 添加代理,基本上的代理信息没什么变化 header_2 = { 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'zh-CN,zh', 'Cache-Control': 'max-age=0', 'Connection': 'keep-alive', 'Host': 'www.fueleconomy.gov', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36}' } request_2 = requests.get(url=se_url, headers=header_2) request_2.encoding = 'utf-8' # 匹配正则表达式 link_2 = re.findall(r'&lt;a href="(.*?)"&gt;CSV&lt;/a&gt;', request_2.text)[0] return link_2 ''' 已经得到了资源下载地址，在主函数中进行下载并且进行解压 ''' if __name__ == '__main__': # 获取下载文件的资源地址 down_url = 'https://www.fueleconomy.gov' + second_url() print('数据采集完成...') print('开始下载文件...') # 文件名称是：vehicles.csv.zip，格式也是非常的重要！ urlretrieve(url=down_url, filename='vehicles.csv.zip') print('下载完成！可在本工程目录查收！') 至此可在本目录下查看到下载好的压缩文件： 当然也可加上运用python解压这一部分的模块，有兴趣的朋友可自行学习运用。 代码可视化分析阶段在解压之后可先用excel打开来看看（会发现有39000+行数据），在此只需要知道其中的参数year与com08，前者为年份，后者为燃料的使用情况相关的数值。 可视化实现代码在下： 最后这是一个平时做的小项目，适合新手入门。 另外，以上代码中不懂的模块知识，我建议你利用好搜索引擎，查看相关的文档或者是找本书看看。]]></content>
      <categories>
        <category>Python</category>
        <category>数据分析</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于anaconda2与anaconda3两个版本的共存问题]]></title>
    <url>%2F2018%2F03%2F21%2F%E5%85%B3%E4%BA%8Eanaconda2%E4%B8%8Eanaconda3%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最近因为用anaconda的关系，下载的包导致了冲突，编译器总是识别不了，就把以前Mac上的anaconda都卸载了。打算重新来过一遍解决两者（即anaconda2与anaconda3）的共存问题。 简单说明一下anaconda3对应python3，anaconda2对应python2 马上开始吧。 先是在官网上下载了两个版本，如下： 一路确定，直到安装完成为止。不过要说明一下，安装应该分好顺序，最后安装好的即为系统默认的了（即当我们在终端输入命令：python 时会出现最后安装好的那个目录中的python版本，我是最后安装的anaconda3）。如下图所示： Python 3.6.4 |Anaconda, Inc.| 即为anaconda3为系统默认的了。 当我们再输入命令：python2 时与输入命令： python3 时，如下图所示均成为了系统默认的两个版本了。 这样在下载包时就能方便多了，可以直接在终端输入命令：pip install .. 就可以达到anaconda3对应的python3版本的包下载问题了（经过测试，已通过！）。可能有朋友疑惑，python3不是对应着命令pip3吗，实际上经过我的发现，anaconda的python2与python3对应的都是命令pip。 虽然解决了anaconda3下的python3的问题，那么我们必须记得我们的目标是：anaconda3与anaconda2的切换使用问题。不过遗憾的是没有找到解决方案。不过倒是有一个能在同一个版本内（即anaconda3/anaconda2）同时安装两个python版本（2/3）的方案。 在此官网教程中说明了命令。 详细的命令过程可参考此篇文章：https://foofish.net/compatible-py2-and-py3.html 当然参考官网亦可。 最后虽然在同一版本中解决了两个python版本的虚拟环境的问题（可在对应的目录中找到，并且此虚拟环境均可正常使用），但是我们的问题依旧没有得到解决（即anaconda3与anaconda2如何切换使用问题），我试想用指定目录的方法运行命令，但是一无所获。 Anaconda2 includes Python 2.7 and Anaconda3 includes Python 3.6. However, it does not matter which one you download, because you can create new environments that include any version of Python packaged with conda. 官网的解释已经说明了，建立虚拟环境只是解决在同一个anaconda版本下使用不同版本的python而已。所以我们想的关于anaconda2与anaconda3两个版本的共存切换问题目前或许没有办法实现。 已经知道了解决方案：那就是打开各个的客户端进行下载即可！！！太简单了！！]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Anaconda</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决python文件读取时的UnicodeDecodeError: 'ascii' codec can't decode byte 0xd4 in position 904: ordinal not in range(128)问题]]></title>
    <url>%2F2018%2F03%2F20%2F%E8%A7%A3%E5%86%B3python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%97%B6%E7%9A%84UnicodeDecodeError-ascii-codec-can-t-decode-byte-0xd4-in-position-904-ordinal-not-in-range-128-%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最近在处理一个csv格式的数据时，出现了UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xd4 in position 904: ordinal not in range(128)的错误告知。 查了一下，发现只要指定encoding=’iso-8859-1’即可解决此问题了。 代码演示： 123..... with open(filename, encoding='iso-8859-1') as f: ...... 简单说明一下为何如此指定编码格式： ISO 8859-1，正式编号为ISO/IEC 8859-1:1998，又称Latin-1或“西欧语言”，是国际标准化组织内ISO/IEC 8859的第一个8位字符集。它以ASCII为基础，在空置的0xA0-0xFF的范围内，即解决0xA0-0xFF的范围内的编码错误问题，如上我们的0xd4在此范围之内。 详细可见维基百科地址：https://zh.wikipedia.org/wiki/ISO/IEC_8859-1 参考：http://blog.csdn.net/programmer_wei/article/details/50994318]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>问题记录笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解多线程编程]]></title>
    <url>%2F2018%2F03%2F20%2F%E7%90%86%E8%A7%A3%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[最近想研究研究什么是多线程编程的问题。简单了解了一下之后发现原来我对其的理解都错了…把面对对象编程活生生的说成了多线程…唉，从前文中的”口误“就… 多线程与多进程简单理解这两个一下： 多进程：可先理解为一个应用程序，如我们的上网用的浏览器。 多线程：多线程就是我们浏览器中的各种小工具，如刷新功能与新开一个标签页的功能就是两个在其中的线程。 多个进程是分开的两个应用程序，就像QQ和微信两者就是毫不相干的两个应用程序。多线程就是两个应用程序之中的多个可同时运用的小工具。 多线程编程再来看看多线程编程。 平时我们写程序，会将整个代码构建出各种方法函数，各有各的实现意图，以便在主类当中直接调用，最终实现目标整体意愿。 而多线程编程就是可同时在主类中调用两个或者是多个实现意图不同的方法函数，并且一同被编译器/解释器运行出结果。就成了一个多线程的问题…多线程多线程，就是能将两个或者是多个不同的方法同时运行出结果。至于是编译器还是解释器得分是什么语言了。 可另外参考： 编程中的进程、线程、协程、同步、异步、回调 同步编程 vs 异步编程]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用python/R可视化GitHub上的java热门开源项目]]></title>
    <url>%2F2018%2F03%2F19%2F%E7%94%A8python%E5%8F%AF%E8%A7%86%E5%8C%96GitHub%E4%B8%8A%E7%9A%84java%E7%83%AD%E9%97%A8%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[直接开始这个小项目吧。 网页地址：https://api.github.com/search/repositories?q=language:java&amp;sort=stars 在这个网页中有相关的目前比较热门的开源项目（以star的数目来衡量），打开发现这是典型的json格式啊。 简单分析经过抓包可发现： 即： 换一换就可知道所有编程语言目前比较热门的开源项目了。 python代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849''' 函数目标： 将GitHub上的java热门的开源项目可视化 编写时间： 2018-3-19'''import requestsfrom matplotlib import pyplot as pltimport pygalfrom pygal.style import LightColorizedStyle as lcs, LightenStyle as lsif __name__ == '__main__': #添加代理配置 url = 'https://api.github.com/search/repositories' header = &#123;'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36', 'Connection': 'keep-alive'&#125; paramter = &#123;'q': 'language:java', 'sort': 'stars'&#125; re = requests.get(url=url, params=paramter, headers=header) # 将网页转化为python字典即用json()函数方法才可显示与网页内容一致！ re.encoding = 'utf-8' js_cont = re.json() item = js_cont['items'] star_count = [] names = [] full_names = [] for each in item: star_count.append(each['stargazers_count']) names.append(each['name']) full_names.append(each['full_name']) # 添加高亮颜色 my_style = ls('#333366', base_style=lcs) # 添加相关的设置 my_config = pygal.Config() my_config.label_font_size = 28 bar_chart = pygal.Bar(config=my_config, style=my_style, x_label_rotation=60, show_legend=False) bar_chart.add('', star_count) bar_chart.title = 'Java projects stars on Github' bar_chart.x_labels = names # 保存至目录下的文件中 bar_chart.render_to_file('Java stars in Github.svg') 之中不懂的可利用好搜索引擎。有一些爬虫的知识。 运行得到： 简单说说用python可视化的感受，比较喜欢用python，用的比较多，意味发现pygal这个库做的图很漂亮。 R代码实现 说明：因为R的爬虫没怎么看，先用可视化…日后有时间爬虫写上… 最后 参考：《python入门与实践》【美】Eric Matthes著]]></content>
      <categories>
        <category>Python</category>
        <category>数据分析</category>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Java</tag>
        <tag>数据分析</tag>
        <tag>数据可视化</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机基础知识（三）：带宽单位换算与存储单位换算]]></title>
    <url>%2F2018%2F03%2F15%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%B8%A6%E5%AE%BD%E5%8D%95%E4%BD%8D%E6%8D%A2%E7%AE%97%E4%B8%8E%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D%E6%8D%A2%E7%AE%97%2F</url>
    <content type="text"><![CDATA[位/比特（bit/b）：内存中最小的单位，二进制数序列中的一个0或一个1就是一比比特. 1比特 = 一个二进制位，只有0和1两种状态 1字节 = 8 比特 1 Byte(B)＝8bit（位）1KB＝1024Byte（字节） 再来看看平时常见的下载参数： Mbps：带宽单位，在 Mbps 单位中的“b”是指“Bit（位） MB/s：速度单位，其中的 B 是指“Byte（字节） 其中1MB/s=8Mbps，下载工具一般以Bps计算，所以它们之间有8bit=1Byte的换算关系，一个字节，是由八位二进制位组成的，所以可解释一个200M的网，换算为字节，实际上仅仅极限速度能达到200/8=25M的速度。 存储单位的换算计算机存储单位一般用bit、B、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB……来表示，它们之间的关系是：位 bit (比特)(Binary Digits)：存放一位二进制数，即 0 或 1，最小的存储单位。 换算： 字节byte：8个二进制位为一个字节(B)，最常用的单位。 1 Byte（B） = 8 bit 1 Kilo Byte（KB） = 1024B 1 Mega Byte（MB） = 1024 KB 1 Giga Byte （GB）= 1024 MB 1 Tera Byte（TB）= 1024 GB 1 Peta Byte（PB） = 1024 TB 1 Exa Byte（EB） = 1024 PB 1 Zetta Byte（ZB） = 1024 EB 1Yotta Byte（YB）= 1024 ZB 1 Bronto Byte（BB） = 1024 YB 1Nona Byte（NB）=1024 BB 1 Dogga Byte（DB）=1024 NB 1 Corydon Byte（CB）=1024DB 1 Xero Byte （XB）=1024CB 进制单位全称及译音： yotta，[尧]它， Y. 10^24， zetta，[泽]它， Z. 10^21， exa，[艾]可萨， E. 10^18， peta，[拍]它， P. 10^15， tera，[太]拉， T. 10^12， giga，[吉]咖， G. 10^9， mega，[兆]，M. 10^6 b(bit)与B的认识 字节(B)是电脑中表示信息含义的最小单位，通常情况下一个ACSII码就是一个字节的空间来存放。而事实上电脑中还有比字节更小的单位，因为一个字节是由八个二进制位组成的，换一句话说，每个二进制位所占的空间才是电脑中最小的单位，我们把它称为位，也称比特（bit）。一个字节等于八位。人们之所以把字节称为电脑中表示信息含义的最小单位，是因为一位并不能表示我们现实生活中的一个相对完整的信息。 计算机储存单位的进率是1024而不是1000？ 目前计算机都是二进制的，让它们计算单位，只有2的整数幂时才能非常方便计算机计算，因为电脑内部的电路工作有高电平和低电平两种状态.所以就用二进制来表示信号，(控制信号和数据)，以便计算机识别。而人习惯于使用10进制，所以存储器厂商们才用1000作进率。这样导致的后果就是实际容量要比标称容量少，不过这是合法的。1024是2的10次方，因为如果取大了，不接近10的整数次方，不方便人们计算；取小了，进率太低，单位要更多才能满足需求，所以取2的10次方正好。计算实例：标称100GB的硬盘，其实际容量为100×1000×1000×1000字节/1024×1024×1024≈93.1GB可见产品容量缩水只要满足计算的实际容量结果（上下误差应该在10%内）。 参考： https://baike.baidu.com/item/存储单位/3943356?fromtitle=计算机存储单位&amp;fromid=795305 https://www.jianshu.com/p/2b57116c27de]]></content>
      <categories>
        <category>笔记</category>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机基础知识（二）：单核处理器、多核处理器、多处理器与多线程编程]]></title>
    <url>%2F2018%2F03%2F15%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8D%95%E6%A0%B8%E5%A4%84%E7%90%86%E5%99%A8%E3%80%81%E5%A4%9A%E6%A0%B8%E5%A4%84%E7%90%86%E5%99%A8%E3%80%81%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[转载自：http://blog.csdn.net/zolalad/article/details/28393209 一．进程、线程、单核处理器 进程和线程都是操作系统的概念。进程是应用程序的执行实例，每个进程是由私有的虚拟地址空间、代码、数据和其它各种系统资源组成，即进程是操作系统进行资源分配的最小单元。进程在运行过程中创建的资源随着进程的终止而被销毁，所使用的系统资源在进程终止时被释放或关闭。 线程是进程内部的一个执行单元。系统创建好进程后，实际上就启动执行了该进程的主执行线程，主执行线程以函数地址形式，比如说main或WinMain函数，将程序的启动点提供给Windows系统。主执行线程终止了，进程也就随之终止。 每一个进程至少有一个主执行线程，它无需由用户去主动创建，是由系统自动创建的。用户根据需要在应用程序中创建其它线程，多个线程并发地运行于同一个进程中。一个进程中的所有线程都在该进程的虚拟地址空间中，共同使用这些虚拟地址空间、全局变量和系统资源，所以线程间的通讯非常方便，多线程技术的应用也较为广泛。 多线程可以实现并行处理，避免了某项任务长时间占用CPU时间。要说明的一点是，目前大多数的操作系统教材中的单处理器都是指的单核处理器。对于单核单处理器（CPU）的，为了运行所有这些线程，操作系统为每个独立线程安排一些CPU时间，操作系统以轮换方式向线程提供时间片，这就给人一种假象，好象这些线程都在同时运行。由此可见，如果两个非常活跃的线程为了抢夺对CPU的控制权，在线程切换时会消耗很多的CPU资源，反而会降低系统的性能。 最开始，线程只是用于分配单个处理器的处理时间的一种工具。但假如操作系统本身支持多个处理器，那么每个线程都可分配给一个不同的处理器，真正进入“并行运算”状态。从程序设计语言的角度看，多线程操作最有价值的特性之一就是程序员不必关心到底使用了多少个处理器，程序员只需将程序编写成多线程模式即可。程序在逻辑意义上被分割为数个线程；假如机器本身安装了多个处理器，那么程序会运行得更快，毋需作出任何特殊的调校。根据前面的论述，大家可能感觉线程处理非常简单。但必须注意一个问题：共享资源！如果有多个线程同时运行，而且它们试图访问相同的资源，就会遇到一个问题。举个例子来说，两个线程不能将信息同时发送给一台打印机。为解决这个问题，对那些可共享的资源来说（比如打印机），它们在使用期间必须进入锁定状态。所以一个线程可将资源锁定，在完成了它的任务后，再解开（释放）这个锁，使其他线程可以接着使用同样的资源。 多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。 最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也不可能只有一节车厢。多线程的出现就是为了提高效率。同时它的出现也带来了一些问题。 注：单核处理器并不是一个长久以来存在的概念，在近年来多核心处理器逐步普及之后，单核心的处理器为了与双核和四核对应而提出。顾名思义处理器只有一个逻辑核心。 二、多核处理器和多处理器的区别 多核是指一个CPU有多个核心处理器，处理器之间通过CPU内部总线进行通讯。而多CPU是指简单的多个CPU工作在同一个系统上，多个CPU之间的通讯是通过主板上的总线进行的。从以上原理可知，N个核的CPU，要比N个CPU在一起的工作效率要高（单核性能一致的情况下）。 三、 处理器结构对并发程序的影响 对称多处理器是最主要的多核处理器架构。在这种架构中所有的CPU共享一条系统总线（BUS）来连接主存。而每一个核又有自己的一级缓存，相对于BUS对称分布[2]，如下图： 这种架构在并发程序设计中，大致会引来两个问题，一个是内存可见性，一个是Cache一致性流量。内存可见性属于并发安全的问题，Cache一致性流量引起的是性能上的问题。 内存可见性：内存可见性在单处理器或单线程情况下是不会发生的。在一个单线程环境中，一个变量选写入值，然后在没有干涉的情况下读取这个变量，得到的值应该是修改过的值。但是在读和写不在同一个线程中的时候，情况却是不可以预料的。Core1和Core2可能会同时把主存中某个位置的值Load到自己的一级缓存中，而Core1修改了自己一级缓存中的值后，却不更新主存中的值，这样对于Core2来讲，永远看不到Core1对值的修改。在Java程序设计中，用锁，关键字volatile，CAS原子操作可以保证内存可见。 Cache一致性问题：指的是在SMP结构中，Core1和Core2同时下载了主存中的值到自己的一级缓存中，Core1修改了值后，会通过总线让Core2中的值失效，Core2发现自己存的值失效后，会再通过总线从主存中得到新值。总线的通信能力是固定的，通过总线使各CPU的一级缓存值数据同步的流量过大，那么总线就会成瓶颈。这种影响属于性能上的影响，减小同步竞争就能减少一致性流量。]]></content>
      <categories>
        <category>笔记</category>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用python3爬取QQ音乐列表音乐]]></title>
    <url>%2F2018%2F03%2F14%2F%E7%94%A8python3%E7%88%AC%E5%8F%96QQ%E9%9F%B3%E4%B9%90%E5%88%97%E8%A1%A8%E9%9F%B3%E4%B9%90%2F</url>
    <content type="text"><![CDATA[最近想爬取一些音乐来实战一下，选择了qq音乐。 qq音乐明显的就是一个动态网页，所以需要抓包了。 不懂的关键词可利用好搜索引擎。 分析过程在此就说说分析的大致过程吧。 先看看主页： 我们随便点开一个主题列表： 因为是动态网页，所以就在这里抓包吧，因为qq音乐是动态网页，需要相关的参数信息才能得到想要的音乐地址，随便以播放一首歌曲为例，如下图1中的歌曲ID，点进去这个看看，即点击播放按钮，发现来到了播放页面，打开我用的Chrome中的开发者工具，里面有我们想要的音乐地址（如下图2所示），图3展示得到列表歌曲的所有信息，需要编程清洗之后才能得到我们想要，在此会在下面的代码中标明。 图1: 图2: 图3: 其中的URL地址，代码中会用到： 现在我们可能就会有思路出现了：抓包爬取列表的所有歌曲的ID号以及歌曲信息 –&gt; 整合到以ID为基的html地址 –&gt; 到播放页面利用beautiful模块爬取相关的音乐地址即可！so easy~ 但经过我的测试说明，爬取播放页面的html信息是没有相关的音乐地址的，所以在得到歌曲ID信息，整合到以ID为基的html地址之后，我们还需要对播放页面进行抓包。下面说说如何在播放页面抓包。 先播放一首歌曲，再进行抓包，发现了这些信息（如下图1），再结合上面的音乐地址分析一下，发现了vkey信息的存在，即每一首歌的vkey信息是不同的，并且经过测试即便是同一个ID，vkey也是一直不断自动变换着的，不过在测试之后可得出结论：只要得到vkey信息，再整合上面的音乐地址就能抓到音乐信息，并且经过代码编译之后下载下来。 特别说明一下，下载歌曲的地址以及我们抓包时的URL之中，仅仅有如vkey的不同，或者是一些ID的不同，其他的参数是相同的！所以我们才能仅仅抓到vkey信息就能方便的下载歌曲，就是这么个意思。不理解的朋友可细心观察一下。 图1: 图2: 其中的URL地址： 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123''' 函数目标： 爬取QQ音乐列表音乐 编写时间： 2018-3-15'''import requestsimport os import timeimport json from urllib.request import urlretrieveif __name__ == '__main__': # 建立目录用于装爬取的音乐 if 'QQ音乐列表音乐' not in os.listdir(): os.makedirs('QQ音乐列表音乐') ''' 从URL中添加代理记忆必要的相关的参数以获取歌曲的ID以及歌曲名 ''' playlist_url = 'https://c.y.qq.com/qzone/fcg-bin/fcg_ucc_getcdinfo_byids_cp.fcg' # 添加页面中的代理信息 header = &#123;'user-agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36', 'cookie':'tvfe_boss_uuid=1770396a4ed2d111; pgv_info=ssid=s4189101616; pgv_pvid=7344469728; uin=; pgv_pvi=8737627136; pgv_si=s9378960384; _tucao_userinfo=ZU1hSHhlWVNPSnRoNWgwTjMzc2c4OVYzYjBuTkNjcDNHNjcyVkkzWm9WUkJZMWhxWDJ5SmpTSURFWDhVTk9TYkczU3JWc09EeEsrMEVnQ2RpK2FVNWh4M0x0Y21aOG5Vcms5MW9odmt6ZXNxRWlmeE9PZzM0SlQ1YmVuM0xhRVpUaWh5d2REV2FZcHdQdWdNL0daWE9rTTM0MlFjc1VoaHhNVkh4bkNqbnBOMDN2MG1sOEkxc0dYNFZRa24rd0RY--FeceGG8ErqgRGZz7WWwpsg%3D%3D; _tucao_session=WUVSc2RVVk95Y0ViU2NoNndsWmVlbzZoSG1WaFdpcEk4Q1M5bXZSTG9qanV3OEpuNVNQT3dBc0tBRERUY1NCRDZJek14Y2xYeFdmMWhiaWdkZ282UjdPdXVyT1ZYQnpCeG9BcklQUFBEMU5LQ3F3ajdmd3VWRmZ5QTJoN1ViS1krcEx0aUdUb3plckVNVGc3K0t2Z3pUeFJDcFZMNnU3dEpLUXZ5Zyt4dUpJdU5Hb3ZwZUhpTHM0OEhNQk0vcHJKN2tEOXVZay95WkFpZlFuSVBQZDhoSzlMVUMrVDQxN0llRzJuNkVWUGdTVjdyaVl2WVdscFlyVDJPald4MG9BWA%3D%3D--dDBBK5gXjLaGccOBzx4EBA%3D%3D; ts_refer=www.google.com/; ts_uid=3146042580; qqmusic_fromtag=66; yq_playdata=s; yqq_stat=0; yplayer_open=1; yq_index=0; yq_playschange=0; player_exist=1', 'referer':'https://y.qq.com/n/yqq/playlist/3766176211.html'&#125; # 添加参数信息,有些是非必须的，待研究，有兴趣的可以自己测试 paramter = &#123; 'type':'1', 'json':'1', 'utf8':'1', 'onlysong':'0', 'disstid':'3766176211', 'format':'jsonp', 'g_tk':'5381', # 非必须 'jsonpCallback':'playlistinfoCallback', # 值可更改 'loginUin':'0', 'hostUin':'0', 'format':'jsonp', "inCharset":'utf8', 'outCharset':'utf-8', 'notice':'0', 'platform':'yqq', 'needNewCode':'0', &#125; playlist_re = requests.get(url=playlist_url, params=paramter, headers=header) # 指定编码格式 playlist_re.encoding = 'utf-8' # 改变为python可识别的json格式,进行必要的数据清洗,去掉前面的'jsonpCallback'部分 playlist_info = json.loads(playlist_re.text.lstrip('playlistinfoCallback(').rstrip(')')) # 指定整体索引 playlist_info1 = playlist_info['cdlist'][0] # 先存储歌手的姓名,观察可知，一共有19个索引,因为歌曲本身仅仅有20首，取前20个歌手名 singer_name = [] for num in range(0, 17): singer_eainfo = playlist_info1['songlist'][num] for each_info in singer_eainfo['singer']: singer_name.append(each_info['name']) num = 0 # 在循环体系中进行下一步的编写 for each in playlist_info1['songlist']: ''' 在获取歌曲vkey的主URL传入相关的参数得到相关的数据之后进行挖掘，得到vkey信息 其中的参数有些是不必要的，可自由修改，有些是必要的 ''' key_url = 'https://c.y.qq.com/base/fcgi-bin/fcg_music_express_mobile3.fcg' # 传入相关的代理以及参数 header_1 = &#123;'user-agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36', 'referer':'https://y.qq.com/portal/player.html', 'cookie':'tvfe_boss_uuid=1770396a4ed2d111; pgv_info=ssid=s4189101616; pgv_pvid=7344469728; uin=; pgv_pvi=8737627136; pgv_si=s9378960384; _tucao_userinfo=ZU1hSHhlWVNPSnRoNWgwTjMzc2c4OVYzYjBuTkNjcDNHNjcyVkkzWm9WUkJZMWhxWDJ5SmpTSURFWDhVTk9TYkczU3JWc09EeEsrMEVnQ2RpK2FVNWh4M0x0Y21aOG5Vcms5MW9odmt6ZXNxRWlmeE9PZzM0SlQ1YmVuM0xhRVpUaWh5d2REV2FZcHdQdWdNL0daWE9rTTM0MlFjc1VoaHhNVkh4bkNqbnBOMDN2MG1sOEkxc0dYNFZRa24rd0RY--FeceGG8ErqgRGZz7WWwpsg%3D%3D; _tucao_session=WUVSc2RVVk95Y0ViU2NoNndsWmVlbzZoSG1WaFdpcEk4Q1M5bXZSTG9qanV3OEpuNVNQT3dBc0tBRERUY1NCRDZJek14Y2xYeFdmMWhiaWdkZ282UjdPdXVyT1ZYQnpCeG9BcklQUFBEMU5LQ3F3ajdmd3VWRmZ5QTJoN1ViS1krcEx0aUdUb3plckVNVGc3K0t2Z3pUeFJDcFZMNnU3dEpLUXZ5Zyt4dUpJdU5Hb3ZwZUhpTHM0OEhNQk0vcHJKN2tEOXVZay95WkFpZlFuSVBQZDhoSzlMVUMrVDQxN0llRzJuNkVWUGdTVjdyaVl2WVdscFlyVDJPald4MG9BWA%3D%3D--dDBBK5gXjLaGccOBzx4EBA%3D%3D; ts_refer=www.google.com/; ts_uid=3146042580; qqmusic_fromtag=66; yq_playdata=s; yqq_stat=0; yq_index=0; yq_playschange=0; player_exist=1; ts_last=y.qq.com/n/yqq/playlist/3766176211.html; yplayer_open=1'&#125; paramter_1 = &#123; 'g_tk':'5381', # 非必须 'jsonpCallback':'MusicJsonCallback', # 非必须，可更改 "loginUin":'0', 'hostUin':'0', 'format':'json', 'inCharset':'utf8', 'outCharset':'utf-8', 'notice':'0', 'platform':"yqq", 'needNewCode':'0', 'cid':'205361747', # 一致必须 'callback':'MusicJsonCallback', # 非必须，可更改 'uin':'0', # 传入获取的信息 'songmid':each['songmid'], 'filename':'C400' + each['songmid'] + '.m4a', 'guid':'7344469728' &#125; # 解析得到含有vkey的数据信息，然后进行清洗得到想要的信息 key_re = requests.get(url=key_url, params=paramter_1, headers=header_1) # 指定编码格式 key_re.encoding = 'utf-8' # 转换为python的json格式，进行简单的清洗 key_info = json.loads(key_re.text.lstrip('MusicJsonCallback(').rstrip(')')) # 进一步的清洗 data_info = key_info['data'] items_info = data_info['items'][0] print('数据采集完成，开始下载任务...') # 接下来就是可以下载了 urlretrieve(url='http://dl.stream.qqmusic.qq.com/C4000041FwTv0Ai3Ku.m4a?vkey=' + items_info['vkey'] + '&amp;guid=7344469728&amp;uin=0&amp;fromtag=66.mp3', filename='QQ音乐列表音乐/' + singer_name[num] + '-' + each['songname'] + '.mp3') print('正在下载:' + singer_name[num] + '的' + each['songname'] + '!') print('下载中....') print('下载此歌曲完成！') # 跳传到下一个歌手名 num = num + 1 time.sleep(1) print('全部下载完成，请在本过程目录下查收！') 在使用urlretrieve函数时，其中的url参数输入时应当加上格式，如下载视频时加上.mp4,下载音乐时加上.mp3,否则会易出现HTTP 403 错误 – 禁止访问 (Forbidden) 链接：认识HTTP 403 错误 – 禁止访问 (Forbidden) 最后运行： 到目录查看： 一切还算是顺利。前段时间想爬取腾讯视频，研究了挺久，没有成功，还需要学习，腾讯的资源都在腾讯云上，我想方式都差不多。 参考：http://blog.csdn.net/lht_okk/article/details/77206510 后续说明经过后来的测试，本代码爬取的思路还是正确的，但是爬取的信息流只能是同一个了…即便是不同的ID…]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用python3爬取新加坡联合早报新闻小视频]]></title>
    <url>%2F2018%2F03%2F14%2F%E7%94%A8python3%E7%88%AC%E5%8F%96%E6%96%B0%E5%8A%A0%E5%9D%A1%E8%81%94%E5%90%88%E6%97%A9%E6%8A%A5%E6%96%B0%E9%97%BB%E5%B0%8F%E8%A7%86%E9%A2%91%2F</url>
    <content type="text"><![CDATA[位于新加坡的联合早报是我几乎每天都会看的新闻网址，标题清晰明了，思路严谨踏实，是个好的新闻网站，值得推荐。不过却是被墙了… 今天看了这一篇文章：女记者提问冗长 人民大会堂部长通道出现“飙戏”一幕 非常有意思，想收藏其中的视频，于是想到了用python爬取好了。 这个新闻网站明显是一个动态网站啊，两种方式： 第一种：通过抓包，如下可得知相关的video信息 第二种：网站自带的连接 如下操作，点击视频中share，可发现资源地址 右上角的share。 其中有地址信息。 在获取的地址前加上http:简单测试一下: 是正确的，网站真的很贴心呢～ 以刚刚的地址输入爬取下来的代码： 123456from urllib.request import urlretrieve if __name__ == '__main__': print('开始下载...') urlretrieve(url='http://players.brightcove.net/4802324430001/H1dr7zTWz_default/index.html?videoId=5750255765001.mp4', filename='两会小视频.mp4') print('下载完成！') 结果：发现可在网上播放的视频下载之后却不能播放…占用的内存才几百kb…这一看就知道地址是错的… 经过上面网址播放的连接，再次进行抓包，打开相关的网页意外发现了mp4格式的连接： 将此链接替换掉上面代码中的URL地址，发现可以了（如下图），完工。]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3爬取动态网页图片]]></title>
    <url>%2F2018%2F03%2F12%2Fpython3%E7%88%AC%E5%8F%96%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[爬取的URL地址:https://unsplash.com/ 这是一个优美图片地址，往下拉就可以出来更多的图片，这显然是一个动态网页呀… 分析关于详细分析以及我的参考可见：http://blog.csdn.net/c406495762/article/details/78123502 因为分析方向一致，我就不在此说了，我跟这位博主的工具有一些出入，实际上用Chrome分析已经足够了。 ##代码 这是我后来自己写的代码，比上面博主的简短一些，亦可参考参考。 1234567891011121314151617181920212223242526272829303132333435363738394041''' 函数目标： 爬取动态网页的图片'''import requestsimport jsonfrom urllib.request import urlretrieveimport osimport timeif __name__ == '__main__': url = 'https://unsplash.com/napi/feeds/home' ''' 添加需要的代理: authorization证书配置,有时网站需要此类的代理html信息才会出来... json格式分析js页面的利器，有时用js渲染出来的页面，要注意观察其URL及相对准确的信息 ''' header = &#123;'user-agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36', 'authorization':'Client-ID c94869b36aa272dd62dfaeefed769d4115fb3189a9xxxxxxxxxxx'&#125; re = requests.get(url=url, headers=header) re.encoding = 'utf-8' # 通过分析易知一页有包括多张图片的ID链接，可用python的json格式处理解析 json_info = json.loads(re.text) # 建立一个空的列表用于装ID信息 list_id = [] if '优美图片集' not in os.listdir(): os.makedirs('优美图片集') for each in json_info['photos']: list_id.append(each['id']) # 利用urlretrieve函数一一下载，设置延迟 for i in range(0, len(list_id)): print('开始下载指定页面中的第%d张' % (i + 1)) urlretrieve(url='https://unsplash.com/photos/' + list_id[i] + '/download?force=true.jpg', filename='优美图片集/' + '系列%d.jpg' % i) print('下载完成！请查收...') 虽然说我的代码简短一点，不过我还是支持面对对象模式编程的，方便以后的学习，也是对自己的一种考验。 运行之后在本工程目录可见： 最后再补充说明一下： 每一次的拉取新的图片时，进行抓包，得知新的图片ID以及一个页面，通过分析此页面便可得到图片相关的信息，进而进行下载保存了（如下图）。 简单说说当时的情况，在参考了上面博主的分析过程后，利用了Chrome下载器的下载发现了图片的信息，然后我用urlretrieve函数单张下载的测试，发现成功了…附上代码。 12345from urllib.request import urlretrieveif __name__ == '__main__': urlretrieve('https://unsplash.com/photos/NrflUuJJK0I/download?force=true.jpg', 'tu.jpg') print('下载完成！') 不过从来都没有见过这种src信息…算是开了眼界，长了知识啦。]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习python3网络爬虫的总结]]></title>
    <url>%2F2018%2F03%2F12%2F%E5%AD%A6%E4%B9%A0python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%9A%84%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[有时在爬取的过程中很慢，以至于没有什么反应，第一应当先检查网络连接的情况，网络带宽突然变得很慢亦是一个问题，遇到了好几次，以为程序出了问题，不想却是网络带宽问题… 在爬取动态网页中，学会利用抓包进行解决，分析每一个点以及对可以达到目的的每一点进行抓包分析，挖掘其中的信息。另外，在爬取网页信息中，有一些反爬虫的或者是必须加入一些参数代理才可得到需要的信息等，俊需要一个点一个步骤的去分析。 在爬取网页的过程中，编写代码时，检查代码的函数方法的准确性，少一个‘s’与多一个‘s’，都是让人头疼的问题。 在编写代码的过程中，追求最好的解决方案，习惯于用面向对象来编写代码，便于以后的学习。 编写爬虫代码，要让其像是一个浏览器一般的去爬取数据，所以代理之类的应当要严谨使用。 分析html信息，善于用正则表达式解决一些代码与文字的混合信息。 对URL的分析到位亦然很重要。 学会快速判断是否为动态网页。 python 编程缩进很重要！！！！]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac触摸板小问题记录]]></title>
    <url>%2F2018%2F03%2F12%2FMac%E8%A7%A6%E6%91%B8%E6%9D%BF%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[今早触摸板的三指点击功能不灵了，有点急… 解决：重启。 一般电脑上的小问题重启之后可能就会得到解决了。]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用python3网络爬虫爬取成绩]]></title>
    <url>%2F2018%2F03%2F10%2F%E5%88%A9%E7%94%A8python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E6%88%90%E7%BB%A9%2F</url>
    <content type="text"><![CDATA[因为最近在学习python3网络爬虫，想自己写一些小程序来实战一下。爬的是URP教务网。 一开始的思路是利用beautiful模块来进行爬取相关的html信息，直接来得到需要的信息。结果发现程序运行不通… 后来查了一下，发现用re模块好啊…配合python正则表达式那是相当简单… 下面开始分析，代码编写阶段。 分析学习模拟登陆这是第一步，有两种简单的方法，可直接参考的链接：参考链接在此 一种是查看抓的包中的： 代码： 1234567891011121314151617181920import requestsf __name__ == '__main__': # 登陆页面的URL,此处的URL为登陆页面的URL以及在登陆之后的header中的request均可 url = 'http://60.219.165.24/loginAction.do' # 设置相关的代理以及在登陆之后的fordate信息 # 'Connection': 'keep-alive' ：保证持续连接 header = &#123;'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36', 'Connection': 'keep-alive'&#125; login_fordate = &#123;'zjh':'20160xxxxx', 'mm':'x'&#125; # 利用session方法爬取请求 s = requests.session() response = s.post(url, data=login_fordate, headers=header) # 验证登陆状态 if response.status_code == 200: print('模拟登陆成功！') 不懂可查看文档：requests文档 第二种是查看包中的cookie信息： 对应的实现模拟代码： 1234567891011121314151617181920import requestsif __name__ == '__main__': # 登陆页面url url = 'hhttp://60.219.165.24/loginAction.do' # 设置代理相关 headers = &#123; 'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36', 'Cookie':'JSExxxxxx=hxxxx-9Ixxxxxxx_xxxxxxxx', 'Connection': 'keep-alive' &#125; # 利用session爬取请求,之后可方便的get与post s = requests.session() response = s.post(url=url, headers=headers） # 验证登陆状态 if response.status_code == 200: print('模拟登陆成功！') 相关的信息我用x换掉了。不懂的朋友可以看文档，查资料咯。再次说明一下，URL部分**可以是登陆界面的，也可以是登陆之后的URL，经过测试两者均可。** 分析网页到了分析阶段了。 打开我的Chrome浏览器，开始分析每个链接的html信息，看看有没有我想要的信息。 根据下面的操作得到了本学期的成绩查询的相关的超链接。 再结合下面两张图的分析易知：本学期成绩查询的超链接为：http://60.219.165.24//bxqcjcxAction.do 超链接部分。 主URL部分。 为了保证准确性，再向某成绩采取相应的操作（如下图所示），再往上看看，就发现它是本学期成绩查询的一部分。 接下来就是编写代码了，以上若是有不懂的地方，还需要利用搜索引擎多多查询哟。 测试代码部分编写测试代码，爬取网页html信息： 12345678910111213141516171819202122import requests if __name__ == '__main__': # 登陆页面url url = 'http://60.219.165.24//bxqcjcxAction.do' # 设置代理相关 headers = &#123; 'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36', 'Cookie':'JSExxxxxx=hxxxx-9Ixxxxxxx_xxxxxxxx', 'Connection': 'keep-alive' &#125; # 利用session爬取请求,之后可方便的get与post s = requests.session() response = s.post(url=url, headers=headers） # 设置成网页对应的编码格式 response.encoding = 'GB2312' # 查看相关的网页内容 print(response.text) 运行查看效果： 成功得到了想要的html信息，接下来利用正则表达式选想要的部分即可。在这里要说明一下，不可用ForDate的那个模拟登陆，经过测试发现返回的是错误信息…所以以后老老实实用cookie模拟更为靠谱一点… 完整代码部分12345678910111213141516171819202122232425262728import requestsimport re if __name__ == '__main__': # 登陆页面url url = 'http://60.219.165.24//bxqcjcxAction.do' # 设置代理相关 headers = &#123; 'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36', 'Cookie':'JSESSIONID=xxxxxxxxxxx_gUJ4aiw', 'Connection': 'keep-alive' &#125; # 利用session爬取请求,之后可方便的get与post s = requests.session() response = s.post(url=url, headers=headers) # 设置成网页对应的编码格式 response.encoding = 'GB2312' # 设置成为符合需要的表达式以及模式为'任意匹配模式' pattern = re.compile('&lt;tr.*?class="even".*?&lt;/td&gt;.*?&lt;/td&gt;.*?&lt;td align="center"&gt;(.*?)&lt;/td&gt;.*?&amp;npsb;.*?&lt;/td&gt;.*?&lt;/td&gt;.*?&lt;/td&gt;.*?&lt;td&gt;align="center"&gt;(.*?)&amp;npsb;&lt;/P&gt;&lt;/td&gt;.*?&amp;npsb;&lt;/P&gt;', re.S) # 成绩信息采集 grades = re.findall(pattern, response.text) # 输出对应的课程信息 for each_grades in grades: print('课程名称：' + each_grades[0] + '分数：' + each_grades[1]) 关于正则表达式的解说可结合python正则表达式此篇文章学习。 简单解说一下，先贴出来html信息是怎么样的。 只截取了一部分，可自行了解。 解说： .? 是一个固定的搭配，.和代表可以匹配任意无限多个字符，加上？表示使用非贪婪模式进行匹配，也就是我们会尽可能短地做匹配，以后我们还会大量用到 .*? 的搭配。 (.?)代表一个分组，在这个正则表达式中我们匹配了两个分组，在后面的遍历grades中，grade[0]就代表第一个(.?)所指代的内容，grade[1]就代表第二个(.*?)所指代的内容，以此类推。 re.S 标志代表在匹配时为点任意匹配模式，点 . 也可以代表换行符。 最后 参考文章列表： 参考一 参考二 参考三 还有一些文档，均可在官网上看到，利用搜索引擎即可。]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于计算机基础知识（一）]]></title>
    <url>%2F2018%2F03%2F08%2F%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[平时有些兴趣想要了解一些关于计算机的基础知识，我就想着为何不将其作为一个笔记记录在博客上呢？以后想从事与计算机相关的工作，了解基本的计算机知识必不可少，因为时间，精力的有限，我会将一些认为重要的或者是必要的基础知识记录在此，打算作为一个系列在此展示了，希望能帮助更多的人。 编程语言知识：关于强类型语言与弱类型语言，语言的动静态区分以及解释性语言与编译性语言的理解 可以一张图大概的简单理解一下关于强类型语言与弱类型语言，语言的动静态（下图来源于参考一链接） 那么我们常见的语言分类： 简单总结强类型语言与弱类型语言： 编译时前者需要赋予变量对应的数据类型，后者可不必必须。（如c语言与python的编译时） 前者需要改变数据类型时需要相关的函数方法强制改变，后者可忽略。（如在c语言强制要求更改类型时的（double）变量） 简单总结语言的动静态区别： 动态性语言在编译器上编译时不提供代码数据类型的指错，仅仅是在运行时指出，而静态则是在编译器上编译时就提供代码数据类型的指错。（如int a=’a’;时编译器马上会在一旁提示错误时的便可理解为静态语言，如c语言） 动态性较于静态性更具有严谨性，可读性。 解释性语言与编译性语言的理解（因为在参考4的说明较为详细了，我就直接复制相关的内容好了…） 首先，我们编程都是用的高级语言(写汇编和机器语言的大牛们除外)，计算机不能直接理解高级语言，只能理解和运行机器语言，所以必须要把高级语言翻译成机器语言，计算机才能运行高级语言所编写的程序。 说到翻译，其实翻译的方式有两种，一个是编译，一个是解释。两种方式只是翻译的时间不同。 用编译型语言写的程序执行之前，需要一个专门的编译过程，通过编译系统（不仅仅只是通过编译器，编译器只是编译系统的一部分）把高级语言翻译成机器语言（具体翻译过程可以参看下图），把源高级程序编译成为机器语言文件，比如windows下的exe文件。以后就可以直接运行而不需要编译了，因为翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高，但也不能一概而论，部分解释型语言的解释器通过在运行时动态优化代码，甚至能够使解释型语言的性能超过编译型语言。 一个完整的编译系统与 一个用C编写的程序hello.c的编译过程 解释则不同，解释型语言编写的程序不需要编译。解释型语言在运行的时候才翻译，比如VB语言，在执行的时候，专门有一个解释器能够将VB语言翻译成机器语言，每个语句都是执行的时候才翻译。这样解释型语言每执行一次就要翻译一次，效率比较低。 编译型与解释型，两者各有利弊。前者由于程序执行速度快，同等条件下对系统要求较低，因此像开发操作系统、大型应用程序、数据库系统等时都采用它，像C/C++、Pascal/Object Pascal（Delphi）等都是编译语言，而一些网页脚本、服务器脚本及辅助开发接口这样的对速度要求不高、对不同系统平台间的兼容性有一定要求的程序则通常使用解释性语言，如JavaScript、VBScript、Perl、Python、Ruby、MATLAB 等等。 但随着硬件的升级和设计思想的变革，编译型和解释型语言越来越笼统，主要体现在一些新兴的高级语言上，而解释型语言的自身特点也使得编译器厂商愿意花费更多成本来优化解释器，解释型语言性能超过编译型语言也是必然的。 以下更为详细的参考： 参考1 参考2 参考3 参考4 计算机基础知识推荐图书 一个日本相关行业人员的书籍系列，通俗易懂。在此分享。 网络是怎样链接的 计算机是怎么跑起来的 程序是怎么跑起来的]]></content>
      <categories>
        <category>笔记</category>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于在学习python3网络爬虫模块时的易模糊点]]></title>
    <url>%2F2018%2F03%2F06%2F%E5%85%B3%E4%BA%8E%E5%9C%A8%E5%AD%A6%E4%B9%A0python3%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E6%98%93%E6%A8%A1%E7%B3%8A%E7%82%B9%2F</url>
    <content type="text"><![CDATA[两种代理格式 在学习urlretrieve函数方法时，尝试了与BeautifulSoup模块的结合编码。 在request.bulid_opener()的一类函数方法中，如： headers = (&apos;User-Agent&apos;,&apos;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36&apos;) # 安装opener opener = request.build_opener() # 添加代理 opener.addheaders = [headers] # 使用临时的&apos;urlopen&apos; request.install_opener(opener) 而在有requests.get(url=url,headers=headers…)一类函数方法中，如： headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36&apos;} # 利用requests模块中的方法获取URL信息，加上我们的代理 re = requests.get(url=url, headers=headers) 比较两者易知，两者的代理规定与是否为字典形式有偏差。 在利用requests.get()下载图片时 re = requests.get(url=url) #应当加上二进制的格式规定，避免不必要的错误麻烦 with open(&apos;美女图片.jpg&apos;,&apos;wb&apos;) as mntu: for chunk in re.iter_content(chunk_size = 1024): if chunk: mntu.write(chunk) mntu.flush() 在查询相关的资料时，有Stream=True的参数说明要加入，但是加入之后却是错误显示。在with下面的for chunk…在下载图片时应当加入。为何要加入，在此可易知]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Charle的简单抓包操作]]></title>
    <url>%2F2018%2F03%2F06%2F%E5%85%B3%E4%BA%8ECharle%E7%9A%84%E7%AE%80%E5%8D%95%E6%8A%93%E5%8C%85%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[最近在看他人的博客学习python3网络爬虫的实战，看到了“抓包”的这个词，以前不知道… 用的是Macbook，在网上搜索了一下，Charle好评多多，急忙到网上找了破解教程…（关于如何找到，可利用百度谷歌搜索关键词） 第一次用这个，啥都不会，基本操作也不会，摸索了一下，打算记录下来帮助需要的人。 抓包的操作进入主界面先看看快捷键也是个不错的选择。如图： 可以知道，与Mac本机浏览器的快捷键相似。 New Session即为打开一个新的界面。 点击钢笔图标，输入URL，自动开始抓包了。 查看相关的快捷键，定向查找html中格式，如json格式 Find 系统代理配置 可以自动对目前系统中的一些URL进行抓包。 最后 继续摸索中..听说功能很强大，网上的教程非常多，暂时用不到太多，简单的操作说明到处结束了。 一些可参考的教程： 可参考一 可参考二]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Charle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3爬取网络图片的小程序项目]]></title>
    <url>%2F2018%2F03%2F05%2Fpython3%E7%88%AC%E5%8F%96%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[最近在学习python3网络爬虫，看的是这位学长的博客。 因为刚刚开始接触，想通过实战来一步步学习，所以先记录下我的学习心得，然后再记录下自己实战的成果以及相关的代码程序。 先声明，以下是学习心得，代码原搬，链接在上。 ##开始爬取的图片的下载代码的演示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181 ''' #开始爬取的图片的下载代码的演示 ''' from bs4 import BeautifulSoup from urllib.request import urlretrieve import requests import os import time if __name__ == '__main__': # 指定页面图片的多少数量 for num in range(1, 5): if num == 1: url = 'http://www.shuaia.net/index.html' else: url = 'http://www.shuaia.net/index_%d.html' % num # 因为是下载多个页面的图片，所以之后的图片名称与其相应的图片地址的代码抒写在for循环下编写 ''' #在此需要设置代理，避免爬取失败几率 ''' headers = &#123;'User-Agent': '* Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36'&#125; # 利用requests模块中的方法获取URL信息，加上我们的代理 re = requests.get(url=url, headers=headers) # 指定编码，避免中文乱码 re.encoding = 'utf-8' ''' # 利用beautifulsoup模块来进行处理 #re.text : 转换成规定的字符格式 #'lxml' : 利用lxml解析器进行解析 ''' bf = BeautifulSoup(re.text, 'lxml') # 解析完成之后，需要对页面的html信息进行分析了，指定相关的节点 ''' #class_是为了避免错误混淆，所以不可"原班人马" ''' tasges_html = bf.find_all(class_='item-img') # 指定空的列表，装下相关的需要的信息 list = [] # 利用循环，一一导入 for each in tasges_html: ''' #加上img是因为'alt'在以下的子节点中，所以需要相关的指明，即一个节点（父，子）一个指明 ''' list.append(each.img.get('alt') + '=' + each.get('href')) # 至此，相关的信息就采集完成了 print('采集over，开始下载：') ''' #开始将采集好的信息一一下载 ''' for each_img in list: # 以=分割图片地址与图片名称 img_info = each_img.split('=') target_url = img_info[1] filename = img_info[0] + '.jpg' print('下载：' + filename) headers = &#123; "User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36" &#125; img_req = requests.get(url=target_url, headers=headers) img_req.encoding = 'utf-8' img_html = img_req.text img_bf_1 = BeautifulSoup(img_html, 'lxml') img_url = img_bf_1.find_all('div', class_='wr-single-content-list') img_bf_2 = BeautifulSoup(str(img_url), 'lxml') img_url = 'http://www.shuaia.net' + img_bf_2.div.img.get('src') #若是指定的目录不存在则建立一个 if 'images' not in os.listdir(): os.makedirs('images') # 即指定URL地址下载 urlretrieve(url=img_url, filename='images/' + filename) time.sleep(1) print('下载完成！')``` &gt; **以上是通过学习[此篇博客文章](http://blog.csdn.net/c406495762/article/details/72597755)的学习心得，相关的加上图片解说可以看这篇博客文章。*** **附上用得到的知识链接：**[Python中time模块详解](http://qinxuye.me/article/details-about-time-module-in-python/)[python3中的urlretrieve() 函数使用](http://blog.csdn.net/vevenlcf/article/details/46777023)[urllib.request文档](https://docs.python.org/3/library/urllib.request.html)[Requests文档](http://docs.python-requests.org/zh_CN/latest/user/quickstart.html)[Python3 os模块文件/目录方法](http://www.runoob.com/python3/python3-os-file-methods.html)[Beautiful Soup 4.2.0 文档](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)[Python 文件I/O模块文档](http://www.runoob.com/python/python-files-io.html)## 实战部分:批量爬取美女图片&gt; 在这里收藏上[这一篇python3爬取图片的快速入门地址](http://www.bijishequ.com/detail/424024?p=)，有相关的模块方法介绍，有助于快速入门，再从一系列模块入手，之后再实战，一步步掌握。* 通过另外一个网站的分析，爬取其图片并且下载。（下载的图片均可在本工程目录可找到）**网址：http://www.27270.com/ent/meinvtupian/2017/223643.html**&gt; 搜索的美女图片关键词，随便点开的一个...现在我们打开网址，利用*Chrome*浏览器的抓包，看看此网址的*html*信息（如下）![](http://smartjpa.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8B%E5%8D%888.02.32.png)* ****在此有一个特别好用的方法，即为点击下方指出的图标，当我们把鼠标移到网页上的异常时，对应的*html*信息就会自动对齐。![](http://smartjpa.com/3%E6%9C%88-08-2018%2020-10-20.gif)&gt; 现在开始分析代码，这个网址是专题式的...点开一个专题就会有一个类型的图片...就网页看来一个页面仅仅一张图片。**在我们将鼠标移到图片处时，对应的代码也就自动对齐了（图1），还有它在的那个节点（图2），再点击下一张看看，查看*html*信息（图3），发现它们的节点信息一致，不同的仅仅为对应的标题以及图片的目录地址了（图4），我们可以从这里下手一步步来*** 图1![](http://smartjpa.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8B%E5%8D%888.14.53.png)* 图2![](http://smartjpa.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8B%E5%8D%888.14.35.png)* 图3![](http://smartjpa.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8B%E5%8D%888.14.14.png)* 图4![](http://smartjpa.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8B%E5%8D%888.15.00.png)&gt; 关于*html*的基础知识，只需要知道它们的结构以及节点，一些变量等的基础知识就够了，不需要太深入。可以在网上搜索关键词‘html基础知识’查看。这绝对是一劳永逸的。在分析之后写个测试代码： ''' 爬取美女图片实战代码 ''' import requests from bs4 import BeautifulSoup if __name__ == '__main__': url = 'http://www.27270.com/ent/meinvtupian/2017/223643.html' re = requests.get(url=url) # 编译解码格式，避免乱码出现 re.encoding = 'utf-8' # 用beautiful模块进行解析 bf = BeautifulSoup(re.text, 'lxml') #在此注意find_all与find方法的使用，因为一个页面仅仅有一张图片，用前者会出错 bf_html = bf.find('div', class_='articleV4Body') list_html = [] list_html.append(bf_html.img.get('alt') + ' : ' + bf_html.img.get('src')) print(list_html)运行，发现出现了乱码的情况：![](http://smartjpa.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8B%E5%8D%888.30.29.png)将'utf-8'格式换成了'GB2312'，发现乱码问题得到解决：![](http://smartjpa.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8B%E5%8D%888.35.17.png)* ****查看了一下*html*信息，发现'utf-8'格式是不可取的，对于这个网站来说。![](http://smartjpa.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-08%20%E4%B8%8B%E5%8D%888.34.26.png)还可以用以下这段代码得出网址的编码方式。```python #关于输出网页编码方式的判断 from urllib import request import chardet if __name__ == "__main__": response = request.urlopen("http://www.27270.com/ent/meinvtupian/2017/223643.html") html = response.read() charset = chardet.detect(html) print(charset) 运行看看： 可参考：chardet模块简单认识 得到了图片的目录信息以及相关的信息之后，就好办了。 为什么这么说？实际上我们爬取图片时仅仅需要图片的目录地址就可以利用一两行python爬虫代码下载下来了，代码利用urllib.requests模块中的urlretrieve() 函数就能轻而易举的办到。代码在下，也可以查看相关的文档来学习。 12345678from urllib.request import urlretrieveimport time# 简单爬取一张图片，或者是需要代理的测试if __name__ == '__main__': print('开始下载：') urlretrieve(url='html上的图片src信息', filename='xx照片'+'.jpg') time.sleep(1) print('下载完成！') 可以自己试试。 因为我们是为了爬取多张图片…所以可以分析一下每一页URL的不同或者是相似点。看图1，2发现了有索引_2出现，那再点击下一页会有_3…每一页有不同的照片，因为是一个专题…那么照片地址也不一样了（如图3，4）。 图1 图2 图3 图4 可以轻而易举的发现问题的所在了，接下来直接贴上完整的下载代码，不懂的朋友应当找相关的文档来自己查看，多写多实战！ 完整代码 代码编译步骤：查看信息到分析整合最后是代码实现。 123456789101112131415161718192021222324252627282930313233343536373839''' 函数目标： 爬取美女图片完整代码 编写开始时间： 2018-3-08 ''' import requestsfrom bs4 import BeautifulSoupfrom urllib.request import urlretrieveimport os import time if __name__ == '__main__': # 一个专题8页.. for num in range(1, 9): if num == 1: url = 'http://www.27270.com/ent/meinvtupian/2017/223643.html' else: url = 'http://www.27270.com/ent/meinvtupian/2017/223643_%d.html' % num # 在此就不添加代理部分的了，添加可起到隐蔽的效果，在需要的场合应当添加上 re = requests.get(url=url) # 之指定编码格式 re.encoding = 'GB2312' # 用beautiful模块解析,具体可查看文档内容 bf = BeautifulSoup(re.text, 'lxml') # 一页一张，用find方法 bf_html = bf.find('div', class_='articleV4Body') # 在创建的目录下保存！ urlretrieve(url=bf_html.img.get('src'), filename=bf_html.img.get('alt') + '系列之%d.jpg' % num) # 一秒一个步骤实行代码 time.sleep(1) print('开始下载第%d张' % num) print('下载完成，请查收...') 运行，查看效果： 在本工程目录夹可查收… 最后总结代码还可以完善，比如可创建一个目录专门便于我们查收… 总之，还需要多多学习。 修改添加目录程序12345678910111213141516171819202122232425262728293031323334353637import requestsfrom bs4 import BeautifulSoupfrom urllib.request import urlretrieveimport os import time if __name__ == '__main__': #可先建立一个专门存放图片的目录文件夹 if 'images' not in os.listdir(): os.makedirs('images') print('建立目录夹完成，开始下载图片！') # 一个专题8页.. for num in range(1, 9): if num == 1: url = 'http://www.27270.com/ent/meinvtupian/2017/223643.html' else: url = 'http://www.27270.com/ent/meinvtupian/2017/223643_%d.html' % num # 在此就不添加代理部分的了，添加可起到隐蔽的效果，在需要的场合应当添加上 re = requests.get(url=url) # 之指定编码格式 re.encoding = 'GB2312' # 用beautiful模块解析,具体可查看文档内容 bf = BeautifulSoup(re.text, 'lxml') # 一页一张，用find方法 bf_html = bf.find('div', class_='articleV4Body') # 在创建的目录下保存！ urlretrieve(url=bf_html.img.get('src'), filename='images/'+bf_html.img.get('alt') + '系列之%d.jpg' % num) # 一秒一个步骤实行代码 time.sleep(1) print('开始下载第%d张' % num) print('下载完成，请查收...')]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[麻木]]></title>
    <url>%2F2018%2F03%2F03%2F%E9%BA%BB%E6%9C%A8%2F</url>
    <content type="text"><![CDATA[新的学期开始了。 当我反思了自己在之前的一些所做所言，我开始了一股深深的愧疚感，我的理想到了哪里去了？我不愿做一个“偏激”的代言人之一，但是麻木亦然不可取。但我应该谨记在心里，不能忘记，更不能因为这现实的种种而丧失了我的初心，忘了我的理想，那我曾经认为的美好。 我是慢慢的变得麻木了，开始想要得安稳与胸无理想，开始想要的安于现状，这是多么的可怕。 人在一种环境当中总是或多或少的被影响一些的。如今的我想要一种平静，但那是一种可以应对自如的一种理性，而不是慢慢的陷于麻木的颓废。可能是我太舒服了，变得安于现状了，慢慢的麻木了，开始变得曾经的那些“不喜欢”了。 写着写着，突然想起来一句话：生于忧患，死于安乐。此时此刻的我对于这句话有了自己的更为深刻的认识。一个人活着应该是为了这个人类社会的忧患做出应有的努力。至少我是认同这样的一种观点的。我有些怀疑过这些许观点的必要性，为什么这样的一种观点会得到我的或者是说为什么会得到如今大部分人类的认同从而占据人类社会的主流思想呢？我认为这与人类道德中的“善”是相挂钩的，这与大部分人的期许相对应符合，大多数的人们都渴望有“平和”（“和谐”）的生活状态与“有教养”的人文社会。而我或许也是其中的一份子。 我曾经有过的一种强烈的理想：通过发明一种技术，从而造福整个人类，让人们生活的更好。 我也应当时时刻刻的记得自己的期许，有着自己的见解，有着自己的看法，而不是跟着“世俗”走，以免再一次变得“麻木”，我所认为的麻木。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[假期小记]]></title>
    <url>%2F2018%2F01%2F22%2F%E5%81%87%E6%9C%9F%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[最近总是想记一些东西，不过总是因为太懒就搁下了。 我谈恋爱了，是我喜欢的女孩。但是让我感觉有一些不靠谱，让我感觉到一场恋爱的开始是如此的容易…这是我没有想到的。她也喜欢我，我也喜欢她，一场恋爱就这样的开始了。我想开始一场恋爱也就如此而已，哈哈。 刚刚因为iCloud的一些事搁写了一下，现在继续。说到底Apple关于对于iCloud的宣布是对我有一些影响的，我对于自己的东西总是会有一些担心呢，哈哈。 我好久没怎么看三毛的书了，我以为我看了一本她的《三毛全集》就以为已将她的书都看完了，我发现还有一本她的书《送你一匹马》，依旧是从前的感觉，不过看的时候我的心情却是比从前平静的多了，但是，在其中带给我的感动总是满满的。 我如今觉得读书人读太多的书，或许是一种悲哀，一种赤裸裸的悲哀。难道不是吗，很多时候的可笑都是这一群自以为是的读书人做出来的。人都是矛盾的，这一点在读书人身上我却是更加的容易看到。读书人读书人，可笑的就是现在的我呢，哈哈。 这次放假的生活，也就像在学校一样的，吃喝拉玩睡等，不过玩和睡的比例却是大大的增加的了，哈哈。 突然的写着写着发现其实也没什么好写的了，不过是生活中的一些小小的记录。生活中的每一次清醒，我都会有一种极端的感觉，既然人生一场本来就是一无所有，我们现在做的却也不过是一场徒劳。不过有意义的总是在生活中的处处场景可以看到，我也一直相信，人生一场，意义是绝对存在的。 如今我更加的看重生活中的每一处，因为那是生活。我不过也就是一个学习者，我还要多多的学习，向生活学习。我自称学习者，刚刚写完这句话我又想笑了，哈哈。 算了算了。我发现如今的自己没有从前的那般的“热情记录”了，我变得不想说话在很多时候，其实说到底可能就是一种心态的体现而已。我不见得就是所谓的成长，有些东西随着时间的流逝有得有失，过着过着就变成今天这个样子了。 有时候总是想记一些东西，总是想写一些东西，有一种不写不舒服的感觉，有时候我觉得有一些欲望总是好的，特别是在这个无所事事的假期，我想我真的是懒得过分了过分了。 这一篇小记在此就结束了，想写的时候我会再来。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于在学习python爬虫时的学习记录]]></title>
    <url>%2F2017%2F12%2F08%2F%E5%85%B3%E4%BA%8E%E5%9C%A8%E5%AD%A6%E4%B9%A0python%E7%88%AC%E8%99%AB%E6%97%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[最近学习python3爬虫，看的是这位博主的博客，不得不说，是真的厉害，通俗易懂^ _ ^ 我要学习的还有很多…从基本的python知识，我就被难倒了… 哎，记录下我的盲点… 花了近一个钟头测试出来的结果。 在爬取相关的html时，text ≠ text[0] 后者是正确的。我一直以为不加的效果也是一样的结果，在我理解看来就是从头开始的，即从0到尾的所有相关的内容，实际上我的理解与相关的python基础不谋而和，可能是爬虫就需要如此的？我就默认好了… 在python中的方法后面的（）是不可省去的 在我学过一些其他的语言，在方法后面可不加括号，如Scala，曾经我在其他的python编程中是行得通的…但是在处理爬虫的代码时就报错了，我也默认了… 在class括号中的object是可有可无的 这无疑是python的基本知识… 关于在python中类似C中的printf函数的使用 基本上是与C中的用法一致的，但是在爬虫中需要将爬取的内容输出，就需要%%来表示了…参考了这篇文章，其中的有句这样解释道：用进行转义一样，这里用%作为格式标记的标识，也有一个%本身应该如何输出的问题。如果要在”格式标记字符串“中输出%本身，可以用%%来表示。 在用文件的io与requests模块的结合（x.content()）,可达到与urlretrieve函数同样的效果（只需输入URL地址即可）。 总结：还需要更多的学习。]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习笔记</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今后的打算]]></title>
    <url>%2F2017%2F12%2F07%2F%E4%BB%8A%E5%90%8E%E7%9A%84%E6%89%93%E7%AE%97%2F</url>
    <content type="text"><![CDATA[恍然大悟，等我看到还有保研一说的政策时，我如今已是一名大二的学生了，保研的机会我基本上已是错过了。在我参考了一些相关的资料时，我又一次看到了人与人之间的差距… 眼界对于一个人真的是太重要了，一个人不应该总是停留在现在，应该时时思考自己未来的方向。 在如今的科技浪潮上，更高的学历当然是我所向往的，而我不喜欢考试，我深深的感觉到了自己不擅长考试，不管是小的还是大的，我对于考试已是到了难以忍耐的地步了，我能从内心感觉的到。 在我的这个时代，人工智能的浪潮早已是滚滚而来了。如今的我们身处在这个看似大好的“时代”，我也想分一杯羹，我也想通过这一次浪潮发挥自己的效用，借此实现自己的理想，为世界带来更多的福利，为世界人民带来更好的生活。 而在如今的现实是，高学历的普遍存在…这无疑会成为我的短板…而我可能也会因此而做出退让，放弃自己的技术选项…这真的是我的悲剧啊,会是我人生最大的悲剧吗？ 如今的我需要突出自己的优势了，一定要突出自己的优势。更高的学历意味着无疑拥有更大的机会会得到更好的资源与更加广阔的眼界，不得不说，一个人的学习应该是终生的… 目前的我太过于浮躁与无定向的迷乱了…我还需要更多的学习与实践，突出自己的优势，必将是我应当做的，就在不远的今后。 摆正心态，不断实践，突出优势！]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于利用python爬虫爬取小说的实战例子]]></title>
    <url>%2F2017%2F12%2F04%2F%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E5%B0%8F%E8%AF%B4%E7%9A%84%E5%AE%9E%E6%88%98%E4%BE%8B%E5%AD%90%2F</url>
    <content type="text"><![CDATA[前言最近对python爬虫很感兴趣，就花了一些时间来学习，学习了近一周的时间，终于在看了一些其他博客的大神写的教程之后，学会了利用beautifulsoup的方法爬取了一些网站的小说。在此分享我学习的成果。 关于详细的python3爬虫的学习教程以及参考：学习教程 本文参考并且学习了：这篇文章 在以下的文中主要介绍爬小说的技巧。 爬取的过程素材 笔趣阁小说网 小说阅读网 技巧分析在编写代码前应先在浏览器中（推荐Chrome，我用的Safari）查看在网页抓包中的相关的内容信息，一般查看其中的： charset（即其中的编码类型，在后面的程序中需要） 在文章开始阶段的前的那一小段html编码 如下图所示的（等下将要用到）： charset所示： 一般在最前头可以看到。 主要的一小段html(即为div的标签，后面为相应的属性值，即一个html中有多个标签，每一个标签用不同的属性值来进行标记以表示不同的标签，从而在一个页面中可以有多个不同的内容展示出来)所示： 如上在文章的前边的那一小段的html代码。 代码 可先用相关的代码查看相关的网页字符属于那种编码类型 123456789# 用beautifulsoup爬取小说的例子# 可先将网页编码的字符先行得知 from urllib import request import chardet re=request.urlopen('http://www.biqukan.com/1_1094/5403177.html') charset=chardet.detect(re.read()) print('we can see the cahrset about the html:',charset) 具体的学习可以参考这篇文章。 开始编写爬取相关内容的代码。将其中的URL地址以及相关的charset所属字符在以下的代码中修改一下均可达到在下方效果的显示 123456789101112131415161718192021222324#开始爬取相关的内容from urllib import requestfrom bs4 import BeautifulSoupfrom urllib import errortry: if __name__ == '__main__': #相关的URL的输入以及代理 re=request.Request(url='http://www.biqukan.com/1_1094/5403177.html',headers=&#123;'User-Agent':'* Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30'&#125;) #打开,并且以相关的解码方式，此处应当对应上方的charset html=request.urlopen(re).read().decode('gbk','ignore') #接下来创建beautifulsoup对象,找到相关的参数以便爬取内容 soup_text=BeautifulSoup(html,'lxml') #在html中若是有class注意将其中的class改为class_（因为python中有个class关键字的存在了),在此应当对应上方说明的html的一小段的编码 texts=soup_text.find_all(id="content" ，class_="showtxt") soup_texts=BeautifulSoup(str(texts),'lxml') #输出时将删除相关的不符合要求的字符,将其替换为空白 print(soup_texts.div.text.replace('\xa0',''))except error.URLError as e: if hasattr(e, 'code'): print('httperroe:') print(e.cond) if hasattr(e, 'reason'): print('urlerror') print(e.reason) 详细可参考：这篇文章 结果查看 关于在第一段的实战效果： 关于在第二段的实战效果： 最后 在网页中爬取的小说内容都是可以直接下载至本地的，具体的可以参考以上的那个学习教程。 可学习的参考网站： python3爬虫教程 beautifulsoup官网教程]]></content>
      <categories>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Mac关机与iCloud的打不开的问题记录]]></title>
    <url>%2F2017%2F12%2F03%2F%E5%85%B3%E4%BA%8EMac%E5%85%B3%E6%9C%BA%E4%B8%8EiCloud%E7%9A%84%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[这一段时间因为开的网页比较重要，Mac一直没有关机，晚上睡觉也是合上就这样了，没想到才3天这样，Mac好像支撑不了了…变得有些卡了，在未关机前的硬盘空间大小与关机后打开之后的硬盘空间大小相差了5个G，在重启开机时出现了一段绿屏…，由此可知，一段有规律的关机保养还是很有必要的… 关于iCloud的一些打开错误，如打开查看存储信息时的错误问题等等，一般的解决方法为：换一个网络连接即可解决。 此时换DNS的地址是不管用的。]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
        <tag>iCloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Mac网速慢的原因记录]]></title>
    <url>%2F2017%2F12%2F01%2F%E5%85%B3%E4%BA%8EMac%E7%BD%91%E9%80%9F%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[最近Mac突然变得很慢，明明网速很快的。 在网上看了一下，发现可能是DNS的问题，果然换了一下（以前用的都是8.8.8.8估计用的人多了就卡了），把号删除了，发现网速飞的快起… 不过在平时中下载app失败时可以考虑换回来就好使了。]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于python下载scrapy失败的问题记录]]></title>
    <url>%2F2017%2F12%2F01%2F%E5%85%B3%E4%BA%8Epython%E4%B8%8B%E8%BD%BDscrapy%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[用的anaconda的python3，下载scrapy出现以下情况： 即表示下载失败。 看到网上大部分说的太复杂的解决方案，其实太过于小题大做了。 解决方法：重新下载一次。 图1 用命令行conda list查看 下载成功了。 若是失败了，多下载几次大多即可解决。]]></content>
      <categories>
        <category>笔记</category>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于用java编译的mapreduce与用Scala编译的spark的对比（单词统计的例子说明）]]></title>
    <url>%2F2017%2F11%2F29%2F%E5%85%B3%E4%BA%8E%E7%94%A8java%E7%BC%96%E8%AF%91%E7%9A%84mapreduce%E4%B8%8E%E7%94%A8Scala%E7%BC%96%E8%AF%91%E7%9A%84spark%E7%9A%84%E5%AF%B9%E6%AF%94%EF%BC%88%E5%8D%95%E8%AF%8D%E7%BB%9F%E8%AE%A1%E7%9A%84%E4%BE%8B%E5%AD%90%E8%AF%B4%E6%98%8E%EF%BC%89%2F</url>
    <content type="text"><![CDATA[最近在学习spark，顺便也学习了Scala的在其间的使用。我发现与用java编译的mapreduce相比，用Scala编译的spark更加的容易让人被其折服… 直接看图说话吧，感受spark的强大！以统计单词为例。 以下为java编译的mapreduce 70+行的代码。 Scala编译的spark 仅仅为6行代码…. 同样的结果如下： 最后，据说官方会考虑将mapreduce优化,拭目以待吧…相比如今的spark的威力… 记录此文章仅仅是为了表达我心中的兴奋，因为遇到了spark…]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Java</category>
        <category>Mapreduce</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Java</tag>
        <tag>Mapreduce</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于在用Scala编译spark中的reduce方法计算的问题疑惑记录]]></title>
    <url>%2F2017%2F11%2F28%2F%E5%85%B3%E4%BA%8E%E5%9C%A8%E7%94%A8Scala%E7%BC%96%E8%AF%91spark%E4%B8%AD%E7%9A%84reduce%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97%E7%9A%84%E9%97%AE%E9%A2%98%E7%96%91%E6%83%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[在学习spark中，reduce方法是绕不开的。但是我在测试时发现与从前的规则好像有一点冲突了… 如下分析： 输入代码 1, val a=sc.parallelize(1 to 10)//理论上理解为0～9的数字放在一个分区 2, a.reduce((x,y) =&gt; x+y) 输出 55//即意味着从0（0可省亦可）到10(包括10在内了，与上方的to方法冲突了)都被相加了… 这测试我想了老半天了…没想到是这种结果…bug???]]></content>
      <categories>
        <category>Scala</category>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Scala</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[名人效应]]></title>
    <url>%2F2017%2F11%2F28%2F%E5%90%8D%E4%BA%BA%E6%95%88%E5%BA%94%2F</url>
    <content type="text"><![CDATA[“名人效应”在我们的生活中屡见不鲜，当我们在遇到一些挂有所谓的“名气”的人，比如“名校”出来的人，或者是一些本身就是所谓的“名人”的人时，心中大多会不由自主的产生一种敬畏与向往，有时竟然会产生自卑的感觉…我感觉这好似一种“阴差阳错”，又不得不感慨这种“名人效应”对我们的这种“潜移默化”教化的感觉。 那么这种效应究竟是从何而来？为何又产生这种貌似人与生就有的“天性”？我想可以在我们的生活中可以找到答案。 因为我们从小到大的生活环境都是如此“教育”我们的，所以在我们身边大部分的人的这种相关的“感觉”会伴随我们成长，久而久之我们也是这般如此了。简要分析可知这一类的大部分人在我们成长的过程中好似又是不可或缺的，又好似是不可避免的，哈哈，难道不是吗，我们身边的大多数父母即是如此，最简单的理解，“考上一个好的大学”。在此我们就知道了，原来世界上有一些“有名”的大学，从身边的一些“名人”的崇拜者，我们与之交流亦或者是道听途说，听多了看多了自然也就易被“名化”了… 那么“自卑感”又从何而来？…我想这是一种错误的，被“名化”扭曲了的心理活动吧，至少我是这么认为的。这里的“名化”可以理解为被“名”影响化了的意思，这样的人往往不由自主的随波逐流，被“名”波及到。当然，可能也与所谓的“好强心”，所谓的“羡慕嫉妒”也会有一定的挂钩吧。 不管怎么说，我感觉这就是一种“不应该”，带“名”的东西亦然有其的优势，但是如果一味“随波逐流”的因此把自己搞得扭曲，那真的是得不偿失，对不起自己了…与我而言，真的是一种非常蠢的心理活动呢…]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于在eclipse中编译Scala自动补全的添加设置]]></title>
    <url>%2F2017%2F11%2F27%2F%E5%85%B3%E4%BA%8E%E5%9C%A8eclipse%E4%B8%AD%E7%BC%96%E8%AF%91Scala%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[如下图 全部打勾上，还犹豫个啥子？编译过程中会发现比之前轻松不少。]]></content>
      <categories>
        <category>软件使用</category>
        <category>Eclispe</category>
        <category>Scala</category>
      </categories>
      <tags>
        <tag>Eclispe</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于在简要学习Scala中的疑惑记录]]></title>
    <url>%2F2017%2F11%2F27%2F%E5%85%B3%E4%BA%8E%E5%9C%A8%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0Scala%E4%B8%AD%E7%9A%84%E7%96%91%E6%83%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[在简要学习Scala的一些基本的使用，有一些学习上的感到疑惑的问题记录在此。 调用方法时不加“.”一样可以，在方法最后不加“return”亦可，不过为了可读性，一般都是加的。 在语句时常出现的“-” 其实这就是一种变量的简写。打个比方： 12val a = Array(1, 2, 3, 4)val b = a.map(_ * 2) 输出变量b：（2，4，6，8） 则易可知其中的语句val b = a.map(_ * 2)就相当于val b = a.map(a * 2) 关于其中的lazy 详细可以参考此文章 如下打个比方： lazy val property = initProperty() 使用lazy关键字修饰变量后，只有在使用该变量时，才会调用其实例化方法。也就是说在定义property=initProperty()时并不会调用initProperty()方法，只有在后面的代码中使用变量property时才会调用initProperty()方法。 如果不使用lazy关键字对变量修饰，那么变量property是立即实例化的 可以再看看下面的利于理解： 12345678910111213 object LazyOps &#123;def init(): String = &#123; println("call init()") return ""&#125;def main(args: Array[String]) &#123; val property = init();//没有使用lazy修饰 println("after init()") println(property)&#125; &#125; 上面的property没有使用lazy关键字进行修饰，所以property是立即实例化的，如果观察程序的输出: 123call i nit()after init() 可以发现，property声明时，立即进行实例化,调用了init()`实例化方法 而如果使用lazy关键字进行修饰： 123456789101112131415 object LazyOps &#123;def init(): String = &#123; println("call init()") return ""&#125;def main(args: Array[String]) &#123; lazy val property = init();//使用lazy修饰 println("after init()") println(property) println(property)&#125; &#125; 观察输出: 123after init()call init() 在声明property时，并没有立即调用实例化方法intit(),而是在使用property时，才会调用实例化方法,并且无论缩少次调用，实例化方法只会执行一次。 在Scala中的break可用return替代。 暂时这么多，以后再补充。]]></content>
      <categories>
        <category>笔记</category>
        <category>Scala</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用eclipse搭建Spark的运行环境(单机)]]></title>
    <url>%2F2017%2F11%2F26%2F%E7%94%A8eclipse%E6%90%AD%E5%BB%BASpark%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83(%E5%8D%95%E6%9C%BA)%2F</url>
    <content type="text"><![CDATA[学习Spark用的eclipse习惯了，看了这一篇文章搭建了一个单机环境，不过这个单机环境搭建起来了，以后的集群环境我相信也容易了… 准备 本地下载Scala 本地有下载Spark 本地有下载eclipse以及Scala的插件 以上过程在网上已经有一大堆教程了。 搭建过程 我的搭建过程与上方的文章有一些差距，毕竟年代久远了… 第一步：以上的环境都搭建好以后，建一个Scala工程。 第二步：在此工程下建一个Scala Object，在Scala中是以建立一个Object为准的，意思就是相当于python的一个方法工程。Scala一向诡异，看它的语法就知道了… 第三步：导入spark中的相关的包（如图），为了避免什么问题反正我是全部导入了 如果在建立之后，工程的下边出现有一个小叉叉，右键Scala Library container,选择Properties,选择上一代一版本的Scala（如图）即可解决小叉叉的问题，如果不行可以尝试其他的版本试试。(我的默认是2.12,换下面的2.11小叉叉消失,spark2.2.0建立和分发默认使用Scala 2.11) 测试 环境搭建就是那么的简单，在此测试一下。在刚刚建好的工程下输入以下代码，注意其中的提示 12345678910111213141516171819import org.apache.spark.SparkConfimport org.apache.spark.SparkContext //以下主类名为工程名object First_Spark &#123; def main(args: Array[String]): Unit = &#123; val conf = new SparkConf() conf.setAppName("Frist Spark") conf.setMaster("local") val sc = new SparkContext(conf) //以下为文件的所在地 val lines = sc.textFile("/Users/junjieliu/Downloads/README.md", 1) val words = lines.flatMap &#123; (lines =&gt; lines.split(" ")) &#125; val pairs = words.map &#123; word =&gt; (word, 1) &#125; val wordcount = pairs.reduceByKey(_ + _) wordcount.foreach(pair =&gt; println(pair._1 + ":" + pair._2)) sc.stop() &#125;&#125; 运行，点击run（如图） 测试效果： 看起来是不是比Hadoop的mapreduce简单多了，哈哈。 补充： 在eclipse中编译spark代码时，应当加上println之类的方法在最后以保结果可以正确输出，为何要强调这一点呢？因为在终端运行代码时，我们通常是不需要输入println之类的方法就可输出相关的结果的，这一点应该记住，不然易导致在eclipse中运行代码时容易出错，并且大部分人我相信也会像从前的我一样没有什么头绪，而现在就有了… 如图： 这些真的都需要自己去实践发现的，我也是在参考了一些资料之后才发现的这个问题…因为网上关于用eclipse像我这样编译spark的教程并不多，据我所看到的，大多用maven来搭建spark的编译环境的。 最为重要的一点是在eclipse中编译相关的代码时，输出的结果是无法判断是否是正确的…即使我们在平时的编译中是有一定的错误提示的，但是对于初学者来说还是有一点不友好的感觉… 另外的补充：在eclipse中运行结果时，有一定的会在右下角显示的缓冲时间，细心一点的朋友可能会发现了，由此说来结果是需要一点时间来输出的（不如说是正确的结果）。所以在eclipse运行时需要多运行几次（因为需要在第一次运行之后缓冲才会开始，所以一般运行两次这样就可得之正确的相关的结果了），若是结果还不对，最大的问题可能就是在代码上了…]]></content>
      <categories>
        <category>Eclispe</category>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Eclispe</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于在《用python写网络爬虫》一书中的补充]]></title>
    <url>%2F2017%2F11%2F23%2F%E5%85%B3%E4%BA%8E%E5%9C%A8%E3%80%8A%E7%94%A8python%E5%86%99%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E3%80%8B%E4%B8%80%E4%B9%A6%E4%B8%AD%E7%9A%84%E8%A1%A5%E5%85%85%2F</url>
    <content type="text"><![CDATA[最近学习爬虫，感觉挺有意思，在看《用python写网络爬虫》以及《python网络数据采集》，前者使用python2为主，后者则是以python3为主，各有千秋，对我来说都不错。 不过在前者的书中的一些方法代码却是有时运行容易出错，解决的方法是将书中的方法裁开，用非方法的方式写出相应的代码即可正确。关于此可以参考这位大神的博客。博客以python2写的爬虫，有一些实战，与书搭配着看效果非常不错。 另外的一些问题，在我之后在补充。目前问题并没有发现太多。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Vi/Vim的基本使用的记录]]></title>
    <url>%2F2017%2F11%2F22%2F%E5%85%B3%E4%BA%8EVi-Vim%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[关于vi / vim命令的记录 12345678910111213141516171819202122232425262728293031323334353637*其中的命令的快捷键均对应Mac的“control”键*一般模式到编辑模式：i,o,a,r(可大写) 按下ESC推回 ↑↑ 编译模式与命令模式两者不可切换 ↓↓一般模式到命令模式：：，/，？进入 按下ESC推回vi /vim （文件） //编译一个文件在一般模式中输入“：wq” 保存之后离开vi（输入“：wq!”可强行写入，即在权限可改的前提下）另外用“：w”可获得文件的相关的基本信息，利用“：q”可直接推出编译alias 的使用得知一些命令行名字的改变vim 与 vi的区别：最为简单的一点为两者在打开文件的显示亦然不同，前者的功能亦然是相比后者多多的。即在一般模式下的关于文件内容的选择相关的操作（亦称为所谓的Visual Block，即块选择）：在需要的地方按下Ctrl+v —&gt; 移动到需求的地方，开始发白…此时即可进行相关的操作了（y:复制，p:粘贴，d:删除）vim的多文本的编译：多个文件的打开：vim (文件名1） （文件名2）多个文本编译的按键 :n 编译下一个文件:N 编译上一个文件:fiel 目前所有的文件展示其中的快捷键记录：“G:到最后一行”，“u:还原数据”，“q:推出”vim多个窗口的实现：:sp 在目前的窗口中按下得出同一个文件的另一个新的窗口:sp (文件名) 在目前的窗口打开新的文件的一个新的窗口Ctrl+w+j / ↓ 换窗口操作，按ctrl不放，在按下w放开所有的键按下最后的键即可Ctrl+w+k / ↑ 如上操作Ctrl +w+q 等于在一个窗口中按下“:q”推出现在的窗口关于在vim之中的一些环境设置可参考其他的材料。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Linux与win的基本命令的简要记录]]></title>
    <url>%2F2017%2F11%2F22%2F%E5%85%B3%E4%BA%8ELinux%E4%B8%8Ewin%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E7%9A%84%E7%AE%80%E8%A6%81%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[基本命令 实际上的命令通过man /info /—help即可快速掌握命令的使用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112Centos Windonsls （目录名） dir //查看其中的内容ls —help / man ls /info ls //查看命令帮助clear cls //清屏cd . cd . //进入当前目录cd . . cd . . //进入上级目录cd /xxx/xxcd / / cd ~ //根目录cd - //返回上一级目录pwd //显示当前目录whoami / who //查看当前名与版本号等等...lsb_release -a //查看系统信息rmdir //删除一个空的目录echo $PATH //查看用户的配置情况～表示自己的主文件夹,即为root根目录date （可加相关的对应符号得出对应的理想的日期） //日前cal（可指名时间） //日历bc （quit推出） //系统计算器的进入shutdown //关机 reboot //重启有时会因为权限问题导致命令执行失败，即为root与本人的切换可以解决chgrp //改变文件所属用户组chown //改变文件所有者chmod //改变文件的权限，r:4 ; w:2; x:1 su (root) //切换用户exit //推出当前的用户chown （用户）(文件目录) //以给予文件到一个没有权限的用户passwd //当前用户密码更改以上两者一并使用ifconfig ipconfig //查看IP地址ping (域名地址 / localhost) //网络延迟有一些需要在有网的情况下ping…ll //别名, 即为ls -l的命令行罢了alias //查看所有别名ls -a -l -h //查看当前目录 -h , 人性化 -l ,列表 -a,显示，开头mkdir ~/xxx/x //创建目录文件夹touch ~/xxx/x/x.txt //创建文件，亦可结合相关的参数更改文件的日期echo (内容）&gt; x.txt //重定向输出，即为输入内容到此中echo (内容) &gt;&gt; x.txt //追加内容入文件cat x.txt / more x.txt type x.txt //查看文件tac x.txt //以最后的行数输出，即与cat的命令功能相反nl （参数）（文件） //将文件内容添加行数打印出来more / less //翻页参考文件内容cp x.txt （可有多个一同）x1.txt //复制文件rm x.txt //删除文件cp *.txt（可有多个一同） tmp/（可不加 / ） //复制文件入某个文件夹rm * //删除当下文件夹全部文件rm x.txt //删除文件rm -rf tmp //强制删除mv x.txt tmp/ //强行删除文件夹以上的目录应当清晰自己在哪…centos 切换模式:若是在Mac系统的虚拟机运行的系统，则ctrl对应control, alt对应option，按fn显示F键盘ctrl + alt +f6 //切换到文本模式Ctrl + alt //切换鼠标Ctrl + alt +f1 //切换到桌面模式Ctrl + alt +f5 //切换到新的文本模式 Nano文本编译器命令行若是在Mac系统的虚拟机运行的系统，则ctrl对应control, alt对应option，按fn显示F键盘nano x.txt //打开nano编译器，编译对应的文件在nano的文本编译器中注意本人与root的区别ctrl + o //保存文件，之后直接回车保存Ctrl + x //提出文件Ctrl + k //cut文件Ctrl + u //uncut / 复制相关的内容到当前文件more （（可加）-5（数字，表示显示多少行））x.txt //分屏显示在当前的目录下直接使用more亦可tail x.txt //最后10行find . | more // | 是管道符，前面的命令的输出作为后面命令输入find ~ ls head -(数字）x.txt //取出前几行的文件内容tail -（数字）x.txt //取出后面几行的额文件内容od //改为进制表的形式来输出相关的文件内容umask (-S) //文件默认权限的查看chattr //设置文件的隐藏属性，如不能被删除等..lsattr //显示文件的隐藏属性file //查看一个文件的基本信息which //查找“执行文件”，一般的“执行文件”可以理解为可以cd到的文件whereis //查找文件地址，或者是说查找包含有相关的字词的文件locate //查找相关的字词的文件位置find //强大的查找命令，包括有关于日期的，本人的限定条件查找等..还有一些SGID的特殊权限在书中查找即可..]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无言]]></title>
    <url>%2F2017%2F11%2F22%2F%E6%97%A0%E8%A8%80%2F</url>
    <content type="text"><![CDATA[搞海外民运的所谓的核心人员，像是无头无脑的庸人似的，毫无表现出应有的政治才能，除了一味的附和大众，一味的解脱自己，依然也做不成什么气候，那为何要这般折腾呢。这不像是所谓的民运，不像是所谓的要解放华夏人民，这像是一番闹剧，给多数的明智的人们看来就像是一出笑话。在我看来，民运可以得到支持，但是前提是需要一个靠谱的领导人来领导前行，现在的一些所谓的天天喊着要搞民运的却是没有什么才能没有什么实干的人不适合当这个角色。 中国大陆历史以来都是一代又一代的专制者的舞台，如今的中共也不过是铺了前人的后台，不过历史告诉人们，灭亡的一天终将会到来。 人们不应麻木，应当时时保持清醒，保持自我的理智，迎接好不确定的未来明天。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于python爬虫代码的运行]]></title>
    <url>%2F2017%2F11%2F20%2F%E5%85%B3%E4%BA%8Epython%E7%88%AC%E8%99%AB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[关于python爬虫的关键几点简单在此记录下好了。 下载Scrap库。 在每一个基于python2工程中的第一行加上# -*- coding: UTF-8 -*-，否则运行时出现会不必要的错误。 在eclipse中运行代码。实际上以上的要求达到后，直接在eclipse中创建工程，编写好了一步在eclipse中运行即可得知结果。 在终端中运行代码。在其中打开python编译环境，之后对向工程的所在目录，一般是eclipse的workspace之中的子目录（即指向工程的上一级目录处），用命令行python XXX.py直接运行即可得知结果。]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习笔记</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac上关于路欧词典的破解问题记录...]]></title>
    <url>%2F2017%2F11%2F20%2FMac%E4%B8%8A%E5%85%B3%E4%BA%8E%E8%B7%AF%E6%AC%A7%E8%AF%8D%E5%85%B8%E7%9A%84%E7%A0%B4%E8%A7%A3%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[因为在iPad上用了路欧词典，感觉还不错，想在Mac上也用用，发现要不少的钱…在网上看了一下也糊里糊涂摸索了一下，今天一打开发现已经是破解状态了…在此记录下。 希望有钱的还是支持正版，学生没钱才这样的… 链接：路欧词典官网 第一步，找到相关的文件 图1 图2 点击打开如上的相关的文件，我用的Xcode 第二步，添加相关的内容 图1 以上的没有，所以要自己添加，ID不一定要一致 图2 改为820711，据说只有这个才是专业版的代号…据说改这个数字可以延长免费期限… 第三步，锁定文件，避免自动文件修改 图1 图2 接下来就需要重新打开词典等待结果了，可能一下就得到破解了… 关于下载相关的扩展到官网下载： 最后 其实Mac自带的也不错，但是路欧词典还要简单一些。]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Mac</tag>
        <tag>路欧词典</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Mac自带语音时而快捷键不灵时的问题]]></title>
    <url>%2F2017%2F11%2F19%2F%E5%85%B3%E4%BA%8EMac%E8%87%AA%E5%B8%A6%E8%AF%AD%E9%9F%B3%E6%97%B6%E8%80%8C%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8D%E7%81%B5%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[有时关机了又开机发现想要利用Mac自带的语音按下快捷键发声时怎么也不好使了。 解决：先对选中的字词右键 –&gt; 语音 –&gt; 开始朗读 –&gt; 在这之后会发现用快捷键就好使了。]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python2.7爬虫使用一些方法问题记录]]></title>
    <url>%2F2017%2F11%2F18%2FPython2.7%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[在学习基本的网站技术查看就遇到了问题…在此记录一下。 我是在eclipse中编的python，用的是anaconda python2.7。 在eclipse使用builtwith的方法提示需要工程名以builtwith为名的前提下，但是也是失败了（提示builtwith.parse方法找不到…） 解决： 在以后遇到了这类情况可以直接到终端运行就好了，可能第一次运行会出现(‘Error:’, URLError(error(65, ‘No route to host’),)) 的错误问题，不过再重新运行一次就能解决了。如下图： 完美解决。 包括有whois.whois的之类的方法，在终端运行都可得到好的解决]]></content>
      <categories>
        <category>笔记</category>
        <category>Python</category>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习笔记</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Anaconda python两个版本共存时的包的下载问题]]></title>
    <url>%2F2017%2F11%2F18%2F%E5%85%B3%E4%BA%8EAnaconda-python%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98%E6%97%B6%E7%9A%84%E5%8C%85%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[关于Anaconda下载的问题就不在此多说了，去官网下载好即可，环境也会随着下载好之后自动配置好了。 如现在我已经安装有了Anaconda python2.7与anaconda python3.6。 下载包过程先创建两个基于anaconda的python虚拟环境，后面下载包需要那个版本即切换到那个版本再利用pip install即可完成下载 关于相关的虚拟环境创建步骤可以参考：此处]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Python</category>
        <category>Anaconda</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>问题记录笔记</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[焦虑]]></title>
    <url>%2F2017%2F11%2F17%2F%E7%84%A6%E8%99%91%2F</url>
    <content type="text"><![CDATA[今天对于自己未来发展的焦虑有如洪水一般滚滚而来… 我看好这个时代的潮流趋势，但是大量的社会事例不得不让我低下头去思考这社会潜在的需求。即学历。学历无疑是我心中的一道坎，然而我是从内心厌倦着这所谓的升学考试的。 这东西与我想要发展，想要生存的一方面却是成了相对面。 社会的需求与我不合，我的能力如今配不上我的野心。这才是我真正的焦虑。 我没有亲历过，我的焦虑多是因为道听途说，然而，人们的经验给予的借鉴亦然必不可少。 这社会普遍的价值观与我格格不入。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于在iOS系统上快速下载YouTube上的视频以及音乐]]></title>
    <url>%2F2017%2F11%2F15%2F%E5%85%B3%E4%BA%8E%E5%9C%A8iOS%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%BF%AB%E9%80%9F%E4%B8%8B%E8%BD%BDYouTube%E4%B8%8A%E7%9A%84%E8%A7%86%E9%A2%91%E4%BB%A5%E5%8F%8A%E9%9F%B3%E4%B9%90%2F</url>
    <content type="text"><![CDATA[因为买了一个iPad，所以从网上研究了一下如何从iOS系统从YouTube上下载视频与音乐。 前提 先从app store上下载Documents软件，之后均在其软件的浏览器上为基础下载相关的资源。 开始过程如果要下载一个视频，为以下地址： https://www.youtube.com/watch?v=zOivw83p2cw 3种方法： 支持MP4 在以上的YouTube字样前加上ss,如下： https://www.ssyoutube.com/watch?v=zOivw83p2cw 即会跳到相关的网页，选择好格式，点击Download选择文件保存处即可完成下载。 支持MP3，MP4 在以上的YouTube字样后加上to,如下： https://www.youtubeto.com/watch?v=zOivw83p2cw 即会跳到相关的网页，选择好格式，点击Download选择文件保存处即可完成下载（其中有时会需要重新输入URL）。 （推荐）支持MP3，MP4 在以上的YouTube字样后加上pp,如下： https://www.youtubepp.com/watch?v=zOivw83p2cw 即会跳到相关的网页，选择好格式，点击Download选择文件保存处即可完成下载。其中有多种格式可选择。很好，很方便。 最后 关于在Mac上下载YouTube的MP3，MP4的资源，一个软件足以了，在我的博客中有相关的资源文章。 文章到此结束了。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>IOS</tag>
        <tag>Youtube</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用YamDispalyFree免费实现Mac与iPad的屏幕扩展]]></title>
    <url>%2F2017%2F11%2F14%2F%E5%88%A9%E7%94%A8YamDispalyFree%E5%85%8D%E8%B4%B9%E5%AE%9E%E7%8E%B0Mac%E4%B8%8EiPad%E7%9A%84%E5%B1%8F%E5%B9%95%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[前言是的，再也没有比现在更为激动人心的时刻了，我为了实现我的Mac与我的iPad的屏幕扩展，找了许多的资料，也参考了不少的软件，发现基本上都是需要钱的，经过我几个小时的折腾终于发现了一款免费的软件可以实现我的需求了。 此文章绝对是我本人原创，但是软件是属于国外的大佬的，翻了这么久的谷歌（百度直接忽略），也没有发现这一款免费的并且超级好用的软件，是我本人抱着试一试的心态以及足够的运气才找到的，国外的朋友估计早就知道了… 废话不多说，赶快开始我的介绍吧。 安装 在iPad上直接搜索YamDispalyFree，注意是Free的，里面有介绍每7分钟一次掉线一次，但是我们只要每7分钟重新花上2秒钟连接就可以实现免费永久使用！而且掉线回来后，我们的桌面不会被初始化！ 在Mac或者是对应的pc的浏览器上搜索yamdisplay.com下载免费的客户端，注意，里面有关于Mac的新系统MacOS High Sierre的配合使用介绍，注意看就可知了 使用 因为是USB的前提下，所以需要一条数据线了。在iPad端与Mac端打开下载好的客户端，插入数据线即可实现屏幕的另一扩展！ 心得 如我上面说的，每7分钟重新连接，即每7分钟会自动掉线，点击在iPad弹出来的窗口下的Not Now（每一次掉线均如此），就可以永久免费使用了。 在此我建议使用的人不要轻易更新…因为这可能是一个BUG。 软件可以实现电脑的映像投射与桌面扩展,其中的桌面扩展通过触摸板或者是鼠标可以跨界工作，也支持手势点击触摸！ 软件的扩展的清晰度很好，可调换。 软件的流畅度一般，有时又非常好。 对于电脑的CPU有要求，易发热。 软件支持带Bar。 软件的大小占有内存仅仅为几M…，由此可见，大佬是真的大佬… 最后如上我说的，实现免费的扩展是轻而易举的。 并且在开启扩展之前最好先是新开一个Mac桌面 此文章属于本人原创，希望能帮助需要的人。]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Mac</tag>
        <tag>iPad</tag>
        <tag>YamDispaly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iCould的简单理解...]]></title>
    <url>%2F2017%2F11%2F11%2FiCould%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[对于iCould的理解可能会有一些模糊。 在此简单记录下好了。 特性：在Apple设备之间数据同步； 在本地上传之后，在iCould之间的文件也是占本地的内存的，很简单，因为在云上一般数据是需要下载的，而在本地上传之后是已经存在的了，在Apple的其他设备上即就与其他网盘没什么区别了，均需要下载其中的数据才可在设备中查看的； 在考虑要升级存储时应该要理解这个区别…]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>iCould</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Hadoop在连接eclipse中开发出现的问题]]></title>
    <url>%2F2017%2F11%2F10%2F%E5%85%B3%E4%BA%8EHadoop%E5%9C%A8%E8%BF%9E%E6%8E%A5eclipse%E4%B8%AD%E5%BC%80%E5%8F%91%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在我学习了一段时间的Hadoop之后开始了简单的实践，也开始了处理百万级的数据了（几百MB），结果发现用我的MacBook Pro跑的效果还不错（即伪分布式连接eclipse的前提下，其教程可以在我博客中可以找到）。 下面简单说说一些问题。 突然连接不上了 解决： 查看配置文件的填写是否正确，特别是一个字母的是否缺失的检查； 连接信息的准确性； 将eclipse，Hadoop都关闭重启； 电脑整个重启； 一般大多数都可以解决了 文件导入input发现均为0KB 解决： 全部关闭重启，不行则电脑重启； 导入的文件过大，导致在output端的输出查看不了，即一般情况出现Editor could not be initialized.的字样 解决： 在终端利用命令行查询输出文件（不推荐，文件过大易卡死）； 简单的方法，将其从HDFS下载至本地即可轻松查看（如下图）； 以后有问题再在此补充。]]></content>
      <categories>
        <category>笔记</category>
        <category>Hadoop</category>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Eclipse</tag>
        <tag>问题记录笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些问题记录]]></title>
    <url>%2F2017%2F11%2F07%2F%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[升级了MacOS High Sierra之后发现java版本不兼容了。 解决：先卸载之前的版本，再下载JDK1.5以上就可以解决了。 发现了eclipse自动识别添加的强大功能🤩 iPad上用iBook结合百度网盘查看文件 先在App商店下载百度网盘HD，比如我想要看一本书，先将其保存在百度网盘，打开点击刚刚保存的书籍就会开始自动缓存，完了之后点击拷贝到iBook，发现文件已经自动保存在iBook中了。 真的是挺方便的合作。]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
        <tag>iPad</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习Hadoop的书籍引荐]]></title>
    <url>%2F2017%2F11%2F06%2F%E5%AD%A6%E4%B9%A0Hadoop%E7%9A%84%E4%B9%A6%E7%B1%8D%E5%BC%95%E8%8D%90%2F</url>
    <content type="text"><![CDATA[学习了一段时间的Hadoop，有几本不错的书籍在此分享。 如下的链接中的书籍为： Hadoop实战（陆版本）：百度网盘下载 Hadoop实战（国外中文版）：百度网盘下载 Hadoop权威指南3（中文版）：百度网盘下载 Hadoop技术内幕 深入解析Hadoop Common和HDFS架构技术:百度网盘下载 Hadoop技术内幕 深入理解MapReduce架构设计与实现原理：百度网盘下载 Hadoop技术内幕：深入解析YARN架构设计与实现原理：百度网盘下载 另外我的网盘还有许多传闻不错的相关的书籍，等我一一看完并且验证是否名副其实再在此上传吧🤓 最后声明：资源来自互联网，感想默默分享的人们🙏]]></content>
      <categories>
        <category>Hadoop</category>
        <category>资源分享</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>资源分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于MacOS High Sierra中Outlook不可用的问题]]></title>
    <url>%2F2017%2F11%2F04%2F%E5%85%B3%E4%BA%8EMacOS-High-Sierra%E4%B8%ADOutlook%E4%B8%8D%E5%8F%AF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[升级了MacOS High Sierra系统之后发现Outlook不能用了。升级一下就能解决了，但是自动更新实在是太慢了，找到了一些15.39的office资源。 下面的百度云资源加了破解的资源在内。下载好之后安装,不急打开应用，先再打开钥匙破解即可达成破解。 百度云下载 百度云下载太慢，不用它用这个下office就快了：直接网页下载 以上资源来自网络…]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iPad 上的代理问题记录]]></title>
    <url>%2F2017%2F11%2F04%2FiPad-%E4%B8%8A%E7%9A%84%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[其实应该看看自己的VPN或者是ss之类的路线问题，iPad本身都是一样使用的。如果路线改变了（iPad上一般都是全局的）就会导致在国内看不了国内视频的版权问题… 真的是太傻了… 对了。在iOS系统上面可以用app商店直接搜索SsconnectPro来用来ss的代理翻墙。 低调使用🤥]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>iPad</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacBookPro上的Multi-Touch Bar缩放问题]]></title>
    <url>%2F2017%2F11%2F01%2FMacBookPro%E4%B8%8A%E7%9A%84Multi-Touch-Bar%E7%BC%A9%E6%94%BE%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最近发现自己的电脑在触摸调试Bar上的声音键时，会将Bar的影像投射到屏幕上（如图1的最下方），并且竟然会延迟…有点不习惯了。在调试声音时，发现了在系统偏好设置中的铺助功能的选项缩放的相关的设置（如图2），即为其中的启用Multi-Touch Bar缩放被打勾了，但是之前我一点印象也没有…我一直以为是我升级了系统的缘故，另一方面其实系统根本也没有升级成功过…所以一直让我困惑不已。 解决方法就是把那个勾取消就可以恢复回来了。 图1 图2]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacBookPro连接Wi-Fi异常问题]]></title>
    <url>%2F2017%2F10%2F31%2FMacBookPro%E8%BF%9E%E6%8E%A5Wi-Fi%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[主要的原因：因为插了外接的U盘，拔了就可以恢复正常的Wi-Fi连接了。]]></content>
      <categories>
        <category>笔记</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老人与海]]></title>
    <url>%2F2017%2F10%2F31%2F%E8%80%81%E4%BA%BA%E4%B8%8E%E6%B5%B7%2F</url>
    <content type="text"><![CDATA[20岁的那一天他在自己的博客上写下了“要让这个世界的人们生活得更好”… … 老人睁开眼，眼里习惯性的带着泪水，他在梦里又回到了曾经自己的故乡，有亲人，有兄弟，有母亲做的好吃的一大桌子菜，他清晰的看到那是自己20岁的时候，他还年轻，有理想，也有自己的欲望，他在自己的电脑上轻轻的敲下要让这个世界更加美好,直到醒来他还隐隐约约的听到敲键盘的声响… 地球已经因为一些野心家的欲望奄奄一息了，贪婪，战争，违背自然…如今的地球已是一片汪洋，一眼望去就只有一片汪洋，只剩下一片汪洋。什么也没有。老人突然的发现自己早已已经不在地球上了，但是他隐约的记得刚刚自己明明还在笑，明明那么那么的开心，有母亲的美食，有兄弟的陪衬，有在心里默默爱着的女孩… 在这个星球上的“人”对他都还不错。“他们”在地球的一次考察发现了唯一的也是奄奄一息的他。从那以后到如今，曾经的美好都只能活在老人的梦里，他失去了一切，除了一副无用的皮囊，除了无时无刻不曾经断的关于曾经在地球上的幻想，而如今只有在梦里可以看到。这些年，从青年变成了老年，这些年，他的梦也绵绵不绝… 这一天，老人的梦回到了小时候，与自己的小伙伴们在田间的玩耍，自己骑着爹爹从二手市场带回来的小单车从后湾头一直骑到了公路边，他清晰的看到他那时犹意未尽，只想好好的“接待”这位新的单车兄。他看到小时候与小伙伴们一齐骑着单车一起上下学的时候，路过的时候还听到后面有村里的老人在后议论着：你看，那是谁谁谁的儿子… 怎么的，老人醒来发现自己又已是泪流满面，从梦里的青年到儿时，他隐约的意识到自己生时不多了，但是他还有牵挂，他想他得回去地球，他想他要落叶归根。一瞬间他又想起了在20岁的时候自己写下的“要让这个世界的人们生活得更加美好”。他痛哭得不能自已，他怨恨，他在那时是多么的无能，他伤心，当时的理想早已支离破碎…他在这些年依旧有着“美好人间”的想法，在地球上的各位情同手足，这是一个大家庭，人人都愿意无私的分享与奉献，但如今一切的一切都不可能再现。所以他也痛苦，所以他只有痛哭，也只剩下痛哭… … 今晚的“异乡”星球格外的安静…老人…儿时的自己与小伙伴们在骑着单车玩闹…村里的老人们打牌消磨时光…大家脸上都带着欢笑…他也好开心好开心的在上头看着…突然的，整个地面开始变得摇摇晃晃，有火山爆发了，有枪林弹雨过来了…他看到在下面的儿时的自己与小伙伴们，还有村里的老人们四处逃窜，叫喊着…他也叫喊着，他也哭喊着，但是一切无济于事，那边比任何山都要高的洪水过来了，还带着炮弹的火花…过来了过来了，近了近了，眼看所有的“幻想”都要被埋没…他又想起了20岁的自己在电脑上敲下…他叫喊着：让我下去，让我下去，不想自己真的在猛然下落…他来到了儿时的自己的身边，他牵着“他”的手跑啊跑啊，没有时间的多少，只是感觉自己与自己一直在跑…不知有了多久，他慢慢的发现“自己”的小手早就不在自己手上了…前面是无尽的黑暗，后面是无尽的汪洋,他犹豫了，但是又立马回过身来，“不是吗？这不就是我无时无刻不在梦想的故乡吗？”他跑向身后的汪洋，拼了命的跑，他突然想起自己在20岁时在美好的大学时光的体测，自己在跑一千米的时候，那时的自己是个什么狼狈的模样？他清晰的记得，他也永远的记得。他这次没有哭，没有像从前一样像个懦夫一样的只会哭，只会喊…他在开心的笑，发至内心的笑，因为他来到了自己每天日日夜夜的地球，因为他将不再孤独，回到兄弟亲人的身旁，所以他在笑，他一边跑一边的在哈哈大笑。但是怎么的又突然猛的想到了20岁自己写下的“要让这个世界的人们生活得更加美好”。他以为自己又会将停下早已飞跑的脚步，然后独自的走到一旁默默的悲伤，嗯，像从前一样的像个懦夫一样的在暗角流泪悲伤，就像20岁的自己体测的时候，因为感觉太累了停下脚步一样的…去他妈的吧，去你妈的吧，悲伤你妈个逼！很快的，洪水将要他埋没，他停下来，展开双臂，他在想，我去，这次怎么一点也不感觉累了？很快的，洪水将他埋没… 第二天，照顾他的异乡人发现这个老不死的老头在开着嘴巴睡觉。他叫喊着老头起来吃饭了，无论异乡人如何推他，拍打他，他却是无动于衷，但是哈哈大笑的嘴角没有一丝变化… 后记这是我在食堂吃饭的时候冒出来的“多情”的幻想，有一种强烈的想要记录下的感觉… 我想这种幻想不应该在以后多有…去他妈的幻想吧！]]></content>
      <categories>
        <category>幻想故事</category>
      </categories>
      <tags>
        <tag>幻想故事</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这段时间]]></title>
    <url>%2F2017%2F10%2F30%2F%E8%BF%99%E6%AE%B5%E6%97%B6%E9%97%B4%2F</url>
    <content type="text"><![CDATA[不知不觉发现这个博客已经开了有一个月了…最近这段时间没怎么写生活记录了，不过有一些问题我想记录一下。 关于苹果的新系统 MacOS High Sierra 这个系统的改变主要还是在Apple文件系统的加入更新及视频格式的更新改变上。再者其他的如同照片的一体编辑等等更新个人感觉用处不是很大。在其中有的什么 safari 浏览器的阅读器的自动打开及什么屏蔽视频自动播放等等，其实在我现在的 Mac OS 10.12.6 系统就有了，平时喜欢研究的人应该也早就发现了，或许是更加智能化了，不过对于新的东西人们总是容易有一种错觉的…所以说这一次的更新主要还是像我上面说的这个系统的改变主要还是在Apple文件系统的加入更新及视频格式的更新改变上。 看了介绍这主要的两样改变挺好的，对于我这种经常需要移动文件夹的人来说。我在上周末因此有了想要升级的欲望，不过下载了几次不成功，又怕会有什么bug，毕竟新系统还不是怎么稳定。在之后看看情况再决定吧，至少等bug少一些再说… 关于这所学校 这所学校有着 百年名校 的所谓的伟大目标…距离它的所谓的 百年 还有30年了…我想任重道远，这真的可能这会是一个梦想罢了。这所学校的风气太差，无论是老师，还是学生，还是这学校的制度，就连图书馆也是一个鸟样。为人师表在这里能有？至少我现在不确信。 我们一直的成长都是为了适应各种不适应罢了，没什么好说的了。 关于花呗 不得不说，花呗真的是我感觉比较做的好的一项目了，当然也包括他们的业务。公信力有，宣传到位，有阿里的支付宝做支柱平台等等。近来因为为了让学习生活体验更好一些，想着以后工作生活之中也会用到，萌生了想要一台iPad的想法，就马上向几个朋友借了一些钱（没想到朋友借钱效率挺高…），也就在昨天我想要卖一台iPad没钱，但是通过花呗我现实了“提前享受，后期付款”的念想。因为我第一次用，不知道分期付款是需要利息的，这对于一向不怎么愿意花钱的我来说有点不能接受，因为利息加卖家的手续费已经达到了几百元，完完全全超过了我的预期…如果我早一些知道，或许我会犹豫，但是可信的是iPad我迟早要入手的… 在今天早上，我发现了花呗真正的“机灵”之处。那就是抓住了人们“花大钱，不拘小钱”的心理作用，通过我对于我的一系列心理变化我真真切切的发觉这是一件还算得上挺可怕的事。这件事与人们的消费心理有关。平时我们在有强烈欲望时，脑子是会失去理智的，这本身容易导致损失…如果一旦克制不住（明确的说一旦说服不了自己放弃，或者是压不住欲望），就会像我一样出现想要“提前享受，后期付款”的思想…如果在人们又是因为额度不足或者是现钱不够萌生了“分期”的想法，那么噩梦也就开始了，噩梦就是人们会习惯性的，理所当然似的忽略掉了分期需要的手续费或者是利息费，这一点在小额费用上看不出来什么区别，但是在久而久之，额度不断的扩大就会惊奇的发现，分期的利息，那一些在从前我们习惯性忽略的利息会多得出乎我们的意料。到那时候我们可能才会发现，可以想象，我们的这种心理作用的驱使是一种具有扭曲人性质的作用的，这真的是一种挺可怕的事情。 因为第一次玩花呗，意外“惊醒”的比较早，仔细想一想，真的是一种让人感觉到可怕的事，我们的思维理智在因为有了花呗的“撑腰”下可以变得毫无节制，为所欲为…还好我的理智在此时还算得是强大，不然真的会有一种心理扭曲的意向，不过也可能与我一向不喜欢花钱的性格有关吧。 我想这应该会是我最后一次主动性的去动用花呗的“提前消费，后期付款”的信念了。理性消费，真的是我们每一个人需要重视的问题，不容小视的问题。并且无论何时均不可失自我的理智。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（Mac下）docker搭建Hadoop集群]]></title>
    <url>%2F2017%2F10%2F26%2F%EF%BC%88Mac%E4%B8%8B%EF%BC%89docker%E6%90%AD%E5%BB%BAHadoop%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[声明 转来自KiwenLau大神的教程：教程链接，在以下的一切版权，劳动成果属于他本人。 基于Docker搭建Hadoop集群之升级版 摘要: kiwenlau/hadoop-cluster-docker是去年参加Docker巨好玩比赛开发的，得了二等奖并赢了一块苹果手表，目前这个项目已经在GitHub上获得了236个Star，DockerHub的镜像下载次数2000+。总之，项目还算很受欢迎吧，这篇博客将介绍项目的升级版。 作者: KiwenLau 日期: 2016-06-12 一. 项目介绍 将Hadoop打包到Docker镜像中，就可以快速地在单个机器上搭建Hadoop集群，这样可以方便新手测试和学习。 如下图所示 Hadoop的master和slave分别运行在不同的Docker容器中，其中hadoop-master容器中运行NameNode和ResourceManager，hadoop-slave容器中运行DataNode和NodeManager。NameNode和DataNode是Hadoop分布式文件系统HDFS的组件，负责储存输入以及输出数据，而ResourceManager和NodeManager是Hadoop集群资源管理系统YARN的组件，负责CPU和内存资源的调度。 之前的版本使用serf/dnsmasq为Hadoop集群提供DNS服务，由于Docker网络功能更新，现在并不需要了。更新的版本中，使用以下命令为Hadoop集群创建单独的网络: sudo docker network create --driver=bridge hadoop 然后在运行Hadoop容器时，使用–net=hadoop选项，这时所有容器将运行在hadoop网络中，它们可以通过容器名称进行通信。 项目更新要点：去除serf/dnsmasq合并Master和Slave镜像使用kiwenlau/compile-hadoop项目编译的Hadoo进行安装优化Hadoop配置二. 3节点Hadoop集群搭建步骤: 下载Docker镜像sudo docker pull kiwenlau/hadoop:1.0 下载GitHub仓库git clone https://github.com/kiwenlau/hadoop-cluster-docker 创建Hadoop网络sudo docker network create --driver=bridge hadoop 运行Docker容器指向目录：cd hadoop-cluster-docker./start-container.sh 运行结果start hadoop-master container…start hadoop-slave1 container…start hadoop-slave2 container…root@hadoop-master:~# 启动了3个容器，1个master, 2个slave运行后就进入了hadoop-master容器的/root目录 启动hadoop./start-hadoop.sh 运行wordcount./run-wordcount.sh 运行结果input file1.txt:Hello Hadoopinput file2.txt:Hello Dockerwordcount output:Docker 1Hadoop 1Hello 2 Hadoop网页管理地址:NameNode: http://192.168.59.1:50070/ResourceManager: http://192.168.59.1:8088/其中192.168.59.1为运行容器的主机的IP。 N节点Hadoop集群搭建步骤 准备 参考第二部分1~3：下载Docker镜像，下载GitHub仓库，以及创建Hadoop网络 重新构建Docker镜像，在cd其目录之下./resize-cluster.sh 5 可以指定任意N(N&gt;1) 启动Docker容器./start-container.sh 5 与第2步中的N保持一致。 运行Hadoop 参考第二部分5~6：启动Hadoop，并运行wordcount。 本文本身链接参考： 参考地址1:参考地址1 参考地址2:参考地址2]]></content>
      <categories>
        <category>Hadoop</category>
        <category>Mac</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Mac</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac自带字典的扩展与语音设置]]></title>
    <url>%2F2017%2F10%2F26%2FMac%E8%87%AA%E5%B8%A6%E5%AD%97%E5%85%B8%E7%9A%84%E6%89%A9%E5%B1%95%E4%B8%8E%E8%AF%AD%E9%9F%B3%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言 在Mac上自带的词典是非常强大的。 缺点是词典不可带语音功能，不过系统本身是有语音读取功能的，两者结合就天衣无缝了。 最大的优点：离线操作，加上Mac自带的语音，都是离线的。 很强大.. 扩展词典 扩展辞典的资源：Mac词典扩展下载 以上的资源是我在网上找到的，我有一个毛病，就是打开找好资源后就保存关闭网页了..所以资源的来源我也记不得了..总之非常感谢那一些分享资源的人们，谢谢🙏 下载好之后，解压文件（图1） –&gt; 打开自带的词典软件，并且点击上方的文件选择打开词典文件夹（图2） –&gt; 将下载好的词典插件移到其中（图3） –&gt; 关闭词典，重新打开 –&gt; 选择偏好设置，勾上插件选项即可完成词典扩展（图4，5） 图1 图2 图3 图4 图5 设置语音 设置语音的声音中，有一个默认的“国产”声音，这是读中文的时候用的，如果读英文就非常别扭了，我们就需要将声音换成一个美国或者是英国的声音，读出来的英文就非常的好听了… 设置语音步骤：先打开系统偏好设置 –&gt; 铺助功能 –&gt; 语音 （图1）–&gt; 会看到了系统声音的选项，其中的先看到的Ting-Ting是默认的中国小妹声音。可以选择自定义，选择相关的美国的或者是英国的声音（图2） –&gt; 下载好喜欢的声音之后，将其选择为系统默认,将下方的语音快捷键勾上，也可以像我一样设置快捷键(图3),即可完成语音设置 图1 图2 图3 触摸板设置及语音快捷键设置 触摸板设置可以离线快速的查找我们需要了解的单词的意思，通过快捷键我们也可以离线快速的得知其怎么读。 打开系统偏好设置 –&gt; 选择触摸板，之后选择习惯的查看设置（图1) –&gt;即可完成触摸板的查看设置 图1 测试 选择一个想要了解的单词，用刚刚选择的手势查看 语音读出，可以如下，亦或者直接使用快捷键即可 测试完成 最后 发布一个Mac迅雷破解版，亲测有效.. 下载：下载 资源来自网络..再次感谢分享的人们🙏 （需要先登录）使用破解：]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(Mac下）eclipse开发Hadoop时文件的中文乱码问题]]></title>
    <url>%2F2017%2F10%2F25%2F%EF%BC%88Mac%E4%B8%8B%EF%BC%89eclipse%E5%BC%80%E5%8F%91Hadoop%E6%97%B6%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[参考：参考地址 刚刚在eclipse中学习Hadoop时将 txt 格式的文件导入 input 文件夹时发现了中文乱码的问题。在此记录下，希望可以帮助更多需要的朋友。 Mac下可以用 文本编辑 这个自带的软件编译好 txt 格式的文件 编译步骤加其中的设置：打开软件 –&gt; 设置偏好设置选择 纯文本模式（如图1） –&gt; 编译好内容 –&gt; 选择格式 UTF-8保存即可（如图2） 图1 图2 设置保证eclipse里的格式也是UTF-8的格式 在这之后添加文件入input文件夹查看发现乱码已经解决 OK，goodJ.That’s all,thanks.]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Hadoop</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Eclipse</tag>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac上解决Mackeeper的流氓作为，以及与其导致的CPU异常]]></title>
    <url>%2F2017%2F10%2F24%2FMac%E4%B8%8A%E8%A7%A3%E5%86%B3Mackeeper%E7%9A%84%E6%B5%81%E6%B0%93%E4%BD%9C%E4%B8%BA%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%8E%E5%85%B6%E5%AF%BC%E8%87%B4%E7%9A%84CPU%E5%BC%82%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[铲除原因最近因为下载一个软件插件导致万恶的Mackeeper进入了我的Mac，在Safari的网页上也是自己为所欲为经常弹出来，搞笑的是它竟然说扫描出来了3个病毒，然后叫我下载它，否则如何如何..真的是毒喊捉毒，毫无廉耻啊…关键是因为这个东西，还把我的CPU严重拉下了，导致我的电池使用量缩水了一大半，电脑也是烫的怀疑人生，我一度以为我的Mac要玩完了..毕竟才刚刚买了几个月啊.. 不能容忍啊.. 只想一心把它搞了..去网上查了一下，发现这东西早已是臭名远扬了，最后花了一些时间在知乎上面找到了答案。 铲除过程去网上搜索 AdwareMedic 这个软件，这真的是一个神器啊，帮助我解决掉了Mackeeper，也修复了CPU异常，现在也是终于正常了，前几天只是打开一个预览就掉电像水似的.. 推荐用谷歌搜索啦，当然百度也是可以的。 我的百度云也已经收藏了：点击下载神器 此神器是需要付费的，不过可以免费30天使用，不过我倒是在完成任务后马上卸载了..以后有需要再下载吧。 以上的资源来自官网，下载完以后打开神器，点击在界面上的 scan for Adware 按钮，将扫描出来的文件全部删除，建议多扫描几遍，然后再重启Mac。然后在重启之后再扫描几遍，有时候开机还有一些相关的东西残留的，然后再重启看看。会发现CPU正常了，电脑也回到了正常水平,一切都好了，感觉这个世界是多么的美好呀～ 在这里说一下，我们的Mac上有自带的防火墙，建议打开，可以为我们的Mac加上一层保护层，可以过滤掉一些可能带有病毒木马的应用程序，在打开之后从网上下载东西的时候如果被防火墙阻止，可以将其先关闭，然后在完成之后在打开防火墙即可。打开防火墙的能耗几乎没有的，但是安全还是要的，right？ 打开防火墙步骤：系统偏好设置 –&gt; 安全性与隐私 –&gt; 防火墙 –&gt; 解锁打开即可 （当然也可以设置其中的高级设置，根据需求设置即可） 最后 Mac并不是安全到我们可以为所欲为的..需要我们平时注意保养.. 记录下的这一篇文章，一是为了记录这次经历，以后可能会再次遇到。二是为了帮助一些类似经历的人。 到此为止吧，goodluck.]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
        <tag>Mackeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（Mac下）Ummy Video Downloader pro下载以及用其插件配合下载YouTube视频]]></title>
    <url>%2F2017%2F10%2F22%2F%EF%BC%88Mac%E4%B8%8B%EF%BC%89Ummy%20Video%20Downloader%20pro%E4%B8%8B%E8%BD%BD%E4%BB%A5%E5%8F%8A%E7%94%A8%E5%85%B6%E6%8F%92%E4%BB%B6%E9%85%8D%E5%90%88%E4%B8%8B%E8%BD%BDYouTube%E8%A7%86%E9%A2%91%20%2F</url>
    <content type="text"><![CDATA[前言 最近想要下载一些好听的好看的在YouTube上面的资源，找到了一个软件，用起来清爽，很舒服。在这里记录下，并且发放一些资源，以帮助一些需要的朋友。 Mac系统 Ummy Video Downloader破解版 因为需要钱的..所以找到一些资源在此分享，有钱的各位还是要支持正版啊！ Ummy Video Downloader官网：官网在此 Ummy Video Downloader 网页插件 过程介绍下载Ummy Video Downloader 介绍一下Ummy Video Downloader，以下两张图片足以，功能不错，平常下载够用了。 one two 可以看到功能还是非常不错的，关键是还可以下载mp3格式哦。再次提醒一下有钱的还是要多多支持正版，学生没钱才这么干的… 更加详细的介绍见上面的官网咯 见我的百度云：Ummy Video Downloader破解版下载 下完之后查看： 没有骗人的哦.. 使用Ummy Video Downloader 打开一个你看中的YouTube的网页，复制链接，如下 解析时间几秒就OK了，然后选择自己的格式下载就好了。 下载使用Ummy Video Downloader插件 插件给我们省去了打开软件的步骤，直接一步呵成。 插件下载：下载地址 其中有多个浏览器插件都是可以支持的，如下下载，我以我的浏览器Safari 做个示范 下载完之后打开浏览器，进入一个YouTube网页可以发现以下的出现 one two 示范用插件下载 OK，过程都已经完成了。 最后 关于上传hexo博客的相关的动态图片，直接可以利用语法 ![]() 插入链接就好了。当然前提下是得要有类似七云牛之类的云。 具体可以参考我的其他相关的已写的博客。点击 归档 查找即可 Mac上的动态图片的软件，免费的哦，非常好用，如下 直接在苹果商店APP搜索下载即可。 那么到此文章就结束了。BYE.]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Mac</tag>
        <tag>Ummy Video Downloader pro</tag>
        <tag>YouTube</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂思记]]></title>
    <url>%2F2017%2F10%2F19%2F%E6%9D%82%E6%80%9D%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[读书的意义 读书的意义不过是为了更好的接受，平静的接受，开怀的接受这世间的种种不合意罢了。我所认为的读书的意义，是为了在一个“度”中保持“中立”，是为了让我的灵魂保持理智与宁静，从而更不容易被世间的种种影响，更不容易被导致内心的波动，没有了波动，才没有偏向，没有偏向于“度”的左右的任何一方，才可以保持内心的平静，在这最后，在平静下接受曾经所有的不甘心，所有的不甘愿，所有的不合意，也从此可以理智的去看待这一些所有，也不再有对于其中的偏向。 内心平静理智下的快乐才是真正的快乐。读书也就是为了在这喧闹人世间寻得一份内心的宁静，寻得一分保持与灵魂对话的理智，唯有真正的理智与内心的平静，我们才能接近所谓的”幸福“。不能把为了追求财富，名利的读书理解为”读书“。 读书是为了我们能够生活的更好，也是为了更好的生活。如果说读书真的是要有目的的话，那么这个目的将是平静与理智。 友谊 友谊是”利益“的附属品吗？现在的我不完全这么认为，至少是现在。 ”神“是”大自然“ ”神“与”上帝“即是如今无边无际，完美无缺的”大自然“。”大自然“包揽了所有的一切，无论是我们看到的，还是看不到的，无论是我们曾经看到的，还是从未看到的，但是他们（它们）都是因为”大自然“而存在的。”大自然“有着自己的原则，有着自己的规矩，管理这存在的一切。 但是如果我们把一切包括我们存在的意义与实际上的人生全部寄予”大自然“，无疑是愚蠢的。我们每一个人的出现存在，必然有要出现存在的意义，这需要我们自己去寻找，去实现的。 而由此可知，”大自然“那无边无际的胸怀。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无题]]></title>
    <url>%2F2017%2F10%2F17%2F%E6%97%A0%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最近在经过一番浮躁之后，现如今算是回归了一些平静了。人浮于事，在这世间的人都是免不了的吧。 对于前一段时间的浮躁，我认为与我前段时间期间所认为的一些字词的相关的理解的偏差是有直接关系的。前段时间，我与一个所谓的”愤青“又有何区别呢？现在想想，真的是形容的我分毫不差。一个”愤青“在中国或许常常是给人一种”无知“的印象相挂钩的，即是可能多为”书呆子“的意寓吧。然而，在中国这样的”愤青“却是常常的在形容一个有”有抱负“，”爱国“等等相关的字词挂钩的年轻人或者是青年人。人们总是在毫无关系的去嘲笑他，总是在毫不犹豫的去批判他。但是现在的我所认为的”愤青“是有理想，有理性，有抱负的，然而也有时的免不了戴上”偏激“的帽子，因为我们总是急切的想要表达我们内心的想法，急切的想要让人们听到我们内心的声音。 在中国，在现在的中国，人们普遍的不尊重”爱国青年“。还却是将挂有”爱国“的人批判到了”偏激“”无知“的行列了。我们对于“文化知识”的认识是退步的，真的是又是苦了一些好老师，更是苦了一些好学生啊，然而现在的我们，他们却也只能是相互同情着。现在的许多的”有良知“的人们普遍的也得不到共鸣，在之后的社会生活中自然的也随着人潮渐渐的”沉默“下去。可悲啊！现在的中国容不下真正的”知识分子“亦或是”爱国分子“了吗？现在的中国人民子弟们，中华民族的后人们大部分却是从未有过”愤青“的丝毫感觉，国人们无论是对于什么说法，依然如前一样的会有一番的我所认为的“狡辩”。中国人，爱面子，有时也是因为一个“面子”可以摒弃一切。 以上的言辞充分的反映了我现在的状态，所谓的“偏激”罢。 现在还是开始切入正题吧，也是该要回归主题了。我为何在前一段时间中容易陷入“沉沦”与“偏激”？恰恰是因为我对于一些字词的错误的，混淆的认知吧，至少现在此刻的我是这样认为的。我所认为的“沉沦”在当初是与我所认为的“血性”相冲突的，其中的“血性”又是通常与我所认为的“爱国”相挂钩的，而这以上的却又是与我所认为的“自然之道”相冲突的，说到底，我是在这些个字词的认知中迷失了自己了，所以才导致了我的理智一度的陷入不可自制的状态。这一些的之所以如此，只是因为我不够清楚的，亦或者是认知错误的所导致的罢了。我是对于国家的一些现象有一些担忧的，也常常的思考国家的所谓的未来，我是可以以“爱国”来称呼自己的吧？明目张胆的？至少在我前一段时间中我是这么认为的。而在前一段时间里，我所认为的“爱国”是要求与“血性”相挂钩的，因为我看到了如今的绝大多数中国人的“沉默”亦或者是我曾经以为的“麻木不仁”，“行尸走肉”的，那些个即便是在“暴政”之下，然而这么多的中国人却是“无动于衷”，甘愿成任人宰割的牛羊，也是自然的激起了我对于“血性”的渴望。然而，这恰恰是又引起了所谓的“偏激”，不如说是容易陷入“偏激”，至少在于我前一段时间间的表现，我可以充分的判断，那就是所谓的“偏激”。而我又不愿“沉沦”的，不如说是我将“沉沦”与曾经我所认为的“自然”理解成一致的意思了。这是我“迷失”的主要原因。 但是，以上的种种不过都是属于“自然”中的一小部分罢了。我在如今现在，我更加选择趋向于“自然”，即顺其自然而流。在曾经我也因为“血性”与“自然”作出过抉择，但我选择了“血性”，继而导致了我一系列的迷失所在。而“自然”可以带给我更多的“理智”与“宁静”。但是今天我在这里写下，我所选择的“自然”是与所谓的“沉沦”是两不相干的，更是与所谓的“麻木”，“行尸走肉”毫不相干的，尽管“自然”都已经包括了它们的所有。我所选择的“自然”，是不失“善良”，“正义”与“爱”的，是有“沉沦”的，是有“血性”的，也是有“爱国”的，也是有种种种种的。这就是我所谓的“大自然之道”。 “自然”真的是一完美，博大之词。 本来想是取一个题目名字的，也是因为不过是我所谓的“偏激式”的“诉苦”与我回归一些许“理性”的乱七八糟之文罢了，谈不上什么文章，更加谈不上什么“取题目”。到此为止吧。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(Mac下)Folx5 Pro破解版下载以及用其下载百度云资源]]></title>
    <url>%2F2017%2F10%2F16%2F%EF%BC%88Mac%E4%B8%8B%EF%BC%89Folx5%20Pro%E7%A0%B4%E8%A7%A3%E7%89%88%E4%B8%8B%E8%BD%BD%E4%BB%A5%E5%8F%8A%E7%94%A8%E5%85%B6%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E4%BA%91%E8%B5%84%E6%BA%90%2F</url>
    <content type="text"><![CDATA[前言 以前用的都是迅雷，因为其稳定性不怎么好，最近想换换下载软件体验体验其它的了。 选择的是Folx5 Pro 。因为下的是破解版，也可以说是盗版..希望各位有钱的还是尽量支持正版。 Mac系统 Folx5 Pro破解版 百度云 下载 下载Folx5 Pro破解版资源:进我的百度云 声明 来源于：地址 一路安装就好了。 下载完成后可以查看版本，如下图 用Folx下载百度云资源 实际上，只要是个下载软件都可以如下下载百度云资源。 假设你已经有了想要下载的东西，进入了百度云下载资源的页面，如下图 Safari –&gt; 开发 –&gt; 用户代理 –&gt; Microsoft Edge ，之后点击页面上的 下载 发现浏览器已经自动下载了，无需开启百度云客户端的过程了。接下来拷贝下载地址，如下 打开刚刚下载好的Folx软件，新建一个下载窗口，之后要注意，不需要复制地址进去了，如果你这样做了，那肯定会出错导致下载错误，因为软件已经自动读取地址了，接下来只需点击“好”即可下载在百度云上的资源了 如下图 最后 Folx5 Pro 还有很多的功能呢，还需要多多的去了解，自行搜索吧。]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Mac</tag>
        <tag>Folx5 Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[想致国家体育局的一封信]]></title>
    <url>%2F2017%2F10%2F15%2F%E6%83%B3%E8%87%B4%E5%9B%BD%E5%AE%B6%E4%BD%93%E8%82%B2%E5%B1%80%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[致尊敬的中华人民共和国（简称中国）国家体育局： 尊敬的国家体育局的各位，您们好。 我是来自黑龙江省哈尔滨市黑龙江科技大学的一名大二生，此次来信我想跟您们反映一下关于您们制定的学生体测中的一项目 – 1000米跑步的一些我的建议。 从历史的进程可以观之，我国在一届又一届的奥运会中的取得奖牌数量的与届渐增直到如今的奖牌数量名列世界前列，我深深的感觉到这是一件多么不容易的事。可以看到我国在奥运会上的佳绩次次更上一层楼，我备感荣幸自己身为一名中国人，奥运健儿们的身姿曾经无数次在我的脑海里回放，我也曾经无数次幻想自己有朝一日能够为国家出力，在奥运会上的身姿飞扬着，在胜利之后接受世界人民接受国人们的喝彩，更是憧憬着为我挚爱的祖国而战好似成为了那时的我唯一的梦想。我如今再次反观历史，这样的感觉更是强烈。 但是，在奥运会上带回来的奖牌的数量并不能代表我国已经走进来了世界体育强国的行列，如果一味的认为可以将奖牌数量与体育强国相挂钩的话，那可真的是一名名副其实的大昏蛋。如果说要一味的要将我国建设成为体育强国的话，曾经的“全民健身”的口号早已可以验证之。这根本就是一种强迫性的无人性的东西罢，以强迫性手段让人们接受并且附与行动“证明”之，还是可以打着“为国家人民好，为人民服务”的口号啊，要求人们一味的要为了“建设体育强国”奉献一份力，并且是拉着人们的“爱国”热情一并奉行。然而最终的目的却只是为了凸显领导人们的“伟光正”与“爱国亲民”“一切为国家为人民”的虚伪形象，可以为后世所传颂罢了，政治家们都是一番如此。 但是以上均不是我这次来信的真正的目的…我想说的是关于这个因为为了“强国”所衍生出来的这个学生体测中的项目 – 1000千米的见解。 “全民健身”固然挺好。但是由于本人从小体弱多病，并且由于… 刚刚上了个厕所回来，感觉已是索然无味了，这篇文章到此为止吧。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“读”历史]]></title>
    <url>%2F2017%2F10%2F15%2F%E2%80%9C%E8%AF%BB%E2%80%9D%E5%8E%86%E5%8F%B2%2F</url>
    <content type="text"><![CDATA[最近“迷”上了读历史。说是“读”，但是对我来说有一多半用“查证”来形容我的所谓的”读“历史更为恰当不过。我的初衷确实是以”查证“来附以行动的，我总是对”真相“”实情“的未知感到不可抗拒，在此面前，我总是能够比做其他的事情更具主动性，更具”侵略性“。 还得”感想“林思云先生写的《真实的汪精卫》一文，真正的带动了我想了解历史，读历史的”热情“啊。 在最近的对于”读“历史的一番冲动，我特别的热衷于去互联网上查找一些评价比较好的相关的书籍来下载并用以”查证“。事实证明，其中给我的收获是有不少的。我还热衷于下载一些我感觉好的一些历史”查证“书籍，当然，这些必须是我在有意无意之中看到的，之后产生的一系列想要下载的欲望，事实证明，给我的收获也是让我感到一丝欣慰的。 通过简单的读历史／查证历史，让我看到了不少所谓的“历史哲学”，即为附于历史中的哲学。确确实实的，这对我来说不如说是通过历史上的“史事”更多的给我的是现实上的“社会经验”与行走在人世间的种种“人生警示”。如果真的要称之为“哲学”的话，我想也是不为过，有一番道理所在的。 历史是需要“尽量“的求实的。我们心知肚明的是，因为种种原因，历史或许真的是没有绝对的事实的，所以需要我们去读更多的历史以来判断求证历史的是否曲解与是否真实，不可否认，现在我们所读到的历史，有一不少的部分是根据先人前辈们的经过查证之后所得出的个人主观的判断罢了，为何可以”流芳百世“？或许是易得到或亦得到了许多的”同志“们的认可吧。所以才能在我们这一群想要或需要探索所谓的历史的实情的人中得以传播，毕竟历史是要求严肃严谨的，我想每一个身同感受的无论是读还是写的人都会有这么一个责任，对历史负责的责任。 我如今所谓的”读“历史，更多的用以”探索未知“来形容真的是再也恰当不过的了，而在不断的探索未知中的兴奋热情给予我的才是那所谓的”动力“吧。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拜读林思云先生之文章有感]]></title>
    <url>%2F2017%2F10%2F13%2F%E6%8B%9C%E8%AF%BB%E6%9E%97%E6%80%9D%E4%BA%91%E5%85%88%E7%94%9F%E4%B9%8B%E6%96%87%E7%AB%A0%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[昨天在想了解汪精卫这个历史人物的过程中，“认识”到了林思云先生。并且在今日终于将先生的《真实的汪精卫》一文一口气读完，感觉甚是快哉！我有个小毛病，在读一个人的文章前必先要了解其作者的情况才决定是否读下去。 可幸的是，我由此认识了一位针对现象敢于说实话，有大胆识，有大见识的老先生。我在初读先生的文章时，便是被先生的文笔流畅，博识广知，通俗易懂的写作风格所吸引。在我得知先生的《真实的汪精卫》这一篇文章在中国有巨大争议的背景下，我特意又去搜索了先生写的的多篇文章，并且有选择性地拜读了其中的几篇，也包括了其中的争议比较大的几篇。但是在我看完之后更是萌生了要将先生的《真实的汪精卫》这一篇文章“加速”看完的想法。 从先生的文章中我可以看出来对于历史方面都是经过先生查证之后再精心编译成文的，先生的这一种对于历史的严格严谨态度有使我发至内心的产生一股敬仰之情的，在如今的中国对于历史的不严谨的态度现象简直是太层出不穷，不仅仅是统治阶级为自身利益的蓄意更改，为自己添光添彩，曲解历史的作为之外，再加上如今的历史老师的各种偏见与偏激，直接使得我民族后来人成为灌输错误历史毒瘤的“牺牲品”，历史的实情更是难以在对于后来人的教育上的扶上基本的台面。 在了解先生一些基本的情况后，发现有国人把把“汉奸”的帽子戴在他的头上，并称先生为“四大汉奸”之一。甚至在对先生的百度百科介绍上，更是有“其观点通常是明确反对中国，为侵华日军及日本的南京大屠杀暴行进行狡辩“此类明目张胆”污蔑“先生文章思想的句词。在我拜读先生的多篇文章以来（其中也包括有争议性较大的那几篇），那一些人们冠以”汉奸“之名于先生又是何种看法与目的？他们所理解的所谓的”汉奸“就是针对那些谈及于在国家社会中的一些现象作了一些开明客观并且正确有针对性的评价，说出来了在国内大多数人看不到的，又或者是不敢说的大实话的华人又或者是华裔华侨吗？这真的是足以凸显一个人恶毒无知的心态的。试问，你们那一些因为看不得有人说自己国家的不好，亦或者是揭露出的缺点将此整天对着那个人这个人喊着冠以”汉奸“之名的人们有几人真正的了解历史呢？又有几个真正的去查证过？最基本的，又有几人真正的拜读过先生的文章？还是像从前许多个时候一样，跟风耍性，毫无主见的，毫无辩解能力的去”开心“地区诋毁？不要不承认，并且在承认也并不可耻的情况下，你们这一群中国人真的只是一群行尸走肉罢了。放下你们那可怜的那一点点无聊的所谓的自尊心吧，显得多么的无知幼稚呢？只怕有人不但不知还一味的引以为豪，真的是可悲又可笑，让人可笑两难呀。而这也不可避免的，是如今绝大多数中国人的”通病“。 以上一段我写这么多，是有一番为先生鸣不平的意思的，在我拜读先生的文章以来，先生真的只不过是客观的说出来了自己的看法想法罢了，何以用”汉奸“之名来冠之？真的是一件荒唐之事。我也是发至内心的敬佩先生的胆识与勇气的，然而，在中国，这恰恰是绝大多数国人难有的品质，当然我也不否认其中绝有可能有统治阶级的蓄意压迫。并且我也不否认，我本身在有时也是缺乏这种品质精神的。 先生的《真实的汪精卫》一文，更是让我感到一些震撼的，因为从前的我确实对于”汪精卫“这个历史人物除了用大众的”汉奸“来形容之外也绝无其他的的见闻事迹。其中文章讲解历史之详细，引用历史时间之精确是确确实实有一些震撼到我的，不得不在此再一次向先生对于历史的严谨态度品质致敬。在最后的附上其中林思云先生的一段话： 在中国历史上，每当发生对外战争时，那些坚持对外寸步不让的主战派，总是被尊为民族英雄，而那些主张对外让步和解的主和派，总是被打入民族败类的汉奸行列。 绝大多数的政治家们在位之时总是想着“利”与“名”，并且在退位之后还想着要把自己的“名”可以流芳百世，留得个“好归宿”以此好为后人所赞叹。不得不说，这真的是这一些政治家们最为悲哀且最为愚昧之处了。但是在拜读完《真实的汪精卫》整篇文章之后，关于对于汪精卫先生，除了一句“汪主席”之外，我也无从表达。生得伟大，死得亦伟大。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>思考笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（转自林思云先生）真实的汪精卫]]></title>
    <url>%2F2017%2F10%2F12%2F%EF%BC%88%E8%BD%AC%E8%87%AA%E6%9E%97%E6%80%9D%E4%BA%91%E5%85%88%E7%94%9F%EF%BC%89%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%B1%AA%E7%B2%BE%E5%8D%AB%2F</url>
    <content type="text"><![CDATA[前言 一篇备受争议的谈及历史人物汪精卫的文章。我的看法是，历史没有绝对的真相，历史更需要自己动手去查证。不可否认，历史从来都是为统治阶级服务的，可信与不可信，都需要我们在查证之后加以判断。 以下是这篇文章中的所有内容。 内容《二闲堂文库》 真实的汪精卫 作者：林思云 中国经常有这样一种怪现象，提到某个人的名字是妇孺皆知，但问起该人的生平和事迹时，却又是鲜为人知。汪精卫就是这样一个特殊的人物。汪精卫在中国可以说是家喻户晓的大汉奸，可是大家对汪精卫的“卖国事迹”却是一问三不知。这也是中国历史教育的一大特色；只告诉大家他是坏人，却又不告诉大家他作过什么坏事。好在中国学生头脑比较简单，不喜欢刨根究底，所以历史老师还不至遇到太大的麻烦。 汪精卫在中国是一个完全被否定的人物，甚至被认为是中国人的耻辱。因此现在的中国历史教科书中，把汪精卫从辛亥革命和国民党的历史中完全抹杀，只是抗日战争的历史中实在无法抹杀汪精卫的存在，才简单地提到了汪精卫和他的维新政府。这种出于主观愿望而随意修改历史的作法，使中国人对历史产生了错误和虚假的理解，实在有碍于中国的发展与进步。 历史上真实的汪精卫，曾是近代中国有数的叱吒风云的历史人物，对中国的历史走向有举足轻重的影响。在历史走到２１世纪的今天，应该考虑还汪精卫的本来面目，重新认识历史上真实的汪精卫。 要为汪精卫写一个比较真实客观的小传还有不少困难，最大的困难就是有关汪精卫的资料十分匮乏，人们似乎都极力避开这样一个敏感人物，怕给自己惹来各种麻烦。１９８０年代后期，中国开始出现一些关于汪精卫的书籍，比如蔡德金的《汪精卫评传》，黄美真的《汪精卫传》，秦亢宗的《走向深渊》等。但中国出版的书都有一个共同的问题，就是有意识地贬低丑化汪精卫，写书的重点放在猎奇和艳史方面，不是严肃的人物传记而近似于野史小说，真实性有很大的疑问。日本也有不少关于汪精卫的书籍，比如上板冬子的《汪兆铭的真实》，杉森久英的《汪兆铭传》，今井武夫的《支那事变的回想》，特别是亲身参加过汪精卫和平运动的松本重治写的回忆录《近卫时代》和《上海时代》，犬养健的《扬子江仍在奔流》，披露了不少鲜为人知的事情。与中国的资料相比，日本有关汪精卫的书籍比较严肃，基本没有凭信性很低的猎奇艳史部份。因此这篇《真实的汪精卫》以日文资料为主，中文资料为辅，力争做到求实客观。 汪精卫的一生大致可以分为三个阶段，所以本文也分为三大部份来写：第一部份：为了革命奉献一切；第二部份：打倒独裁者蒋介石；第三部份：和平运动曲线救国。 第一部份：《为了革命奉献一切》 １８９３年５月４日，广东省番禹县（今广州），来自浙江的客商汪椒家里，又新添的一个男孩。这个男孩是汪椒的第４个男孩，也是第１０个孩子，汪椒给这个男孩龋蝴叫汪兆铭。 汪兆铭是汪椒的填房吴氏所生，生汪兆铭那年汪椒已经６２岁了。汪椒是个落第秀才，后来弃文从商。汪椒见这个小儿子异常聪明，就特别注重教汪兆铭读书，在汪兆铭５岁时就开始教他认字。在父亲的严格教导下，汪兆铭８、９岁时，就基本可以读书了。汪椒晚年由于年老眼花，无法看清书上的小字，就让汪兆铭每天为他朗读诗书。汪椒特别喜欢王阳明和陆游，每天让汪兆铭为他朗读王阳明的文章和陆游的诗。每天在父亲面前朗读，不仅无形中培养了汪兆铭演讲的口才，还使幼小的汪兆铭接受了王阳明的哲学思想和陆游的豪放文风，这些对汪兆铭后来的政治生涯起到了非常重要的作用。 汪椒家里并不富裕，汪兆铭童年时代的生活相当清苦。汪兆铭１３岁时，母亲病逝，１４岁时，父亲又病逝。从此汪兆铭就依靠比自己大２２岁的大哥汪兆镛抚养生活。由于家境所迫，汪兆铭１７岁时就开始到私塾去教书。１９０１年汪兆铭１８岁时参加了科举考试，以广州府县第一名的优异成绩考取秀才。 １９００年义和团事件以后，清政府开始搞“新政”，开始大量选派公费留学生到外国留学，并给予归国留学生举人或进士的待遇，授予高级官职。这在当时的中国青年中引起了极大的反响，有识青年纷纷前往外国留学。 当时公费留学生的主要派遣国家是日本，大量留学生前往日本的原因主要有三：一是日本地理位置近，留学费用便宜；二是日本明治维新后，日本的强国经验对中国特别有现实意义；三是日文中大量使用汉字，所以对于中国人来说，学日文要比学欧洲文字省力很多。特别是日本还专门为中国留学生设置了一些学校，在日本教师讲课时，旁边配有中文翻译，以便让不懂日文的中国留学生也能听懂讲课的内容。当时日本比较有名的专门招收中国留学生的院校有：政法大学速成科（汪兆铭母校）、宏文学院、同文书院和振武学堂（蒋介石母校）。 １９０４年，两广总督岑春□在广州招考前往日本政法大学速成科的公费留学生，录取人数为５０名。清政府为每位公费留学生每月资助３０日元，这比现在公派留学生的资助金高多了，可以在日本生活得比较宽裕。汪兆铭考上了这次的公费留学生，和汪兆铭同时录取的还有胡汉民，朱执信等人，他们后来都成为同盟会的骨干。１９０４年９月，汪兆铭挤杂在三等舱的乘客当中，首次踏上了日本的土地。当时汪兆铭万万没有想到三十多年后，他以“国家元首”之尊乘专机访问日本，更没有想到他会客死在这片土地上，人的命运真是不可预测的事。到日本后，汪兆铭住在东京神田区神保町名叫春水馆的留学生宿舍，离政法大学很近。政法大学以教授西方的政治法律为主，汪兆铭在那里学习卢梭的《民约论》、孟德斯鸠的《万法精神》，斯宾塞的《政治进化论》，这些西方的民主政治思想使汪兆铭的世界观发生了根本的转变，树立起推翻专制的封建王朝，建立西方式民主共和国的信念。 １９０４年底正好是日俄战争最激烈的时候，日本全国都处于极度兴奋的状态。即使在课堂上，发表最新战况的号外新闻一到，教授就停止讲课，和学生一起朗读新闻。日本这种举国上下的爱国热忱，不仅使汪兆铭十分感动，也唤起了很多中国留学生的爱国心，激发他们投身于救国救民的革命运动之中。 到１９０５年，仅仅在东京一地，就有中国留学生１万余名，这在当时是一个非常空前的规模。中国的革命家们纷纷在留学生最多的日本建立革命党派，使日本成为中国革命的大本营。当时在日本主要有主张君主立宪的保皇党，和主张推翻异族皇帝的革命党。保皇党的代表人物是康有为和梁启超，他们反对进行流血的暴力革命，主张承认清政府统治的合法性，在清政府的主导下进行渐进的立宪改革。保皇党在海外华侨中有不小的势力，但在日本的血气方刚的年青留学生们，并不喜欢保皇党的渐进稳健主张，大多数都支持革命党激进的暴力革命方案。 在海外一时有很多革命党成立，由于中国历史上就有同乡结党的倾向，这些革命党都建立在同乡会的基础上。有孙中山的广东派“兴中会”，黄兴、宋仁教的湖南派“华兴会”，章炳麟的浙江派“光复会”等等。其中以孙中山的“兴中会”和黄兴的“华兴会”势力最大。黄兴身材魁梧，仪表堂堂，性格豪放，很有革命家的“气派”，很为年青的留学生们所倾倒敬仰。而孙中山则身材矮小，说话慎重，在留学生中间的人气不如黄兴高。但孙中山提出了一套“三民主义”的革命理论，比黄兴派的单纯革命相比，在海外华人中有更大的感召力。 １９０５年７月孙中山从美国再次来到日本，汪兆铭和胡汉民，朱执信等广东同乡一起拜访孙中山，加入了孙中山的广东派“兴中会”。汪兆铭文思敏捷，擅长演讲，有很大的组织力和号召力，很快脱颖而出得到孙中山的赏识并委以重用。由于当时的革命党都是各自为政，力量很分散，这次孙中山来日的主要目的就是联合各派的革命党，组成一个统一的革命党。１９０５年７月３０日，孙中山前往黄兴的住所拜访。孙中山和黄兴都是当时非常有名的大革命家，但以前两人一直在各自的平行线上，出来没有见过面。 黄兴对孙中山的来访大喜过望，黄兴紧紧握著孙中山的手，半晌说不出话来。当时黄兴３２岁，孙中山４０岁。可是孙中山和黄兴交谈不久，气氛就开始紧张起来，两人语气强硬，各持己见，甚至到了拍桌子瞪眼睛的地步。最后黄兴破颜一笑说：“孙先生，我服你了”，两位革命巨星终于达成了联合。１９０５年８月２０日，各革命党派的大联合“中国同盟会”在日本东京成立，孙中山被选为总理，汪兆铭作为同盟会的发起人之一，被选为评议部部长。新建的同盟会最初设有三个部：执行部、评议部、司法部。汪兆铭当选重要职务的评议部部长，说明汪兆铭在革命党中有相当的影响力，那时汪兆铭才２２岁。 同盟会最初的主要任务是搞宣传和制造舆论，１９０５年１１月，同盟会的机关报《民报》正式创刊。《民报》特邀章炳麟担任主编，主要编辑则为汪兆铭、胡汉民、吴稚晖等人。汪兆铭从《民报》的创刊号开始，一直是《民报》的主要撰稿人，汪兆铭以“精卫”的笔名在《民报》上发表文章。汪兆铭使用“精卫”的笔名，源自《山海经》里精卫填海的故事，含有对革命锲而不舍之义。汪精卫的文章逻辑严密，笔锋锐利，有很大的影响力。当时《民报》的主要对手是梁启超等保守派主办的《新民丛报》，汪精卫的文章以与保守派的改良主张论战为主，宣扬暴力革命的必要性。１９０６年６月，汪兆铭从政法大学速成科毕业，在２６０余名学生当中，汪兆铭成绩名列第二。本来公费留学生在学成毕业后，有归国服务的义务，同级的大部份同学纷纷归国。但汪兆铭却不准备回国，决定留在日本进行革命活动。由于逾期不归就没有了公费资助，必须自己解决生活问题。幸好汪精卫日语较好，找到了一份翻译工作，每月可得稿酬五、六十元，不仅满足了自己的生活，还可以资助朋友。 同盟会成立后，革命派的势力大振，引起了清政府的不安。清政府开始向日本政府施加压力，要求取缔中国留学生的反政府活动。尽管日本政府中，对中国留学生的革命行动持同情态度的人很多，但由于考虑到与清政府的外交关系，开始对在日本的中国留学生反政府活动进行限制。１９０５年１１月，日本文部省发布的禁止中国留学生进行反政府活动的规定，但事实上对中国留学生的反政府活动采取睁一只眼闭一只眼的态度。１９０７年初，日本政府迫于清政府的压力，“请”孙中山出国。 此后汪精卫跟随孙中山出走越南和马来亚等南洋各地，继续从事革命活动，这时汪精卫已成为孙中山最为信赖的亲信之一。１９０８年３月汪精卫在马来亚的槟城结识了华侨巨富陈耕基的女儿陈璧君。陈耕基积极支持孙中山的革命，经常为孙中山捐钱捐物，孙中山则定期向陈耕基赠送《民报》等革命刊物。陈耕基的女儿陈璧君非常爱读《民报》，在孙中山等人的革命思想影响下，陈璧君决心以实际行动投身革命。汪精卫到槟城演讲时，台下听讲的陈璧君对汪精卫的风度和才识十分钦服。汪精卫因为革命的公事不时走访陈耕基家，所以也经常见到陈璧君。但每次陈璧君与汪精卫见面都是在母亲卫月朗的陪伴下，没有单独谈过话。 １９０８年汪精卫２６岁，陈璧君１７岁，正是男女热恋的年龄。当时虽然两人之间都很有好感，但还只是革命同志的关系，没有发展到恋人的地步。另外阻碍他们成为恋人的还有另外一层原因，那就是汪精卫和陈璧君都已经和别人订婚。根据中国的传统习惯，陈耕基为陈璧君选了一个华侨巨商的儿子订了婚，而且准备在近期内就让陈璧君结婚。陈璧君读了《民报》等宣扬西方个人主义思潮的书报后，思想发生了根本的变化，憧憬西方式自己选择结婚对象的自由结婚。陈璧君和她的未婚夫谈到革命，谈到自己将来准备投身革命。她的未婚夫却思想十分保守，对革命也没有任何兴趣，他对陈璧君说：“革命是男人的事，女人搞革命象什么样子？”。由于两人思想差距太大，陈璧君最后终于选择“退婚”。陈耕基开始不同意“退婚”，但无奈陈璧君态度坚决，只好同意让陈璧君“退婚”。 汪精卫少年父母双亡，所以长兄汪兆镛在他１５岁时，为他选择了一个同事的女儿刘氏订了婚。汪精卫在日本参加革命后，汪兆镛经常来信训斥汪精卫忘恩负义，拿了朝廷的公费出国，到国外却干背叛朝廷的反叛之事。汪兆镛要汪精卫立即悬崖勒马，放弃革命回国为朝廷尽忠。其实汪兆镛也并非坚决反对汪精卫搞革命，只是怕汪精卫成为朝廷的罪犯后连累他们整个家族。汪精卫也明白长兄的用心，在清政府发出对他的通缉令后，汪精卫写信给汪兆镛，表示断绝与家庭的关系，解除婚约。汪精卫在信中说：“罪人兆铭在日本从事革命之事，已被朝廷发觉，谨自绝于家庭，以免相累……吾为革命流血，志矢不渝，谨请谅鉴。罪人与刘氏由家庭作主，曾有婚约，但既与家庭断绝，则此关系亦当随之断绝。请自今日始，解除婚约”。汪兆镛接到汪精卫的断绝信后，退还了刘家的订婚聘礼，为汪精卫解除了婚约。 陈璧君退婚后，倔强地要求到日本参加革命，陈耕基只好同意陈璧君去日本。１９０８年７月，陈璧君搭乘荷兰客船来到日本，在孙中山的“特批”下，宣誓加入同盟会，到《民报》编辑部帮忙，和汪精卫在一起工作。陈璧君到《民报》后，编辑部的气氛一下活跃了起来。本来《民报》的编辑们都是些穷书生，生活十分拮据，极少去饭店吃饭。陈璧君却是个阔小姐，口袋里总有花不完的钱，经常请大家去高级饭店聚餐畅饮，使这些编辑们大为开怀。在这些未婚的年青编辑中，陈璧君成了他们追求的对象，然而陈璧君却逐渐倾心于汪精卫。 陈璧君倾心于汪精卫，不仅因为汪精卫的相貌才能，还因为他严肃的生活作风。在这些年青的革命家中，不少人嫖妓赌博酗酒，而汪精卫却象清教徒一样生活，被人称为“道学先生”。最让陈璧君感动的是汪精卫“革命家不结婚”的信念。汪精卫对陈璧君说：革命家生活无著落，生命无保证，革命家结婚必然陷妻子于不幸之中，让自己所爱之人一生不幸是最大的罪过。汪精卫发誓说：“革命不成功就不结婚”。汪精卫越说不结婚，陈璧君反而越爱汪精卫，但汪精卫却从来没有碰过陈璧君一个指头。后来汪精卫说：正因为他太爱陈璧君，他才没有碰陈璧君一下，他不想毁了陈璧君一生的幸福。 汪精卫后来真的实践了他的诺言，在辛亥革命成功后，和革命同志陈璧君结婚，举行了盛大的婚礼。汪陈的革命婚姻在当时一时传为佳话。汪精卫婚后也一直严守一夫一妻的准则，从来没有外遇和桃色新闻，汪精卫的道德人品在当时的革命家中无人可比。 到１９０８年冬，革命进入最困难的时刻。六次武装起义相继失败，大量革命志士倒在血迫之中。此时梁启超等保皇党乘机攻击革命党的暴力革命，批评革命党领袖是唆使别人送死而自己谋取名利的“远距离革命家”。梁启超在《新民丛报》上撰文批评革命党领袖们：“徒骗人于死，己则安享高楼华屋，不过‘远距离革命家’而已”。梁启超的批评反响很大，一时在海外华人中掀起批评了革命党领袖的风潮。 不久这场批评的矛头就开始指向孙中山，有人写了《孙文十四大罪状》一文，揭露孙中山贪污革命经费２万元自用。当时孙中山独揽同盟会中的经费大权，从不公开经费的使用情况，所以人们怀疑孙中山贪污也不是无中生有。虽然孙中山到底有没有贪污的问题一直没有搞清楚，但这场批评对孙中山在党内的威信影响极大，同盟会中出现也了反孙运动。章炳麟的浙江派公开反对孙中山，宣布脱离同盟会，恢复他们以前的“光复会”。黄兴的湖南派持中间态度，对革命灰心和怀疑的人大量出现，一时间革命陷入失败的边缘。 在此情况下，汪精卫站了出来，主动提出自己去北京刺杀清政府高官，用鲜血来证明同盟会的领袖不是贪生怕死的“远距离革命家”。 第一部份之二：玉石共焚 １９０５年孙中山联合海外各派革命党组成同盟会，主张用暴力的方式来推翻清王朝。到１９０８年冬，同盟会已经发动了六次武装起义，但都相继失败，大量革命青年为此失去宝贵的生命，梁启超等保皇党则乘机批评革命党的暴力革命。 梁启超特别批评革命党领袖们，自己躲在安全的海外，却唆使别人在国内搞送死的暴力革命。１９０８年冬，梁启超在《新民丛报》上撰文批评革命党领袖们：“徒骗人于死，己则安享高楼华屋，不过‘远距离革命家’而已”。梁启超批评革命党领袖的“远距离革命家”作风，批评他们唆使别人送死而为自己谋取名利的作法，一时在海外华人中引起了很大的反响，掀起了一股批评革命党领袖的风潮。 同盟会内部也出现了反孙中山的运动，一些人主张“革命之前必须先革革命党之命”。反孙派攻击孙中山主要在两个方面：第一是批评孙中山近似于独裁的领导作风，说孙中山“办事近于专横，常令人难堪”，第二是批评孙中山不公开革命经费的使用情况，不少人怀疑孙中山将革命经费挪作私用。 １９０７年日本政府“请”孙中山出国时，日本朋友公开赠送孙中山的赠款就有２００００余日元（当时普通日本工薪阶层的月薪不过二、三十日元），而孙中山只给《民报》留下２０００元经费，其余自己全部带走，使《民报》经常陷于经费拮据的苦境。１９０８年冬，《民报》主编章炳麟和孙中山诀别，章炳麟说：日本人向孙中山赠送的赠款，本来是赠送给革命党的革命经费，孙中山却把这些钱当作赠送给他个人的私人赠款使用。章炳麟批评孙中山这种作法“实在有损我同盟会之威信，而使日人启其轻侮之心”。 在“远距离革命家”批判和“倒孙狂潮”的夹攻下，党内党外对革命灰心和怀疑的人士大量出现，同盟会一时间陷入失败的边缘。汪精卫是同盟会中无条件坚决支持孙中山的孙派骨干，为了挽救革命、挽救同盟会，汪精卫主动提出自己去北京刺杀清政府高官，用鲜血来证明同盟会的领袖不是贪生怕死的“远距离革命家”，使党内党外的怀疑人士重新树立起对革命的信心。 汪精卫刺杀清政府高官的设想，并不著眼于暗杀计划本身是否成功，而是著眼于用鲜血回击同盟会领袖是“远距离革命家”的讥讽，挽回民众对革命党的信心。汪精卫写给孙中山的《致南洋同志书》中写道：“吾侪同志，结义于港，誓与满酋拼一死，以事实示革命党之决心，使灰心者复归于热，怀疑者复归于信。今者北上赴京，若能唤醒中华睡狮，引导反满革命火种，则吾侪成仁之志已竟。” 作为同盟会中坚分子的汪精卫，在北京行刺被捕的消息传来后，海内外对孙中山同盟会的看法大为改变，梁启超的“远距离革命家”批判不攻自破，人们重新树立起了对革命党同盟会的信心。可以说当时同盟会的困境，很大程度上是靠汪精卫牺牲自己的烈举挽回的。如果当时汪精卫被清廷处死，汪精卫毫无疑问要作为中国历史上的钦定英雄，永远载入史册。汪精卫在《致南洋同志书》中的一段话，也在当时被流传为佳话：“此行无论事之成败，皆无生还之望。即流血于菜市街头，犹张目以望革命军之入都门也。” 汪精卫最有名的文章是发表于《民报》２６期上的《革命之决心》一文。汪精卫在文中说：现在四亿人民正如饥泣的赤子，正在盼等吃革命之饭。但烧熟米饭所需要的一是薪，二是釜。薪燃烧自己化为灰烬，把自己的热移给了米，才使生米变成熟饭；釜则默默地忍受水煎火烤。所以革命党人的角色有二，一作为薪，为薪的人需要奉献的毅力，甘心把自己当作柴薪，化自己为灰烬来煮成革命之饭；二作为釜，为釜的人需要坚韧的耐力，愿意把自己当作锅釜，煎熬自己来煮成革命之饭。 在同盟会中汪精卫最要好的朋友是胡汉民。胡汉民比汪精卫大四岁，不仅是和汪一起来日本留学的同乡，也是长年在《民报》一起工作的同事，汪一直把胡当作大哥看待。胡汉民得知汪精卫要北上行刺时，劝汪说：你是同盟会中举足轻重的人物，你的文才口才和号召力都是无人可以取代的。如果你以一时之激情与虏酋拼命，对革命的损失太大。 汪精卫则说：梁启超骂我们这些革命党人是“远距离革命家”，章炳麟等人又背叛孙先生和同盟会，已经到了“非口实所可弥缝，非手段所可挽回”的地步。现在我们必须拿出具体的行动来证明我们的革命之决心，才能使梁启超愧对民众，使章炳麟愧对党人，才能促使同盟会内部团结和挽回民众对革命的信心。我以前在《革命之决心》一文中曾经说过，革命党人要为革命作釜作薪，现在正是需要我当革命之薪的时候，若吝薪则何由有饭？但不管汪精卫说什么，胡汉民都坚决反对汪的北上行刺计划。汪精卫临走时不敢向胡汉民告别，怕胡汉民会硬把他留下，于是咬破手指给胡汉民留下血书：“我今为薪，兄当为釜”。胡汉民见到血书时，当场哭得昏了过去。 孙中山等同盟会领导人并不反对用行刺清廷高官的形式，来挽回和唤醒民众对革命的信心。但考虑到汪精卫是同盟会中非常难得的人才，所以孙中山并没有表示支持汪精卫的北上行刺计划，但也没有表示反对。因为没有孙中山等同盟会领导人的明确支持，汪精卫不得不自己寻找愿意和自己一起北上行刺，作革命之薪的人。汪精卫首先想到的是黄复生。 黄复生是四川人，和汪精卫一样也是发起同盟会的元老，担任同盟会的高层干部。黄复生读了汪精卫《革命之决心》一文后非常感动，对汪精卫说：“我也愿意作革命之薪”。汪精卫把自己北上行刺的计划告诉黄复生，汪精卫还没有讲完，黄复生就大笑道：“铭兄，有话何不直说。我和你一起去北京”。汪精卫说：“去北京行刺可是九死一生，毫无生还的可能……”黄复生豪爽地说：“我参加革命时早已立志为革命而死，还谈什么生还的问题，这次就让我们一起作革命之薪吧。” 汪精卫再找到同盟会中会作炸弹的喻培伦，请他帮助作炸弹，喻培伦也爽快地答应了，愿意和汪精卫一同北上。当然最坚决和汪精卫一起北上的是陈璧君，有人半开玩笑地说：“你有一张英国臣民的护照，当然不怕死。到关键时刻，你把英国护照一抛，英国领事馆自会来救你。”陈璧君听完二话不说，拿出英国护照当场撕成碎片，满座皆惊，也让那位说风凉话的人羞得恨不得钻入地缝。可惜现在再也看不到陈璧君那样有志气撕毁自己外国护照的烈女了。 汪精卫计划他和黄复生先到北京作好准备，然后喻培伦、陈璧君等人再携带炸弹到北京。１９０９年１０月，汪精卫、黄复生两人先乘英国船到天津，同盟会的郑毓秀迎接他们。郑毓秀的父亲是天津有名的实业家，她本人精通外文，是天津有名的交际花。郑毓秀经廖仲恺介绍加入同盟会，这次廖仲恺特别写信给郑毓秀，要求她全力帮助汪精卫等人的暗杀行动。汪精卫平日接触的都是陈璧君那样的革命烈女，见到郑毓秀这样风姿绰约的美人交际花，觉得十分不自然。 汪精卫说：“听说最近北京的火车站盘查得很严。我们这些男人携带炸弹容易引起怀疑，想请你帮我们把炸弹带入北京。不过这是一件非常危险的事，炸弹在路上一不小心就有可能爆炸……”郑毓秀当即答应：“如果不会爆炸，还叫什么炸弹？这事就交给我了。”汪精卫是个相貌英俊的美少年，又精通诗词文章，郑毓秀对汪很是倾心，多次以教她作诗为借口和汪精卫接近，汪却极力避开和郑毓秀的单独接触。汪精卫此时已经下定决心象柴薪那样为革命献身，早把男女私情置之度外，和郑毓秀的关系从来没有越过同志的关系。后来郑毓秀感叹说：“汪精卫真是少见的道学先生”。 汪精卫和黄复生到北京的琉璃厂租了一栋房子，挂上“守真照相馆”的招牌，因为照相馆的暗室最适合搞炸弹的组装，照相馆里飘出化学药品的味道也不会引人怀疑。不久喻培伦传来话：正月十五（１９１０年２月１０日）将带铁西瓜入京，请汪等人去前门车站接站。汪精卫和黄复生赶到前门站，见郑毓秀挽著一位白人绅士的手悠然走出车站，白人绅士的手里提著一个沉重的皮箱，里面装著炸弹，车站的警官看也没看就让他们走出了车站。原来当时外国人在中国有治外法权，因此没有人敢随便检查外国人的行李。这个白人是法国大使馆的职员，曾一直追求郑毓秀，这次郑毓秀请他帮忙，那人当然一口答应。 炸弹运到北京后，喻培伦和陈璧君也赶到北京，他们一起商量暗杀的具体计划。第一次暗杀行动是刺杀摄政王载沣的弟弟载洵贝子和载涛贝勒（贝子和贝勒为清王室的爵位名，亲王之下为贝子，贝子之下为贝勒）。２月底载洵和载涛从欧洲访问返京，汪精卫等人准备在载洵和载涛走出前门车站时，投掷炸弹炸死载洵和载涛。当天汪精卫、黄复生、陈璧君三人雇一辆骡车前往前门站，汪精卫和黄复生携带装有炸弹的皮箱在车站门口等候，陈璧君则在骡车上接应。但没有想到当时清廷正搞廉政运动，载洵和载涛不摆架子，混杂在一般民众中一起出站。由于出站的人群中戴红顶子官帽的人极多，汪精卫和黄复生无法识别目标，只好终止暗杀计划。 这次刺杀失败后，汪精卫等人把暗杀的目标定为清廷的最高领导人摄政王载沣。他们吸取了上次计划不周而失败的教训，开始详细调查载沣的行踪。醇亲王载沣的醇王府在什刹海附近，载沣每天早上８点出王府，经过鼓楼大街从景山后门进入皇宫。汪精卫等人本准备在鼓楼大街的矮墙后投炸弹，但正赶上鼓楼大街修扩马路，闲杂人太多，无法行动。他们后来注意到什刹海和后海分界处的一座小桥银锭桥，环境非常僻静，而小桥附近又有一条阴沟可容藏身。于是汪精卫决定事先将炸弹埋在小桥下，汪精卫自己藏身于阴沟里，待载沣过桥时用电线引爆炸弹，和载沣同归于尽。 １９１０年３月３１日深夜，黄复生和喻培伦前往银锭桥埋炸弹，留下汪精卫和陈璧君两人。陈璧君知道汪精卫明天将在爆炸中和载沣同归于尽，这将是他们两人最后的一夜。陈璧君拉著汪精卫的手轻声地哭泣，汪精卫本想找一些话安慰她，可是却不知道该说什么才好。汪精卫内心是深爱陈璧君的，他也知道陈璧君同样深爱著他，但汪精卫越爱陈璧君，就越不愿看到陈璧君为了他而失去一生的幸福。汪精卫努力压下和自己心爱之人的生死离别之情，只是拉著陈璧君的手默默无语，让时间一分一秒地过去。 突然喻培伦匆匆跑进来说：“大事不好，有人看见我们埋炸弹了”，不久黄复生也跑回来说：“警察已经发现我们的炸弹了”。 本来他们以为在寒冬的夜晚人迹稀少，在寒冷的深夜行事不会有人发现。可是天公不作美，银锭桥附近一家人的妻子突然和别人私奔，男人晚上妒气得睡不著觉，深夜走出家门去散气。该人走到银锭桥附近，忽然看到有人影在桥下挖土，他立即联想到人们埋藏财宝的故事，于是潜伏在一旁偷看，想事后取走财宝。可是看到黄复生和喻培伦，埋好炸弹后又开始拉电线埋电线时，该人感觉到情况不对，这不是埋财宝，而是一个重大的阴谋，于是从藏身之处跑出来前去报警。 黄复生和喻培伦刚埋好炸弹，忽然看到从附近闪出一个黑影跑走，立刻意识到他们的行动被人偷看到了。于是喻培伦先跑回去向汪精卫报告，黄复生则在附近监视。不一会儿那个男人带著两个巡警前来，黄复生意识到他们的计划已彻底暴露，也跑回去向汪精卫等人报警。喻培伦建议他们现在立即离开北京，还来得及逃过清廷的追捕。但汪精卫说虽然发现了炸弹，但警察未必就能查出来是他们干的，所以不用著急，看看风头再说。 第二天北京各大报纸都登出了银锭桥下发现炸弹，有人想行刺摄政王的新闻，不过报纸上的分析却都认为这是清廷内部的势力斗争。有人说炸弹中包炸药的报纸写有伦敦字样，而载洵贝子和载涛贝勒正好刚从伦敦回来，很可能是他们搞的暗杀阴谋；也有人分析认为是庆亲王想篡权的阴谋，但没有一篇新闻怀疑到革命党，使汪精卫等人大为安心。三天后又有报纸登出新闻，说银锭桥炸弹案的凶犯已经抓获，汪精卫等人更为安心，于是开始策划下一次行动，让喻培伦去东京买炸药，陈璧君去南洋筹款，汪精卫和黄复生继续潜伏在北京进行下一次暗杀的策划。 然而汪精卫等人却中了清廷的计谋。清廷警察发现炸弹后，立即明白是革命党所为。为了防止暗杀者们逃跑，清廷故意向新闻界放出朝廷内部暗斗和凶手已经捕获的小道消息，使暗杀者们安心留在北京。清廷警察发现炸弹中的炸药是外国制，但几颗螺丝钉却是新近制作的。警探到北京市内各个铜铁店调查，骡马市大街的鸿太永铁铺认出螺丝为该店所作，是琉璃厂“守真照相馆”的老板要求他们作的。警探开始监视“守真照相馆”，正好赶上“守真照相馆”搞装修，一些密探混入装修工人中，从“守真照相馆”中盗出了革命党的机密文件，发现这次暗杀正是革命党所为，首谋就是清廷出１０万两白银悬赏人头的朝廷钦犯汪精卫。１９１０年４月１６日，警察包围了“守真照相馆”，将汪精卫和黄复生一举抓获。 由于谋刺摄政王是一个大案，民政部尚书肃亲王善耆亲自审理此案。肃亲王是清朝建国元勋八大世袭王室的第一家，是当时清廷中头脑见识过人的少有人才。顺便说几句题外话：辛亥革命成功后肃亲王亡命日本租界旅顺，和日本人川岛浪速结拜兄弟，并将一个王女托川岛浪速收养，这就是后来有名的川岛芳子。肃亲王看到从汪精卫身上搜缴的三篇汪精卫的亲笔手稿《革命之趋势》、《革命之决心》、《告别同志书》之后，感慨万分，非常佩服汪精卫的人品见识，更佩服汪精卫为革命献身的精神。肃亲王对清廷的腐败也感到深恶痛绝，所以对革命党人的反叛行为也十分同情，他后来说：“如果我不是出生在王族，我早就加入革命党反叛朝廷了”。 由于清廷已经宣布预备立宪，１９１０年４月２５日清廷法部按照文明国家之法，开庭审理汪精卫行刺未遂案。汪精卫在被告席上昂首挺胸，慷慨陈词地宣读了他即时写成的四千余言的供词：“本名汪兆铭，别号精卫。前在东京时为《民报》主笔。生平宗旨，均刊登于《民报》，不再多言。孙中山先生起事兵败后，我决心炸死载沣以振奋天下人之心。。。”。汪精卫和黄复生在法庭上不但没有招供同党，反而争著说自己是行刺的主谋，希望以此来为对方减轻刑罚，令在场人士十分感动。 看到汪精卫和黄复生视死如归，保护同志的常烘，肃亲王意识到：革命党人行刺的目的就是玉石共焚、杀身成仁，他们早已作好“薪尽饭熟”的献身准备。杀了他们不仅不能吓倒那些不怕死的革命党人，反而会激发民众对清廷的憎恶和反感。本来加害皇族是满门抄斩的死罪，但肃亲王决定从轻发落汪黄二人，以安抚天下人心。摄政王载沣最初主张立斩汪黄二人，但经过肃亲王的反复劝说，同意从轻发落汪黄二人。１９１０年４月２９日，清廷以汪黄二人“误解朝廷政策”为由，免除汪黄二人死罪，判处二人永远监禁。 汪精卫接到免死的判决时，有捡来一条命的感觉。汪精卫入狱后，肃亲王亲自到狱中看望汪精卫。汪精卫以前以为清廷的官员都是愚钝无能的昏官污吏，没想到肃亲王肯屈身访问他这个囚犯，而且以礼相待，谈吐文雅，让汪精卫十分吃惊，也很佩服肃亲王的见识才干。后来人们问起汪精卫对肃亲王的印象时，汪精卫说：“一位了不起的政治家”。 肃亲王说：“汪先生在《民报》的篇篇大作，我都拜读过。汪先生主张中国必须自强自立，改革政体，提倡民众参政，效法西方立宪，这些与朝廷的主张都是一致的。目前朝廷正在筹办预备立宪，建立国会让民众参政议政，这些不正是先生所争取的革命目标吗？” 汪精卫反论说：“我们革命党人所主张的绝不是立宪，而是要推翻封建专制，实行三民主义。亲王既然读过汪某在《民报》上的文章，对汪某的革命主张应有所了解。” 肃亲王说：“你们革命党的确有很多杰出的主见，但你们也应该认真倾耳听听我们的看法。说实话，我认为‘三民主义’是一种见识偏狭的理论，不能成为今后中国的指导理念。为什么要宣扬灭满兴汉？这样宣扬民族仇视能够使中国实现五族协和吗？为什么要搞平地起风波的流血革命，我们不是已经答应实行宪政，让各种政治主张都有实现的机会。用和平的宪政方式来实现自己的政治主张，不是比用多量人命财产损坏的革命方式来实现自己的政治主张更好吗？邻国日本不正是君主立宪的成功榜样吗？” 汪精卫反论说：“我们主张革命的时候，很多人用日本君主立宪成功的事例来反对革命。但日本明治维新，是西乡隆盛用武力从幕府手中夺来的政权，绝不是幕府微笑著把政权交出来的。现在中国搞君主立宪，并不能解决长年的腐败弊害，而且把国会作为民权的支柱不过是一种幻想，国会只不过是君主的傀儡走狗而已。只有民主革命才是救中国的唯一道路。” 肃亲王说：“中国的政治十分复杂，各种民意纷缠不一，改革政体岂能操之过急？螳螂在前，黄雀在后，列强不是在觊觎著我们吗？不忍不谋则乱，还请汪先生三思。” 汪精卫和肃亲王的辩论总是在两条平行线上，谁也说服不了谁。当年汪精卫正值年青的２８岁，而肃亲王却是初老的４５岁，但两人都对对方的才学见识产生了敬佩之心。肃亲王原想说降汪精卫为清廷效力，但见汪精卫革命志坚，也就没有再为难汪精卫。后来肃亲王不时来狱中看望汪精卫，两人之间的关系似乎不是政敌，倒有些近似朋友的关系了。 孙中山在纽约得知汪精卫被捕的消息时喟然长叹道：“兆铭是吾党一位大人才，失去他好比断了我一支手臂”。同盟会东京总部和世界各地的支部也发起了营救汪精卫的行动，胡汉民亲自奔走各地为营救汪精卫演讲筹款。通过营救汪精卫的活动，使一度陷于分裂的同盟会内部开始弥合，也使民众重新认识到革命党的决心，对后来辛亥革命的成功起到了十分重要的作用。 汪精卫在狱中无事，每日作诗。汪精卫狱中诗作最有名的一首是《被逮口占》（又名《慷慨篇》）。 街石成痴绝，沧波万里愁；孤飞终不倦，羞逐海浪浮。诧紫嫣红色，从知渲染难；他时好花发，认取血痕斑。慷慨歌燕市，从容作楚囚；引刀成一快，不负少年头。留得心魂在，残躯付劫灰；青磷光不灭，夜夜照燕台。 汪精卫的《慷慨篇》从狱中传出后，立即被许多报纸争相转载，“引刀成一快，不负少年头”也成为当时革命青年们广为传颂的诗句。 但监狱中的生活毕竟是艰苦的，每日三餐是一碗霉变的陈米和一条咸萝卜，另外每五天可以吃到一次豆腐，逢年过节则每人赏赐肉半斤。一天汪精卫正在苦嚼著黄米饭，忽然一个狱卒给汪精卫塞进十个鸡蛋。这是谁送来的鸡蛋呢？汪精卫拿著鸡蛋仔细端详了半日，在一个鸡蛋上写著一个小小的“璧”字，原来是陈璧君冒死到北京救他来了，是陈璧君买通狱卒给他送来的鸡蛋，汪精卫忍不住热泪流出了眼眶。汪精卫那天晚上抱著鸡蛋睡了一夜。 第二天狱卒悄悄对汪精卫说：“你有什么话写封信，我会转给送你鸡蛋的那个人”。汪精卫感情激荡，当即写成一首《金缕曲》送给陈璧君。 别后平安否？便相逢凄凉万事，不堪回首。国破家亡无穷恨，禁得此生消受，又添了离愁万斗。眼底心头如昨日，诉心期夜夜常携手。一腔血，为君剖。泪痕料渍云笺透，倚寒衾循环细读，残灯如豆。留此余生成底事，空令故人潺愁，愧戴却头颅如旧。跋涉关河知不易，愿孤魂缭护车前后。肠已断，歌难又。 汪精卫在《金缕曲》后面，又用血写了五个字“勿留京贾祸”，让陈璧君赶紧离开危险的北京。过了几天，汪精卫收到狱卒转来的陈璧君的一封信，陈璧君在信中说：“我们两人虽被牢狱的高墙阻挡无法见面，但我感到我们的真心却能穿过厚厚的高墙。我将遵从你的忠告立即离开北京，不过在此之前有一件事想和你商谈。你我两人已不可能举行形式上的结婚仪式，但你我两人从现在起，在心中宣誓结为夫妇，你看好吗？” 汪精卫为陈璧君的真情所感动：自己是一个被判无期徒刑的囚人，如果不自首叛变的话，根本没有出狱的希望，唯一可以盼望的是革命胜利的那一天，但那一天什么时候才会来呢？是１０年后还是２０年后？也许他见到陈璧君的那一天，双方已是白发苍苍的垂暮之人，也许他永远再也见不到陈璧君了。但又有什么比这种心中的结婚更具有真正的爱情呢？汪精卫咬破手指，用鲜血写下一个大字“诺”。 陈璧君接到汪精卫的血书哭了三天，但也高兴汪精卫终于明白了自己的真情。于是陈璧君按照汪精卫的话，离开北京前往南方参加革命。 此后革命的形势发展之快，大大出乎人们的预料。１９１１年１０月１０日武昌起义爆发，在短短十几天内，全国二十多个省纷纷响应宣布独立。清廷为了挽回颓势，急忙宣布开放党禁，释放政治犯，当然最大的政治犯就是汪精卫和黄复生两人。１９１１年１１月６日，清廷宣布释放汪精卫和黄复生，北京各界一千余人前往法部大狱门前欢迎这两位刺杀摄政王的义士。１９１１年１２月，汪精卫乘船到上海，那里陈璧君正等著他。从此这对经过革命生死考验的革命夫妇正式成婚，以后两人再没有分离过，直到汪精卫死去。 辛亥革命成功后，汪精卫实践了他“革命成功后，一不作官，二不作议员，功成身退”的诺言。汪精卫和陈璧君举办了盛大的结婚仪式后，返回他８年没有回过的故乡拜见兄长。然后于１９１２年９月，携陈璧君一起前往法国留学。 第二部分：《打倒独裁者蒋介石》 第二部分之一：起草总理遗嘱的人 １９１２年１月１日，孙中山在南京宣布中华民国临时政府成立时，北京的满清政府依然存在，满清政府的手中还握有比革命军更为强大的军队。这时中国面临两种选择，一种选择是双方采用武力对决的手段，在中国进行一场大流血的“南北战争”，胜者用武力统一中国。如果双方一时间僵持不下，中国就有南北分裂成两个国家的危险。另一种选择是双方采用和平的议和方法统一中国，当时和平议和的关键掌握在袁世凯手中，“南北战争”能够避免吗？人们把视线聚焦在袁世凯身上。 现在中国人一提起袁世凯，就条件反射地在头脑中浮现出一个“窃国大盗”的形象，简单地把袁世凯划为开历史倒车的人民公敌，但实际上的袁世凯并非如此简单。由于袁世凯是国民党和共产党共同的敌人，所以国共两党的历史书都对袁世凯大加诋毁，把袁世凯描绘成一个充满权力欲的野心家，一些历史书还误传袁世凯出卖谭嗣同等人的恶迹。其实１９１２年，袁世凯在大部分中国老百姓心中的威信，要远大于孙中山。在清末，袁世凯就象当年苏联的叶利钦一样，是清政府中改革家的代表，清政府后期的诸多改革，多数出自袁世凯之手。在叶利钦上台以前，谁会预测到他会从民主的旗手变成独裁的君王呢？袁世凯也象叶利钦一样，上台前也曾赞美声一片。 孙中山的民国临时政府向袁世凯提出了两个最基本条件：清帝退位和采用西方式的共和制国体。对于清帝退位，袁世凯等汉族大臣基本全部赞成，可是在打倒清帝后，中国该采用什么国体的问题上，双方意见分歧较大。袁世凯本来是梁启超等人“开明专制”的支持者，也认为中国不适合搞共和制。不过袁世凯还是同意了南方政府采用共和制的方案，但要求中华民国总统有近似于独裁的权力。最后南方政府同意了袁世凯的集权总统方案，南北政府合并，使中国避免了内战和分裂的危险。 如果说袁世凯有什么“功绩”的话，应该首推“统一中国”。当时革命党人十分激进，不少人提出了分省自治的提案，如果当时没有袁世凯坚持维持一个强权的中央政府，中国很可能就要分成几个国家。另外蒙古和西藏当时是清王朝的藩属国，辛亥革命后，俄国和英国曾设法谋求蒙古和西藏脱离中国，但袁世凯积极与列国交涉，保全了中国对蒙古和西藏的主权。 袁世凯出任第一任中国民国总统，并非窃取了孙中山的中华民国临时大总统，而是当时的众望所归。袁世凯虽然赞成孙中山“三民主义”中的“民族主义”，但并不赞成孙中山的“民权主义”“民生主义”，而倾向于搞开明专制。孙中山为首的同盟会的革命目标是“民族主义”“民权主义”“民生主义”的三民主义，辛亥革命虽然实现了三民主义中推翻异民族统治的“民族主义”目标，可是在平均地权、男女同权方面等“民权主义”和“民生主义”方面，却几乎没有达成当初的目标。不少同盟会成员批评孙中山不应该放弃同盟会当初的平均地权、男女同权等革命目标，汪精卫也向孙中山进言，希望同盟会不要仅仅满足于打倒满族人政府，但孙中山却以为这样的妥协是必要的。 １９１２年３月１０日，袁世凯就任中华民国临时大总统，任命了蔡元培、宋教仁等多位南方政府人员组成临时政府。中华民国临时政府，曾邀请汪精卫这位全国著名的反清英雄出任广东省都督，这对于一个还不到３０岁的青年来说，是极有诱惑力的官职，但汪精卫却婉言谢绝，实践了他革命成功后“不作官，不作议员”的承诺，于１９１２年９月携陈璧君一齐前往法国留学。 为了在议会中对抗袁世凯的总统强权，同盟会联合其他一些党派，在１９１２年８月成立了中国国民党，孙中山出任国民党理事，宋教仁出任理事代理，但国民党的实权基本上掌握在宋教仁手里。随著政局的发展，国民党的三民主义和袁世凯的开明独裁路线的分歧越来越大，最后发展成为公开的斗争。１９１３年３月２０日，国民党的实际领导人宋教仁在上海被暗杀，南方的革命派一齐举起了反袁的旗帜，这就是所谓的“二次革命”。 “二次革命”开始后，汪精卫应孙中山之招，从留学的法国紧急回国，参加革命。但“二次革命”的革命军在袁世凯的强大政府军面前很快土崩瓦解，１９１３年９月１日的南京陷落，标志著“二次革命”失败。“二次革命”失败后，孙中山亡命日本，汪精卫亡命法国。 “二次革命”失败后，汪精卫的人生观发生了根本的变化。以前汪精卫以为中国的一切罪恶之源就是满清政府，只要打倒了满清政府，中国就一下会变成一个民主强盛的国家。但是汪精卫万万没有想到自己曾经为之献身的革命事业，竟然得到这样一个结局，革命不但没有使中国民主强盛起来，反而比以前清王朝的时代还要糟糕。一个人对一个事业投入的越多，对事业失败的悲痛和挫折感就越大。汪精卫曾把自己最宝贵的生命都交给了革命，却换来了这样一个残酷的现实，使汪精卫的革命理想消失得无影无踪。汪精卫一下从一个狂热的革命青年，变成一个踌躇多疑的政治家。 在法国，汪精卫进入法国里昂大学攻读社会学。汪精卫在法国学习很勤奋，似乎想远离政治的漩涡，但中国政局的发展，又把汪精卫带回到了激烈的政治斗争中。１９１４年７月，孙中山在日本成立了中华革命党。１９１５年１２月，袁世凯废除共和制，改中华民国的国号为“中华帝国”，自己宣称为中华帝国皇帝。袁世凯的帝制复辟，在中国引起了新一轮反袁运动，就是所谓的“三次革命”。汪精卫在孙中山的急招之下回国，参加了反袁护国军。袁世凯军队在反袁军面前节节败退，袁世凯不得不在１９１６年３月宣布取消帝制，恢复共和制，并在６月６日急病而死。 尽管汪精卫一直是反袁先锋，把袁世凯称为“人民公敌”，但袁世凯并不记恨汪精卫，反而非常欣赏汪精卫的胆识和才能。在汪精卫流亡法国期间，袁世凯曾经托蔡元培找汪精卫，请汪精卫回国作总统府的高级顾问，但汪精卫拒绝了袁世凯的邀请。从历史上来看，汪精卫并不是一个特别喜欢追逐权力的野心家。 “三次革命”表现出中国的老百姓对几千年来延续的帝制已经厌烦，使在中国复辟帝制的企图再也无法得逞。虽然“三次革命”成功地阻止了袁世凯的复辟帝制，但孙中山的国民党并没有得到政权。袁世凯死后，政权依然掌握在握有枪杆子的北洋军阀手中。当时中国之所以形成军阀混战的局面，是由于中国没有征兵制、也没有军官退休制度。当时在中国征召士兵并不是由国家机构统一进行，而是由各路将军私人征召，这就形成了士兵不忠于国家而忠于个人的私家军制度。 孙中山虽然长年从事革命，在民众中也有较高的威信，但由于没有自己的私家军，所以一直无法走上政坛。这使孙中山痛感枪杆子里面出政权的真理，感到有必要创建一只效忠于自己的军队。但孙中山本人的职业原是医生，自己并不懂军事，也没有带兵打仗的经验。而孙中山周围的忠实追随者汪精卫、廖仲恺、胡汉民等人都是书生，没有会带兵打仗的将军。孙中山开始著重搜罗军事人才，在日本军事学校毕业的蒋介石，很快受到了孙中山的青睐。 １９１７年苏联成立以后，开始了输出共产主义的革命外交，中国成为苏联革命外交的最重要国家。苏联宣布放弃沙皇时代与中国签订的各种不平等条约，使中国人民对新兴的苏联政权产生了极大的好感。苏联看中了孙中山的国民党，而孙中山也正好急需外国的支援，以前积极支持孙中山的日本在提出苛刻的２１条后，已经遭到中国人民的反感。于是孙中山开始在苏联的援助下筹建一只完全效忠于自己的国民党军队，１９２４年６月创建了黄埔军校，委派蒋介石出任校长。 由于孙中山接收了苏联援助，苏联要求孙中山和刚成立不久的中国共产党进行合作，孙中山答应了苏联的联共要求。但孙中山的联共政策，特别是允许共产党员以个人身份加入国民党，在国民党内引起了很大的反对之声。很多国民党的高级干部，包括汪精卫和胡汉民，以及刚从苏联考察归来的蒋介石也都反对孙中山的联共政策，只有廖仲恺积极支持联共。所以国民党的联共政策基本上是靠孙中山个人的威信强行实施的，这就为孙中山死后国民党内的清党清共，埋下了伏笔。 １９２４年１０月，直系军阀冯玉祥在北京发动了政变，北京出现了段祺瑞、冯玉祥、张作霖的临时联合政府。临时联合政府邀请孙中山到北京共商国事，于是孙中山在汪精卫等人的随行下前往北京。孙中山到达北京后立即病倒，送协和医院诊断为肝癌，从此卧床不起。１９２５年２月，孙中山病情加剧，急忙电请孙科、宋子文、孔祥熙等人赴京。汪精卫等人本以为孙中山会主动提出立一个遗嘱，指定自己的接班人。可是一直到２月２４日，仍不见孙中山有立遗嘱的意思，于是汪精卫和宋子文、孔祥熙等人商定，先为孙中山起草一个遗嘱，再根据孙中山的意思修改。 孙中山的遗嘱由汪精卫起草，汪精卫写好遗嘱后，和宋子文、孔祥熙等人一起来到孙中山的病榻前。汪精卫眼含泪水对孙中山说：“希望总理留下一些话，好让我们去做。我们恳请总理生前留下遗嘱。”宋子文和孔祥熙也说：“汪先生是代表在京的政治委员会提出这个意见的”。 孙中山问：“你们要我说什么呢？” 汪精卫说：“我们预备好了几句话，读给总理听。总理如果赞成，便签个字，当作总理的话。如果总理不赞成，便请总理另外说几句话，我可以代笔记下来，也是一样。” 于是汪精卫掏出写好的遗嘱，大声朗读起来：“余致力于国民革命凡四十年，其目的在求中国之自由平等……”孙中山听完后说：“好呀，我很赞成。”没有一字添改。于是这篇汪精卫写的“总理遗嘱”，就当作孙中山的政治遗嘱公开发表。 为什么孙中山没有主动提出自己的遗言，为什么孙中山没有指定自己的接班人，仍然是一个不解之谜。由于孙中山没有指定接班人，结果造成了后来国民党内部长期内斗不断，这也是孙中山埋下的不幸之种。也由于孙中山没有指定接班人，国民党内没有人敢接任总理之位，只好宣布取消总理制，把总理这一称呼永远让给孙中山。此后国民党的领导体制开始采用集体领导的委员会制。 孙中山之后的国民党中，汪精卫是呼声最高的接班人。汪精卫是同盟会中资格最老的一辈，有敢于自我牺牲的英雄光荣史，有革命成功后不谋求当官的君子风度，更有鲜有人比的文才和口才，这在国民党中都是无人可比的。加之汪精卫的个人生活作风也非常为人称道，汪精卫不抽烟、不喝酒、不赌博、不近女色，这在当时的国民党高官中，都是鲜有人能够做到的。 在１９２５年７月１日，孙中山原来的大元帅府改组，改为国民政府，设国民政府主席为最高领导人。在中央政治会议上，汪精卫以全票当选国民政府主席，成为孙中山以后第一位国民党领导人。但汪精卫却有一个极大的弱点，这就是他没有一只忠于它的私家军，在枪杆子里面出政权的中国社会中，汪精卫这样的文人书生，注定不能在最高领导人的位置上坐得太久。 第二部分之二：短暂的汪主席时代 １９２５年３月１２日，国民党总理孙中山逝世。由于孙中山逝世前没有指定自己的接班人，汪精卫以他在党内的资历和声望，被推举为孙中山之后的第一位国民党领导人。１９２５年６月２６日，由汪精卫主持召开了国民党中央政治会议，会上确定了国民党总理的称呼永远留给孙中山，今后国民党采用集体领导的委员会制。会议还决定撤销孙中山生前的大元帅府行政机构，将国民党的最高行政机关改称国民政府。 １９２５年７月１日，国民政府正式成立，汪精卫被选为国民政府主席，兼任中央军事委员会主席，集党、政、军大权于一身。７月２日，汪精卫在１０万广州军民参加的国民政府成立庆祝仪式上，庄重宣布：“国民政府当前的首要任务是挥师北伐，统一中国”。汪精卫的发言得到了在场军民的热烈欢迎，到处响起“拥护汪主席”的口号，这是汪精卫一生中最为辉煌的日子。 汪精卫的国民政府遵守孙中山“联俄、联共、辅助工农”的三大政策，积极任命了一批共产党员位居国民政府的要职。比如汪精卫任命共产党员的谭平山为中央党部的组织部长，毛泽东为宣传部长，林伯渠为秘书长，帮助国民党中央常务委员会工作，使共产党的势力在国民党中取得了较大的发展。一时间汪精卫领导的国民政府似乎一切顺利，但一个多月后发生的廖仲恺暗杀事件，一下使汪精卫陷入进退两难的窘境。 国民党本来就是一个由各种势力混杂而成的政党，党内分有不少派阀。在孙中山生前，各个派系畏于孙中山的威望，没有出现激烈的派系斗争。但孙中山殁后，国民党失去了威振全党的重秤，党内的派系斗争开始表面化和激烈化。当时国民党主要分为左派和右派两派：左派支持孙中山的联共“三大政策”，其代表人物是廖仲恺，右派则反对孙中山的联共政策，其代表人物是胡汉民。汪精卫则是中间偏左的立场。 胡汉民也是一直在国民党内地位很高的人物，曾多次在孙中山不在时，代理孙中山的大元帅职务。孙中山去世后，胡汉民也是很有希望接任国民党领导人位置的候选人。然而在新成立的国民政府中，胡汉民任外交部长、廖仲恺任财政部长，这使胡汉民非常不满。原来在东京同盟会时代，胡汉民和汪精卫本是生死之交的密友，胡汉民曾为营救汪精卫而披心沥血。但天下没有不散的宴席，在权力面前，他们之间的友谊开始破裂，胡汉民开始支持党内的右派反对汪精卫。这正应验了中国的古话：“可以共患难，不可以共安乐”，权力对人的腐蚀作用实在太大了。 １９２５年８月１９日，廖仲恺在国民党部大门前，遭５名枪手的枪击身亡。廖仲恺被刺案惊动了刚刚成立的国民政府，汪精卫亲自组成了特别委员会，调查廖仲恺被刺案的凶手。可是汪精卫没有想到调查的结果，却显示出胡汉民是刺杀廖仲恺的幕后策划者。汪精卫念及当年他们两人在东京时代的旧情，没有公开处分胡汉民，只是将胡汉民以国民政府特使的名义派往苏联考察。１９２５年９月２２日胡汉民前往苏联，但汪精卫这个举动被一些国民党左派批评为有徇情枉法之嫌。 廖仲恺一死，汪精卫就成为国民党左派的代表人物，遭到一批国民党右派的猛烈反对。由于右派的台柱人物胡汉民被迫离职出国，国民党右派在广州政府已无法立足，于是他们跑到北京另立中央。１９２５年１１月２３日，戴季陶、林森等一批国民党中央执行委员和中央监察委员，在北京西山碧云寺孙中山的灵前，召开了自称为“国民党一届四中全会”，这就是所谓的“西山会议”，与会者也被称为西山会议派。西山会议以反对联俄联共、反对汪精卫“左倾”为主要议题，通过了一系列反对联俄联共的决议案，并罗列汪精卫“为共产党护符”的九大罪状，宣布开除汪精卫党籍半年，以观后效。 虽然右派的反汪气焰十分嚣张，但由于最为重要的军权仍掌握在左派手里，所以西山会议并没有形成很大气候。１９２６年４月１日，广州国民党中央召开了“国民党第二次全国代表大会”，汪精卫在会上重申坚持孙中山的联俄联共三大政策，汪精卫说：“西山会议派打出反对联俄联共的旗帜，就是打出反对孙中山先生的旗帜，所以成为总理的叛徒，革命的蟊贼”。 汪精卫的左派立场得到了共产党和苏联政府的高度评价，在汪精卫当政期间，共产党的确得到汪精卫很多的关照，要不是汪精卫后来当了“汉奸”，共产党很可能要把汪精卫和张学良并列起来，誉为反蒋英雄。在“国民党二大”上，汪精卫当选执掌最高权力的中央执行委员会主席，但此时蒋介石却以“流星般的速度上升”，成为党内仅次于汪精卫的第二号人物。 １９２４年１月举行的国民党第一次全国代表大会上，汪精卫、胡汉民、廖仲恺、戴季陶等人均为中央执行委员会委员，而蒋介石不但不是中央委员，连候补委员都不是。但１９２４年５月蒋介石出任黄埔军校校长后，一举成为国民党党军：国民革命军的实际最高领导人。在中国往往是得军队者得天下，蒋介石凭借掌握的军权，在国民党中的地位飞速上升。当然蒋介石的跃升，在相当程度上也得益于汪精卫的大力提拨和重用。１９２５年１０月，汪精卫以国民政府主席的名义，发布了东征陈炯明的命令，汪精卫亲自任命蒋介石为东征军总指挥。汪精卫那时还没有想到这个默默无闻的小字辈蒋介石，居然会在一年后成为掌握国民党的实权人物。蒋介石东征陈炯明取得胜利后，在国民党中名声大振。１９２６年１月国民党第二次全国代表大会上，蒋介石当选中央执行委员会委员，并兼任国民革命军总司令，成为国民党中最有实力的人物。 不过蒋介石能够飞速掌握国民党的实权，还与汪精卫过于淡泊权力有关。汪精卫在党内的资格最老，和孙中山的关系最近，又有敢于自我牺牲的英雄事迹，所以汪在国民党内的声望首数第一。汪精卫为人诚实、不贪钱财、特别是在个人生活方面，汪精卫不抽烟、不酗酒、不赌博、不近女色，这在当时腐败的中国政界，是一种非常清高的存在，和他周围的污浊形成了极为鲜明的对比。汪精卫在国民党内是类似于“圣人”的偶像，是大家非常尊敬的革命老英雄。但大家总是对汪精卫敬而远之，在国民党内从来没有形成过所谓“汪精卫派”，这是为什么呢？ 中国有句格言说：“水至清则无鱼”，汪精卫品格过于清廉，所以愿意跟随他的人就很少。在中国善于玩弄权术的人总是以“封官许愿”等物质刺激的方法，来召集网罗自己的跟随者。汪精卫不但不搞“封官许愿”，还对自己的部下要求很严，由于跟汪精卫干捞不到什么好处，所以愿意跟随汪精卫的人就很少。另外汪精卫也不会用“结拜兄弟”等方法来拉拢有权势的人，蒋介石曾两次给汪精卫送去兰谱，希望和汪精卫结为“拜把兄弟”，但都被汪精卫婉言谢绝。按照西方的标准，汪精卫这样有出色口才笔才，又有充分政治责任感和生活清廉的人，是非常理想的政治家。可是汪精卫这样西方型的政治家，却不适合于中国污浊的政治土壤，这也是汪精卫一生的悲剧所在。 对于具有走向权力顶峰野心的蒋介石来说，汪精卫是一个需要排除的障碍。蒋介石刚开始时是以一个积极拥共的左派形像出现，曾发表声明痛斥西山会议派的反共反汪行为，得到了汪精卫的信任和重用。但蒋介石成为国民党内仅次于汪精卫的第二号人物后，就开始向反共的右派靠拢，成为右派的领袖人物。为什么国民党内会出现强大的反对“联俄联共”的右派势力呢？这其实与苏联的中国政策有关。 １９２３年列宁的秘书马林访问孙中山，表示苏联准备在政治和军事上，积极支持孙中山的国民党。孙中山对苏联也很有好感，两人一拍即合，达成了协议。从此苏联向孙中山提供大量的金钱武器，孙中山靠苏联的支援建立起黄埔军校，创建起一只国民党自己的军队。但孙中山得到苏联支持的代价也不小，孙中山特聘苏联人鲍罗廷为国民党的政治顾问，鲍罗廷在国民党中有极大的发言权，国民党的各项政策行动都要征求苏联代表的同意。孙中山殁后，汪精卫的国民政府决心完成孙中山的遗志，北伐统一中国。但北伐所需的武器军费，全靠苏联人提供，随著苏联对国民党援助力度的加大，苏联派遣了大批军事顾问进入国民革命军的各个师团。 但苏联顾问们并不懂尊重中国的礼节和习惯，在国民党军队中以傲慢的太上皇身份出现，对国民党军队的内部事物指手画脚，引起了很大一部分国民党军人的反感，也使很多国民党领导人怀疑苏联有在政治军事上控制国民党的野心。蒋介石曾叹息说：“呜呼，赤化也，共产也，俄人掌握政权也。”接替鲍罗廷的苏联顾问季山嘉到任后，对中国人更是非常傲慢，特别是季山嘉与国民党军队最高领导人的蒋介石私人关系极差，季山嘉见到蒋介石，不是冷笑就是挖苦，几乎反对蒋介石的每一项计划，这促成了蒋介石反俄的决心。 更为糟糕的是，季山嘉改变了以前苏联逐步改造国民党的计划，开始公然帮助中国共产党在国民党中扩充势力，试图让中共从内部颠覆国民党，建立中国共产党的政权。季山嘉向国民军的各个师团派遣共产党员作党代表，当时蒋介石的国民革命军第一军中，８０的党代表都由共产党员担任。然而季山嘉的激进赤化行动，遭到了以蒋介石为代表的国民党右派的强烈反对。１９２６年３月１８日，国民军最精锐的中山舰，在没有接到命令的情况下，忽然驶入黄埔，中山舰除去炮衣摆出战斗阵势，停靠在黄埔军校旁，有搞军事政变的嫌疑。尽管到现在为止，中山舰事件的真相仍然不很清楚，但有不少迹像表明可能是苏联顾问季山嘉策划的。中山舰长李之龙是共产党员，中山舰的行为又让人联想到俄国十月革命时巡洋舰炮击冬宫的历史画面，所以蒋介石认定共产党要搞暴动，于是下令包围苏联顾问公馆，收缴工人纠察队的枪械，将第一军中的党代表全体免职，并逮捕了中山舰长李之龙。 当时汪精卫是国民政府主席，又是中央军事委员会主席，蒋介石这么大的行动事先不通知汪精卫，显然是以“先斩后奏”的方式和汪精卫对抗。汪精卫对蒋介石无视合法国民党中央政府而擅自行动的行为非常愤怒，准备召集中央委员处置蒋介石的越权行为，但大部分中央委员却都替蒋介石说话，赞同蒋介石的排俄排共行动。汪精卫看到他这个最高领导人已被蒋介石架空，如果他和蒋介石搞直接对抗，势必引起国民党内部的严重分裂。既然国民党中央的大部分人都赞成蒋介石，为了维护国民党的整体利益，汪精卫决定以主动辞职的方式，把政权交给蒋介石。 １９２６年３月２２日，汪精卫在临时召开的中央政治会议上说：“我是革命政府和党的代表，这件事的发生我也有责任，我只责己不责人，一切均由我不能尽职所造成，我将引咎辞职。此事一切善后工作，均由蒋同志去办。”当时汪精卫之所以轻易把政权让给蒋介石，是因为当时汪精卫以为蒋介石和他的对抗只是出于政治观点的不同，没有想到蒋介石上台后会搞个人独裁。汪精卫本是一个淡泊权位的人，本来并没有和蒋介石争权的野心，但当蒋介石明显在国民党内搞个人独裁后，汪精卫才站出来成为反蒋的核心人物。 １９２６年５月１１日，汪精卫离开广州前往法国马赛。汪精卫辞职后，广州国民政府于６月６日推选蒋介石为中央军委主席兼北伐军总司令。后来蒋介石又出任国民党中央常委主席，独揽党政军大权于一身。蒋介石的排俄排共政策虽然得到了国民党中相当的支持，但国民党北伐还要依靠苏联的经济军事援助，还没有和苏联摊牌的资本。所以蒋介石在处理中山舰事件时，提出“对人不对俄”的方针，要求俄国撤回顾问季山嘉，重新派鲍罗廷任国民政府顾问。苏联接受了国民党的要求撤回了季山嘉，苏联和国民党的关系一时得到了缓和。 蒋介石上台后，立即开始著手北伐。１９２６年１１月，北伐军攻占了南昌、武昌，这引起了北方军阀们的震惊。张作霖、孙传芳、张宗昌等人组织起“安国军”和北伐军对抗。安国军司令张作霖开始在北京搜捕共产党员，许多共产党员逃入苏联大使馆避难。由于苏联是北伐军的总后台，张作霖不顾国际法，派军队强行进入苏联大使馆抓捕共产党人，并搜缴出多份机密文件，包括蒋介石和冯玉祥向苏联借款的契约书以及苏联向北伐军提供武器的清单表。张作霖从苏联大使馆抓出的中共最大级人物是李大钊，张作霖是一个头脑简单的武夫，立即判李大钊等二十人死刑，包括李大钊十七岁的女儿。 北伐军在军事上的进展虽然顺利，但蒋介石的独裁作风却引起了很多国民党人的反感。尽管中山舰事件发生时，大部分国民党领导人站在蒋介石一边，赞成他排俄排共的“敢行”。但是蒋介石当权后表现出来的独裁霸道，又让人们回想起作风民主的汪主席的好处，于是“拥护汪主席，请汪主席回国复职”的呼声四起。１９２７年２月，孙科等人组成“迎汪行动委员会”，以国民党临时中央会议的名义，致电汪精卫，敦促他回国复职。蒋介石后来也挡不住“拥汪”的浪潮，只好也打电报请汪精卫归国复职。在法国的汪精卫收到了雪片般飞来的请求他回国复职的电报，最后蒋介石也打来电报说：“如果先生再不回国的话，我就要出国了”。 汪精卫看到这些电报后感叹道：“看来我不回去不行了”。１９２７年２月下旬，汪精卫离开法国，乘火车经苏联归国。从此汪精卫开始了他与独裁者蒋介石的斗争。但此时的蒋介石羽毛已经丰满，汪精卫手里又没有军队，已经无法有效地抗衡蒋介石了。 第二部分之三：从拥共到反共 中山舰事件后，汪精卫自责辞去国民党主席和中央军委主席出国。蒋介石接任国民党主席和中央军委主席，独揽党政军大权于一身。蒋介石上台后，虽然一改孙中山和汪精卫时代的亲俄政策，但并没有和苏联人摊牌。苏联当时受到其他资本主义国家的孤立，在海外只有中国国民党一个朋友，所以也不愿轻易和国民党把关系搞糟，苏联接受了蒋介石的要求，撤回态度傲慢的顾问季山嘉，重新派态度比较谦虚的鲍罗廷出任国民政府顾问，使苏联和国民党的关系一时得到了缓和。 蒋介石上台后，１９２６年７月在苏联的支持下开始北伐。据近年的一些研究资料显示，苏联对国民党政府提供了高达数百万美元（当时价格）的军事援助。当时中国是个穷国，各个军阀并没有多少钱购买军火，而资本主义国家“死的商人”军火商，决不会象苏联那样提供无偿的军事装备，所以苏联的援助使各个军阀部队在军事装备上，大大劣于北伐军。比如大军阀之一张宗昌的部队，有三分之一的人没有枪，连军服也长年不更新，士兵们一个个蓬头垢面，还有很多人连鞋都没有。部队里发的一点军饷全被各级军官装入自己的腰包，张宗昌自己也生活非常靡烂，有妻妾４２人，其中２１人是白人。这样的军队没有战斗力也是可想而知的。 当然苏联的援助也是有条件的，这就是允许共产党人在北伐所到之处发动工农，并在军队中进行帝国主义问题、农民问题的激烈宣传。当时中国人对西方列强的侵略本来就很痛恨，列宁的帝国主义学说又使中国人的仇外情绪火上浇油，使北伐军和外国人造成了严重摩擦。１９２７年１月３日，北伐军不顾中国军队不得进入外国租借的国际条约，强行进入英国在汉口的租界，和英国的海军陆战队发生了交火，双方各有死伤。１月６日，北伐军再次强行进入在九江的英国租借。如果是在一次世界大战前，大英帝国肯定再次纠集八国联军惩罚中国，但一次大战后英国的国力大大衰退，只好默认中国军队武力收回汉口和九江租借。 可是１９２７年３月２７日北伐军占领南京后，激愤的士兵的狂乱行动，引起了造成很大国际麻烦的“南京事件”。北伐军进入南京后对外国领事馆、教堂、商社等进行了武装袭击，打死英美法意等国６人，打伤数十人。特别是英国领事被北伐军士兵拉到市中心用青龙刀斩首示众，英国领事夫人被２７名北伐军士兵轮奸至重伤，此外还有上百名外国妇女被北伐军士兵强奸。北伐军的“暴行”使列强们十分震惊：义和团又来了！英美在长江上的数艘军舰开始向南京城内炮击报复，打死南京市民２０００余人。不过日本军舰被政府下令不得开炮，日本舰队司令驶回上海后自杀谢罪。他在遗书中说：他奉命不准开炮，以至海军保护侨民不周，无面目以见国人。（据日本报道，日本在“南京事件”中重伤５人，被强奸者３５人）。 蒋介石对这种情况非常担心：这样下去北伐势必引起各国列强的干涉，就要破灭国民党消灭军阀统一中国的大业。蒋介石认为这一切都是共产党的帝国主义理论煽动所造成的，不和共产党分家，北伐就不能成功。蒋介石下了“分共”的决心。尽管蒋介石的“分共”主张得到大部分国民党高级将领的支持，但当时蒋介石身兼各种要职，培植私人势力，搞军事独裁的倾向也十分明显，所以反对蒋介石独裁，请汪精卫回国重新担任国民党领导人的呼声一浪高过一浪。在这样的情况下，蒋介石也感到众怒难犯，只好请汪精卫回国主持大局，蒋介石给汪精卫拍电报说：“如果先生再不回国的话，我就要出国了”。 在这种情况下，汪精卫于１９２７年２月下旬离开法国，乘火车经苏联归国。在汪精卫途径莫斯科时，斯大林专门接见了这位国民党左派领袖。斯大林希望汪精卫回国后重用陈公博等左派人士，嘱咐汪精卫说服蒋介石不要赶鲍罗廷回国。原来苏联将最高顾问季山嘉换为态度比较谦虚的鲍罗廷后，仍和蒋介石龌龊很多。一次鲍罗廷对蒋介石说：“你想让众人不说话是不可以的。我告诉你一个故事罢。古时西方有一个国王，极讨厌大臣们说话。有一天，他对大臣们说：‘你们说话太多了，我不喜欢。’大臣们说：‘只有狗是不会说话的，陛下要我们不说话，只有去找狗。”蒋介石认为鲍罗廷有意羞辱他，又要赶鲍罗廷回苏联。汪精卫向斯大林表示回国后要坚持孙中山的联俄联共政策，并做好蒋介石等右派的工作。 北伐军攻克汉口后，原来在广州的国民政府迁往汉口，而蒋介石的北伐军总司令部却设在南昌。在汉口的国民政府要求蒋介石把北伐军总司令部迁往汉口，而在南昌的蒋介石却要求把国民政府迁往南昌，两方进行了激烈的争论。蒋介石不执行党中央的命令，拒绝把司令部迁往南昌的作法，显然出于私心。在蒋介石看来，驻扎汉口的部队都不是他的嫡系部队，他到南昌必然处于国民政府的控制之下。蒋介石和武汉国民政府的迁都之争，使人们更加感到蒋介石军事独裁的危险。 １９２７年３月１０日，就在汪精卫回国的途中，国民党中央在武汉召开了二届三中全会。这次会议是一次不折不扣的反蒋会议，与会者们一致认为蒋介石集党政军大权于一身，一意培植私人势力，现在又挟军力与党和政府对抗，制造军事独裁。如果不及早加以抑制，蒋介石必将成为袁世凯第二。二届三中全会通过了一系列议案，“中央军事委员会组织大纲”，“国民革命军总司令部组织条例”等，均意在提高党权，削弱蒋介石的个人权力。会议还通过今后中央军事委员会不设主席，由汪精卫为首的７人集体领导。汪精卫在缺席的情况下，被选为国民政府主席。 北伐军占领南京后，蒋介石的北伐军司令部迁往南京，这时国民党已形成在汉口的国民政府和在南京的蒋介石派系两大阵营，两个阵营都拉拢汪精卫加入他们的阵营。以当时汪精卫在国民党内的地位和威望，加入哪个阵营就会大大加重该阵营的砝码。７０年前的交通不比现在这样快捷，１９２７年４月１日汪精卫乘坐的邮轮到达上海时，北伐军已经攻占了上海。蒋介石派他的私人代表吴稚晖前往码头迎接汪精卫，在这以前，蒋介石向全军发表欢迎汪精卫回国领导的通电：“自今以后，所有党政、民政、财政、外交等等，均须在汪主席领导之下，完全统一于中央。中正统帅全军而服从之。”４月３日，汪精卫到法租界孙中山的故居，和蒋介石以及在沪的国民党高级军政干部会谈。 吴稚晖说：“现在共产党以武汉为中心，从城市到农村都在搞暴动，武汉的国民党已被共党所胁持，迟早要被吃掉”。蒋介石说：“目前我党已处于一个危险时期，也是一个转折关头，如果让共党再猖狂下去国民党就要垮台，现在一切党国命运在于汪主席复职。”汪精卫说：“蒋先生要兄弟来究竟要做些什么呢？”蒋介石说：“第一是复职。第二是把苏俄代表鲍罗廷赶走，此人在武汉成了太上皇，非把他赶走不可。第三是分共。这三件事必须坚决做，立即做，请汪主席指示。” 汪精卫回答说：“联俄容共的政策为总理手定，不可轻言更改。此事事关重大，须召开四中全会做出决定。党的民主制度、组织原则是必须遵守的。”吴稚晖站起来激动地说：“汪兄弟，现在是什么时候，你还要讲什么组织原则，还要对共党心存幻想。”接著李宗仁、李曾石等人纷纷发言，反对汪精卫的意见，要求汪精卫不要偏袒中共。汪精卫一时间成为众矢之的，但他仍然坚持原则，毫不退让。最后汪精卫说：“我是站在工农方面的呀！谁要残害工农，谁就是我的敌人。” 这时吴稚晖忍不住激动，扑通一声跪倒在汪精卫面前，流著眼泪说：“汪先生，汪主席，看在党国面上，你就放弃袒共立场，留在上海领导吧！”汪精卫被此举搞得不知所措，拔腿逃避上楼，口中连声说道：“稚老，您是老前辈，这样我受不了，我受不了。”最后会议就在这样令人啼笑皆非的气氛中结束。 汪精卫和蒋介石等人第二天继续开会，这次汪精卫改变了昨天的强硬态度，同蒋介石达成了初步协议。协议规定：一、４月１５日由汪精卫主持召开国民党中央二届四中全会，在二届四中全会上决定一切；二、通告共产党暂停在国民政府内的一切活动，听候中央开会决定；三、工人纠察队等一切武装团体均服从蒋总司令的指挥。汪精卫知道蒋介石是暂时的妥协，为了从政治上压倒蒋介石，汪精卫私下找中共领导人陈独秀，要求陈独秀发表一个不反对国民党的宣言，堵住蒋介石说共产党要搞暴动的口实。 ４月５日，汪陈两人一起联名发表了一份《国共两党领袖汪兆铭、陈独秀联合宣言》，宣言说：“中国共产党坚决承认，中国国民党及国民党的三民主义，在中国革命中毫无疑义的重要。只有不愿意中国革命向前进展的人，才想打倒国民党，才想打倒三民主义。”宣言最后说，国共两党将为中国革命携手到底，绝不受人离间。 《汪陈联合宣言》发表后，激怒了国民党的右派。本来国民党的右派并不支持蒋介石的独裁，只是赞成蒋介石的反共政策。他们原来寄希望于汪精卫回国后带领他们反共，遏制蒋介石的独裁。可是《汪陈联合宣言》发表后，表明汪精卫坚决容共的态度，使国民党中大部分反共又反蒋的人士，不得不归集于蒋介石之下共同反共，使蒋介石成为反共英雄。如果汪精卫当时打出坚决反共的旗帜，就很可能会得到大部分国民党人的拥戴，就有可能阻止蒋介石后来的军事独裁。可是当时汪精卫并没有看清大部分国民党军政人士要求“分共”的呼声，坚决执行孙中山的容共政策，使汪精卫在国民党内的号召力大为下降，也从反面为蒋介石的独裁铺平了道路。 《汪陈联合宣言》不仅是汪精卫悲剧的开始，也是陈独秀悲剧的开始。当时共产党内的激进分子，也非常不满国民党的越来越明显的排共政策，要求共产党不再寄人篱下，主动离开国民党单独搞革命。陈独秀发表与国民党联合到底的《汪陈联合宣言》，被大部分共产党人认为是一个右倾投降主义的宣言，此后不久就罢免了陈独秀总书记之职。 汪精卫在发表了《汪陈联合宣言》之后，就乘船前往汉口。汪精卫到达汉口后，受到大量群众的夹道欢迎，使汪精卫非常感动。在１０万民众参加的“迎汪大会”上，汪精卫说：“中国革命到了一个严重的时期，革命的往左边来，不革命的快走开去！”表明了汪精卫坚决执行孙中山的联共政策。正当汪精卫在汉口高呼“反共即是反革命”的时候，在上海的蒋介石却于１９２７年４月１２日发动了武力清共的命令，这就是所谓的“四一二政变”。蒋介石在“四一二政变”中，关闭了共产党在上海的总工会和党部，解散了工人纠察队，大肆抓捕共产党员，三天之内就处死３００余人，逮捕５００余人，还有数千人失踪。 蒋介石发动“四一二政变”后，汪精卫发表讲话，痛斥蒋介石的武力清党行为。汪精卫说：“蒋介石的反共，只是一种借口。其反革命之行动，丧心病狂之至，自绝于党，自绝于民众，纪律俱在，难逃大戮。”４月１８日，汪精卫又以国民党中央的名义，发表通电说：“蒋中正屠杀民众，摧残党部，甘为反动，罪恶昭章。已经中央执行委员会决议，开除党籍，免去本人所兼各职。著全国将士及各革命团体拿解中央，按反革命罪条例惩治”。 为了对抗武汉的正统国民政府，蒋介石干脆在南京也成立一个新的国民政府，以免在名分上输给武汉国民政府。４月１８日，南京的国民政府成立，蒋介石邀请国民党中的老牌反共分子胡汉民出任国民政府主席，蒋介石自己任中央军委主席和国民革命军总司令，国民党公开分裂成“汉”“宁”两个政府。 尽管汪精卫竭力主张联共，但武汉政府的国民党官员中的反共情绪越来越明显，特别是共产党的农民运动过于激烈，而国民党的中下层军官多为中小地主出身，他们的父母亲友在故乡被共产党农会揪斗，使他们愤愤不已。最后连革命军三十五军军长何健的父亲，也被绑游街示众。何健在一怒之下，指使三十五军三十三团团长许克祥，在湖南长沙发动了“马日事变”，捕杀共产党人和亲共分子数百人。“马日事变”后共产党向国民党武汉政府施加压力，要求惩处“不法军官”，但大部分国民党官员却袒护许克祥，使许克祥安然无恙。 此时共产国际也感到武汉的国民党靠不住，密令武汉的中共自己组织“工农革命军”，改组国民党武汉政府，没收地主的土地实行公有制。共产国际派印度人鲁易将此密令，即所谓《五月指示》转交武汉的中共中央。１９２７年６月１日鲁易到达武汉后，却在把《五月指示》交给中共以前，先交给了汪精卫。原来鲁易过分相信汪精卫，认为汪精卫铁心站在共产党一边的左派，出示密令以表示对汪精卫的信任，希望汪精卫和共产党共同奋斗。 汪精卫看到《五月指示》后大吃一惊，密令中写到：一、无视国民党的禁令，实行自下而上的土地革命。二、在湖南湖北组织一只由２万共产党员和５万工农组成的工农革命军。三、改组国民党中央执行委员会，有旧思想的一律驱逐，由各界工农代表取而代之。四、组织革命法庭审判反革命军官。 汪精卫看完《五月指示》后冷汗直冒：原来共产党加入国民党是为了从内部颠覆瓦解国民党，根本没有和国民党一心合作的诚意。于是汪精卫由拥共一百八十度转为反共，成为一个坚决的反共人士。 汪精卫随后找苏联最高顾问鲍罗廷，汪精卫说：“玩火者必自焚，我们要使火烧向敌人而不是烧向自己。”鲍罗廷不解地问道：“汪先生，你所说的敌人是指谁？”汪精卫拿出《五月指示》的抄件说：“鲍罗廷先生大概已经看过这个指示了吧？如果共产党执行你们共产国际的指示，我们国民党就完了。可以警告你们，你们打错主意了！”鲍罗廷不知道汪精卫怎么会得到这个密件，他急忙解释说：“我不是共产国际的代表，但这个指示我知道。如果中共要执行这个指示，国共合作必将破裂，这是我极不愿意看到的。我将说服陈独秀，希望不会发生这种令人痛心的事态”。 鲍罗廷本人的确也不赞成共产国际的这个极左指示，《五月指示》传达到中共后，很多领导人也十分恼怒。１９２７年７月４日，在鲍罗廷的主持下，中共在汉口三教街紧急召开了政治局扩大会议。总书记陈独秀首先发言说：“由于蒋介石发动了‘四一二政变’，革命的形势已转入严重的阶段，资产阶级已经叛变。而武汉的国民党中央和国民政府的领袖汪精卫，乃是中国小资产阶级的代表，其政府即是工农小资产阶级的联盟。虽然汪精卫对工农革命中的过火行动比较反感，对鲍罗廷同志的态度也不十分友好，但这是小资产阶级在革命中动摇性的表现。” 鲍罗廷接著说了汪精卫找他谈话的经过，然后说：“我十分遗憾地接到汪精卫签署的通知我回国的命令，看来他是不想和我们合作了，但我们还是要争取他，希望他能坚持三大政策，扭转当前的局势。”陈独秀又说：“汪精卫的思想我很了解。他从法国回来后就找我发表共同革命的宣言，说明他是主张三大政策的，昨日如此，今日也如此。至于土地革命，我在五大开会时讲过，政策是正确的，但必须防止过火行动，不要使武汉国民政府走上蒋介石的道路，不要逼汪精卫走分共的道路。” 陈独秀和鲍罗廷主张对汪精卫进行妥协，暂不执行《五月指示》的命令，放弃激进的土改运动，争取和汪精卫继续合作。但是陈独秀的妥协主张却遭到大部分激进共产主义分子们的反对。张国焘、李立三、周恩来等人均明确反对陈独秀的“右倾投降主义路线”，李立三更提出要陈独秀作检讨检查错误。 第二天，中共宣布改组，撤销陈独秀的总书记职务，由张国焘、李立三、周恩来等五人领导小组组成临时中央常委会。五人领导小组当即起草了一份《宣言》，于１９２７年７月１３日公开发表。《宣言》说：“目前，革命已处于危急存亡之时刻，武汉国民党中央和国民党政府最近已公开准备政变……。因此，中国共产党决定撤回参加国民政府的共产党员……。” 看到中共发表的宣言后，汪精卫于１９２７年７月１５日召开紧急会议，汪精卫拿出《五月指示》说：“我们从这份指示中可以看出五层意思，都是很厉害的……。同志们，目前本党已经到了严重的关口，必须在这个会上作出生与死的抉择。”到会的国民党军政要人，孙科、李宗仁、唐生智等，纷纷发言支持分共，只有宋庆龄的代表陈友仁反对，声称三大政策是孙总理亲自制定的，违背三大政策就是总理的叛徒。但陈友仁的发言遭到与会者的一致反对，最后陈友仁不得不退出会场。 在这次会议上，通过的《统一本党政策案》，要求在国民政府和军队中任职的共产党员，在即日声明脱离共产党，否则一律停止职务。但汪精卫说：“我们不象蒋介石那样搞武力清党，而是采用和平的‘分共’，这是最稳妥的步骤。”本来武汉国民政府并没有打算象蒋介石那样武力清共，而是准备让共产党和平地退出国民党，汪精卫也声称要“保护共产党人之身体自由”。可是共产党在共产国际的激进指导下，张发奎第二方面军所辖的二十军军长贺龙等人，于１９２７年８月１日，在南昌发动了武装暴动。 南昌起义使武汉国民政府放弃了和平分共的政策，开始搞武力分共。１９２７年８月８日，汪精卫召开了国民党中央紧急扩大会议，通过了“武力分共”决议案。在武汉也开始了大肆逮捕处死共产党人，第一次国共合作终于彻底破裂。 国共合作之所以破裂，根本还是在于两党的方针目标有根本的差异，两党合作其实不过是一种相互利用。国民党利用联共争取苏联的军事经济支援，而共产党利用国民党来发展自己的势力，两党最后走向诀别，也是终究要发生的必然事件。蒋介石搞暴力镇压共产党固然不对，但如果共产党能够采取陈独秀等人的妥协政策，不搞激进的共产主义暴力运动，共产党和汪精卫等国民党左派的联合，可能会持续更长一些。 第二部分之四：第一次反蒋的失败 共产国际指示中共抛开国民党干革命的《五月指示》密令，是造成武汉国民政府“分共”的直接原因。为什么共产国际会突然传来一个《五月指示》呢？这与当时苏联内部进行的斯大林和托洛斯基的权力斗争有关。在中国问题上，斯大林持比较现实的态度，要求中国共产党在国民党统一中国以前，保持与国民党的合作。而托洛斯基却持比较激进的态度，要求中国共产党抛开国民党干革命，通过暴力革命建立真正的苏维埃政权。 斯大林通过苏联驻国民党政府顾问来指导中国革命，苏联顾问鲍罗廷是斯大林的代表，而托洛斯基却通过共产国际这个组织来指导中国革命，带来共产国际《五月指示》的印度人鲁易则是托洛斯基的代表。这样的双重指导，也给中共带来了很多麻烦，中共内部也分为现实的斯大林派和激进的托洛斯基派，在当时似乎支持激进革命论的人占了上风。在南昌起义问题上，１９２７年７月２３日斯大林派来接替鲍罗廷的苏联代表罗米那兹，强烈反对中共搞武装暴动的南昌起义，但并没有说服中共的激进派。 汪精卫看到共产国际指示中共抛开国民党干革命的《五月指示》后，开始要求以个人身份加入国民党的共产党人退出国民党，进行所谓“分共”。当时武汉政府的大部分国民党人都赞成分共，只有孙中山的遗孀宋庆龄和外交部长陈友仁等很少数人反对分共。宋庆龄反对分共的理由，和后来中共的华国锋等“凡是派”差不多，声称凡是孙中山生前亲自制定的方针政策都不能变，否则就是总理的叛徒。 汪精卫反驳宋庆龄等“凡是派”的意见时说：“孙先生的伟大之处就在于根据其三民主义之原则来发展他的观点，改变他的策略。当初他联合袁世凯，后来经过事实的教训就发动了讨袁，当初他依赖陈炯明，后来他又义无反顾地发动征讨陈逆。如果孙先生看到今天武汉的形势，看到共党正虎视眈眈地欲篡我党之权、我党之军，他会怎样？他一定会改变他的三大政策的。” 本来汪精卫和武汉国民政府并没有打算象蒋介石那样武力清共，而是准备让共产党和平地退出国民党。但共产党１９２７年８月１日在南昌发动了武装暴动的“南昌起义”后，使武汉国民政府的和平分共政策发生了一百八十度转弯，也开始逮捕处死共产党人。汪精卫后来检讨说：“由于我的误谬纵容，才使共产党发展到这个地步”。汪精卫的“容共”政策使他在国民党内部的威信受到很大影响。 武汉国民政府开始“清共”后，武汉政府和南京蒋介石政府之间的根本分歧就消失了，很多国民党人开始要求分裂的武汉和南京政府重新统一。１９２７年８月初，冯玉祥分别致电宁汉政府，请求双方重归于好，合二为一。武汉政府坚称自己是正统政府，斥责蒋介石违背党统党纪，在南京另立政府是“以军治党、以党窃权”，是搞个人独裁的结果。汪精卫提出宁汉政府重新联合的前提必须是蒋介石下台，南京方面的国民党人要求宁汉统一的呼声也很高，特别是在南京的李宗仁桂系军队的势力膨胀，也从侧面催促蒋介石下台。 正巧蒋介石指挥的北伐军在１９２７年８月初的徐州作战中，又败于孙传芳的军队，蒋介石在内外交困的情况下，提出需要“休息一下”，于８月１２日离开南京前往上海，８月１４日正式发表下野宣言，前往日本访问。蒋介石的下野使汪精卫等反蒋派松了一口气，８月１９日汪精卫代表武汉政府发表《迁都南京宣言》，汪精卫以为从此国民党就可以实现“以党治军”的文人领导，消除军人独裁的疾患。 但汪精卫却想错了，当时的中国是一个谁枪多谁发言权就大的强权社会，各路将军拥兵自重，汪精卫这样的文人政府根本无法对他们进行有效的管束，更不要说进行领导。蒋介石宣布下野后，支持蒋介石的人纷纷离开南京，南京又成为李宗仁、白崇禧桂系军人掌权的军人政权，所谓“才驱走虎，又来了狼”，桂系军人依靠手中的兵权，并不服从汪精卫文人政府的领导。孙中山是一个文人革命家，最早跟随孙中山干革命的汪精卫等人也均是文人政治家，没有效忠于自己的嫡系军队。作为文人政治家的汪精卫要想在枪杆子里面出政权的社会中搞民主政治，几乎是一种空想。 随著北伐的进行，国民革命军中桂系军队的势力大大扩张，但桂系在党内却没有什么地位，于是统治南京的桂系实力派把在上海的西山会议派国民党元老请来，帮他们在政府中撑腰。西山会议派是国民党中最早开始反共的一派，１９２５年１１月曾在北京西山碧云寺的孙中山灵前，召开过反共排共的西山会议，当时汪精卫主持下的广州国民政府在二届一中全会上通过了《弹劾西山会议案》，并宣布开除林森等１８人的党籍。 然而西山会议派并没有就此绝迹，他们仍在坚持活动。后来西山会议派迁往上海，在上海自行成立了国民党中央党部，和广州的正统国民政府相对立。在汪精卫和陈独秀发表国共两党合作的《联合声明》时，西山会议派的上海国民党中央党部，曾以国民党中央的名义斥责汪精卫的行为是“卖党、卖国之罪，愿与国人共弃之。”蒋介石在南京另立政府后，作出了恢复林森等１８人党籍的决议，但武汉的汪精卫政府并不承认这个决议，所以西山会议派对汪精卫耿耿于怀，极力反对汪精卫当国民党的领袖。 １９２７年９月１１日，武汉政府、南京政府和西山会议派的三方人士，在上海召开了宁、汉、沪三方中央委员谈话会，讨论宁汉政府合并和统一党务的问题。西山会议派的张继发言说：“既要统一党内各界同志，就要承认上海的中央党部，就要废除二届一中全会上的《弹劾西山会议案》。这个非法决议案是当时左倾路线的产物，必须宣布废除，否则怎么能团结统一党内同志？” 汪精卫反驳说：“中央的决议岂可任意废除，除非由将来的四中全会作出新的决议。”汪精卫的发言遭到宁、沪代表的强烈反对。李宗仁说：“我们迁都南京后，于６月７日宣布林森、张继等１８位同志恢复党籍的决议，所以才有今日统一党务的基础。汪同志，你也不必再坚持过去的决议了。” 汪精卫仍坚持说：“南京的决议我们武汉中央并不知道。现在我提议：西山会议派决不能参加二届四中全会，但为了团结同志，可容纳个人参加，不能容纳上海党部。二届四中全会必须在武汉召开，否则我们武汉的同志不参加会议。”这时宁、沪代表们开始翻汪精卫的旧帐，指责汪精卫反共不力，贻误了党国事业。宁方代表自称他们是反共的先进，而沪方代表则更标榜他们是反共先进中的先进，这使汪精卫不得不自责说：“武汉方面防范共产党过于迟缓，请求处分。” 在这种拔剑张弩的气氛中，孙科突然站起来提议说：“各位，兄弟提出一项折衷办法，由宁、汉、沪三方共同组织一个中央特别委员会，作为过渡，先使合作告成，然后再谋补救的办法。”孙科的折衷方案得到了大部分代表的同意，由于孙科是武汉方面的代表，汪精卫不好坚持反对，也勉强同意这个方案。 后来在桂系军人和西山会议派的操纵下，推举出１４名中央特别委员会代表，汪精卫虽然名列第一，但桂系军人和西山会议派的人占据多数，使特委会成为一个桂系军人、西山会议派、以及孙科等人的联合体，汪精卫、胡汉民、蒋介石等国民党中的重量级人物，均反对这个中央特别委员会。由于当时蒋介石和胡汉民均已下野，汪精卫也于９月１３日通电下野，表示抗议特委会。汪精卫从反对蒋介石军事独裁，又转为反对桂系的军人统治。 汪精卫下野后，桂系军人和西山会议派虽然靠中央特别委员会的名义执掌国民党中央政府，但他们在军事实力上无法和蒋介石相比，在党内的资历声望又无法与汪精卫相比，所以桂系军人和西山会议派的政权注定难于长久。汪精卫辞职后，张发奎、李济深等人，在广东召开了迎汪回粤大会，联名邀请汪精卫回广东指导革命。汪精卫于１０月２１日前往广州，然后于１０月３０日召集在粤的中委会成员开会，通电全国否认南京的特别委员会的合法性。汪精卫说：“中央执行委员会是党的全国代表大会选举产生的，非全国代表大会无权取消。成立特委会取代中委会职权，等于取消了中委会，不合党的法统和组织原则。”汪精卫邀集外地的中委会委员前来广州，在广州召开四中全会。面对汪精卫的攻势，南京的孙科等人也发出通电，坚持特别委员会不能取消，邀请各地中委会委员到南京召开四中全会。国民党又出现了宁粤分裂的局面。 就在宁粤双方对峙之时，蒋介石于１９２７年１１月１０日从日本回到上海。原来不少国民党人看到蒋介石走后无人能够解决国民党内部的分裂混乱局面，纷纷电请蒋介石回国复职，出面收拾混乱的残局。在南京的李宗仁桂系本来是反蒋的，但汪精卫公开反对他们的特委会后，使他们的政权已难于支撑，所以也表示同意蒋介石回来复职。蒋介石在这次访问日本时办成了两件大事，一是征得宋太夫人同意他与宋美龄的婚事，二是得到了日本方面对北伐的理解和支持。 北伐军１９２７年３月进入南京时，发生了针对外国人的暴行，为此英美军舰曾向南京城中炮击报复。１９２７年４月１１日，英美法意日５国向武汉和南京的国民党政府同时提出了通牒，要求国民政府正式道歉，惩罚责任者，以及对被害者进行赔偿。南京的蒋介石在列强提出通牒后的第二天发动了“清共”的４月１２日政变，作为对列强通牒的无言回答。本来西方列强对苏联支持下的国民党势力的迅速发展十分担忧，蒋介石的反共政变使英美日等以反共为第一国策的各列强，有了一块石头落地的安心感，所以没有再向国民党要求道歉和赔偿。 蒋介石发动“四一二”政变还有一个重要的原因，就是争取英美日各国的政治支持和经济援助。当时在中国如果没有外国政治和经济的援助，是不可能掌握政权的。蒋介石一旦离开苏联的援助，就必须寻找新的援助国，蒋介石把眼光转向英美日等资本主义国家。但由于以前国民党和苏联的关系太深，如果只是进行平和的分共，未必能消除英美日等国对国民党反共之诚意的疑虑。所以蒋介石一不作二不休，用共产党人的鲜血来换取西方列强的信任。果然西方各国对蒋介石的坚决反共大加赞赏，开始在政治上支持蒋介石，这也是蒋介石后来能够在国民党的多次内斗中取胜的一个重要原因。 在为什么会发生杀戮外国人的南京事件问题上，国外学者比较倾向于北伐军战士自发地发起反外仇外事件。当时北伐军战士在共产党代表的列宁“帝国主义理论”的教育下，相信中国的贫穷落后皆为帝国主义国家的侵略掠夺所造成，所以非常痛恨作为“侵略者”的外国人，自发地发起了杀戮外国人的事件。也有人认为南京事件是苏联的阴谋：由于当时蒋介石反共的迹象已经比较明显，苏联顾问密令在蒋介石军队中的共产党员挑动士兵杀戮外国人，这样就使蒋介石与西方国家的关系敌对化，从而断绝蒋介石投靠帝国主义国家的后路。但苏联人的计谋却起了反作用，不但没有阻止蒋介石投靠西方国家，反而促成了蒋介石彻底反共的决心。 蒋介石在１９２７年９月末到１１月初的访日期间，与日本首相田中义一，陆军大臣向川义则等政府要人进行了多次密谈。日方要求蒋介石承认日本在满蒙的特殊权益，履行孙中山以前的诺言（据说孙中山以前曾以满蒙的特殊权益作为日本援助中国革命的交换条件），蒋介石则要求日本不援助张作霖，支持国民党统一中国。最后双方达成协议：日本不援助张作霖，支持反共反苏的国民革命取得成功，承认国民党在中国建立政府，并保证向蒋介石提供一笔巨额借款。蒋介石则表示承认日本在满蒙的特殊权益，坚决反共到底。蒋介石访日期间还与美国驻日本的特使进行了会谈，得到了美国支持蒋介石为首的国民党政府的许诺，而蒋介石则许诺保障美国在中国的一切权益。蒋介石利用“下野”进行的外交活动，取得了日美等列强的政治经济支持，大大增加了他在国民党中的政治资本。 蒋介石一回到上海，就立即给汪精卫拍电报“负荆请罪”，毕竟汪精卫在党内有相当的地位威望，得到汪精卫的谅解才能顺利复职。蒋介石在电报中说：“此后党国重任，惟兄是赖。凡能于党国有益，则弟必尽我心力，依照兄之意图，不渝始终，以尽区区之意。若兄能来沪晤商一切，胜幸焉……”汪精卫见蒋介石有诚意，就于１１月１６日乘船赴上海和蒋介石谈判国民党各派的联合问题。没有想到汪精卫一离开广州，张发奎等人就发动了一场倒桂政变，将桂系在广州的部队缴械，尔后张发奎指挥的粤军在梧州一带和桂军相持。共产党人则乘广州城内空虚之机，在叶挺、叶剑英的领导下于１２月１１日发动了广州暴动。 共产党的起义部队自称“红军”，和回师镇压暴动的张发奎第四军发生了激战，使广州遭到了极大的损害。李宗仁在回忆录中这样写道：共产党此次暴动，可说是毫无理性，烧杀之惨，实无前例。市民均被迫以红巾系颈，表示拥护红军，否则格杀勿论。张发奎等人以共党在后方捣乱，破坏其统一两广的大计，愤恨之余，遂也恣意杀戮。下令凡见颈系红巾的，即格杀勿论。人民分不出孰为红军，孰为第四军，只知有红巾亦死，没有红巾亦死。一时广州全市鬼哭神嚎，无辜人民被杀的不计其数。大火数日不绝，精华悉被焚毁。 广州暴动之后，全国哗然，一片声讨之声。张发奎等人见众怒难犯，均宣布辞职前往香港。而蒋介石派、西山会议派、以及桂系军人派则借机攻击汪精卫，他们说汪精卫和张发奎等人勾结共产党，蓄意制造了焚杀广州事件，甚至有人说汪精卫本人就是共产主义分子，一时间搞得汪精卫说不清辩不明。南京的特委会要求查办汪精卫，白崇禧甚至找上海的青帮头目杜月笙下绑票暗杀汪精卫。后来虽然查明广州事件和汪精卫并没有直接关系，但汪精卫作为广州地区的政府首脑难以逃避责任，于是汪精卫１２月１６日发表了引退政界的声明，和陈璧君一起前往法国。 汪精卫前往法国临行之前，陈公博前来送行。汪精卫劝陈公博也一起去法国，陈公博却提出相反意见，陈公博说：“我总是不明白汪先生遇事便出国。中山舰事件发生时，先生本可不必走的，却走了。四中全会快召开了，李宗仁、胡汉民都离开了，拥护汪先生的人不是没有。凭汪先生的资历和威望，还担心选不上国民政府主席？” 汪精卫说：“蒋介石既然容我不得，我又何必留在他身边合作？合则留，不合则去，这是我的办事原则。与其受人之羁縻，不如离去。”陈公博说：“我的想法与汪先生不同。合则留，不合则去，虽然有古君子之风，但我认为每个国民对国家都有一份责任。我的处世原则是：合则留，不合则打，打不过才去。我也知道留在上海有一定危险，但我要作一个斗士，上海就是我的斗场。我手下没有兵，但我手中有笔，有一批朋友，我要同蒋介石展开理论上的战斗！” 汪精卫走后，陈公博联合国民党内的一批反蒋民主人士组成了“改组同志会”，即所谓“改组派”，在上海办杂志和蒋介石进行理论上的斗争，汪精卫则成为改组派的精神领袖。 汪精卫一走，国民党中就没有了能够制约蒋介石的重量级人物，蒋介石又开始独揽大权。１９２７年１２月２８日，在蒋介石的压力下，桂系军人和西山会议派的特委会宣告结束，１９２８年１月４日蒋介石回到南京正式复职。在蒋介石的主持下，２月２日召开了二届四中全会，统一了国民党各派，使持续了半年之久的国民党党内斗争暂时告一段落。二届四中全会明文取消了孙中山在一大时制定的联俄联共三大政策，凡因反对三大政策而被开除党籍的人一律平反。 这次蒋介石重新上台接受了以前搞独裁引起党内强烈反对的教训，特别注意不给人造成独裁的印象。蒋介石只作军事委员会主席，把最高职位的国民政府主席让给了谭庭楷。此外蒋介石还建议除了南京中央政府之外，再在广州、武汉、开封、太原建立四个政治分会，以便互相进行监督。广州、武汉、开封、太原的政治分会主席由掌握军队实力的李济深、李宗仁、冯玉祥、阎锡山担任。 蒋介石统一全党后，于１９２８年４月重新开始北伐，这次北伐进军顺利，于６月８日攻占北京。７月６日，蒋介石在李宗仁、冯玉祥、阎锡山等人的陪同下，前往北京西山碧云寺霭见孙中山灵位，蒋介石热泪盈眶地向国父之灵报告他生前统一中国的愿望已经实现。 孙中山晚年在国民党中的作风近似于独裁，但国民党是由孙中山一手建起，孙中山在党内具有无人可比、不可动摇的威望。汪精卫则是国民党内民主派的代表，汪精卫接班后，改组国民党建立了新的集体领导体制，也得到了国民党人的拥护。然而蒋介石上台后，却要学孙中山独揽一切的独裁作法，但蒋介石本人又没有孙中山那样的巨大威望，所以蒋介石挟军队搞军事独裁的做法，在国民党内引起了极大的反感和反对，这也是后来国民党内部激烈斗争频繁不断的主要原因。 这次汪精卫反蒋失败，虽然与汪精卫拘泥于孙中山的三大政策，没有把握好国民党内部反共的呼声，搞反共过于迟缓有关，但最根本的还是在于汪精卫没有一只效忠于他本人的军队，无法制止各路军人的拥兵自重，无法建立中央政府的有效权威。在具有“枪杆子里面出政权”历史的中国，汪精卫这样没有军队背景的文人政治家，要想遏制蒋介石的军事独裁，自然是非常艰难的。 第二部分之五：护党救国运动 １９２７年１２月中共发起广州暴动之后，汪精卫发表了引退政界的声明，和陈璧君一起前往法国。汪精卫一走，国民党中失去了政治上能够制约蒋介石的重量级人物，蒋介石又开始独揽大权。１９２８年２月，在蒋介石的主持下，国民党召开了二届四中全会，统一了国民党各派，使持续了半年之久的国民党党内斗争暂时告一段落。蒋介石统一全党后，于１９２８年４月重新开始北伐，这次北伐军进军非常顺利，除了在济南和日军发生小规模冲突以外，几乎没有遇到什么阻挡，仅仅两个月后的６月８日就攻占了北京，宣告北伐成功。 蒋介石这次北伐之所以非常顺利，有一个非常重要的原因，就是他得到了英美等西方诸国的支持。在前一次北伐时，苏联支持国民党，而西方诸国支持北洋军阀。蒋介石于１９２７年４月暴力反共以后，西方诸国开始放弃对其他腐败军阀的支持，转而支持蒋介石。蒋介石统一中国之后，美国带头承认蒋介石的南京政府，其他西方诸国不久也承认了南京政府，使蒋介石的国民党政府成为被国际上公认的合法政府。奉系军阀张作霖在战败后从北京逃往奉天的途中，被日本关东军阴谋炸死。张作霖死后不久，继承父位的张学良宣布“服从国民政府，改旗易帜”，新疆的杨增先不久也宣布效忠国民党政府，使中国在军阀混战了十几年后，首次出现全国统一的局面。 按照国民党创始人孙中山的设想，在武力统一中国以后，要在中国建立一个民主政治的国家。作为孙中山政治思想中核的三民主义：“民族主义，民权主义，民生主义”，把建立民主政治作为中国革命的三大目标之一。但孙中山并没有准备在革命成功后立即在中国实现民主政治，而是要经过“军政，训政，宪政”三个阶段逐步实现民主化。“军政”阶段是指在军事革命时期，由革命军的军政府实行独裁的“军法之治”，这时既没有宪法也没有议会。在军政府的军事统治下，用暴力推翻反革命政权，建立以三民主义为纲领的国民政府。在国民党夺取政权，统一中国后，进入“训政”阶段。“训政”阶段是指在地方上进行局部的民主化试验，对人民大众进行民主政治的指导和训练，但这时全国仍由中央政府进行独裁的“约法之治”。等待人民大众的政治觉悟成熟以后，最后进入“宪政”阶段。在“宪政”阶段由成熟的国民进行选举，制订宪法，然后解散独裁的中央政府，建立民选政权，最终实现真正民主化的“宪法之治”。 根据孙中山的“三段论”民主化设想，蒋介石在统一中国后，于１９２８年６月１５日代表国民政府宣布“军政阶段”正式结束，１０月３日发表了进入“训政阶段”的宣言，宣布组建一个由行政、立法、司法、考试、监察五院组成的国民政府，这就是孙中山设想的“五权分立”政治体系。但这种五权分立政体居然在政府中设立立法院和司法院，使立法权和司法权均处于被国家政府所领导的地位，这与西方民主国家的立法机构和司法机构独立于国家政府之外的“三权分立”体系是背道而驰的。所谓“五权分立”，只是把五种权力集中于国民党之下的独裁体制，所有五院的院长由国民党中央委员会任命，皆由国民党员担任。 当然这种由中央政府进行独裁的“约法之治”，是符合孙中山三民主义思想的，当时国民党中并没有人对“五权分立”的国民政府提出异议。蒋介石自己出任国家元首的国民政府主席，由胡汉民等人出任立法院长等高级职务。可是在召开国民党第三次全国代表大会的问题上，蒋介石的行为引起了国民党内极大的反对。 １９２８年２月２１日，蒋介石以国民党中央常委会的名义宣布“三大”代表的产生方法：在全部大会代表名额中，由中央指定一半，省市选举一半，而尚未成立党部的省市也由中央圈定代表。按照这个方法，全部４０９名大会代表中，２１１人为指定代表，１２２人为圈定代表，真正通过选举产生的代表只有７６人。这样一来，“三大”的代表几乎全是蒋介石的御用代表，“三大”也就成为蒋介石个人包办的大会。 这简直是制造蒋家天下！大量的国民党人开始愤怒了，他们纷纷指责蒋介石借大会之名窃党造派，把持中央，以发展其个人之地位。而反对蒋介石军政独裁最坚决的，是以陈公博为首的“改组同志会”。１９２７年底汪精卫辞职前往法国后，陈公博和顾孟余、王乐平等人组织起“改组同志会”，即所谓改组派。改组派主张恢复国民党１９２４年的改组精神，重新改组中国国民党。陈公博办《革命评论》，顾盂余办《前进》等刊物，与南京的蒋介石政权进行“笔战”。陈公博在《国民革命的危机和我们的错误》一文中指出：“今日国民党已被军阀、官僚、政客、买办、劣绅、土豪所侵蚀盘踞盗劫把持，孙总理的三民主义已被他们所篡改，第一、二次全国代表大会的纲领已被他们抛弃，南京的中央已成为一切反动势力的大本营。” 陈公博生于广州，其父是原广西提督陈志源。陈志源早年参加了同盟会，起义失败后入狱。此后陈公博开始以打工为生，后来又去当兵，做过班长、司务长。１９１４年陈公博考入广州法政专门学校，１９１７年又考入北京大学哲学系，在老师陈独秀的教导下，接受了共产主义思想。北大毕业后，陈公博回广东法政学校任教。１９２０年陈独秀到广东任教育委员会委员长后，和陈公博等人一起组织起中国第一个共产主义组织：社会主义青年团。１９２１年，经陈独秀提议，陈公博作为广东代表，去上海参加中共的“一大”。陈公博在中共建党初期担任中共广东区委组织委员，但１９２３年陈公博去美国留学后，宣布脱离中共，被中共开除党籍。陈公博在美国哥伦比亚大学学习经济学，一年后获硕士学位。１９２５年陈公博回到广州，在广东大学当教授。陈公博最初得到廖仲恺的赏识，后来又被汪精卫看中，１９２５年国民政府成立时，陈公博担任军委会政治训练部主任，在廖仲恺遇刺后，接任国民党中央农民部长。陈公博一直是国民党左派的支持者，在各次党内斗争中，均站在汪精卫的一边。 汪精卫的政治信条是基于民主思想的“均权”与“共治”，这与蒋介石的政治信条“专权”与“独裁”是根本对立的。虽然汪精卫公开发表谈话时说：他只是同情改组同志会，并不是改组会成员。但汪精卫对改组派有极大的影响，是改组派的“精神领袖”。改组派以国民党内的知识分子和青年学生为主，他们要求在国民党内实行民主，在国民党内引起了很大反响，一时间其组织发展很快，在全国各地和香港，以及日本、法国、新加坡、越南等地都建立了分会，全盛时期成员曾多达万余人。改组派在蒋派的南京国民党区内也有相当的力量，凡南京国民党有组织的地方，几乎都有改组派的组织。 在“三大”开幕前夕的３月１１日，陈公博、顾盂余、何香凝、王乐平等第二届中央执监委员十三人，联名发表《关于最近党务之宣言》。《宣言》指出：“北伐胜利以后，党中腐化分子及投机分子却违反民众要求，至人民之权利，则一无所获。而万民所望之党的‘三大’，其代表选举法及代表产生法，将近百分之八十之代表，为中央所圈定与指派，将本党民主制度之精神，蹂躏殆尽。本党曾反对段棋瑞之善后会议，以其为少数军阀政客所操纵。今本党最高权力机关代表之产生，亦与类似。按照此种办法，则所谓代表者，己完全丧失其意义。同人等对此违法之代表产生法，虽屡次提出异议，而主持中央者，竟充耳勿闻。为此，对此种之会誓不承认。” 改组派的这篇檄文，在国民党中掀起了大澜，不少反对或不满蒋介石的大会代表也提出辞呈表示抗议。３月１４日，中央大学学生、国民党员吴健带动一批党员到南京市党部请愿，要求召开全市党员代表大会，讨论出席“三大”代表的问题，人们高呼：“反对蒋委员长阴谋篡党夺权！”，“坚决反对蒋委员长包办操纵大会代表！”。南京市党部被迫同意在夫子庙大礼堂召开全市党员代表大会，大会由吴健主持，全市十个区党部的代表都参加了会议，在会议通过《反对非法的第三次全国代表大会案》后，忽然一群暴徒冲向主席台殴打吴健和其他主持人，紧接著大批军警赶来冲进会场，大打出手，打伤多人，并当场逮捕代表七人。这就是轰动一时的“三一四”事件。 “三一四”事件后，改组派的南京分会被暴徒捣毁，改组派在南京已无法立足，于是他们转移到上海，以法租界为基地，建立起“中国国民党各省市党部、海外总支部联合办事处”，继续进行反对蒋介石独裁专制的斗争。 国民党内反对蒋介石的除了改组派等文人团体外，还有很多军人将领。北伐胜利时，国民革命军共有８４个军，２２０多万人，这还不包括张学良的数十万东北军。如此庞大的军队，给国家造成了沉重的财政负担，对中国近代化构成严重的影响。当时中国的年度财政收入约４亿５千万元，除去１亿元用于偿还各种外债以外，实际可以动用的财政约３亿５千万元，其中３亿元为军事费用，占政府支出的８０以上。所以蒋介石在北伐胜利后提出裁军，本来是有充足理由的。 但蒋介石的裁军计划，却引起了很多国民军将领的强烈抵制，因为蒋介石要搞的裁军只裁旁系部队，却不裁他的直系部队。北伐时国民革命军有四个集团军，除了第一集团军是蒋介石的嫡系部队以外，第二集团军是冯玉祥的西北军，第三集团军是阎锡山的晋军，第四集团军是李宗仁、白崇禧为首的桂系部队。此外张学良的东北军，张发奎的粤军，唐生智的川军，以及一些地方上的杂牌军，都是非嫡系的旁系部队。这些旁系部队并非绝对服从于蒋介石，对于蒋介石的军事独裁显然是一种潜在的威胁，于是蒋介石想通过裁军来除掉不听从他命令的旁系军队。 蒋介石这个带有私心的裁军方案，当然引起各路旁系部队将领的强烈反对，蒋介石首先拿对他威胁最大的李宗仁桂系部队开刀，结果李宗仁害怕蒋介石暗算，于１９２９年２月私自潜出南京，脱离南京政府重返广西。在蒋介石召开“三大”之前，白崇禧又宣布辞职抵制蒋介石包办“三大”，拉开了桂系和蒋介石直接对抗的序幕。 在一片反对和抗议声中，１９２９年３月１５日，蒋介石在南京主持召开了国民党第三次全国代表大会。在这次蒋介石包办的大会上，通过了很多处分反对蒋介石之人的决议案。蒋介石在主席团报告中说：“今日讨伐叛徒，以国家论，是为讨伐叛将；以党论，即为讨伐反革命分子。此等叛党分子，应由大会开除其党籍。”结果大会通过李宗仁、白崇禧等人的“叛党乱国罪”，永远开除党籍，改组派领袖陈公博永远开除党籍，顾孟余开除党籍三年。对汪精卫则予以书面警告的处分，处分汪精卫的理由是“迹近纵袒弄兵，酿成广州共变”。 在“三大”结束后，蒋介石于１９２９年４月开始讨伐桂军，分兵三路进攻广西，与桂军经过几次激战，结果桂系军大败，６月桂军将领李宗仁、白崇禧逃往香港，第一次蒋桂战争结束。虽然蒋介石在蒋桂战争中取得了军事胜利，但在政治上却进一步陷入众矢之的。１９２９年５月，以改组派为核心、联合其他国民党的反蒋派别，在上海成立了“中国国民党护党革命大同盟”，唐生智、张发奎、李宗仁等地方实力派代表参加，阎锡山、冯玉祥也与之建立联系。 “中国国民党护党革命大同盟”发表宣言，呼吁恢复党权，“铲除叛徒蒋中正的一切势力”，“打倒盗窃党权政权的蒋介石”。宣言中还特别声明不承认蒋介石包办的“三大”，声称南京政府的一切命令与外交等皆无效力。“中国国民党护党革命大同盟”尊远在法国的汪精卫为领袖，号召“迎吾党领袖汪主席归国护党”，组织护党政府和护党革命军，直捣南京政府，肃清反动势力。 １９２９年９月１７日，张发奎在湖北打出“护党救国军”的大旗，发表《拥汪讨蒋宣言》，电请汪精卫回国：“主席回国方可对国内军事发挥号召力，对官兵之影响尤为重大。即使返国不能深入军中，亦可居香港以指导军事，策励士气。”在这种情况下，汪精卫决定回国抗蒋。临行前他与陈公博等人联名发表一篇《中国国民党第二届中央执监委员会最近对时局宣言》，历数蒋介石的十大罪状：“习于专制，私利是图，首内启本党之纠纷，复外援帝国主义及国内反动派以自固；啸聚群小，把持政权，摧残民众，排除异己……”。汪精卫在这篇《宣言》提出五项主张：改组国民政府，筹备召开真正的“三大”，否认蒋介石包办的“三大”以及会上通过的一切决议案，否认蒋介石出卖国家经济权利的一切秘密文件。汪精卫说反蒋运动是“一常厚主势力与封建势力的大决战，广大党员应奉献自身于民主势力，将血作水，以溉民主势力之根，将身作肥料，以沃民主势力之果。” 当时中国除了政界、军界掀起强大的反蒋运动外，在学术界也引发了民主与独裁之争。胡适在１９２９年蒋介石发表训政的“约法之治”后，发表了著名的“人权与约法”的文章，指出国民党政府作为中国民众的代言人，进行独裁的“约法之治”，违反了人民的基本人权。胡适主张首先建立保障人权的宪法，开放“党禁”，实施多党政治，建立一个“以法治国”的人民参政国家，而不是“以党治国”的一党独裁体制。 胡适这样的批评并不局限于蒋介石，还牵扯到了孙中山，在学术界与钱端升等专制拥护派学者进行了激烈的笔战。但胡适提倡的人权思想并没有在国民党政界引起共鸣，国民党内的民主派汪精卫等人虽然主张实行党内民主，但并不主张立即放弃国民党一党专政而搞西方式的多政党体制。胡适的民主思想实在走得太远了。 １９２９年１０上旬，汪精卫来到香港，使改组派和“护党救国军”的精神大振。然而汪精卫曾经在１９２７年带头反对过桂系李宗仁、白崇禧等人的“特委会”，所以双方有很大的隔阂，但这次为了反蒋的共同目的，双方重新言归于好。汪精卫回国后，以“中国国民党第二届中央执监委员联席会议”的名义发布命令，对各路“护党救国军”发出委任状和番号。其中第一、二路的番号留给阎锡山和冯玉祥，张发奎、唐生智、石友三、胡宗锋、何键、李宗仁，分别委以第三、四、五、六、七、八路军总司令。他一人统领六路反蒋大军，一时声势极盛。 但这只七拼八凑的队伍内部矛盾错综复杂，指挥不灵，步调不一。不到半年，汪精卫的六路反蒋大军很快被蒋介石各个击破或收买瓦解。虽然汪精卫的南方反蒋军队失败，但北方冯玉祥和阎锡山的反蒋军队，并非汪精卫的六路反蒋军那样的乌合之众，而具有相当的战斗力。１９３０年初，阎锡山联合冯玉祥和李宗仁组成反蒋联军，１９３０年４月１日，阎锡山在太原宣誓就任“中华民国陆海空军总司令”，冯玉祥、李宗仁分别在潼关、桂林宣誓就任“中华民国陆海空军副总司令”。三个司令部下辖七十余万军队，组成八个方面军向南京围攻，浩大的“中原大战”爆发了。 “中原大战”爆发后，阎锡山电请汪精卫北上主持党务。在阎、冯等人的发起下，改组派和西山会议派等反蒋各派，在北京联合成立了“中国国民党中央党部扩大会议”，汪精卫被奉为“扩大会议”的领袖。本来左倾的改组派和右倾的西山会议派是势不两立的对头，然而双方在遭到蒋介石的排斥打击后，深感只有团结一致，才能对抗蒋介石的军人独裁。于是双方暂时摒弃前嫌，握手言和。 １９３０年８月７日，“中国国民党党部扩大会议”在北平中南海怀仁堂正式召开，汪精卫、陈公博等人的改组派、谢持、邹鲁等人的西山会议派，以及阎锡山、冯玉祥等人的军事实力派参加了会议。会议由汪精卫主持，颁布了《国民政府组织大纲》，宣布成立国民政府，阎锡山当选政府主席。在领导分工上，汪精卫主党，阎锡山主政，阎锡山和冯玉祥共同主军。 在中原大战中，蒋介石军队和阎冯联军都损失惨重，双方共有３０余万人伤亡，为中华民国建国以来的首次恶战。此时决定战局的胜败就在于张学良的东北军，东北军加入哪个阵营，就会使哪个阵营取得胜利的主动权。所以蒋介石和阎冯等人都在拉拢张学良，阎锡山给他送来中华民国陆海空军副总司令的委任状，蒋介石也送来了同样的委任状，还同时将数百万元巨款汇至沈阳，但张学良在中原大战初期一时间持袖手旁观的中立态度。 １９３０年９月，战局向有利于蒋介石军队的方向发展。９月１７日，张学良发出了拥护南京中央政府的声明，派东北军入关，在十余天时间内先后接收了天津、北平和河北等地，使阎、冯联军处于腹背受敌的困境，纷纷败退。１１月４日，阎锡山、冯玉祥见大势已去，联名发表通电声明“即日释权归田”，长达七个月的中原大战遂告结束。 阎、冯联军败阵后，１９３１年元旦汪精卫在天津发表下野声明，并准备宣布解散改组派，反蒋运动一时进入低潮。此时蒋介石不仅任国民政府主席，又开始兼任行政院长，独揽国民党的党政军大权。但不久蒋介石因为软禁立法院长胡汉民，又引起了全国范围的反蒋大潮。 胡汉民本是与汪精卫一起最早参加同盟会的元老，但胡在１９２５年的廖仲恺被刺案中，因涉嫌而被迫出国。胡汉民回国后寓居上海“闭门读书”，不直接参与国民党的政事。１９２７年４月蒋介石请胡汉民去南京，共商反共之事，胡汉民欣然同意，第一次与蒋介石合作。１９２７年４月１８日蒋介石在南京另立国民政府，胡汉民出任国民政府主席，胡汉民以国民党元老的身份主持南京国民党中央党部，在关键时刻帮了蒋介石的大忙，替他支撑起了“另立中央”的门面，与当时武汉的汪精卫正统国民党中央相对抗。１９２７年８月蒋介石下野后，胡汉民由于不愿和汪精卫合作，随之也辞职出国考察。 １９２８年９月胡汉民回国后，再次与蒋介石合作。１９２８年１０月，胡汉民帮助蒋介石组成了五院制的国民政府，尊蒋介石为主席，自己当立法院长。此后胡汉民在新国民政府的建设上出力颇多，对蒋介石打败阎冯的“护党救国军”也帮了大忙，在这段时间胡汉民和蒋介石的合作比较密切。然而蒋介石取得中原大战的胜利后，越来越不尊重胡汉民这位“老前辈”，蒋胡之间的矛盾日益尖锐，胡汉民常对人说：“我在中央不过是一个开会机器罢了。” 蒋介石在中原大战胜利后，又设想招开国民会议，制定训政时期的“约法”，选举总统，用法律程序确立自己作为国民党领袖的地位和独裁权力。此时胡汉民也开始反对蒋介石的独裁，坚决反对蒋介石搞集党政军大权于一身的总统制，也不同意制定“约法”，从而发生蒋胡的“约法之争”。１９３１年２月２８日，蒋介石以宴请议事为名，将胡汉民骗到总司令部，逼胡辞去立法院长职务。次日胡汉民提出辞呈，将党部、政府职务全部辞去，被宪兵押送南京郊外汤山温泉别墅软禁。 胡汉民被扣压一事，在国民党朝野引起了轩然大波。１９３１年３月１４日，汪精卫在香港发表了《为胡汉民被囚重要宣言》，斥责蒋介石“一面摆酒请客，一面拔枪捉人，以国民政府主席而出于强盗绑票之行径，较之青霜剑之狗官，有过之而无不及。”１９３１年４月３０日，国民党中央四位监察委员古应芬、林森等人，发表了《弹劾蒋中正提案》的通电，指责蒋介石排除异己，制造独裁，要求对蒋进行撤职查办。５月３日，两广将领陈济棠、李宗仁、白崇禧等数十人联名发表通电，拥护“四监委”弹劾案，要求释放胡汉民，蒋介石下野。 １９３１年５月２７日，两广地方实力派陈济棠、李宗仁等人，效法孙中山当年在广州召开非常国会，成立了“中国国民党中央执监委员非常会议”，打出“打倒独裁”“护党救国”的旗号，提出凡国民党第一、二、三届中央执监委员赞成反蒋者（共产党员除外），均自然成为非常会议的委员。陈济棠、李宗仁等人邀在香港的汪精卫出任领袖，在汪精卫的主持下，于５月２８日成立了广州国民政府，否认南京国民政府的合法性。 本来胡汉民和汪精卫在孙中山逝世后就长期不和，宁沪汉合流期间，汪精卫到上海胡汉民府上登门求见，胡汉民竟拒之门外。然而这次在反蒋的共同目标下，两人又重新合作。汪精卫对人说：“过去我和胡先生的不和，都是上了蒋介石的当。蒋之所以能专横跋扈，就是因为我们不能团结。这回反蒋，一定要合作到底。即使万一失败了去跳海，也要大家抱在一起去跳。” 这次在广州成立的国民政府，是一个反蒋势力的大联合，除了以前参加反蒋的改组派和西山会议派外，又新添了胡汉民派，后来南京的林森和孙科也前来参加反蒋队伍。但派别越多，派系之间的矛盾也越大，使汪精卫经常处于左右为难的境地。１９３１年９月初，广州政府派军北上讨蒋，宁粤战争爆发。正在此时，９月１８日在东北的日本关东军发动了“九一八”事变，完全改变了中国历史的进程。 对１９２７年到１９３１年这一段国民党人反对蒋介石独裁斗争的历史，国共两党的历史书都有所曲解。由于台湾国府是蒋介石政府的班底，台湾的历史书把１９２７年到１９３１年的反蒋斗争，曲绘为蒋介石消灭“新军阀”的派系斗争；大陆共产党的历史书，也把这一段反蒋斗争描绘为国民党内部“狗咬狗”的权力斗争，这些都人为地歪曲了当时国民党人反对蒋介石军人独裁的斗争。尽管这场反蒋斗争中可能包含有一些权力斗争的因素，但后来国民党内几乎所有非蒋介石嫡系的政治派别和军队，都站到了反蒋的一边，说明蒋介石的独裁在国民党内是非常不得人心的。这场反对蒋介石独裁的政治运动和军事行动，从历史的眼光来看，应该属于正义和进步的。 如果没有日本发动的侵华战争，蒋介石的军事政权在广大国民党人的反对下，也未必能维持很久。如果历史真是这样的话，蒋介石不但当不成民族英雄，反而要成为袁世凯那样搞复辟倒退的民族败类。所以不但共产党感谢日本侵略的“帮忙”，蒋介石也感谢日本侵略的“帮忙”，帮他从专横的独裁者走上了民族英雄的宝座。 第三部分：《和平运动曲线救国》 第三部分之一：从主战派到主和派的转变 蒋介石在中原大战胜利后，独裁的倾向越发明显化，以前支持他的国民党元老胡汉民等人也转而加入了反蒋的战线。１９３１年２月蒋介石将胡汉民软禁，在国民党朝野引起了轩然大波，又引发了另一次反蒋高潮。１９３１年５月，改组派、西山会议派、胡汉民派、林森和孙科派、以及两广地方实力派陈济棠、李宗仁，在广州成立了“中国国民党中央执监委员非常会议”，打出“打倒独裁”“护党救国”的旗号，在香港的汪精卫应邀出任广州“非常会议”政府的领袖。１９３１年９月初，广州政府派军北上讨蒋，宁粤战争爆发。正在此时，９月１８日在东北爆发了“九一八”事变。 １９２７年国民革命军进行北伐时，发生了武力强行收回英国租借和打杀外国人的南京事件。在这种情况下，日本政府于１９２７年６月２７日到７月７日，召开了“东方会议”，讨论对中国的对策。所谓“东方会议”，就是关于中国问题的会议，这里“东方”就是指中国。虽然中国在地理上位于日本的西方，但日本却把中国称为东方，而自己称为西方，这看上去似乎有些矛盾，其实与当时日本人的脱亚入欧思想有关。当时日本人说：“日本在地理上属于东方，但在政治上属于西方；日本人外表上看是属于东方人，而在内心的精神上却是属于西方人”。所以日本政府把关于中国问题的会议称为“东方会议”。 在东方会议上，执政党政友会的强硬派代表森格和关东军的强硬派，提出了满蒙分离，武力解决满洲的主权问题。但田中义一首相和外交部强烈反对，认为这样明显地违反了九国条约，对中国进行露骨的侵略，势必在国际上引来巨大的麻烦（九国条约是１９２２年日本和英美法列强与中国签订的条约。条约规定九国共同保证中国的领土完整，但也要求中国承认和保证现有的外国租界及特权）。在会上双方争执不下，最后达成协议：万一中国的内战波及到满洲，危及日本在满洲的特殊利益时，日本将采取“自卫的措施”。 现在有一种说法：在召开“东方会议”时田中首相曾向日本天皇上奏说：“欲征服中国，必先征服满蒙……”，这就是所谓的“田中奏折”。但现在已经证明，这份田中奏折是伪造的，二战后盟军收缴了日本的全部档案，既没有发现田中奏折，也没有发现与田中奏折有关的资料。现在有证据显示苏联的情报机关伪造了田中奏折，欲挑起中日战争，因为苏联最愿意看到中国和日本这两个邻国相互火并。尽管日本的军政界高层在“东方会议”上商讨过满蒙分离问题，但并没有制定一个征服满蒙的计划，也没有制定征服中国的计划。 东方会议以后，一些日本少壮派军人不满日本政府的优柔寡断政策，希望挑起事端，找借口武力解决满蒙问题。１９２８年张作霖战败后，以关东军参谋河本大作为主谋，策划了铁路爆炸事件，炸死了当时的东北军阀张作霖。河本大作本想张作霖一死会引起东北的内乱，关东军可以用东北内乱为借口出兵满洲。但张作霖死后长子张学良平安接班，关东军并没有找到出兵的借口。后来日本军部以河本大作违纪私自挑发事端为由，将河本解除了军职。 不过河本大作却说：他很爱中国，也很爱中国人。他所痛恨的是中国那些欺压民众的军阀土匪，他只与中国的军阀土匪为敌，从来不与中国人民为敌。河本还说他最大的愿望就是死后化为中国之土。河本大作出身于日本贵族家庭，解职退伍后在满洲铁路公司作理事，河本在大连郊外修建的高级住宅现在还被用作高级宾馆。日本战败后，河本大作并没有回国，而是到山西的阎锡山那里作高级顾问。 １９４８年到１９４９年解放军攻打太原的太原战役中，河本大作作为老兵又重新拿起了枪，参加了阎锡山的太原保卫战。阎锡山出逃太原时，曾经邀请河本一起走，却被河本拒绝。太原战役中共有１１００余名原日本兵参战，战死７００余人，４００余人被俘。河本大作被俘后，被关在太原战犯管理所。中共知道他曾经是策划张作霖爆炸事件的主谋，希望他写一些回忆资料，但被河本拒绝了。１９５３年８月河本在太原战犯管理所病死，尸体埋在太原城外的无名坟地，实现了他死后化为中国之土的念愿。 张作霖原来是东北的土匪，在奉天附近的新民屯抢夺富豪赵氏的女儿为妻，１９０１年生下了长男张学良。后来张作霖率部归顺了清政府，在日俄战争中因为帮助日本军队得到了日本人的赏识，和当时的作战部主任田中义一成为好友。田中义一当首相后不久张作霖就被日本人谋杀，田中也颇为伤心，特地给张学良打电报安慰。 张学良却是一个放荡公子，张学良接班后，生活更是放荡。在张学良掌权的３年期间里，对政事并不专心，每日沉溺于酒色之中。张学良尤其好色，和父亲张作霖有妻妾６人不同，张学良对女色采取“用完就扔”的方法。张学良的近侧们投其所好，争相进献美女来讨好张学良，朱铁生将自己的姐姐和妹妹献上，晋升为张学良的副官；朱光沐将自己的女儿献上，当上了总务长；沈熊毅提供自己的妻子，当上财务局长；奉天省长翟文选的妹妹被张学良强奸，翟文选敢怒而不敢言，只好出家作了和尚。 张学良曾说：“自古英雄爱美人，不爱美人不英雄。我虽不是英雄，但在爱美人方面和英雄一样”。１９２８年底张学良易帜后，经常走访南京。张学良走访南京的目的不是和蒋介石商谈政事，而是爱上了当时外交部长王正廷的妹妹，最后王正廷只好将妹妹进呈。张学良最荒唐的事是将当时的电影明星胡蝶诱拐到北京，电影公司向张学良提出抗议，结果张学良干脆出１０万元将胡蝶买了下来，可谓骄横之极。张学良因“九一八”事变后退避不战而被迫辞职出国时，首先做的事却是向他的诸位爱妾一一告别，被当时的报纸责骂为“娇妾重于国土”。 张学良如此挥金如土的生活，当然经常感到钱不够用，除了加收各种苛税外，还通过其它渠道搞钱，特别糟糕的是盗卖故宫的珍宝。张学良掌管北京期间，从故宫搬出数百箱珍宝运到上海拍卖，其中有一些极为珍贵的文物流失海外，比如英国图书馆以１２万英镑购入了“王右军快雪时晴图”，美国石油大王洛克菲勒以６５万美元购入了“唐寅踏雪寻楼图”。 谁是故宫宝物的所有者呢？从法律上讲故宫中的一切财物均为末代皇帝溥仪私人所有，这是中华民国政府正式签订的清帝退位条约中所规定的。然而中国人并不重视法律条文，不知什么时候故宫中属于清帝的私人珍宝已变成国家所有，却忘记了在法律上废除承认清帝财产权的优待条约。 １９３０年张学良在中原大战中加入蒋介石一侧，出兵占领了北京天津等华北地区。但也正是因为张学良把东北军的主力部队都开进了关内，使关外兵力空虚，日本关东军才有机可乘发动“九一八”事变，并在一个月内占领东北全境。张学良的关东军没有进行任何抵抗，就将整个东北让给了日本。虽然一些资料说张学良不抵抗是执行蒋介石的命令，但这并不符合当时的情况。当时张学良的东北军并没有必要无条件地执行蒋介石的命令，而且张学良本人也从来没有执行蒋介石命令的先例。如果张学良决心向日军开战的话，蒋介石根本不可能阻止。蒋介石下野后，汪精卫曾代表国民党中央多次下令张学良对日出兵，收复东北失地，张学良均拒不执行。可见张学良的不抵抗只不过是为了保存实力，而并不是为了执行国民党中央的命令。 不过“九一八”事变并不是日本政府策划的，而是日本关东军的少壮派将校独自策划的。少壮派将校们策划“九一八”事变的原因很多，其中一个原因就是日本政界高层的受贿。因为当时中国政界行贿成风，中国军政要人也经常向外国政界要人行贿，来换取对自己的支持。一些日军少壮派将校怀疑日本政府的高层被中国行贿收买，才不愿对中国采用强硬政策，因此私自策划了“九一八”事变。“九一八”事变后，关东军从张学良的保险柜中搜出５３张日本政界要人的收款单，最巨额的是政友会主要干部床次竹二郎５０万元。日本政界要人的腐败受贿丑闻引起了日本国民的极大反感，军人们乘势发起打倒腐败政党政治的军人夺权运动。当时日本社会舆论普遍倾向于军人，声称“宁要清廉的军人，不要腐败的政治家”，这是日本走向军国主义的开始。 关东军侵占东北后，激起了全国人民，特别是热血青年学生们的激忿。学生们对蒋介石政府的不抵抗政策非常愤怒，自９月下旬起，上海、北平、天津、广州等地的学生举行大规模的示威活动，抗议日军入侵和政府的对日不抵抗。当时学生们认为外交部长王正廷是不抵抗方针的责任者，南京中央大学的学生冲入外交部将王正廷殴打至重伤，王正廷被迫辞职。１２月初，各地学生来到南京请愿，抗议蒋介石政府的畏缩政策，指责蒋介石患有“恐日病”，要求蒋介石亲自率领中央军北上抗日。１２月５日，政府派军警逮捕学生１８５人，即所谓“一二五”事件。为抗议政府的暴行，１２月１４日，各地学生再次进京，打砸外交部，殴打了出来讲话的蔡元培等人。１７日，一万多学生包围国民党中央党部，捣毁《中央日报》报社，受到了军警武力镇压，在珍珠桥附近打死、打伤学生３０余人，逮捕数百人，制造了“珍珠桥事件”。 当时汪精卫领导的广州政府反对专制独裁，主张民主政治和主张积极抗日，于是学生们把汪精卫奉为他们的政治领袖。前往南京游行的学生们，欢迎汪精卫到南京主持党国大计，他们打出的口号为：“欢迎护党救国的汪先生”、“欢迎主张实现民主政治的汪先生”、“欢迎反对不抵抗主义的汪先生”。汪精卫则一方面批评蒋介石动用武力镇压学生，另一方面发表了他的政治主张。汪精卫在接见学生代表团谈话时说：“应付目前局势的方法，兄弟认为有八个字，就是一面抵抗，一面交涉。军事上要抵抗，外交上要交涉，不失领土，不丧主权。最低限度之下不退让，最低限度上不唱高调，这便是我们共赴国难的方法”。 “九一八”事变，也使国民党内部燃起了停止内斗，一致对外的呼声。在这种情况下，蒋介石迫于形势，将软禁的胡汉民释放，并派蔡元培、张继携带他写给汪精卫的亲笔信赴广州议和。蒋介石在信中说：“弟当国三年，过去是非曲直，愿一人承之。惟愿诸同志以党国危亡在即，各自反省，相见以诚，勿使外间以为中山党徒只顾内争，不恤国难。”蒋介石邀请汪精卫代表广州政府到上海举行和平会谈。 １９２７年１０月２２日，汪精卫、蒋介石和胡汉民这国民党“三巨头”，在上海举行了首次会谈，提出南京和广州两政府合并，团结一致，共赴国难。胡汉民提出两政府联合的前提是蒋介石下野，所谓“讨蒋第一，抗日第二”，但汪精卫则表示要“团结宽容”，在削减蒋介石权力的情况下，留蒋执政，所谓“抗日第一，讨蒋第二”。和平会议最后决定宁粤双方在南京、广州分别召开国民党第四次代表大会，选出各自的中央委员后，在南京召开四届一中全会，重组国民政府，广州政府随即取消。 １９２７年１１月１２日，南京政府的“四大”，召开，蒋介石在会上表示“虔诚悔过”，通过了恢复汪精卫、陈公博等４８１人党籍的议案。广州政府的“四大”则于１１月１８日在广州召开，由于各派争吵不休，汪精卫的改组派和西山会议派代表二百余人赴上海，另外在上海召开了“四大”。１２月２２日，三个“四大”选出的中央委员在南京召开四届一全会，此时蒋介石由于镇压学生的“珍珠桥事件”受到各方的强烈反对，被迫再次宣布下野。 这次组成的国民政府主要由广州政府的人马组成，蒋介石派在政府中居于明显劣势。不过为了搞好团结，汪精卫和胡汉民也没有在政府中担任职务。四届一中全会选举林森为国府主席，但不负实际责任，由孙科任行政院院长，负责政府的实际领导，陆海空军总司令则暂缺。蒋介石虽然下野，却有一只忠于他的私家军，没有蒋介石的命令，别人根本指挥不动这只军队。所以蒋介石虽然在政界失势，但仍然是最有实力的实权者。 孙科为首的新政府为了争取民心，一反蒋介石的对日妥协“不抵抗”政策，开始对日本采取强硬的态度。正好１９３１年１２月２８日日军向在锦州的张学良东北军发起进攻，新国民政府下令张学良死守锦州。张学良称自己的兵力武器不足，请求中央政府予以增援。孙科召集诸将领讨论对张进行增援，可是没有一个将军表示愿意去东北增援张学良军。在此情况下，东北军不战而撤出锦州，全军退入山海关以内，试图保住他们在北平附近的最后一块地盘。张学良在解释东北军为什么不执行中央政府死守锦州的命令时，批评中央政府说：中央口头上要求东北军死守，实际上却不给予任何支援，想让东北军在抗日中耗尽自己的实力。 这时孙科政府体会到“口头上抗日简单，实际上抗日行动难”的滋味。就在此时，又爆发了让孙科难于应付的上海事变。１９３２年１月１８日，上海租界的５名日本僧侣忽然被一群中国人围打，其中一人被打死，二人重伤。但二战后的调查发现，该事件原来是关东军的高级军官委托日本上海总领事馆的武官，雇佣中国无赖所干。中国人打死日本僧侣一事，在日本社会引起了巨大骚动。１月２０日，在上海居住的日本人近千人，到日本总领事馆和海军陆战队总部门前示威游行，强烈要求日本政府立即出兵保护他们，在示威途中这些日本人还捣砸了一些贴有反日标语的中国人商店。在此情况下，日方向国民政府提出了类似于最后通牒的“限期要求”，要求中国政府道歉、赔偿、惩罚作案者和取缔解散上海的民间反日团体。 由于孙科政府犹豫不决拿不出对策，日方则以中国没有接受“限期要求”为由，于１９３２年１月２８日派兵强行进入中国管区，和驻守上海闸北地区的蔡廷锴十九路军发生了激战。由于十九路军的顽强抵抗，给日军造成了重大伤亡。上海事变的战斗打响后，孙科自感无力处理如此重大事件，请求汪精卫出马，自己于１月２５日辞职。新国民政府于１月２８日成立，由汪精卫出任行政院长，负责领导政府。 在抗战初期，汪精卫是持主战态度的，可以划入主战派。汪精卫上台后，立即宣布迁都洛阳，积极抗战，并称中国政府“决非威武所能屈，决不以尺土寸地授人”，１９３２年２月１日，汪精卫主持召开了最高军事会议，决定把全国划分四个防区和一个预备区，摆出了进行积极抵抗的姿态。２月８日，汪精卫代表国民党中央慰勉上海十九路军将士“忠义之气，照耀天日”，犒劳十九路军５万元。 汪精卫同时下令其它部队增援上海的十九路军，但汪精卫指挥不动蒋介石的部队，蒋介石私下指示他的嫡系部队不支持十九路军抗战，使十九路军的抗战陷于孤掌难鸣的困境。汪精卫又下令在北平的张学良在北方起兵，牵制日军，并派陈公博到北平说服张学良起兵。但张学良根本没有出兵的意思，只是以上宾招待陈公博等人，一谈到出兵之事就支吾过去。３月６日，十九路军在孤掌难鸣的情况下全线撤退，发表停战布告，至此第一次上海事变宣告结束。 想进行抗战的人没有军队，而有军队的人却避而不战。各路军队保存自己实力第一，抗战第二的私心使汪精卫的抗战热情完全消散了，产生了只有用“和平”的方法才能挽救中国的想法。汪精卫看到没有蒋介石出面国民政府就无法统领军队的窘境，只好提出让蒋介石复出领导军事。１９３２年３月６日，蒋介石复出任军事委员会委员长，此后的国民政府由汪精卫主政，蒋介石主军。由于上海为各国列强的利益所在，在列强们的调停下，中日开始进行和平谈判，汪精卫派外交次长郭泰棋和日本谈判，双方于５月５日达成《淞沪停战协定》。但停战协议的消息传出后，却在中国的民众中间引起了愤怒，上海的愤怒民众把郭泰棋责骂为卖国贼并将其打伤。 １９３２年６月，汪精卫率领行政院副院长宋子文、外交部长罗文干等去北平会见国联调查团团长李顿，共同调查日军占领东北三省问题。汪精卫在北平时找当时任北平绥靖公署主任的张学良商谈东北问题和对日方针，张学良却一直称病不见，但又和宋子文一起去北海游船，使汪精卫深感气愤。７月１７日，日军在热河发起了新的军事进攻，汪精卫以行政院长的名义发表通电，命令张学良立即出兵热河，收复失地。张学良却声称汪精卫无权过问军事，出兵要有军事委员长蒋介石的命令。蒋介石念及张学良过去帮他打赢中原大战，也有意偏袒张学良的不抵抗行动。在此情况下，汪精卫只好宣布辞职，前往欧洲养病。汪精卫在临行时电告张学良，指责他“去岁放弃沈阳，再失锦州，致三千万人民，数千里土地陷于敌手，敌气益骄，延及淞沪。今未闻出一兵，放一矢，却不断向中央索要军款，乃欲藉抵抗之名，以事聚敛。”汪精卫最后要求张学良“惟有引咎辞职，以谢四万万国人，毋使热河平津，为东北锦州之续”。 汪精卫出国后，日军于１９３３年１月进攻山海关，２月中旬又占领承德。热河省的大片领土再次沦陷，震动了全国，国民党内部再次出现请汪精卫归国主持抗战的呼声。汪精卫则提出条件说：他回国主政的前提必须是张学良辞职，以平民愤。此时蒋介石也无法袒护张学良，３月９日蒋介石和张学良在保定会晤，蒋介石说服张学良辞职出国考察。３月１０日，张学良发表通电辞职，汪精卫则于３月底回南京复职。 汪精卫在复职后一方面批评张学良的避战不抵抗，另一方面又解释他的“一面抵抗，一面交涉”政策。汪精卫说：“榆关以一日而失，热河以七日而陷，实不成话。像张学良这些东北军畏敌如虎，敌必日益骄横。今后军队再不抵抗势必影响对日外交。须知先有抵抗然后有交涉。今后抵抗愈得力，则交涉愈有希望。” 但是这次汪精卫复职后，改变了他以前的主战态度，变成了主和派。此后汪精卫开始和日本进行和平交涉，蒋介石也积极支持汪精卫的和平计划。１９３３年５月３１日熊斌代表何应钦与日军代表冈村宁次在天津塘沽举行会谈，共同签订了《塘沽协定》。这个协定承认冀东为非军事区，准许日军在该地区视察，实际上是默认了日本对东北三省和热河的占领。 《塘沽协定》公布后，社会舆论一片沸腾，强烈抨击蒋、汪批准的这一丧权辱国的协定。当时的一份报纸这样写到：“如果要说那些以大刀、石头及血肉之躯英勇与日寇拼死的抗日官兵值得后人永世颂扬的话，那么南京政府，尤其是蒋、汪二人，实为出卖中国领土主权、出卖流血牺牲的爱国官兵、出卖爱国民众的千古罪人。”上海的市民团体还联合发出通电：“我全国民众，誓死抗日，而汪精卫誓死媚日，竟至敢冒不韪，继《上海停战协定》之后又签订卖国之《塘沽协定》，即加以卖国之名，岂得为过。” 面对全国一片讨骂汪精卫的气氛，陈公博找汪精卫说：“签了这个协定，先生遭到各界纷纷批评，我真不知道汪先生为什么要背这个黑锅？”汪精卫说：“我们要复兴中国起码要三十年，不止我这年纪看不见，恐怕连你也看不见。我已年过半百，无其他报国之道，只要中国不再损失主权与领土，就可告慰平生了。”陈公博听后感动地说：“历代王朝危急之秋总有人站出来背黑锅的。其实南宋秦桧也是一个大好人，他看南宋已无力与金抗战，就挺身而出与金讲和。我想秦桧是一名状元出身的有学问的宰相，决不是傻爪。他当初何尝没有想过以后要被世人唾骂？但他还是以牺牲自己来换取南宋日后的中兴。李鸿章、袁世凯也都想复兴国家，都不想卖国。可是李鸿章死了，袁世凯也死了，中国还是不振，到今日国难愈加沉重。”陈公博继续说：“现在有人说《上海停战协定》、《塘沽协定》是卖国，我看与其说是卖国，还不如说是送国。卖国的人还有代价可得，送国却是没有代价的。今日要送国的人大有人在，又何必要汪先生去送呢？”汪精卫听后说：“别人去送国还不如我汪某去送。别人送国是没有限度的，而我送国则有限度，不能让他们把国都送完。”陈公博又说：“不过我对于先生这种无代价的牺牲总觉得不值得。”汪精卫则说：“说到牺牲，都是无代价的，有代价便不算牺牲，我已五十出头了，我决意当牺牲品。”这番谈话后，陈公博下定决心跟汪精卫一起“牺牲救国”，这为两人后来共同与日本合作打下了思想基础。 不久汪精卫遇刺，被一名抗日军人连发三枪至重伤。此后汪精卫不得不再次告别政坛，前往欧洲疗养。 在１９３１年“九一八”事变时，蒋介石和张学良是主和避战的“主和派”，汪精卫则是主张抗战的“主战派”，抗战初期积极抵抗的十九路军也是亲汪精卫的粤系部队，这和１９３７年芦沟桥事变时的情况正好相反。由于掌握军队实权的蒋介石和张学良等人避而不战，使没有军队的汪精卫的抗战计划成为一句空话。汪精卫从“主战”到“主和”的思想变化，代表了一批中国知识分子对中国被个人把持的私家军队的失望。 第三部分之二：主和派的艰难 在中国历史上，每当发生对外战争时，那些坚持对外寸步不让的主战派，总是被尊为民族英雄，而那些主张对外让步和解的主和派，总是被打入民族败类的汉奸行列。尽管如此，在每次发生对外战争的时候，中国从来没有出现过清一色的主战，总会出现一批主张让步和解、不怕当汉奸的主和派，中日战争时也同样如此。 中国分为“主战”与“主和”两派，敌国日本也同样存在“主战”与“主和”两派。日本的军部和关东军是主战派，而日本政府和外交部则是主和派。关东军发动“九一八”事变时，日本政府本想阻止，但却无能为力。当时的若榇首相后来以“不听命令的军队”为题，描述了“九一八”事变的经历：“９月１９日一早，我突然接到陆军大臣南次郎的电话，说昨晚９点关东军遭到中国军队的进攻，关东军进行了反击，现已占领奉天城，战斗仍在进行中。政府随后立即召开了临时内阁会议，确定了不扩大事态的方针。然后通过陆军大臣，向在满洲的部队下达了政府不扩大事态的指示，却被关东军当作耳旁风，关东军进攻嫩江时说是为了保护嫩江铁桥，我以为他们占领嫩江就会停下来。可是他们占领嫩江后，又说离敌军太近不安全，还要越过东支铁路。陆军大臣下令不许越过东支铁路，可是关东军已进军到齐齐哈尔，并又向黑河进军。日本军队竟然不服从日本政府的命令，真是奇怪的事情。” 但关东军扶植的满洲国并没有得到任何国家的承认，当时的日本政府也没有对满洲国予以承认。１９３１年１２月，若榇政府倒台后，犬养毅接任首相。犬养首相反对在满洲搞一个独立的满洲国，认为这样露骨地违反九国条约势必造成日本和欧美列强的正面冲突，同时还试图对军队中“下克上”的作风进行遏制。但犬养的行动激怒了军国主义分子，１９３２年５月１５日，一伙狂热的军人冲入首相官邸，明目张胆地将犬养首相杀害。犬养被杀后，再也没有敢于挺身而出抵抗狂热军人的政治家，日本的政府其实成为军人控制下的政府。 １９３２年９月１５日，日本政府正式承认“满洲国”，但这激起了全世界各国的反对。１９３２年１０月２日，国联调查团发表调查结果，否认了“满洲国”的成立理由，要求一切退回到“九一八”事变以前的状况。然而国联的调查结果却在日本国内引起爱国者们的一片怒骂，谴责国联对日本内政的干涉。１９３３年２月２１日，国联进行了表决，以４１票对１票（１票为日本）通过了要求日本从东北撤军的决议案。然而日本的松冈代表却在表决后微笑退场，宣布日本退出国联，使大会一片谔然。松冈代表回国后受到了狂热日本国民的夹道欢迎，舆论界也盛赞松冈“干得好”、“有骨气”。 在１９３３年３月到５月期间，日本关东军又独断发动了长城攻势，一直打到北平附近。中国军队虽然进行了一些抵抗，但却节节败退。参加这次抗战的基本上都是地方杂牌军，蒋介石的中央军主力仍在南方。１９３３年５月３１日，中日双方在塘沽签订了停战协定，即《塘沽协定》。《塘沽协定》规定在长城以南设置１００公里的“非武装地带”，中日双方撤出在非武装地带内的驻军，非武装地带的治安由中国警察担任。塘沽协定对于中国来说是一个屈辱性的协议，它意味著中国政府默认满洲国的存在，而且对华北的主权也有一定程度的丧失。 汪精卫和蒋介石主持批准的《塘沽协定》，被一般民众认为是一个卖国条约，引起了社会舆论的强烈批评。而汪精卫认为政府签订这个条约是正确的，汪精卫在解释为什么签订《塘沽协定》时说： 以前人们批评政府不抵抗而丢失了领土，现在我们进行了抵抗，结果却丢失了更多的领土。中国是一个弱国，这就决定了这场被侵略的国难绝不是偶然发生的。以现在中国的国力，无论进行怎样的抵抗，都没有取得胜利的可能，这是我们最初就明白的。既然没有取胜的希望，我们为什么还要抵抗呢？这就是爱国心的缘故，她让我们明知不能取胜，还要准备抗战到最后一兵一将。 现在很多人当中有两种错误的想法，一种是过分软弱，认为中国绝对不能对日本进行抵抗，如果和日本交战，将和过去义和团的下场一样；另一种是过分强硬，就象一个人在旷野中发泄一样，“杀尽倭奴”、“打到东京”，什么狂言都敢说，还能得到人们的拍手喝采。以上两种看法都是错误的。政府和日本和平交涉，有一个最低的限度。只要停战条约在我们可以忍耐的最低限度以上，政府就决心签署停战条约，即使受到国民一时的唾骂，也要坚决进行负责任的签字。但如果停战条约在我们可以忍耐的最低限度以下，政府就决不签字。这次政府和日本签署局部地区的停战条约，是为了让疲惫的军队、穷困的人民得到一时的休息，其是非利害将得到历史的评判。 《塘沽协定》虽然暂时解决了东北问题，华北问题又浮出了水面。１９２７年国民党在名义上统一了中国，但蒋汪联合政府的实际控制范围只限于长江流域，华北各省仍在各路军阀的控制之下。当时华北五省的实权者是：察哈尔省：宋哲元，绥远省：傅作义，河北省：商震；山东省：韩复渠，山西省：阎锡山。日军占领东北以后，华北的军阀们处于进退两难的境地。一方面他们害怕日军继续向华北进攻，使华北变成满洲国第二；另一方面他们也不愿意邀请国民党的中央军进驻他们的地盘帮助他们共同防日，因为一旦中央军进入他们的地盘，他们便失去了对该地盘的控制力。 华北的军阀们既不愿意投靠日本人，也不愿意完全投靠蒋介石，于是出现搞一个“华北自治系统”的提议。日本人显然高兴看到华北搞独立，这样将使“满洲国”得到一个安全的屏障。蒋汪政府虽然不愿意看到华北独立，但又怕中央军出兵华北会引发和日军的全面冲突，于是也睁一只眼闭一只眼允许华北“轻度独立”。１９３３年１２月２８日“冀察政务委员会”成立，委员长为二十九路军军长宋哲元。宋哲元原来是冯玉祥的部下，宋的二十九军属于地方杂牌军，在武器装备、士兵素质上和南京的中央军有巨大差别。 广田弘毅出任外务大臣以后，深感日本退出国联，在世界上已陷入孤立。试图从修复中日关系入手，改善日本在世界上的孤立处境。１９３５年１月２２日，广田在议会发表了对中国“不威胁、不侵略”的政策，在世界上引起很大反响，蒋汪联合政府也对广田修复中日关系的倡议表示响应。２月１日，蒋介石发表讲话认为广田的演说“具有诚意”；２月２２日汪精卫以行政院长的名义发布禁止“抵制日货”等排日活动的政府令；１９３５年５月，中日两国将外交关系由公使级上升为大使级。 现在看来，汪精卫的对日和解政策也不是没有可取之处。日本国内并不是铁板一块清一色的侵略扩张派，也有主张与中国和解的主和派。但中日两国的情况一样，都是强硬的主战派占据绝对上风，中日两国政府的主和政策都遭到了各自国民和社会舆论的猛烈批评。汪精卫的对日和解政策引起国民党内主战派的激烈反对，国民党内反汪的呼声日渐高涨。１９３５年７月，南京政府监察院对汪精卫主持的行政院提出弹劾，指责汪精卫大搞媚日外交。在这种情况下，汪精卫离开南京前往青岛休养，于８月８日发电给南京政府，提出辞去行政院长和兼任的外交部长职务。支持汪精卫的铁道部长顾孟余、陈公博等人也跟著辞了职。 汪精卫在位时承担著“卖国”的主责，使蒋介石的压力减轻了很多，汪精卫的辞职，将使蒋介石不得不陷入单独承担“卖国”责任的困境。所以蒋介石这次一反常态，表示“绝对支持”汪精卫，并派元老蔡元培飞抵青岛慰留汪精卫，国民政府主席林森也发电请汪留任，国民党中政会和中常会再三电邀汪回南京主政。汪精卫则提出了复职的三个条件：一、负责制定对日外交方针；二、行政院的政治外交不必均提交中政会决议；三、中央财政归行政院独立主持。在蒋介石的支持下，汪精卫的要求被国民党中委会全部接受，汪则于８月２３日宣告复职。 不过在当时的社会舆论中，汪精卫和蒋介石被认为是卖国主谋，激进的爱国者们把两人列为暗杀的对象。１９３５年１１月１日至６日，国民党在南京召开四届六中全会，开幕式后中央委员合影照相时，大礼堂里的秩序比较混乱，于是多疑的蒋介石临时决定不参加合影，返回会议厅休息室。汪精卫见蒋介石迟迟不到，去休息室催促，蒋说：“今天秩序很不好，说不定要出事，我决定不参加摄影，我也希望你不必出场。”汪精卫说：“各中委已伫立良久，专候蒋先生，如我再不参加，将不能收场，怎么能行，我一定要去。”摄影刚完，爱国军人孙凤鸣高呼打倒卖国贼，向正在转身的汪精卫连发三枪，一弹射进左眼外角下颧骨，一弹从后贯通左臂，一弹从后背射进第六、七胸脊柱骨旁。 汪精卫被刺后，陈璧君首先赶来，见汪精卫倒在血泊之中，不由想起当年两人赴京暗杀摄政王的情景，悲愤地说：“四哥，你放心罢，你死后有我照料儿女。革命党反正要横死的，这种事我早已料到。”蒋介石也从休息室赶来，汪精卫以为自己要死了，对蒋介石说：“蒋先生，你今天大概明白了吧。我死以后，要你单独负责了。” 不过汪精卫的伤势虽重，但所中的三枪并非致命伤，在南京中央医院将左臂、左颊的子弹取出，但后背的子弹取不出来。汪精卫在遇刺后会见报社记者时说：“窃思本人生平并无私仇。而最近数年，承乏行政，正值内忧外患重重煎迫之际，虽殚心竭力，而艰难周折，外间何从得知？倘因此误会，致生暴举，于情不可无原。拟恳请国府，将牵连犯人从宽赦免。” 汪精卫被刺受伤后离开南京前往欧洲疗养，辞去了行政院长和兼任的外交部长，行政院长由蒋介石接任，外交部长由张群接任。此后蒋介石的独裁权力不仅在政府方面和军队方面，在党的方面也增长起来。１９３５年１２月２日至７日召开的国民党五届一中全会上，中央常务委员会主席为胡汉民，蒋介石为副主席；最高决策机关的中央政治会议主席则为汪精卫，蒋介石亦为副主席，但胡汉民和汪精卫都在国外养病，实际国民党已由蒋介石一手操纵。 汪精卫被刺后，主和派的外交部副部长唐有壬又遭暗杀，此后国民党内主张对日强硬的主战派成为主流。蒋介石在军政上“单独负责”后，没有汪精卫那样敢承担“卖国责任”的勇气，所以蒋介石主政后的南京政府开始向主战派的方向倾斜。１９３６年１月２２日，外交部长张群对日本驻华大使表示：希望调整中日关系，否则只有靠战争解决问题。１９３６年６月蒋在讲话中说：“中国和日本的冲突已不可避免，而且为期不远了”。１９３６年７月的国民党五届二中全会上，主战派大占上风，确定了对日本采取强硬态度的政府方针。蒋介石在该会上表示：“绝不容忍任何侵害领土主权之事实，如危及国家生存，则必出最后牺牲之决心”。 １９３６年２月２６日，日本发生了军人暴动的“二二六”事件，此后日本政府基本被军人所控制。日本“二二六”事变以后，一些军国主义狂热分子又开始策划“华北分治运动”，试图将华北五省也纳入日本的势力范围内。五届二中全会后的南京政府，在华北问题上以不妥协的强硬姿态和日方进行交涉，１２月３日双方的谈判决裂。正在这时，发生了西安事变。 “九一八”事变的最大“受害者”是张学良，《塘沽协定》又使张学良军完全失去了自己的地盘。１９３３年４月到１９３４年１月，张学良周游欧洲各国，张回国后被任命为西北剿匪副司令，东北军移驻西北，执行剿灭共产红军的任务。张学良在失去地盘后，一改过去的对日妥协政策，成为坚决的抗日者。张学良不满蒋介石“攘外必先安内”的政策，要求蒋介石停止对共产党红军的围剿，联共一致抗日。１９３６年１２月１２日，张学良等人在西安武力扣留了蒋介石，试图以“兵谏”的方式来迫使蒋改变“攘外必先安内”的政策。 当时国内的许多人虽然对蒋介石的对日妥协政策不满，但也不赞成张学良以武力对国家元首进行逼迫的作法。除共产党以外的各路军阀和各地实权者纷纷通电支持蒋介石，社会舆论也基本站在蒋介石一边。南京政府更是采取了对张学良坚决不让步的政策，包括苏联在内的各国也督促张无条件释放蒋介石，使张学良处于十分为难的处境。蒋介石开始拒不接受张学良的建议，后来在周恩来的说服下，口头答应：“准备向停止内战、一致抗日的方向努力”，但没有签署任何有文字的文书。 １９３６年１２月２６日，蒋介石返回南京，象凯旋的英雄一样受到国民政府官员、各路军阀的代表、以及数以万计市民的盛大欢迎。１２月２８日，蒋介石以自己要对西安事变负责为由提出了辞呈，被中央政府慰留。１２月３１日，在南京的军事法庭以反乱罪对张学良判刑１０年，但随后蒋介石提出对张学良进行特赦，１９３７年１月４日军事法庭对张学良进行了特赦，此后张一直被软禁。张学良的东北军失去领导人后发生了内讧，被中央军改编接收。 西安事变大大提高了蒋介石的威信。在西安事变中，包括以前和蒋有很深恩怨的各路军阀将领都以国家利益为重，一致表示无条件支持蒋介石。同时中共在西安事变中许诺接受蒋介石的领导共同抗日，表面上也是蒋的胜利。此外国共合作对于南京政府和苏联改善关系也有重要作用。为了争取日本之宿敌苏联的帮助，蒋介石调整了以往反苏反共的政策，１９３６年初开始试探和苏联改善关系。由于与苏联改善关系的关键在于中国共产党问题，西安事变后的国共合作，消除了蒋介石和苏联改善关系的难点。反共的南京政府和苏联改善关系的结果，使蒋在后来的抗日战争中，得到了苏联多方面的援助。 西安事变后汪精卫从欧洲回国，不过由于身体原因，汪精卫并没有在政府内任职。此时国民党三巨头之一的胡汉民已经病逝，留下汪、蒋两巨头。尽管汪精卫不担任政府职务，汪仍为国民党最高决策机关的中央政治会议主席，在政治上还在蒋介石之上，对国民党的方针政策仍有极大的影响力。 １９３７年以后，南京政府开始采取强硬的姿态对待“华北自治政权”。１９３７年２月国民党召开五届三中全会时，要求华北五省的领导人也出席。阎锡山和韩复渠同意出席，而宋哲元以立场特殊为由要求不出席会议，但蒋介石却给宋发出必须出席会议的强硬电报，宋只好派他的副手秦纯德代理出席。此后宋哲元颇受日本和南京的两面挟板之苦，１９３７年５月１０日，宋干脆回山东老家，不问华北政事来回避责任。６月２１日，南京政府向冀察政务委员会发出二十九路军实行国军化，以及停止使用河北省货币等强硬命令。 １９００年义和团事变后，清政府承认八国联军可以在北京有一定数量的驻军。此后日本一直在北平附近维持数千人规模的条约驻军，日本将其称为“天津军”。此外在１９３７年，英国和法国也在北平附近派有驻军。由于日本“天津军”和二十九军同驻一处，磨擦颇多。１９３７年７月７日，在北平附近进行演习的“天津军”，在芦沟桥附近与二十九军发生了军事冲突，引发了中日全面战争。 １９３７年的芦沟桥事变和１９３１年的“九一八”事变，在性质上是完全不同的。由于日本是战败国，战前的档案已全部公开，“九一八”事变是关东军策划的阴谋已毫无疑问，但现在仍找不到日本人首先挑发芦沟桥事变的证据。在战后远东国际法庭上明确判定“九一八”事变是由日本人所挑发，但并没有断定芦沟桥事变是日本人挑发的。近年日本一些学者的研究认为，芦沟桥事变是隐藏在二十九军中的共产党间谍首先向日军开枪而引发的，因为从动机上来看共产党最希望发生中日战争。特别是中共中央在芦沟桥事变发生数小时后就发出了号召全面抗战的《为日军进攻卢沟桥通电》，让人感到似乎中共已经预知芦沟桥事变的发生，所以才会这么迅速地作出反应。 日本方面对芦沟桥事变的记载是：１９３７年７月７日晚，一个小队的日军在北京芦沟桥附近进行演习。突然响起了一阵枪声，日军小队长立即进行点名，发现少了一名士兵。日军小队长联想到刚才的枪声，以为该士兵已在刚才的枪声中被打死，于是小队长下令向中国军队进行还击，形成了军事冲突。但不久那个失踪的士兵又回来了，说当时因为闹肚子去解手而没有赶上点名。 芦沟桥事变发生后，日本国内的社会舆论对蒋介石一片恶骂，指责蒋介石有意挑起事端，应该对蒋以及他领导下的南京政府进行军事惩罚。但在军部内却分成“事变扩大派”和“事变不扩大派”，两派进行了激烈的争论。不扩大派的代表人物就是“九一八”事变的主谋石原莞尔少将作战部长，他根据“胜利的极限点”的理论，坚决反对日本“得陇望蜀”，再继续向华北进出。石原认为一旦和中国发生全面战争，日本将陷入无法自拔的战争泥潭，绝无取胜的希望。而军部中的大部分却是事变扩大派，他们无视中国团结一致抗日力量的形成，认为中国军队会象以往一样一打就跑。他们提出“对支那一击”论，以为只要给中国一个强大的打击中国政府就会屈服。 卢沟桥事变发生时，蒋介石和汪精卫等正在庐山邀请政府要员和社会名流召开国事座谈会。卢沟桥事变发生后，１９３７年７月１７日，蒋介石在庐山发表了著名的“最后关头”演说：“我们既是一个弱国，如果临到最后关头，便只有拼全民族的生命，以求国家生存，那时节再不允许我们中途妥协，须知中途妥协的条件，便是整个投降，整个灭亡的条件。如果战端一开，只有牺牲到底。那就地无分南北，人无分老幼，无论何人皆有守土抗战之责任，皆应抱定牺牲一切之决心。” 蒋介石离庐山回南京进行军事部署后，由中政会主席汪精卫继续主持会议，汪精卫发表讲话说；“牺牲两个字是严酷的，我们自己牺牲，我们并且要全国同胞一齐牺牲。因为我们是弱国，我们是弱国之民，我们所谓抵抗，无他内容，其内容只是牺牲，我们要使每一个人，每一块地，都成为灰烬。我们如不牺牲，那就只有做傀儡了。历史上的元灭宋、清灭明，这两次被外族侵略而亡，不是侵略者能使我们四万万人被杀尽，能将我们的土地毁尽，而是我们死了几个有血腥的人之后，大多数没有血腥的人，将自己的身体连同所有的土地，都进贡给侵略者，以为富贵之地。所以我们必定要强制我们的同胞一齐牺牲，不留一个傀儡的种子。无论是通都大镇，无论是荒村僻壤，必使人与地俱成灰烬。我们牺牲完了，我们抵抗之目的也达到了。”汪精卫的话很不动听，但他讲的却是实话：中国是弱国，绝无打败日本的可能，所以中国的抗战结局只能是两条路，牺牲和投降。如果后来没有美国参战，中国和日本进行单独较量的话，结局只能是牺牲和投降两条路。在抗战的开始阶段，西方列强对中日战争大都持旁观态度，只有德国愿意出面调停。中国要求《九国公约》的签字国开会讨论制裁日本违反《九国公约》的侵略行为。１９３７年１１月３日，《九国公约》签字国在比利时的布鲁塞尔举行会议，会议特邀的苏联代表表示支持中国，主张各国对日本进行集体制裁。但美国代表却说：“既然日本政府已由德国出面调停，美国政府认为中国代表的态度不要偏激，以免影响调停，刺激日本。”美国代表还建议中国应该：“公开宣布消除抵制日货，保护日侨生命财产，与日本进行经济合作，避开谈论恢复战前国土原状的问题，前景还是乐观的。” 英国代表表示：“英国政府将与美国采取完全一致的步调。”意大利代表则公然为日本辩护：“在战事发生中，很难确定谁开的第一枪，这个责任便属谁的问题，意大利打算谴责冲突的任何一方。”最后会议仅通过了一份宣言，指责日本在华行动违反了《九国公约》，建议日本停止军事行动，但只是一纸空文，毫无任何制止日本侵略的措施。所以当时汪精卫对抗战的悲观看法并不太离谱，中国抗战胜利不过是赶上运气好的险胜，在１９３７年的时候，谁又能预测到八年后中国会沾美苏之光成为战胜国呢？ 汪精卫还有一些话不便公开讲，他私下说：别看现在全国一致高喊“彻底抗战，牺牲到底”的口号，实际上真的准备为国家牺牲的人能有百分之几？大部分人嘴上高喊牺牲，但他们内心里牺牲的概念是让别人去牺牲，而并不是自己牺牲。为什么大部分人不肯讲出不愿牺牲的老实话？是因为他们害怕卖国的罪名，害怕承担亡国的责任。中国后来抗战的结果，的确应验了汪精卫的分析，大多数人都以保全身家性命为第一目标，真正勇于流血牺牲的人是极少数。 中华文化的特征之一就是“不准投降”，中国人可以原谅临阵脱逃的逃兵，却绝不原谅向敌人投降的降兵，这与西方国家正好相反。在西方国家中可以原谅向敌人投降的降兵，却绝不原谅临阵脱逃的逃兵。西方人认为在无力抵抗的情况下向敌人缴枪投降，也算尽到了军人的责任，不算什么可耻之事。而临阵脱逃则是逃避军人的责任，是军人最大的耻辱。二次大战中西方战场上降兵很多，逃兵却很少；而中国战场上降兵很少，逃兵却很多，这也反映出东西文化的差别。 蒋介石也明白中国不可能打败日本，只有借助第三国的军事力量对抗日本。但借助外国军队打日本也是非常危险的一步棋，这就是所谓的“引虎赶狼”，外国军队不会无偿帮助中国打仗，其索要的代价可能也非常高昂。后来苏联出兵东三省帮中国赶走了日本人，但作为代价中国不得不将外蒙古交给苏联，外蒙古独立也正是蒋介石借助第三国抗日所付出的代价。 现在看来，中国和日本主和派的下场都不妙，在日本，主和的犬养毅首相被杀，后来还陆续有多位主和派高官被杀；在中国，主和的汪精卫被刺几乎丧命，主和派的唐有壬等人也遭暗杀。在当时的情况下，对于一个高官来说，做少数的主和派要比做多数的主战派需要更大的勇气。因为主战派高官们号召别人流血牺牲，自己并不需要直接上战场，并没有什么生命危险，而做主和派却要冒被狂热主义者暗杀的生命危险。 日本在战争时，也是一片主战的狂热叫嚣，但主战派尽管主张战争，却不能保证战争的胜利。日本战败遭到割地赔款的苛刻制裁后，主和派方得以“平反”。人们才开始后悔当时没有听从主和派的劝告，才开始批判当年那些不负责任的主战言论。由于中国有幸成为战胜国，现在我们可以轻松地批评当年主和派的卖国求荣，可是我们如果理解当时主张和解妥协甚至要冒生命危险的话，我们也许就不会轻易批评他们主和是为了卖国求荣了。 第三部分之三：和平运动的开始 芦沟桥事变后，日军向中国发动了全面进攻，但这种进攻又显得毫无战略章法，不禁使人怀疑到日本发起侵华战争的目的究竟是什么？李宗仁在回忆录中这样写道：“侵华战事既已发动，而日本人又没有气魄来大举称兵。等到中国民愤达到最高潮，以致芦沟桥“事变”无法收场，大规模用兵势在不免之时，日本又不愿倾全国之师来犯。只是在华北、华东用少数兵力与中国作战，到兵力不敷时，才逐次增兵，深入作战。这种“逐次增兵法”便犯了兵家大忌……所以日本既处心积虑要征服中国，就应乘欧洲多事之秋，一举把中国吞下。日本平时国防军有二十个师团，稍一动员便可递增至四、五十个师团。如果芦沟桥战事发动前夕，日本便动员全国，首批派遣三十个师团同时分途进犯……一举而占领中国各重要城市，将我方野战军主力摧毁，将零星游击队赶入山区，支解我们整体抵抗的局面，陷全国于瘫痪状态，并非难事。到那时，我政府只有俯首听命。” 难道日本人的战略眼光真的这么差？连李宗仁所说的军事常识都看不到？其实这里面还有另外一层原因。当时日本少壮派军人发动侵华战争，似乎是把中国作为其敌人，然而少壮派军人真正想打倒的对手并不在中国，而在日本国内的官僚集团，中国被他们利用作为挑战日本官僚政权的工具。 １９２９年美国开始的经济大恐慌很快就波及到整个资本主义国家，经济危机特别严重的是美国和德国，日本也不例外，大恐慌后经济也陷入极度的萧条。经济大恐慌使人们对自由市场的资本主义体制失去信心，国家统治的计划经济被很多人看成是解决经济危机的灵丹妙药。１９３０年代苏联计划经济的成功已经非常令人瞩目，德国希特勒上台后搞准计划经济的国家社会主义，也使德国在两年之内就走出了经济危机，这些都使人们更加怀疑资本主义体制的后进性，苏联式的共产主义体制，德国式的国家社会主义体制，意大利式的法西斯体制，都是作为取代传统资本主义市场经济体制的“试点”。 在这样的国际大形势下，日本军中的少壮派们也提出要改变现有国体的设想。他们提出要废除以追求利润为目的的资本主义型利益国家，建立一个人人灭私奉公的、尽忠报国的、以道义而不是以利益为本的新型国家。当然日本国内的资本主义当权派不会轻易让出他们的政权，军人们要想夺取政权，最好的方式就是在海外制造军事纠纷，使日本国内陷入非常时期的战时状态，这样军人们就可以用军事上必要为理由征收个人财产，侵犯个人人权，以国家大义为借口堵住一切反对派的嘴，为改造国家体制创造必要的条件。尽管日本军人在战时建立起来的国家资本主义体制没有能使日本打赢战争，却成为了战后日本在国家的主导下发展经济的国家主导市场经济体制的原型。 在这种改变国体的呼声下，１９３７年６月４日近卫文吕（借字，原字上麻下吕）内阁成立。近卫是一个完全新型的政治家，虽然出身于贵族家庭，但思想却十分活跃敏捷；虽然近卫是文人，但在军人集团与文人政治集团发生冲突时，近卫对军人持同情态度，所以近卫内阁得到军人和文人双方的支持。近卫上台后，在开始著眼改革日本国体的工作，近卫宣布他的政府方针时说：“要建立基于国际正义的和平，建立基于社会主义的施政”。此后日本政府开始学习苏联搞国家主持的五年计划，实施国家控制主要产品价格的统购统销战时经济制度，不久后又解散了所有政党，试图建立一个希特勒式的“举国一致”独裁内阁。以上这些国体变革如果没有中日战争作为借口，在和平环境下是很难推行下去的。 但日本历史上并没有个人独裁的传统，一贯是集体领导体制，所以独裁体制在日本颇难立足，近卫也无法成为希特勒那样的独裁者。现在有一种说法，说二次世界大战是民主阵营对独裁阵营的战争，但这并不准确，民主阵营的苏联中国都是独裁国家，而独裁阵营的日本却是民主国家。尽管在二战期间日本军人试图建立一个独裁国家，但并没有成功，日本一直没有出现过一个称得上独裁者的人。有人试图把日本的东条英机和希特勒、墨索里尼并列成为独裁者，这完全偏离了历史的真实，东条英机实在无法算成是一个独裁者。 近卫文吕上台才一个多月，就发生了芦沟桥事变，成为近卫内阁的棘手问题。当时近卫本想采用不扩大的方针，军部作战部长石原莞尔也积极鼓动近卫亲自飞往南京和蒋介石“促膝谈心”，彻底解决中日间的纠纷。近卫对石原的设想有所动心，甚至准备了出访的飞机，但后来由于遭到日本军方强硬派的反对而不了了之。近卫又派亲中派国会议员宫崎龙介乘船前往南京与蒋介石会谈，但宫崎龙介在上船时被日本宪兵逮捕，强行送还东京，可见当时日本军方把首相的人都不放在眼里。在这种情况下，近卫不得不向军方妥协，采取了对中国的强硬姿态。 蒋介石也明白中国独自不可能打败日本，必须借助第三国的军事力量对抗日本。蒋介石在抗战爆发不久就在上海主动向日本驻扎上海的海军陆战队进攻，试图使上海这个国际城市陷于战火而引起英美法各国列强的干涉。但英美法对中日战争的反应意外的冷淡，英法忙于对付欧洲的希特勒，已无暇顾及远东事务，而美国的民众正处于严重的孤立主义中，不愿卷入外国的纷争。如果没有外援的话中国将必败无疑，在中国军队从上海败退后，蒋介石也开始考虑在德国的调停下和日本进行停战谈判。 德国当时已与日本和意大利签订了三国条约，德国愿意出面调停中日战争，其主要原因是因为中国和日本都是德国的友好国家。当时欧美国家围堵希特勒德国，德国在国际上朋友不多，所以十分重视和蒋介石政府的关系。中国当时虽然没有石油，却是镍等战略金属的主要供应国，德国的战略金属主要依靠中国供应，而作为交换，德国以向中国借款的方式，“借”给中国大量军事装备，这是抗战初期蒋介石军队均为德式装备的原因，也是蒋介石聘用３０多名德国军事顾问的原因。中日全面战争爆发后，日本以同盟国的身份向德国提出抗议，要求德国停止向中国供应武器，召回在中国的军事顾问。德国在日本的压力下不得已停供中国军火并召回军事顾问，但中德仍是友好国家，请德国出面调停，中国也比较放心。 于是德国大使陶德曼担任了调停的主角，陶德曼对中国人说：“中国到目前为止的抗战已经向全世界充分展示了中国人的勇敢精神，现在应该到结束战争的时候了。第一次世界大战时，德国有好几次讲和的机会，但我们却过分自信自己的国力，没有走上讲和的轨道，后来德国无条件降服时，不得不悲惨地接受战胜国的所有条件。”陶德曼希望中国人吸取前车之鉴，不要象德国那样搞到无条件降服的地步。１９３７年１１月５日，陶德曼向中国方面透露了日本讲和的条件：（一）内蒙成立自治政府；（二）华北非武装区域扩大，主权归南京政府，治安由中国警察维持；（三）上海非武装区域扩大，治安由国际警察管理；（四）中国停止反日排日政策；（五）共同反共；（六）减低日货关税；（七）尊重外国人在华的权利。 １２月２日，蒋介石与顾祝同、白崇禧、唐生智等国民党高级将领开会，征求大家对陶德曼转达的日方和谈条件的意见。与会者均认为日本没要求成立华北自治政权，没要求承认满洲国，也不要求赔款，条件不算苛刻，白崇椿甚至说：“如果条件只是这些，那为什么还非要打仗不可呢？”１２月２日下午，蒋介石会见陶德曼，表示中国愿意接受德国的调停，可以以日本提出的条件作为和平谈判的基础，但华北的主权和完整不得侵犯，和谈始终由德国担任中介人。蒋介石还说：假如他全部同意这些要求，中国就会被舆论浪潮冲倒，中国就会发生革命。他要求德方、日方对谈判一事严格保密。 １９３７年１２月６日，汪精卫在汉口主持召开了国防最高会议常委会，讨论陶德曼大使转达的日方停战条件。与会者也基本同意接受日方条件，在郑州部署军事的蒋介石打来电话：和谈可依照国防最高常务委员会议的决定，通过外交途径进行。这暗示蒋介石不准备直接主持和谈，要把卖国的帽子扔给汪精卫。汪精卫倒是不怕汉奸帽子，他说：“现在是抗战时期，所以‘和’的一字，是一般人所不愿意听的，因为讲和的结果自然没有胜利的结果来得畅快。如今大家因为痛恨日本的侵略，恨不得把日本整个灭亡，然后痛快，听见讲和自然满肚子的不舒服。一般民众如此是不足为怪的，但政府却不可为一般民众所转移。对于民众同仇敌忾之心，政府固然要加以鼓励，才不致一鼓作气，再而三，三而竭。然而政府更应注意虚骄之足以误事。民众尽管可以唱高调，而政府则必须把握现实，不得不战则战，可以议和则和，时时刻刻小心在意，为国家找出一条生路，才是合理的办法。” １２月１３日日军轻取首都南京后，使日本人以为中国的抵抗已到穷途末路，于１２月２２日又增加了三项苛刻的和谈条件：（一）在华北、内蒙、华中的非武装地带设立特殊机构（亲日政权）；（二）承认满洲国；（三）中国向日本赔偿战费。日方请陶德曼将新增三项条件转达中国，并把谈判期限规定为１９３８年１月１５日。陶德曼看后摇头道：“这样的条件中国是不会接受的”，果然不出陶德曼所料，中国政府没有按期答复日方的条件。于是日本政府决定向中国施加高压，１月１６日日本首相近卫发表了由大本营联席会议通过的《不以国民政府为对手的声明》，宣布：“帝国政府今后不以国民政府为对手，而期望能与帝国合作之中国新政权的建立与发展，并将与此新政权调整两国邦交，协助建设复兴的新中国。” １月１８日国民政府发表声明，表明了中国的强硬态度：“全力维持主权与行政之完整，任何恢复和平方法，如不以此原则为基础，决非中国所能忍受。”日本在中国发表声明后即日撤回驻华大使，中国也于１月２０日撤回驻日大使，两国外交关系正式断绝，陶德曼的调停以失败告终。 抗战开始后，蒋介石以加强军事为由，提出国民党中设立国防最高会议为全国最高决策机关，取代以前的最高决策机关中政会。国防最高会议的《组织条例》规定：国防最高会议主席由军委会委员长担任，副主席由中政会主席担任，蒋介石是军委会委员长，汪精卫是中政会主席，所以蒋介石自然出任主席，汪精卫出任副主席。１９３８年３月召开的国民党临时全国代表大会上，又修改党章重新确立国民党的领导体制，规定国民党设总裁１人，副总裁１人，大会选举蒋介石为总裁，汪精卫为副总裁。这样蒋介石就借战争的理由名正言顺地夺取了汪精卫长期在党内的最高领袖地位。尽管如此，汪精卫在党内的影响还是巨大的，蒋介石虽然掌握实权，但在表面上也要让汪精卫这位老前辈三分。 由于英美法不肯出兵干涉，蒋介石开始考虑请求苏联干涉，不过蒋介石在是否应该动用苏联这张牌时也非常犹豫不决：苏联曾经是侵占中国领土最多的国家，曾经在１９０４年和日本为了争夺在中国的霸权而大打出手，因此与日本成为死敌。中国请苏联出兵，即使赶走了日本人，进入中国的苏军会轻易撤出吗？请神容易送神难。更为严重的是，苏军一旦进入中国，中国共产党岂不要在中国做大，国民党还能掌握政权吗？当时以汪精卫为首的一批人非常反对请苏联干涉中日战争。后来苏军进入东北后，把东北交给了中共，成为中共打败国民党的基地，这些都验证了汪精卫等人的担心。 但战场上中国军队的被动局面，使蒋介石不得不铤而走险，请求苏联的出兵援助。１９３７年８月２日蒋介石召见苏联大师鲍格莫洛夫，请求苏联给与全面的军事援助，苏联方面答应向中国提供军事援助，但要求首先在两国之间签订“互不侵犯条约”。“互不侵犯条约”的主要目的是使中国承认以前被沙皇俄国侵占的领土，不再向苏联提起领土要求。８月２１日，中苏互不侵犯条约在南京签字。 尽管蒋介石和中共都强烈要求苏联直接出兵，但斯大林却对出兵一事含糊其词。１１月１１日，斯大林在召见中国特使杨杰时说：“现在世界上大多数国家都同情中国的抗战，如果苏联出兵，中国就会在世界上失去道义的支持。现在中国在军事上还有很大余地，万一中国军队实在坚持不住时，苏联再出兵也不迟”。不过斯大林答应向中国派遣志愿军和紧急提供武器，苏联的第一批志愿军飞行队４０余架飞机进入中国，于１１月２１日在南京附近首次和日军交战。 １９３７年１１月３０日，蒋介石亲自向斯大林发电报，要求苏联表态是否同意出兵，斯大林最后说：“如果签署九国条约的国家共同出兵制裁日本的话，苏联就出兵。如果苏联单独出兵的话，世界舆论就会把苏联看成是趁火打劫的侵略者”，拒绝了蒋介石直接出兵的要求。但苏联加大了对中国援助的力度，１９３７年底立法院长孙科访问苏联，苏联答应向中国提供２０个师的装备，１９３８年３月，苏联正式签署向中国提供３０００万美元的第一批军事借款。但后来欧洲战线吃紧，苏联以增强本国军事力量为重，放慢了对中国的军事援助。不过在１９４１年苏德战争爆发以前，苏联共向中国提供飞机９００余架，军用车辆２０００余辆，大炮１０００余门，弹药１亿８０００万发。３０００多名苏联志愿军在中国直接参战，不少人长眠于在中国的土地上。 英美法隔岸观火，苏联也不肯出兵，中国的抗战只剩下“焦土战”这条严酷的道路。由于日本是一个资源贫瘠的岛国，非常不利于打持久战，所以蒋介石就把希望寄托于用持久战来拖垮日军。当然日本也明白本国资源有限的弱点，提出了“以战养战”，用中国的资源打中国人的设想。蒋介石为了不让敌人利用中国的资源达到以战养战的目的，在中国各战场大搞烧光毁光的焦土战术。但焦土战的最大受害者并不是日军，而是中国的平民百姓，国民党内部对这种残酷的焦土战术也有不少反对之声。 １９３８年６月９日，国民党军在没有预告的情况下，突然炸开黄河大堤，泛滥的黄河水并没有淹死一个日军，却淹死十多万中国老百姓，上百万人成为无家可归的流民。不久，国民党军又在预定撤退的长沙误放火，烧死平民数万。长沙大火后，汪精卫批评蒋介石说：“我们烧东西也许是怕自然物资变成‘自然汉奸’被敌人利用，但如果没有人出来做汉奸的话，自然又怎么会变成汉奸呢？如果象长沙一样把每处每地都焦土化的话，我方抗战所需的物质又从何而来？如果把沦陷区内的物质全烧光，剩下的只有一大群无食无住的饥民，这些人怎么处理？带他们一起跑吧，他们又跑不动；将他们杀了吧，又于心不忍。如果把他们扔给敌人，他们必然要被敌人所用，必然要当汉奸。” 汪精卫在一次演讲时说；“从前法国有一个国王，叫做亨利四世，他讲过一句很有名的话：我希望我的人民，在每个星期六的晚上，在他家里的火炉子上面、瓦罐子里面，都偎著一只鸡。我们再看看我们中国的老百姓，他们有的连鸡毛都没有见过，还谈鸡？一生都吃不著一只，还要说在每个星期六？他们从小到老都在劳动，田地和工厂接受了他们的血汗，等到血汗用尽了，生命也完了，就离开了世界。那好比火炉需要柴炭，等柴把精力完全贡献出来，只剩下灰未、只剩下煤屑的时候，不讲情面的铁铲就把它们铲出去！不让它们再在火炉里停著……” 汪精卫越来越对这种建立在人民惨痛牺牲基础上的焦土抗战感到疑问：抗战的目的是什么？法国国王还企望人民百姓能有鸡吃，我们的领导人想到过老百姓的疾苦没有？抗战的最大牺牲者不就是那些连鸡肉的滋味也不知道的平民百姓吗？我们不惜牺牲四万万老百姓的生命来培养一个民族英雄，这值得吗？如果不出现奇迹的话，这场战争要经过多少年才能结束？在这期间中国老百姓要遭受多大的惨祸？汪精卫越来越觉得他的和平救国理念是正确的。 当然国民党内部持“和平救国”观点的，不止汪精卫一人。周佛海、顾祝同、熊式辉、梅思平、陶希圣、胡适、高宗武等人组成了一个“低调俱乐部”，主张和平救国。“低调俱乐部”是胡适起的“雅号”，以区别于那些唱抗战高调的人。周佛海说：“共产党、桂系以及一切失意分子，都很明白地知道，抗日是倒蒋唯一手段。他们因为要倒蒋，所以高唱持久全面的抗日战争。蒋先生本想以更高的调子压服反对他的人，而这些人就利用蒋先生自己的高调，逼著蒋先生钻牛角。调子越唱越高，牛角就不得不越钻越深。当抗战到底的调子高唱入云的时候，谁也不敢唱和平的低调，故我们主张和平的这一个小集团，便名为‘低调俱乐部’。”１９３８年９月胡适被任命为驻美大使，与“低调俱乐部”中断了联系。 汪精卫虽不直接参加“低调俱乐部”的活动，却是这个组织的灵魂，无形中形成了以汪精卫为中心的“和平运动”。“低调俱乐部”批评主战派说：“蒋委员长等主战的结果，一个是丢，一个是烧，丢不了也烧不焦的地方，都给了共产党的游击队。共产党以游击战争回避对敌作战，人称‘游而不击’，他们是想借抗战保全实力，待国军消耗光了，他们就可颠覆政府。”江精卫则说：“主战有主战的道理，不过，主战的目的是什么呢？为的是国家能够独立生存下去。如果能达此目的，和日本言和也不失为一种手段。一味主张焦土抗战的、唱高调的应该再坦诚一点，要说老实话。依我看来，日军占领区日益扩大，重要海港和交通路线大多丧失，财政又日益匾乏，在战祸中喘息著的四万万国民，沉沦于水深火热的苦难之中。为尽早结束战争，我曾多次向蒋委员长进言，要打开谈判的大门。” 不过在国民党内主战派压倒多数的情况下，汪精卫感到已不可能说服蒋介石等人走“和平救国”的道路，于是他开始走自己独自的和平道路。汪精卫委托“低调俱乐部”的梅思平、高宗武等人和日本私下接触，谈判停战的条件。 日本国内也有一批主和派，主张尽早以较为宽大的条件和中国停战言和。主要人物是陆军参谋本部支那课长影佐祯昭大佐，还有在华日本纺织同业株式会社理事长船津辰一郎，日本南满铁路驻京办事处主任西义显，同盟通讯社上海支局长松本重治，前首相犬养毅的三子犬养健等民间人士。影佐祯昭等主和派也在没有政府批准的情况下，私下与中国接触打探和平的可能性。高宗武和西义显等人私交不错，双方不久就达成了初步协议：日方以宽厚的讲和条件支持汪精卫出马，汪精卫则脱离国民党另立政府和日本签订停战条约，实现两国间的停战与和平。 对于汪精卫来说，迈出这一步的确是非常艰难的。正如梅思平所说：“这件事也实在犯难，搞好了呢，当然对国家有益；搞不好呢，汪先生三十多年来的光荣历史只怕让人一笔勾销。”汪精卫也明白，他迈出这一步的代价有多大，岂止勾销三十多年来的光荣历史，甚至要千夫所指、万人痛骂，陈公博也从成都打来电报，劝告汪精卫说：“先生若离重庆将遭到全国民众的反对和唾弃”。汪精卫考虑了整整两天，最后说：“决定了！只要能救民于水火，我决心跳火坑了。” 第三部分之四：对日和约的实态 中日战争爆发后，日本对战局的形势有三种看法：一、快胜论：认为中国军队不堪一击，可以在“三个月内解决支那问题”；二、持久战论：认为中国国土辽阔，战场的纵深太大，日军只能占据一些军事据点，不可能有效地控制整个中国。中国政府如果坚持不降，中日战争将成为旷日持久的持久战；三、外国干涉论：认为中日战争将导致第三国的武装干涉，日本会在外国的政治军事压力下被迫退出中国。 随著战局的发展，证明“快胜论”的预言是错误的，但外国也没有积极干预中日战争，所以“持久战”的预言成为现实。日本非常不愿意打持久消耗战，持久战拖得越久，对人口资源丰富的中国就越有利，日本将在消耗战中拖垮。到１９３８年底，日本用在中国战场的兵力已增至２４个师团，军费激增，财政困难，税收加重，国内危机日渐困重。在这样的情况下，日本内部也出现了尽快解决战争的呼声。 在１９３８年初，日本还寄希望于用高压手段迫降中国政府，１９３８年１月１６日近卫首相发表了《不以国民政府为对手》的强硬声明。１９３８年１０月，日军本想在武汉战役中一举歼灭中国军队主力，但中国军队主动撤退，中国政府也迁都重庆，使日本通过武力高压迅速解决中国问题的企图破产。此后，日本政府内要求“重新检讨对华政策”的呼声抬头，１９３８年１１月３日，近卫首相发表了第二次对华声明，一改过去的“不以国民政府为对手”方针，表示：“帝国所期求者即建设确保东亚永久和平的新秩序。只要国民政府抛弃以前的一贯政策，更换人事组织，取得新生的成果，参加新秩序的建设，我方并不予以拒绝”。 １９３８年１２月６日，陆军省参谋部公布《１９３８年秋季以后的对华处理方略》，决定今后的对华总方针：“以攻占汉口、广州为行使武力时期，今后自主指导新中国建设，切戒急躁。为此，目前应以恢复治安为根本，其他各项施策都应与此相适应。”对华总方针还规定军事上“以不扩大占领区”为宗旨，确定新黄河、合肥、芜湖、杭州一线以东的占领区为治安地区，以西为作战地区。在不扩大占领区的原则下，对国民党军实施有限的局部进攻，同时加强航空作战，轰炸重庆国民政府大后方及中国国际补给线，打击中国的抗日意志，促使国民政府崩溃。 １９３８年底以后，日本政府和军部的对华方针由“军事打击为主，和平谈判为辅”，改为“军事打击为辅，和平谈判为主”，由否认重庆国民政府改变为承认重庆国民政府。１９３８年１１月以后，日本政府开始考虑作出一定让步的情况下，和中国政府谈判，结束战争。１９３９年３月，日本新首相平沼在国会演说中公开表示说：“蒋介石将军与其领导之政府，假使能重新考虑其反日态度，与日本共同合作，谋东亚新秩序之建立，则日本准备与之进行中止敌对行动的谈判”。 中日战争爆发后，中国对战局的形势有四种看法：一、胜利论：认为中国军队已具有击退日军的实力，可以击败日本的军事进攻，赢得军事上的胜利；二、亡国论：认为中日战争的结果将导致中国亡国；三、最后胜利论：中日战争成为持久战后，最终将引发外国的武装干涉介入，中国在外国的帮助下最终战胜日本；四、和平救国论：中日战争成为旷日持久的消耗战后，日本也难于忍受长期的消耗战，所以日本不能灭亡中国，不得不与中国进行停战和谈。而中国也应该积极响应和谈，尽快结束在中国土地上进行的破坏性巨大的战争，减少中国国力的损失。 日本对华政策改变后，开始发出和谈的信号和放出和平的气球，这正好与汪精卫等人的“和平救国”论看法不谋而合，国民党内对“是战还是和”的问题上，发生了重大分裂。但由于“主战”和正义联系在一起，“主和”不免戴上投降叛国的汉奸帽子，所以国民政府内“主战”派还是占绝对多数。在此情况下，汪精卫等“主和派”开始了自己独自的“和平工作”。不过蒋介石在“主战”和“主和”之间持机会主义态度，一方面他高唱抗战到底的高调，另一方面对汪精卫等人的“和平工作”睁一只眼闭一只眼，为中日战争的结局留一条后路。蒋介石并没有制止和惩处参与“和平工作”的官员，使汪精卫的“和平工作”得以顺利进行。 国民政府外交部亚洲司日本科科长董道宁，通过私人关系与在上海的日本南满铁路驻京办事处主任西义显、同盟通讯社上海支局长松本重治等人进行接触，摸索与日本和谈的可能性。西义显和松本重治劝董道宁直接到日本与军方人士会谈，于是在松本的安排下，董道宁于１９３８年２月，即近卫首相发表“不以国民政府为对手”声明的一个月后，来到日本与陆军参谋本部中国课课长影佐祯昭大佐进行了会谈。董道宁是一个小小的科长，肯定是在某个上层人士的指派下到日本秘密谈判的，但董道宁到底是受谁的指派直到现在也还搞不清楚。 参谋本部中国课长的影佐祯昭大佐是日本的主和派，是早期参与和平工作的唯一军人。董道宁向影佐询问日本改变“不以国民政府为对手”政策的可能性，影佐说：军部中也有很多人反对近卫首相发表那样的强硬声明，但近卫首相的声明亦是事出有因，不可能那样简单地取消。但影佐表示日本希望和平的人也大有人在，非常愿意与中国进行停战谈判，期望中国也能够表示出具有和谈的诚意。董道宁请影佐给蒋介石写封信，影佐认为他以一个课长的身份给蒋介石写信不太合适，于是他给在陆军士官学校的老同学何应钦和张群分别写了信，影佐在信中说：“不以国民政府为对手的声明是一桩不幸的事件，董道宁此番来日本表示了中国的诚意，日本深为感谢”。 董道宁回国后将影佐的信交给上司高宗武（外交部亚洲司司长），高宗武又将信转交给蒋介石的近侧宣传部长周佛海，周佛海再将信转交给汪精卫和蒋介石。不久高宗武向西义显转达了蒋介石向影佐祯昭的好意表示的谢意。周佛海又向蒋介石进言派亚洲司司长高宗武到上海“收集情报”，蒋介石同意高宗武到上海进行秘密外交，并从军委会秘密经费中每月支６０００元作为高宗武的活动经费。周佛海不久又背著蒋介石，密派高宗武直接到日本会谈，高宗武有些担心：“我去日本蒋先生知道吗？”周佛海说：“你就放心去吧，一切责任由我承担。” 周佛海之所以敢瞒著蒋介石和日方谈判，是因为周佛海对蒋介石抱有这样一种看法：抗战后蒋先生一反他以往的表现，如果把过去蒋先生的行为贯穿起来进行研究，就会知道蒋先生的真正态度是“主和”的。由于举国上下高唱全面持久抗战，蒋先生不能不附合，而且比别人的调子更高，以便压服反对他的人，争取舆论的支持，蒋先生是被逼迫著走上他不愿意走的路。所以周佛海决定“以自己的胆识，把蒋先生的作法反过来加以灵活运用，等决心和平后，再向蒋先生报告。”周佛海认为蒋介石终究会明白他的一番苦心。蒋介石在知道高宗武未经他许可私下到日本谈判时，只是说：“荒唐，荒唐”，并没有提出对高宗武进行处罚，更没有强调今后要严格禁止类似事件发生。 １９３８年６月高宗武在松本重治的陪同下来到日本，高宗武到日本后首先表示他并不是蒋介石派来的使者，而是中国主和派的代表。高宗武说：“我首先想说明我的立场，为了实现和平，我准备不惜做出任何牺牲。为了中国，我最为重视的不是对日作战，而是对共产党的斗争。关于这一点，蒋委员长周围的一部分军人，主张即使把对共产党的斗争置之以后，也要把抗日看成国家的当务之急，我对此是反对的。但汉奸我可不当，我所奋力争取的仅仅是实现和平，这条界限是明确的。如果是不当汉奸的和平工作，那么有什么困难我都忍耐，但倘若这样做会成为汉奸，那么我马上就此作罢，即使说我中途脱逃也好，或说我是叛徒也罢，我都要退出。”后来高宗武果然因为害怕当汉奸，退出了“和平运动”。 高宗武怀疑蒋介石愿意冒卖国的罪名进行和谈，高宗武说：“关于中日和谈的大义，如果从我的信念上来说，我不得不以汪先生为同伙。随著战祸的扩大，国民是不能忍受的。蒋先生冷酷，而汪先生温暖。”高宗武努力推荐汪精卫，他对影佐帧昭说：“为了造成中日之间的和平，也许必须找蒋先生以外的人。除了汪先生之外，就不容易找到别人。汪先生早已痛感有迅速解决日中问题的必要，而国民政府内部终究不能容纳他的主张。为此，不如从政府外部掀起国民运动，开展和平运动，由此造成蒋先生听从和平论的时机，这样较为适当。” 日本军方逐渐为中日战争的长期化感到头疼，对影佐的和平计划开始产生兴趣。１９３８年７月初在影佐帧昭的斡旋下，高宗武与日本陆军大臣板垣征四郎进行了会谈。会谈时高宗武提出由汪精卫出马，从政府外部掀起和平运动的计划，希望日本方面为汪精卫出马提供有利条件。日方同意以“不要领土，不要赔款”的优惠条件，支持汪精卫出马进行“和平运动”。高宗武于７月２１日返回中国。 高宗武因未经蒋介石允许擅自赴日，而且此行得到的结果也对蒋介石不利，所以不敢回武汉，只向周佛海报告了日本之行的情况，并付一封致蒋介石的信：“委员长钧鉴：职于六月二十三日由香港秘密东渡，刻已平安返港。兹谨将职东渡日记及在东京会谈记录与职个人观感三项，分别呈阅。倘有可能以供钧座参考之处，则或可赎职擅赴之罪于万一”。周佛海先把高宗武的报告送给汪精卫，因高在报告中写有“日本希望汪先生出马”字句，周佛海征求汪精卫的意见：“在呈送蒋先生以前要不要把这段删去？”。汪精卫则说“没有关系，他不是那种斤斤计较的人”。蒋介石看完高宗武的报告后，转交行政院副院长兼国防最高委员会秘书长张群，并嘱咐张群看完后转交汪精卫，他不知道汪精卫早已看过。过了三天蒋介石忽然大发雷霆：“高宗武是个混蛋。谁让他到日本去的？” 不过蒋介石仍然没有深究高宗武私自赴日谈判一事，这使周佛海更加敢于放手进行“和平运动”。不久高宗武因肺病复发住院，周佛海改派军委会政略部秘书主任梅思平接替高宗武进行秘密谈判。１９３８年８月２９日至９月４日，梅思平与近卫首相的私人代表松本重治在香港进行了五次谈判，初步确定了日本政府以“不要领土，不要赔款，两年内撤军”为条件，支持汪精卫搞和平运动。梅思平将日方的内容转交汪精卫，汪精卫同意在此条件下出马主持和平运动。 １９３８年１０月２２日，汪精卫与周佛海、梅思平、陶希圣、陈壁君等人秘密召开会议，讨论和平运动的具体计划。当时他们计划的“和平运动”分五个阶段：一、汪精卫离开重庆，在外地宣布下野，脱离国民政府。然后日本政府立即发表声明，提出不要领土，不要赔款，两年内撤军的条件，倡议与中国进行和谈；二、汪精卫以个人身份发出响应日本政府的和平倡议，建议国民政府接受日本的条件和平停战；三、云南等地的地方实力者通电响应汪精卫的和平号召，在云南等日军未占领地区建立新的独立政府；四、日本承认新政府并与新政府进行和平谈判，日军撤退回长城以北，将日军占领区转交新政府；五、新政府统一全国，实现中日两国间的真正和平。 汪精卫当初的这个和平计划是在日军未占领的地区建立新政府，然后新政府接收日军撤军后的占领地，在不割让领土、不赔款的条件下和日本实现和平。如果这个计划能够实现，对于中国人来说还是有相当的可接受性，汪精卫未必被国人责骂为卖国者。但后来由于种种原因，汪精卫的和平计划和他当初的设想出现了很大的偏差，汪精卫自己也成了牺牲品。 １９３８年１１月３日，日本政府发表第二次对华声明，提出只要国民政府更变人事组织，日本就可以与中国进行停战谈判。日本所说的“更变人事组织”，就是指蒋介石下野。１１月１６日，汪精卫和蒋介石一同吃饭时，劝蒋介石下野促成中日和谈。汪精卫说：“使国家民族濒于灭亡是国民党的责任，我们应迅速联袂辞职，以谢天下。”蒋介石则反问汪：“我们如果辞职，到底由谁负起政治的责任？”两人进行了激烈地争辩，最后蒋介石说：“说什么都是一样，我们不必再争论了。我已经困了，要睡觉去了”。于是蒋介石将汪精卫一个人弃置不顾，自己回去睡觉了，这也促使汪精卫最后下定离开重庆的决心。 汪精卫和平计划的第一个关键问题是要得到云南政府主席“云南王”龙云的支持。汪精卫派陈璧君找龙云秘密商谈和平计划，龙云对蒋介石改编他的军队，调用云南的物质，削弱他的势力耿耿于怀。龙云对陈璧君说：“汪先生是党国元老，在国内外声望极高，只要他登高一呼，应者必然云集于他的旗帜之下。蒋介石一贯阴险奸诈，排除异己，所以汪先生发动和平运动、另立新政府是天经地义之事。除了共产党和冯玉祥等少数人之外，都会拥护汪先生出来倡导和平事业，在国际上也会得到许多国家的支持。” 有了龙云支持和平运动的许诺，下一个问题就是日本是否承诺宽大的和平条件。１９３８年１１月１２日，汪精卫派梅思平、高宗武等人为代表，日本派影佐帧昭、今井武夫等人为代表，在上海虹口公园附近的“重光堂”举行最后谈判，双方经过８天的讨价还价，最后达成了所谓“重光堂协议”。（一）缔结华日防共协定，内蒙为特殊“防共”地区，日本在“防共区”驻兵。（二）承认（默认）满洲国。（三）日本废除在中国的治外法权，归还日本的在华租界。（四）华日经济提携，在开发利用华北资源方面，为日本提供特殊方便。（五）补偿因事变而造成的在华日本侨民所受的损失，日本不要求赔偿战费。（六）恢复和平后，日军在两年以内撤军。 另外还有一个极为重要的问题，就是日本军方对中国分而治之的战略。日本军方感到一个统一的大中国对日本总是一个威胁，最好的消除中国威胁方法就是把中国分为数个国家“分而治之”。日军先在东北制造了一个满洲国，又于１９３７年１２月在华北制造了一个以王克敏为首的北平中华民国临时政府，再于１９３８年４月在长江下游地区制造了一个以梁鸿志为首的南京中华民国维新政府。日方本来计划汪精卫出面建立一个局限于云南两广的地方政府，而汪精卫坚持必须撤销梁鸿志和王克敏等的地方政府，由汪精卫的中央政府统一领导中国。由于汪精卫在此问题上态度十分坚决，日方最后让步同意汪精卫的新政府统一领导中国。 梅思平把重光堂密约抄在丝绸上，缝在西装马甲里，于１１月２６日带到重庆，向汪精卫、周佛海汇报。但最后汪精卫比较动摇，决定了又推翻，推翻了又决定，在周佛海等人的劝说下，终于下决心选择“和平救国”的道路。汪精卫等人策划了一个脱离重庆的计划：１２月５日，周佛海先去昆明，１２月８日，江精卫夫妇去成都，两日后到达昆明再去河内。日本政府于１２月１１日发表第三次对华声明，汪精卫随后在昆明、河内或香港中任何一地宣布下野。与此同时汪精卫也接到日方的通知，表示对重光堂协议无异议，希望一切按计划实行。 但多年跟随汪精卫的陈公博并不知道汪精卫与日本秘密商定的和平计划，汪精卫把在成都任四川省党部主任的陈公博请来，希望陈也参加他们的和平计划。陈公博看了“重光堂协议”后徒然变色：“汪先生，这协议书是哪儿来的？委员长他知道吗？”周佛海说：“委员长暂时不知。”汪精卫说：“委员长不出来议和，我准备来议和，不然，焦土抗战，死且不知！”陈公博听后不安地说：“汪先生，依公博之见，先生这样做恐怕是难为人理解的，还可能出大乱子。”汪精卫则向陈公博解释说：“你我相处二十年，患难与共，我这次到外面去，和以前一样非常希望能够得到你的理解和支持。有路可走，我是不会离开重庆的，可现在只能离开重庆才能去谈和。我在重庆谈和，人家定会误以为是政府主张，这是于政府不利的。我离开重庆，那么和谈便是我个人的主张了，如果交涉得当，再来劝政府，由政府出面接受。如果政府仍然执迷不悟，那就只能撇开他们另组班子了。我与佛海一批人的良苦用心，将来是会得到国人理解的。”周佛海也劝陈公博说：“历史的评价问题，牵涉到战局如何发展问题，很复杂，不是我们今天所能定得下来的。成事在天，谋事在人，要谋事总要付出代价和牺牲的。”陈公博见众人都同意，只好说：“你们都统一意见了，我还有什么可说的？不过我总觉得这事还欠考虑，背著政府去和敌方谈和，无论结果怎样，总还有个立场问题。更何况还牵涉到要组织另一个政府问题，而日本方面是否有此诚意？此事须得慎重，最好放弃。”不过最后陈公博表态：“汪先生走到哪里，我跟到哪里。我不想留在四川，眼看众人在我面前骂汪先生，更不愿被别人看成是汪先生留在政府里的密探。” １９３８年１２月８日，汪精卫准备飞离重庆的时间，本来是蒋介石外出不在重庆的日子，但１２月８日蒋介石突然从桂林飞抵重庆，打乱了汪的行动计划。汪精卫只好暂时留在重庆，等待时机。１２月１８日，蒋介石飞往陕西出席军事会议，汪精卫以外出演讲为名，偕夫人陈璧君、秘书曾仲鸣、女儿汪文惺和未婚夫何文杰等人飞往昆明。汪精卫到达昆明后，云南省政府主席龙云率领省、市各厅局官员列队相迎，后面是一排排学生和市民夹道欢迎。当天晚上，汪精卫与龙云作了一次恳切的谈话，汪精卫把自己和平运动的计划告诉龙云，说到达河内后即公开提出与日本议和的建议，接著由龙云发表拥汪通电，然后四川、西南和两广各实力派也纷纷行动起来，造成以汪为首的和平运动区，一面与日本交涉和平，一面也促使蒋介石的重庆政府议和。龙云听后满口表示赞同。 １２月１９日，汪精卫夫妇、周佛海、陶希圣、曾仲鸣等一行十余人，乘龙云代为包租的专机离开昆明，飞抵法属殖民地越南的河内，迈出了和平运动的第一步。据说汪精卫在离开重庆前，给蒋介石留下一封长信，信中最后写道：“君为其易，我任其难”。在当时的情况下，“主和”的道路要比“主战”困难更多。 汪精卫“主和”难，日本的“主和派”也阻力重重。由于这次发表的声明是正式声明，需要陆、海、外务三省协商后拟成正式文本，然而首先在最重要的参谋本部发生了意见分歧，参谋本部的要员坚决反对明确指出日本撤兵的日期，声称战胜国万不可做出向战败国许诺撤兵日期这样有损于国家威严之事，这样做太对不住前线浴血奋战的士兵。最后近卫向强硬派妥协，在声明中删去了“重光堂协议”中最为重要的日本撤兵一项。近卫在得知汪精卫于１２月１９日到达河内后，于１９３８年１２月２２日发表了第三次对华声明。 日方和平运动的发起者之一犬养健在他的回忆中，评论近卫的第三次对华声明时说：“不要求领土，不要求赔款，归还外国租界，撤销治外法权等，如果按照重光堂会议的精神发表，确实会引起中国人的共鸣。可是，这次声明竟把最为重要的撤兵约定忘得一干二净，实在让人担心汪精卫和平运动会走上歧途，我深感失望。”日方和平运动的另一个发起者西义显听到近卫修改“重光堂协议”内容的声明后感叹说：“日本把汪精卫欺骗了”，松本重治对近卫的声明内容也感到愕然：“感到和平运动的未来已经出现了暗影”。 汪精卫对近卫修改“重光堂协议”内容的声明也深感不满，但他亲身体会“主和派”的艰难，近卫发表这样主和口气浓厚的声明，也一定有他的难处。虽然近卫声明删去了最为重要的撤兵内容，但在不要求领土、不要求赔款、归还外国租界、撤销治外法权等方面基本上符合“重光堂协议”，所以汪精卫决定按重光堂协议的规定，发表声明响应近卫的和平倡议。 １９３８年１２月２８日，汪精卫发出《致中央常务委员会国防最高会议书》，要求蒋介石和国民政府认真考虑日本政府的和平倡议，其原文如下： “兹有上中央一电，除拍发外，谨再抄呈一纸，以备鉴察。本月９日，铭谒总裁蒋先生，曾力陈现在中国之困难在如何支持战局，日本之困难在如何结束战局，两者皆有困难，两者皆自知之及互知之，故和平非无可望。外交方面，期待英、美、法之协助，苏联之不反对，德、意之不作难，尤期待日本之觉悟，日本果能觉悟中国之不可屈服，东亚之不可独霸，则和平终当到来。” “凡此披沥，当日在座诸同志，所共闻也。今日方声明，实不能谓无觉悟。犹忆去岁１２月初南京尚未陷落之际，德大使前赴南京谒蒋先生，所述日方条件，不如此明划，且较此为苛，蒋先生体念大局，曾毅然许诺，以之为和平谈判之基础。其后日方迁延，南京陷落之后，改提条件，范围广漠，遂致因循。今日方既有此觉悟，我方自应答以声明，以之为和平谈判之基础，而努力折冲，使具体方案得到相当解决，则结束战事以奠定东亚相安之局，诚为不可再失之良机矣。” “英、美、法之助力，今已见其端倪，惟此等助力仅能用于调停，俾我比较有利，决不能用于解决战事。俾我得因参战而获得全胜，此为尽人所能知，无待赘言。苏联不能脱离英、美、法而单独行动，德、意见我肯从事和平谈判，必欣然协助，国际情势，大致可见。至于国内，除共产党及惟恐中国不亡、惟恐国民政府不倒、惟恐中国国民党不灭之少数人外，想当无不同情者。铭经过深思熟虑之后，始敢向中央为此提议。除已另函蒋先生陈述意见外，仅再披沥以陈。伏望诸同志鉴其愚诚，俯赐赞同，幸甚，幸甚。专此，敬候公祺。汪兆铭谨启” １２月２９日，汪精卫又发表了所谓的“艳电”。“艳电”这个词并没有什么特殊的意义，当时电报为了节省字数，把日期用一个字代替，１２月２９日的电报代号为“艳”字，故称之为“艳电”。汪精卫的“艳电”并不是宣布与日本“合作”的声明，而是以公开向国民党中央党部、国民党总裁蒋介石、国民党中央执监委员会提出建议的形式发表的。“艳电”的大致内容如下（手头暂时查不到“艳电”的原文）： 近卫首相在最近的对华声明中指出日本对中国无领土要求，尊重中国主权独立，并提出了“善邻友好”、“共同防共”、“经济合作”三原则，表明日方已有和谈的诚意，希望蒋介石和国民政府以近卫声明为谈判基础，与日本政府交换诚意，以期恢复和平，汪精卫还特地提出近卫声明中没有提到的日本撤兵问题。“艳电”说：“抗战年余，创巨痛深，倘犹能以合于正义之和平而结束战争，则国家之生存独立可保，即抗战之目的已达。” 汪精卫出走重庆后，不少外国电台报道说：汪精卫外出是代表国民政府军事委员会与日本谈判和平问题。１２月２４日，蒋介石让外交部紧急发表声明：“汪兆铭无权和任何人谈判和平。”由于汪精卫在党内的地位，蒋介石担心汪精卫的出走影响人们对国民党的信心，最初只是对外声称汪精卫前往河内治病，为汪精卫返回重庆留下一条后路。 蒋介石先派正在河内洽办武器运输事务的外交部长王宠惠劝汪精卫回重庆，王宠惠说：“委员长三番五次对人说，汪先生只是赴河内治病，现在回去，仍然名正言顺。”汪精卫回答说：“谢谢重庆方面目前还给我留条退路。虽然这样，我还是不能回去，为什么呢？我这次离开重庆，只是对政局有不同意见，并不夹杂其他任何个人意气在内，这一点务请你们转告中央，请他们理解。在重庆，我要发表个人意见很不容易，我不离开重庆，这份艳电就不能发出，和平工作就难以开展。我的和平主张能否采纳，权操中央，我丝毫不勉强。如果政府出面主和，改变立场，我可以从旁做些协助工作，或者退隐山林不问国事都可以，但如果政府不转变立场，那我只能出面来谈和了。” 汪精卫来到河内后，他的和平计划遭到很大的挫折。第一是近卫食言没有在声明中公布撤军的许诺。汪精卫本想近卫也有困难，准备今后再继续交涉撤兵一事，所以于１９３７年１２月２９日发表了响应近卫声明的“艳电”。没想到近卫内阁又于５天后的１９３８年１月３日宣布总辞职，使汪精卫陷入十分被动的境地。第二是龙云变心，没有按照当初的承诺发表对汪精卫和平运动的响应，迎接汪精卫在云南建立新政府。汪精卫本来并没有考虑在日军占领区建立政府，所以龙云的变心使汪精卫设想的和平运动完全泡了汤。 从汪精卫与日本人秘密和约的情况来看，并不是汪精卫一厢情愿的对日投降，而是双方都有和平停战意愿的情况下达成的双边协议。在整个秘密交涉的过程中，汪精卫并非十分主动，最初与日方进行接触的董道宁和高宗武也并非汪精卫派出的使者。而日方却比汪精卫主动得多，日方主动提出汪精卫出马的有利条件，汪精卫考虑再三后才答应的。而且汪精卫在秘密协议中提出日本撤军和建立统一中央政府的条件，都是对中国有利的。 如果日本当初不答应撤军的话，汪精卫也不太可能会离开重庆另立政府。然而日方却在汪精卫离开重庆走上不归路后，违背诺言收回了撤军的承诺。汪精卫的和平运动最能让人谅解的地方就在于日本撤军这一条，没有了日本撤军的保证，汪精卫的和平运动自然成为卖国投降行为。从这一点看，汪精卫也可以说是被日本人出卖了。但日方倒也未必是有意出卖汪精卫，就象后来美国出卖对自己忠心耿耿的台湾国府与中共大陆建交一样，国家之间只有利益，却没有情谊，弱者总是处于被出卖的危险之中。 第三部分之五：汪精卫的成立南京政府计划 汪精卫既没有绝对效忠于自己的私家军，也没有掌握垄断国家财政的命脉企业。汪精卫之所以能够在一无兵二无钱的情况下，在中国政治舞台上扮演顶峰人物，唯一依靠的就是他的名望。汪精卫是国民党的建党元老，文才口才过人，是孙中山最为信任的左右手，加之有曾经冒死刺杀满清摄政王的英雄壮举，这样的辉煌资历在国民党中无人可比。更加重要的是汪精卫拥有近似于完璧无瑕的正派人品，不贪污、不赌博、不吸毒、不近女色，这在当时腐败的中国政界是绝无仅有的高洁人物，汪精卫走到哪里，哪里的空气就会变得清高起来。汪精卫的政敌们虽然批评汪精卫的政治见解，但对汪精卫的人品都是非常敬服的。 汪精卫的唯一政治资本就是他的名声，一旦名声毁坏，汪精卫的政治生命也就完结了，这和那些即使恶名昭著，也照样执政掌权的军事实力派完全不同。１９３８年１２月１８日汪精卫出走重庆搞“和平计划”，是用他唯一政治资本的“名望”来背水一战。但汪精卫的和平计划遭到了很大的挫折：汪精卫按照与日方达成的密约离开重庆前往河内，日方却违背密约收回了撤军的承诺。本来在汪精卫和日方代表秘密签订的“重光堂协议”中，日方答应以“撤军”来支持汪精卫的和平运动，如果当时日方不提出撤军的承诺，汪精卫也不会离开重庆。可是日本首相近卫在发表声明时，忽然临时删去了有关撤军的承诺。 汪精卫和平运动的设想是建立在日方撤军的基础上，这样的和平运动是有可能得到中国人理解的。日方食言收回撤军的承诺，就使人感到汪精卫等人是无条件地接受日方的“招降”，这就完全毁坏了汪精卫的名声，断送了汪精卫的政治前途。云南省政府主席龙云等人答应声援汪精卫，也是把日本撤军作为基本前提，在日本不撤军的情况下搞“和平运动”，自然要背上汉奸的恶名。龙云等人见日本收回了撤军的许诺，也就不再响应汪精卫的和平运动，因为他们还有退路，不象汪精卫已经离开重庆出国，没有退路了。 日本近卫首相在１９３８年１２月２２日发表的第三次对华声明中，尽管没有提到撤军，但在不要求领土、不要求赔款、归还外国租界、撤销治外法权等方面基本上符合“重光堂协议”，所以汪精卫还是按照重光堂协议的密约，于１９３８年１２月２９日发表了响应近卫声明的“艳电”。但汪精卫万没想到近卫内阁居然在他发表“艳电”５天后的１９３９年１月３日宣布总辞职，由于“重光堂协议”是汪精卫和近卫首相之间的密约，近卫辞职就使汪精卫的和平运动彻底流产。日方的和平运动参加者影佐帧昭等人也不满近卫的做法，影佐说：“近卫竟奇怪地干出这种事，他把汪先生这样的中国元老拉到河内，自己却立即辞职，简直没有一点国际信义。” 答应支持汪精卫和平运动的近卫首相辞职后，汪精卫的和平运动一时间就象断了线的风筝一样没有著落。在国内则是一片谴责声讨汪精卫之声，国民党中常会于１９３９年１月１日召开临时会议，通过了永远开除汪精卫党籍，撤销其一切职务的决议。形势对汪精卫极为不利，汪精卫曾一度产生退出政坛隐居欧洲的设想，但这次和他以前８次光明正大地前往欧洲不同，将被人看作是国家的叛徒逃往欧洲，汪精卫对此计划也非常踌躇。正在此时，发生了高朗街暗杀事件。 汪精卫到达河内后，住在河内郊外一座位于小山上的避暑别墅中。１９３９年１月１６日，在香港的梅思平在路上被数人袭击打伤头部；１月１７日，亲汪精卫的香港《南华日报》社长林柏生在回家途中被两个大汉用斧头砍伤头部，幸亏一个外国船员发现出面制止，林柏生才免一死；１月１８日，在澳门的汪精卫外甥沈次高被人开枪打死。１月２８日，突然有十几个身分不明的人从汪精卫住的山下向上攀登，汪精卫得报后紧急下山。此后汪精卫搬入人口稠密的河内市内的高朗街２７号一幢西式三层洋楼居住，并向法国殖民当局申请保护，但法国当局只是派一个警察在门外象征性地站岗。 １９３９年３月２１日凌晨，四名暗杀者越墙攀上三楼走廊，劈开位于三楼正中的主卧室之门，刺客在黑暗中对准睡在床上的一对男女乱打数十枪，以为汪精卫必死无疑。然而被刺的不是汪精卫，而是汪精卫的秘书曾仲鸣。高朗街２７号洋楼的三楼有四个房间，汪精卫夫妇、汪的女儿汪文惺与女婿何文杰、朱执信的女儿各住一间房，把最好的一间主卧室让给刚从郊外旅馆搬来的曾仲鸣夫妇，没想到这反而送了曾仲鸣的命。暗杀发生前的晚上曾仲鸣曾对汪精卫说：“现在重庆方面正想从肉体上消灭汪先生。先生的身体是属于中国四万万人民的，请千万珍惜。” 曾仲鸣早年留学法国，１９２５年回国后，在广州中山大学任教。同年７月１日国民政府成立时，汪精卫任主席，曾仲鸣任秘书，从此一直相随左右。在枪击中曾仲鸣腹部中了十余弹，其妻方君壁也受重伤。曾仲鸣被紧急送往法国陆军医院抢救，汪精卫要去医院看望曾仲鸣，别人都说现在出门太危险，法国警察也劝汪精卫不要冒险去医院。但汪精卫仰天流泪说：“我是从小看著仲鸣长大的，又为我工作多年，我一定要去看他！”结果汪精卫乘坐曾仲鸣法国朋友的私人汽车到达医院。 当汪精卫到达医院急救室时，曾仲鸣已昏迷多次，他醒来时对汪精卫说：“我能代汪先生死，死而无憾，国事有汪先生，家事有吾妻，我没有不放心的事。”曾仲鸣临死前又挣扎起来，把以他的名义替汪精卫在国外银行存款的支票上一一签了字，为汪精卫尽了最后的一份力。高朗街暗杀对汪精卫来说已是第二次遇刺了，但汪居然又大难不死，亦可谓天意。 曾仲鸣死后汪精卫极度悲愤，亲笔写了悼念曾仲鸣的《曾仲鸣先生行状》，又在３月２７日的《南华日报》上发表了《举一个例》的文章，作为对蒋介石暗杀行为的抗议。汪精卫在《举一个例》一文中，披露了１９３７年１２月６日国防最高会议常务委员会的会议记录，这次会议听取外交部次长徐漠的报告，讨论德国大使陶德曼转达的日方和平条件。陶德曼在南京会见了蒋介石，转达了日本的和谈条件，蒋介石同意以日本的条件为基础进行和谈。汪精卫用这个实例说明：与日本谋和并非自他开始，以蒋介石为首的领导集团早已秘密进行了。 汪精卫在文中责问蒋介石：“主和是大家共同的主张，当时陶德曼大使奔走调停时，南京尚未陷落，蒋介石认为和谈可以进行，那么在近卫发表第三次声明后的今天为什么和谈就不可以进行？而且还要对主和的人横加诬蔑，诬蔑不足，还要夺其生命。再何况，一年多前日本提出的和谈条件十分苛刻，而蒋介石居然说不是亡国条件，同意作为谈判的基础，而今天近卫声明所提出的条件大大让步了，却为什么不可以作为谈判的基础？” 近卫内阁倒台，继任者平沼首相见汪精卫发起和平运动后，西南省份的中国军政要人并没有象预计的那样通电支持汪精卫，因此对汪精卫的号召力和影响力产生了怀疑，但他们忘记了日方食言收回撤军承诺对汪精卫个人威望的打击。在１９３９年最初的几个月里，日本方面对汪精卫相当冷淡。但是河内发生汪精卫暗杀事件后，因为汪精卫毕竟是响应日方的和平号召才到河内的，日方召开了首相、陆相、海相、外相及藏相参加的“五相会议”，研究决定派遣影佐祯昭、犬养健等人前往河内营救汪精卫，帮助汪精卫转移到安全的地方，汪精卫在日本人的保护下到达上海，暂时住在法租界。 在轮船尚未到达上海之时，汪精卫就对影佐祯昭和犬养健说：“到今天为止，我们的方针一直是以国民党为中心组织和平团体，用言论来揭露、指责重庆政府对日抗战的错误，宣传中日和平以拯救中国、拯救东亚，扩大和平运动的阵营，从而使重庆政府改弦易辙。原来设想在西南日军未占领的地区建立一个和平运动基地，但自从我离开重庆后情况发生了变化。现在我的想法也有了改变，我想不如推进百步，索性建立一个和平政府，通过日本政府对中国和平的诚意，用事实来证明抗战已毫无意义，从而促使重庆政府转向和平路线，这样比较适当。” 汪精卫提出建立政府一事大出影佐等人的意料之外。当时日本政府只是吩咐影佐帮助汪精卫建立一个“反共救国同盟会”的民间组织，并没有设想汪精卫在日占区建立政府。所以影佐为难地说：“诚然，这也确是一个好办法。但是事实上我们只是受命专来帮助先生转移到安全的地点而已。关于现在您所说的话，在公务上我没有答复您的资格。不过作为和平运动的同志，我还是发表我的意见。我认为，首先要看日本政府是否彻底实行近卫声明，这是前提条件。假如日本政府在这个态度上有所改变的话，那么先生的这个新建议将会完全失败的。我作为一个日本人说这样的话，不免有些奇怪，但这的确是一个需要慎重行事的事。” 汪精卫说：“我也有同感。比如说，重庆政府还不信任贵国，他们认为日本嘴上说得好听，实际上心中所想的却完全相反。各地希望和平的同志如今踌躇不前，也是出自同一理由。近卫声明是否实行，这是我们和平运动的分歧点。” 犬养健问：“不知汪先生在组织新政府时要向帝国政府提出什么要求？” 汪精卫说：“主要是希望日本政府坚持实行近卫首相的声明，如果不能践行声明，我必将遭到国人的讥笑，认为我是受日本的欺骗而离开重庆的。重庆方面也更不会相信日本政府，认为贵国口是心非，不守诺言。”汪精卫还说：“倘若将来贵国政府要利用我们新政府的兵力，把我们看作日军的一翼，让我们与重庆军队作战的话，势必会引起内战，造成同民族间的流血牺牲，这是绝对要避免的。我们的最终目的，并不是要打倒重庆政府，而是在可能的情况下与之合作。这一点与所谓的反蒋运动有本质的区别。” 汪精卫又说：“对于中国人来说，抗日论也好，和平论也好，都是爱国心的表现，都是以不同的形式热爱国家。从另一方面来说，抗战论总容易让一般的中国人接受。与之相比，和平论几乎就等于卖国论，是很难让人接受的。从现在中国国民的心情来讲，哪怕是内地的一、两个省份因抗战而生存下来，人们也会确信，它将来必定成为国家振兴的根据地。这种主张最容易使血气方刚的中国青年热血沸腾。但是倘若青年们没有这样旺盛的精神，中国的将来和亚洲的将来也就令人担心了。由于这些缘故，在我们和平运动的征途上会遭受到相当的责难，要经常不断地被骂为卖国贼、汉奸，但我已做好挨骂的思想准备。我所盼望的只有一件事，就是日本的政策能按照与我们约定的那样在中国广泛宣传，到那时我们所经历的苦难，才会放射出异彩。我们在那个时候才能与抗日的青年们见面，互相笑著说明以前各自所走的不同的道路。” 影佐祯昭被汪精卫的话深为感动，在他的回忆录《曾走路我记》中，给予了汪精卫最高级的赞词：“汪氏的行动表现出他对支那、对东亚的热爱和赤诚，其崇高的精神、高洁的人格连鬼神都会为之感动。我除了真正地敬服感佩以外还能有什么呢？” 不管怎样，汪精卫提出建立政府的“主动出击”，使日本政府一时感到为难。日本对中国的方针原来是分而治之，因为一个统一的大中国对日本总是一个威胁。日本于１９３７年１２月在华北制造了一个以王克敏为首的北平中华民国临时政府，再于１９３８年４月在长江下游地区制造了一个以梁鸿志为首的南京中华民国维新政府。日本并不打算在日占区建立一个统一的中央政府，所以对汪精卫提出在日军占领区建立政府的计划并不感兴趣。但汪精卫毕竟是中国政坛上的超重量级人物，日方还是认真考虑了汪精卫的建立政府设想。 １９３９年５月２６日，汪精卫在上海召集高级干部会议，研究向日本政府主动提出“建立政府”的计划问题，参加会议的有周佛海、陶希圣、高宗武、梅思平等人。会议经过三天的讨论，拟订出了《关于收拾时局的具体办法》，准备以书面形式提交日方，汪精卫亲赴日本和日方谈判。《关于收拾时局的具体办法》提出：先召开国民党临时全国代表大会，修改党章，重新制定政纲及政策，授权汪精卫组织中央政治会议，负责改组国民政府以及“还都南京”。该文件还规定：在“国府还都”南京的同时，王克敏的北平中华民国临时政府和梁鸿志的南京中华民国维新政府自动取消，并宣布重庆国民政府为非法政府，其对国内发布的法令、对外缔结的条约协定一律无效。 １９３９年５月３１日，汪精卫、周佛海、梅思平、高宗武等十一人，在影佐侦昭和犬养健陪同下秘密飞往东京。日方尽管对汪精卫的来访并没有多大热情，但还是给予汪精卫很高的礼遇，前首相近卫文吕和外相有田八郎亲往机场迎接。为了对外保持秘密，汪精卫被安排住在东京郊外的一所高级私人别墅。对汪精卫的来访，新任首相平沼骐一郎召开政府首脑紧急会议，讨论汪精卫提出在南京组建政府的要求，平沼说：“原来我国政府鼓励汪氏出逃重庆是为了促进重庆政府内部分化而与帝国政府议和，这样战事就可能更加顺利一些。原先我们只是计划在经济上支持汪氏进行和平运动，现在汪氏要求我国政府支持他在南京组织中央政府，这是我们未曾想过的。” 日本政府内部对汪精卫提出建立政府的设想意见很不一致，经过激烈的争论后，日方终于统一意见，同意汪精卫建立新政府。１９３９年６月５日，日本内阁五相会议拟出一个《建立新中央政府的方针》，该方针规定：１、中央政府由汪精卫、吴佩孚、临时政府、维新政权共同组成，吴佩孚主军，汪精卫主政；２、新建中央政府根据《调整日华新关系的方针》与日本建立调整国交；３、中央政府必须具备一定的号召力，成立日期由日本决定；４、中央政府与地方政府的关系，以分治合作为原则；５、关于国民党和三民主义，在不妨碍亲日、满和反共的原则下，可允许存在。日方以《建立新中央政府的方针》为原则和汪精卫进行谈判，但日方的建立政府方针和汪精卫的建立政府设想相去甚远。 ６月１０日，汪精卫首先与平沼首相会谈，但没有什么实质内容。第二天与陆军大臣□垣的会谈，是这次谈判的最主要重头戏。□垣先提出陆军不赞成汪精卫在南京建立政府的意见，□垣说：“难道除了南京，汪先生没有考虑设法在其它地方建立新政权吗？譬如在皇军占领区以外。”汪精卫回答说：“原来我也是这样考虑的，只是形势发生了变化，才作出还都南京的决定。”□垣又说：“南京已经有了维新政府，再由汪先生建立一个新政府，不是好办法。”汪精卫回答说：“我们不说在南京建立新政府而是说还都南京。因为国民政府原在南京，重庆被称为陪都。还都能使重庆方面产生一种冲击力和向心力，使国内一切爱好和平之国民思和之心凝聚于故都南京。南京和平政府将是一个独立自主的中央政权，目前北平和南京的临时、维新两个政权应加以撤销，或自行解散，使之在中央政府统一领导下。”□垣听后反论说：“分治合作是五相会议决定的原则，临时、维新两政府经过与汪先生协商可以考虑废除名义，但不能取消其内容及已形成的事实。”汪精卫则反论说：“阁下的意思似乎与五相会议提出的内政问题交给中国方面的原则有了距离，如果只废除临时、维新两个名称而照旧保留其实体，要我出来收拾时局实感困难。因为中央政府有名而无实，势必会发生中央与地方之间的权限之争。这样的中央政府实在不是我们所设想成立的独立自主政权，如果阁下要坚持，我只有退让或延期组织政府。”最后□垣作出一些让步，说只要汪精卫能够说服王克敏、梁鸿志自愿放弃政府，日方也不反对。 日本原指望汪精卫在日军占领区之外建立政府，分化瓦解中国的抗日力量。至于在日军占领区之内建立傀儡政府，王克敏、梁鸿志这样的人更加可靠。平沼内阁对汪精卫的建立政府计划很不积极，所以汪精卫这次秘密访日并没有太大收获。汪精卫回国后，曾走访王克敏、梁鸿志，试图说服两人同意放弃地方政府，支持成立统一的中央政府。但王、梁两人均支支吾吾，没有表示出愿意放弃地方政府的意思，这样汪精卫在日占区建立政府的计划又濒临死路。 汪精卫在河内发表“艳电”时，吴佩孚曾表示支持汪精卫的和平运动，吴给汪去信说：“中日辅车相依，为友为敌，利害本昭然，但目前危亡抗战之中，更须化敌为友，因有史以来，从无久战不和之理。故自芦沟桥变起，身居故都，一直以启导和平为信念。”但汪精卫到北平约见吴佩孚时，吴佩孚态度很傲慢，结果会谈没有实现，不过不久吴佩孚忽然急病而死。 １９３９年８月，平沼内阁倒台，原陆军大将阿部信行出任首相。阿部上台后，开始积极支持汪精卫，同意取消临时、维新两个政府而由汪精卫领导成立一个统一的中央政府。１９４０年３月３１日，汪精卫才正式“还都南京”，在日占区成立了一个统一的“国民政府”。 如果说日本人扶持汪精卫在日占区成立一个傀儡政府，倒不如说这个傀儡政府是汪精卫尽力“争取”而来，而且是来之不易。日本人一方面怀疑汪精卫搞和平计划是中国人的诡计，试图以此来缓解日本的军事压力。另一方面，日本也怀疑汪精卫等人对日本的忠诚，尽管重庆开除了汪精卫等人党籍职务，但汪等原国民党人与重庆国民政府的高级官员仍有各种难于切断的千丝万缕联系，日本人担心汪精卫等人会在关键的时候反叛，会把日本的军事机密传递给重庆。事实上抗战期间重庆政府正是通过汪精卫政府获得了大量的军事情报。 日本人要在日占区建立一个傀儡政府，最重要的考虑之一就是傀儡政府对日本的忠诚可靠程度。从这方面来讲，王克敏、梁鸿志等人显然比汪精卫更加可靠。日本从刚开始就没有考虑过让汪精卫在日占区成立政府，只是希望汪精卫在日军未占领区成立政府。多亏影佐侦昭等和平运动发起人尽力奔走，向日本领导层说明汪精卫的诚意，最后日方才同意汪精卫成立政府的要求。 汪精卫本来性格清高，对金钱权力看得并不是很重，自动放弃了多次争夺权力的机会。但这次汪精卫却一反常态，竟然“别人不请我自来”，争著在日本人手下作一个傀儡政府的领导人，让人感到有些不可思议。难道汪精卫真是出于一种责任感，怕别人“卖国”把国家卖完，自己亲自来搞有限度的卖国？汪精卫的确说过：“别人去送国还不如我汪某去送。别人送国是没有限度的，而我送国则有限度，不能让他们把国都送完。” 不过从另一方面来看，汪精卫也许因为被人们所误解而难过。蒋介石不采纳他的和谈建议，他不得不出走重庆，在中国人的土地上建立一个新政府，和日本达成和平撤军的协议，救百姓于战火之中。这本来是一个可行的计划，他本人也不会因此被人们耻为卖国求荣的汉奸。可是没想到日本人临时变卦，收回了撤军的承诺，把汪精卫推进了汉奸的行列。 对此汪精卫是有苦难言，在当时他无法向别人解释清楚他离开中国是被日本人欺骗了。如果汪精卫隐遁欧洲，等于默认他干了卖国之事而出逃欧洲。汪精卫想干点什么事来进行挽回，因此汪精卫才迫不及待地要建立一个政府，想作一些对中国有益的事来改变人们对他的看法，澄清人们对他的误解。可是汪精卫的努力反而起了相反的作用，越陷越深，越洗越黑。政治仕海险处丛生，一步走错，当年最让人尊敬的革命老英雄就变成最大级的卖国贼。 不过从客观来看，在１９３９、１９４０年时，德意日的势力正如日中天，很多人都认为德意日要夺取世界领导权，至少要平分世界。假如当时日本和德国联手首先打败苏联，逼和英美，中国的命运就很悲惨了。如果历史真的走到这条路上，没有汪精卫在敌占区成立的统一中央政府，中国就要被分裂成几个国家了。 第三部分之六：短命的南京政府 １９３９年８月，日本平沼内阁倒台，８月３１日阿部信行陆军大将的新内阁成立。阿部首相在上台后的第二天发表声明，声称处理中国事变是日本外交政策的核心，转变了以往对中国“分而治之”的方针，表示支持汪精卫成立中央政府，迅速处理中国事变。１９３９年９月１５日，日本参谋本部起草了《以建立中央政府为中心处理事变的最高方针》，声称：“建立新中央政府的工作，其实质包括促成重庆实现停战，以及吸收重庆的军力和财力”。 阿部首相的新方针使汪精卫在日占区建立中央政府的计划成为可能。汪精卫在策划新政府的同时，也展开了各种宣传活动。汪精卫在“我对中日关系的根本理念和前景目标”的广播讲话中，提出了中日间“结怨不如解怨”的看法，汪精卫说：“现在中国面临两条道路，一条道路是把蒋介石先生等人夸口的抗日战争继续下去，但我实在看不出重庆有取得抗战胜利的军事力量，抗战的结果只能使共产党受益；另一条道路是继承孙中山先生的遗志，朝化敌为友、解怨的方向努力。前者是中国走向亡国之路，后者是中国走向复兴之路，也是亚洲走向复兴的道路。我决心选择后者的道路，也希望全国各党派和无党派的有志之士加入我们的行列。” １９３９年１０月１日，汪精卫在日本的《中央公论》上发表一篇《寄语日本》的文章，试图警告那些热衷于侵略中国的军国主义分子。汪精卫在文章中说：“侵略主义和共产主义都是我们可怕的敌人。中国人都知道日本正在排除共产主义，却不知道日本排击侵略主义。在中国人看来，日本也是一个侵略主义者，而且对中国的侵略最甚，中国人把“东亚共同体”、“东亚新秩序”看成是灭亡中国的代名词。如果日本有灭亡中国的企图的话，中国就不得不和共产主义势力联合起来反抗日本。这虽然无异于饮鸠止渴，以暴易暴，而且是暴中之暴，但也是无可奈何。” １９３９年１０月，日本兴亚院起草了一个《日华新关系调整要纲》，以此作为与汪精卫谈判成立中央政府的基本条件。所谓“兴亚院”，是日本政府于１９３８年７月成立的一个专门处理中国问题的部门。兴亚院提出的《日华新关系调整要纲》，包括《调整原则》、《调整要项》、《调整要纲附件》，比起前首相近卫文吕去年宣布的“善邻友好、共同防共、经济提携”三原则有很大的倒退。《要纲》把中国划分为东北、内蒙、华北、华中、华南五种地带或五个层次。最深的一层是“满洲国”，第二层是“蒙疆自治政府”（１９３９年９月，在日本的策划下，蒙古的德王在张家口成立了“蒙疆联合自治政府”），第三层是华北，第四层是华中，第五层是华南。《要纲》对这五个层次采取不同的政策。 对于东北，《要纲》要求中国承认“满洲帝国”，使东北从中国完全独立出来；对于蒙疆地区，《要纲》要求中方同意“特别设定军事上及政治上之特殊地位”，在中国的名义主权下实行自治；对于华北地区，《要纲》要求成为“日满华高度结合地带”，日本在“高度结合地带”实行“防共驻兵”；对于华中和华南地区，《要纲》称恢复和平后，日军将从这些地区撤军，但要让日本军舰在“长江沿岸特定地点及华南特定岛屿驻屯停泊”。《日华新关系调整要纲》的“附件”中，把蒙疆地区解释为长城（包括长城）以北的地域”，把华北地区解释为长城（不包括长城）以南的河北省、山西省和山东省。 日方的“和平运动人士”对兴亚院的《日华新关系调整要纲》也感到不满。影佐帧昭说：“如果以此方案为基础与汪先生谈判，就会使人怀疑日本政府的信义。即使汪先生接受了这个条件，和平运动也不会成功”。犬养健说：“除了《日华新关系调整要纲》，还有附件等八件，好比一座大山压在汪先生身上，怎么能使他开展国内的和平运动呢？又怎么能使他得到中国民众的信任呢？” 汪精卫看了影佐送来的兴亚院《要纲》后大失所望，《要纲》的内容不仅与他向日本提出的要求相距甚远，而且大大超过了上海重光堂协议的范围，也违反了近卫第三次声明的精神。汪精卫考虑再三，还是准备在这个基础上进行谈判。汪给影佐回信说：“尊函及日华关系调整拟订方案已收到，似与近卫声明宗旨相当差异，颇以为憾。但对此拟订方案为基础进行谈判，则无异议。谈判委员以周佛海为主任，梅思平、高宗武、陶希圣、周隆庠为委员。希肝胆相照，和睦相处，以审拟东亚问题。” １９３９年１１月１日，以周佛海为首的汪方代表开始与日方代表举行秘密谈判。汪方要求谈判以近卫声明、上海重光堂协议和东京谈判的三个文件为基础，表示很难接受上述三个文件中所没有的东西，而日方则态度强硬，坚持《要纲》的方针。由于双方一度争执不下，只好中途休会。汪精卫听完陶希圣的谈判汇报后，流著泪说：“日本如能征服中国，就来征服好了。他们征服不了中国，要我签一个字在他的计划上，这种文件说不上什么卖国契。中国不是我卖得了的，我若签字，就不过是我的卖身契罢了。” 汪精卫当时思想也有犹豫，准备搬到上海法租界的私宅暂住，发表声明停止和平活动。影佐得知汪精卫准备打退堂鼓后，赶紧去见汪精卫，汪精卫对影佐说：“很感谢诸位对谈判的成功所作的努力。但这次日方提出的原案，和近卫声明的宗旨相差太远，我们无法让步，而你们如果让了步也无法向日本政府交待。现在我们是在讨论一个不可能的问题，所以我认为不如停止谈判，撤回建立新政府的设想。” 影佐一边听汪精卫的谈话一边笔记，当他听到汪最后一段话时，两行眼泪竟掉落到笔记本上。影佐说：“我协助汪先生迁居，并请法租界布防。但我认为汪先生放弃新政府的计划还为时尚早。正如您所说的那样，谈判进展非常困难。这个原案表面上虽然强硬，但并不是没有交涉的余地，我们也不明白日本政府最后的打算是什么。我将立刻回东京交涉，请先生暂时留下来等候我的消息。” 汪精卫认为影佐还是有诚意的，于是留下来等待影佐的消息。影佐回到东京后，向陆军大臣等人汇报了谈判情况，并说明了汪精卫的立场，希望日方能作出适当的让步。１１月下旬，影佐从东京返回上海，可是并没有带回满足汪精卫要求的让步。１２月双方的谈判再开，日方同意在协议书上附加一份《绝密谅解事项》，其中加入汪精卫的一些要求。 日方的让步之一是把日本在华驻军分为防共和治安两类，前者驻军的区域规定为蒙疆，以及正大铁路以北的晋、冀北部及胶济铁路沿线地区，后者的治安驻军则另行协定，其余地区的日军在和平恢复后两年内撤退完毕，但并没有说明什么时候才算恢复和平。另外日方同意取消向汪精卫政府派遣中央政治顾问，改为聘请日本军事顾问。 虽然日方的让步很有限，汪精卫最后还是决定忍辱接受日方的条件成立中央政府。与以前国民党副总裁的身分相比，现在汪精卫的身价已跌为一个被政府通缉之人，不再有太多讨价还价的资本了。１９３９年１２月３０日，周佛海代表中方在协议草案上签字，周佛海解释说：“弱国无外交，现在我们暂时失去了某些主权，一旦新政权建立后，经过和平建设，国势日盛，到那时我们再与日方交涉来废除有关的条约和协定也不是不可能。” １９４０年３月２０日，新政府在南京宣布成立。这天是个晴朗的日子，南京市的市民在警察的引导下，各家都挂出了青天白日满地红的国旗。日本本来主张新政府使用以前北洋政府时代的五色旗，因为青天白日满地红的国旗和重庆方面的国旗一样，容易造成混淆敌我。但汪精卫坚持用国民党的这个国旗，最后双方达成妥协，在国旗下增加一个写有“和平、反共、建国”字样的黄色三角巾。南京市民们看到以前的国旗又飘扬在街头心里确有几分高兴，但看到国旗下的黄色三角巾心里又有几分酸楚。这天还发生了日本兵枪击国旗事件，因为中日开战以来前线的日本兵一直对著这个旗帜而战，很多日本兵在这个旗帜面前倒下，现在这面旗帜突然在他们面前升起，使不少日本兵在感情上一时接受不了。 １９４０年４月２６日，新政府在南京举行“还都”仪式。此时日本的阿部信行内阁已经倒台，１９４０年１月１６日成立了米内光政内阁。前首相阿部信行作为特使，和日本众议院议长、贵族院议长、以及日军总参谋长等要人出席了还都仪式。仪式在国民政府大礼堂举行，里面挤满了文武官员和前来祝贺的市民，文官身穿中式礼服，武官身穿军装，但大家的脸上都没有表现出还都的兴奋。大礼堂里人头攒动，却是一片肃静，偶尔还传来低声的叹息声甚至哭泣声。汪精卫宣读完《还都宣言》后，不禁流出了两行热泪，周佛海和影佐帧昭也落下了眼泪。 汪精卫的中央政权建立半年后，在以前密约的基础上又进行了一次谈判，签订了公开的《华日基本条约》。１９４０年１１月３０日在南京举行《华日基本条约》签字仪式，汪精卫以行政院长的身份出席签字。汪精卫身穿礼服站在礼堂的石阶前，等待日方特使阿部信行到来时，眼泪忽然忍不住夺眶而出，沿著双颊一滴滴流下。突然他以双手抓住自己的头发，用力地拔拉，鼻子里不断发出了“恨！恨！”的声音。这时军乐声响起，汪精卫身旁的翻译周隆庠悄声提醒汪精卫说：“先生，阿部大使来了。”汪精卫这时才恍然从梦中醒来一般，周隆庠用手帕替汪精卫拭去泪水，用梳子梳整一下汪的头发，此时汪精卫的脸上重新浮现出一丝微笑，走下台阶迎接阿部特使。 汪精卫政府成立后的第一大任务，就是诱招重庆政府的军政要人加入他们的“曲线救国”行列。这个诱招行动虽然没有很大的成果，但也并非一事无成。到１９４３年８月，投奔汪精卫的重庆政府官员有国民党中央委员２０人，高级将领５８人，军队５０余万，这些人都是不满蒋介石的政客和被蒋介石排挤的地方杂军。但１９４３年８月以后，日本的败色已浓，就再也没有人投奔汪精卫政府了。 汪精卫政府的第二大任务是建军。汪精卫深感以前没有自己军队的苦恼，决心组建一只自己的军队。只要有了军队，有了实力，他的政府才能摆脱傀儡政权的地位，日本也无法对他随心所欲地控制。汪精卫效法孙中山办军校的方法，主办起“中央军政干部训练团”，由中央军委直接领导，汪精卫亲自兼任团长，陈公博兼任教育长，周佛海兼教务长。训练团的对象是收编的投奔他们的地方杂军，训练以三个月为一期，自上而下，一直训练到排长为止。汪精卫的国民政府最多时曾有军队百余万，但在短短的一两年时间里汪精卫还得不到军队的绝对效忠，１９４３年日本显出败色后，许多投奔汪精卫的军队又转投蒋介石。另外日本对汪精卫的建军也十分警惕，所以汪精卫的建军计划成果也不明显。 汪精卫成立政府后比较成功的一件事就是“清乡”。所谓“清乡”就是清除国民党残军，共产党新四军在乡村中的势力，建立起汪精卫政府统治的末端机构。经过１年多的时间，完成了江苏、浙江、安徽三省的清乡工作。以往日军是在秋收的时候出动军队武力收缴粮食，不但引起很大的民愤，而且收缴到的粮食也不多。汪精卫政府在“清乡”地区改为政府出面征收粮食，结果日占区百姓渡过了没有日军侵犯骚扰的安稳的一年。 １９４１年１２月８日，日军偷袭美珍珠港，太平洋战争爆发。不少人以为日本向美国宣战是丧失理智的疯狂行为，其实日本对美开战也是有国民感情为基础的。 日本在历史上就一直处于人口非常过剩的状态，对外移民是日本解决巨大人口压力的一个好办法。由于美国是最富有吸引力的移民国家，１９世纪末日本开始了移民美国的热潮，大量日本人纷纷移居美国。然而日本移民在美国却受到严重的种族歧视和迫害，当时美国的很多州规定禁止“有色人”拥有土地，许多在美国出生的日本移民的二世、三世，虽然已成为地道的美国公民，但仍然被禁止拥有土地，只能从事低贱的职业。 当时中国移民在美国也同样受到严重的种族歧视和迫害，但中国政府向来不对自己的人民负责，对自己的同胞被外国人迫害充耳不闻。而日本政府却是一个负责任的政府，日本就美国歧视迫害日本侨民的问题提出了抗议。于是美国开始制定限制日本移民的“排日移民法案”，１９２４年美国制定了“关于移民问题的宪法修正案”，事实上完全禁止了日本向美国的移民。 当时美国对来自欧洲的白人移民完全没有人数限制，但是从１９２４年到１９４５年日本投降，美国没有批准过一个日本人移民美国。这明显是对日本人、以及亚洲有色人种的歧视。当时美国的“排日移民法案”，在日本引起了很大的民愤，国内反美情绪高涨，使日本的亲美派陷入了穷地，刺激日本走上了狂热民族主义的道路。这是日本偷袭珍珠港的远因。 造成日本对美开战的直接原因是美国的石油禁运。当时日本９０％以上的石油依赖美国进口，在依赖飞机军舰坦克的现代化战争中，只要美国切断日本的石油供应，日本必然陷入不战自败的困境。据近年的一些资料显示，美国的美孚石油公司在１９２０年代就发现了中国的大庆油田。但美国政府却不让美孚公司公布这个发现，反而让美孚公司对外宣称在中国东北没有找到石油，还装模作样地提出一个“中国贫油论”的理论，把中国的石油判了死刑。 当时日本为了摆脱石油被别人卡脖子的窘境，也在中国东北勘探寻找石油，但凡是美国人勘探过的地方日本人就不再去勘探了，他们相信在美国人勘探过的地方真的没有石油。日本人万万没有想到美国人会骗他们，真相信了“中国贫油论”，没有继续在东北勘探石油。如果日本人发现了中国东北的大庆油田，日本也很可能不会因为美国禁运石油而去偷袭珍珠港，第二次世界大战的历史就要改写。后来日本人知道美国人欺骗他们时，感叹输给美国人输得心服口服，美国人战略眼光的高明真是没话说。 太平洋战争爆发后，汪精卫提出代表中国向英美宣战，并向日本提议南京政府派兵到太平洋前线与日军共同作战。汪精卫向日本提出此项建议的目的主要是为南京政府建立一只强大军队找理由，但是日本并没有同意汪精卫的参战计划。日本人毕竟对南京政府的忠诚持有疑虑，帮南京政府建立起强大的军队后，中国人会不会把枪口掉过来对准自己？ １９４２年以后日本在太平洋战线上投入了主要兵力，在中国战场上已捉襟见肘。南京政府也看出日本的窘境，逐渐采取强硬的态度，要求日本交还主权，扩大政府力量。１９４２年９月２２日，汪精卫向访问南京的日本特使，前平沼骐一郎提出了强化南京政府建议，汪精卫在建议中要求日本不要继续干涉南京政府的行政和经济。１９４３年１月９日，南京政府与日本签订了《租界返还和废除治外法权》，将英法租界和日租界返还中国。１９４３年２月２日，汪精卫发出主席令，撤除国旗上“和平、反共、建国”字样的黄色三角巾，使国旗恢复了原来的模样。１９４３年１０月３０日，南京政府和日本重新签订了《华日同盟条约》，大大改善了１９４０年签订的《华日基本条约》中的主权丧失部分。 虽然汪精卫利用太平洋战争大大改善了南京政府的地位，但如果日本战败，汪精卫的努力将一切付之东流。１９４３年以后，日本已露败迹，南京政府的官员也感到忧心忡忡，一旦日本败战，他们的出路在哪里？周佛海等不少高官开始暗地里和重庆方面取得联系，为自己准备一条退路。 蒋介石的重庆政府和毛泽东的中共也对汪精卫政府十分注目。俗话说：“两湖熟，天下足”，汪精卫南京政府正是占据了中国最富庶的地带，和上海这个最大的国际都市。日本战败后，南京政府投向重庆和延安的哪一方，就会大大增加该方的力量。蒋介石通过周佛海等旧部下拉拢南京政府，毛泽东也试图和汪精卫接近。１９４３年３月７日，中共代表冯龙在上海与周佛海秘密接触，冯龙说他是受中央军事委员会副主席刘少奇的直接指派，中共知道这件事的只有毛泽东等最上层三、四人，但中共和南京政府的交涉似乎没有什么成果。 １９４３年８月，汪精卫的健康开始恶化。１９３５年遇刺时留在背部未取出的子弹造成的隐患，使汪精卫经常感到背部、胸部及两肋的剧烈疼痛。１１月２１日，日本政府派内科专家黑川利雄教授到南京为汪精卫检查身体。汪精卫希望将体内的子弹取出，但黑川认为还是保持现状，不取为好。黑川走后汪精卫的病痛日益加剧，又请南京日本陆军医院院长后藤治疗。后藤认为病痛是由于子弹压迫神经所致，认为非取出弹头不可，并保证手术能够成功。汪精卫同意施行手术，１２月１９日后藤亲自主刀为汪取出了子弹。 但手术后汪精卫的病情突转恶化，体温上升，下肢麻痹。１９４４年元旦以后，汪精卫已不能从床上坐起。１９４４年２月，日本政府再派黑川到南京为汪诊治，黑川认为弹头取出后汪的两腿才变得麻木，是脊椎压迫神经所致，形成“多发性骨髓肿”。“骨髓肿”是一种外伤引起的疾病，没有有效的医治方法，死亡率高达９０％。黑川建议汪精卫前往日本，用其先进设备为汪治疗。３月１日，名古屋帝国大学的日本神经外科医学权威斋藤真教授奉首相东条英机之命，到南京为汪精卫会诊。斋藤会诊后同意黑川的诊断，认为汪有必要到日本进行治疗，宜早不宜迟。 １９４４年３月３日，汪精卫在陈壁君及其子女的陪同下，乘专机去日本就医。临行前汪精卫召集陈公博、周佛海到病床前召开会议，并写下手书：“铭患病甚剧，发热五十余日不能起床，盟邦东条首相派遣名医来诊，主张迁地疗养，以期速愈。现将公务交由公博、佛海代理，但望早日痊愈，以慰远念。兆铭。” 汪精卫飞抵日本后，住进了名古屋帝国大学医院的特别病房里。汪精卫的住房除了极少数高级医务人员知道外，其他人员毫不知情。３月４日，名古屋帝国大学附属医院组织黑川利雄、斋藤真等八名教授对汪精卫进行会诊，再一次确诊为因子弹头在体内过久，诱发成为多发性骨髓肿，第四至第七胸椎骨的肿胀已由背部向前胸扩散，严重压迫脊髓神经。会诊结束后，斋藤亲自主刀对汪施行“椎弓切除”，切除左右胸背骨七片，以缓解汪精卫的疼痛。手术后，汪精卫感觉尚好，失去知觉两个月的双腿也恢复了知觉。 但到１９４４年９月，汪精卫的病势又开始恶化。汪精卫问主治医生黑川教授：“请坦诚地告诉我，我的病能治好吗？如果治不好的话，我想回中国。”黑川说：“请放心，我保证一定能治好。”这当然是医生经常用来安慰病人的话。１９４４年１０月，汪精卫的病势转危。日方得知汪精卫病危后，不少高官前来探望，病房中摆满了垂危病人不可能下咽的水果和点心等慰问品。 １１月８日，美军对名古屋进行大规模空袭，医院将汪精卫转入地下室。因地下室没有暖气设备，非常寒冷，汪精卫因此得了肺炎。次日汪精卫体温高达四十度，呼吸困难。１１月１０日午后，病房中传来汪夫人陈壁君的大声呼叫。黑川教授赶入病房，见汪精卫浑身颤抖，痛苦不已。黑川握住汪精卫的手查看脉搏，汪精卫吃力地说：“我要回中国……”，这成了汪精卫最后的话。 １９４４年１１月１０日下午４时２０分，汪精卫停止了呼吸。汪精卫去世后的第二天，日本现任首相小矶、前首相东条英机和前首相近卫文吕等人赶到医院向汪精卫的遗体告别。特别是前首相近卫在汪精卫的遗体面前默默站立了一个多小时，汪精卫今天的下场可以说是近卫一手造成的，也许他感到有些内疚。汪精卫的遗体于１１月１２日由专机运回中国，小矶首相、近卫等人前往机场为汪精卫的遗体送行。 汪精卫生前酷爱梅花，曾把南京的市花定为梅花。汪精卫在名古屋大学养病时，曾赠送名古屋大学纪念红梅树苗株，种在病房前，现在还有两株尚存。汪精卫死后葬于南京郊外的梅花山，蒋介石还都后将汪精卫的坟墓炸毁，遗体烧却。 第三部分之七：汪精卫死后南京政府的结局 汪精卫于１９４４年１１月１０日客死于日本名古屋，他的遗体于１１月１２日由专机运回中国。汪精卫死后，南京国民政府专门成立了哀典委员会，由陈公博任主任委员，周佛海、王克敏、褚民谊为副主任委员。南京政府于１１月１２日发出公告：“国民政府汪主席于民国三十三年十一月十日申时，在日本名古屋帝大医院逝世，距生于民国纪元前二十九年五月四日已时，享寿六十有二，谨于十一月十二日恭迎遗体回国成殓，择期举行国葬，饰终典礼，由国民政府会同中央党部组织哀典委员会敬谨办理。” １１月１２日下午六时，装载汪精卫遗体的专机降落在南京光华门外机场、陈公博、周佛海、王克敏等一百余名官员到机场迎候。南京政府按照汪精卫生前的遗愿，把汪的陵墓建在国父孙中山陵墓左侧的梅花山上，表示他生前是孙中山的助手，死后也要追随左右。由于汪精卫生前有过陵墓不要劳民伤财的遗嘱，加上南京政府的财政有限，所以汪精卫陵墓的规模不大。不过汪精卫的棺木外面用钢筋混凝土浇灌了厚厚的一层墓壳，倒是十分坚固。 汪精卫死后，南京政府推举陈公博为国府主席，继任行政院长及军事委员会委员长，但陈公博坚持在最高职务上加个“代”字，陈公博说：“现在汪先生走了，人亡政息，这台戏也该结束了。我来继承汪先生的职位，是来办理收场的，而不是来继续演出的。”此时日本的败局已定，南京政府也处于风雨飘摇之中。 １９４５年８月１５日，日本宣布无条件投降。８月１７日，陈公博在南京主持召开中央政治会议，决定解散南京国民政府，把中央政治会议改为南京临时政务委员会，军事委员会改为治安委员会。当晚，陈公博广播发表了《国民政府解散宣言》，至此，历时５年４个月的短命政权宣告结束。 陈公博解散南京政府后，向日本方面提出到日本避难的意愿。此时日本已投降，但还是安排让陈公博、林柏生、周隆庠等人于８月２５日秘密飞往日本。陈到日本后，化名东山公子，隐居于京都郊外的金阁寺。但不久陈公博等人潜居日本的消息泄露，中国政府向日本提出将陈公博等人引渡回国的要求，作为战败国的日本只得无条件答应中国的要求。日本前首相近卫文吕得知陈公博要被引渡回国，匆匆赶到金阁寺和陈公博道别，近卫说：“实在对不起。。。“，陈公博倒爽快地回答说：“大家都是为了自己的国家和民族，说不上谁对不起谁。” １９４５年１０月３日，陈公博一行７人被引渡回中国受审。１９４６年４月４日，江苏高等法院开庭审讯陈公博。陈公博对指控他的汉奸罪表示不服，在法庭上为自己辩护说：“我认为抗战应该，而和平是不得已。平心静气去想想，当日汪先生来京之时，沦陷地方至十数省，对于人民只有抢救，实无国可卖。在南京数年为保存国家人民的元气，无日不焦头烂额，忍辱挨骂，对于个人只有熬苦，更无荣可求。到了今日，我们应该念念汪先生创立民国的功勋，念念他的历史和人格”。１９４６年４月１２日，法庭判决陈公博死刑，于１９４６年６月３日执行。临行前，陈公博要求向陈璧君告别。在陈璧君的囚室外，陈公博向陈璧君深深鞠了一大躬，双手捧上自己用过的一把茶壶，说：“夫人，我先随汪先生去了。牢中别无长物，一把茶壶，权做留个纪念吧！” 陈璧君被捕后，更是表示坚决不服罪。１９４６年４月１６日江苏高等法院开庭审讯陈璧君，陈璧君在法庭上说：“日寇侵略，国土沦丧，人民遭殃，这是蒋介石的责任，还是汪先生的责任？说汪先生卖国？重庆统治下的地区，由不得汪先生去卖。南京统治下的地区，是日本人的占领区，并无寸土是汪先生断送的，相反只有从敌人手中夺回权利，还有什么国可卖？汪先生创导和平运动，赤手收回沦陷区，如今完壁归还国家，不但无罪而且有功。”法庭最后判处陈璧君无期徒刑，陈璧君接到判决书时却说：“本人有受死的勇气，而无坐牢的耐性，所以希望法庭改判死刑。” 陈璧君个性十分刚烈，汪精卫在日本治病时，陈璧君一直伴随汪身旁，但从来没有对日本人说过一句感谢的话，日本人对她也很发怵。１９４９年共产党夺取大陆后，蒋介石并没有把陈璧君移往台湾，而是把陈留给共产党。１９５２年，和陈璧君私交很深的孙中山夫人宋庆龄和廖仲恺夫人何香凝，去监狱探望陈璧君。１９１２年汪精卫和陈璧君结婚时，何香凝还曾作过陈璧君的伴娘。宋庆龄和何香凝告诉陈璧君，中央已经决定，只要陈璧君承认汪精卫有罪，写一篇悔过书就可以释放出狱。陈璧君却立即拒绝：汪精卫无罪。她宁可坐牢，也不承认汪精卫有罪。１９５９年６月１７日，６８岁的陈璧君死于监狱中。 与陈公博相比，周佛海要随机应变得多。早在日本呈现败迹时，周佛海就暗自与重庆联系，为自己留好了退路。当年汪精卫与日本密谈基本上是周佛海一手包办，陈公博不仅没有参与，而且还表示反对。最后汪精卫组建政府时，陈公博感到汪精卫正值用人之际，出于与汪精卫的私人情谊才接受了汪精卫的邀请，到南京政府任职。如果论“卖国罪”的话，与日本签定密约的周佛海，显然要大于没有参与密约的陈公博。但最后周佛海却比陈公博罪轻一等，只判了一个无期监禁，而官职比周佛海小得多的林柏生、梅思平等人都判了死刑，可见当时的汉奸审判亦不公正。 尽管蒋介石抗战后成为中国的民族英雄，但蒋介石在抗战时期也多次和日本进行过秘密和谈。除了抗战初期德国大使陶德曼的调停外，１９３９年１２月蒋介石密令戴笠手下的军统特务曾广冒充财政部长宋子文的弟弟“宋子良”，在香港与日方举行秘密谈判。日方对此会谈十分重视，要求继续举行高级别的谈判。１９４０年３月７日至１０日，双方在香港举行了高级别的秘密会谈，中方代表除了假“宋子良”外，还有重庆行营参谋处副处长陆军中将陈超霖，最高国防会议主任秘书章友三，副侍从长陆军少将张汉年。 会议开始时，日方出示了陆军大臣的证明书，而中方陈超霖、章友三两人只出示了最高国防会议秘书长张群的证明书，却没有蒋介石的证明书，说明蒋介石不愿直接承担和谈的责任。但陈超霖说蒋介石亲自过问此事，并在他离开重庆前，特别嘱咐他三件事：（一）必须取得日本撤兵的保证；（二）明确日本的条件；（三）会谈在秘密中进行。日方答应考虑蒋介石的撤军要求，但提出了几项撤军条件：（一）原则上承认伪满洲国；（二）放弃抗日容共政策；（三）以密约规定日军在内蒙及华北若干地区驻军防共；（四）停战后与汪精卫一派合作。 据参加会谈的日方代表今井武夫在回忆录中透露，这次会谈争论的中心是满洲国的承认问题、撤军问题、以及与汪精卫合作的问题。重庆方面表示：“满洲问题中国原则上同意考虑，但方式如何另详商议”；“关于撤兵问题，日本应将在华军队尽快全部撤退，不得另找借口延迟撤退（撤兵步骤另细订）；“关于汪精卫问题，纯属中国内政问题。在恢复和平后，根据汪氏与国民党的历史关系，中国将适当处置，无须提为和平条件之一。”但后来重庆方面表示在承认满洲国问题上政府内部意见对立，要求会谈延期。后来重庆方面一拖再拖，谈判也就不了了之。 １９４３月１１月２３日，美国总统罗斯福、英国首相丘吉尔和蒋介石在开罗举行会议，会后发表的《开罗宣言》中声明三国将联合向日本侵略势力作最后的反攻，在战争胜利后，把中国东北、台湾和澎湖列岛归还中国。但１９４５年２月美、英、苏三国首脑在雅尔塔举行制定最后对日作战方针的最高会议时，却没有邀请蒋介石参加。１９４５年８月，美、英、苏三国发表敦促日本政府立即无条件投降的《波茨坦公告》时，竟然也没有邀请中国这个对日作战最久的国家一起敦促日本投降。这些使蒋介石感到一种屈辱感，也是弱国无外交的另一种表现。 不过蒋介石又对美英苏三国不邀请中国参加最后对日作战方针会议表示担心：三国是不是准备出卖中国的利益对日讲和？蒋介石最怕日本与三国进行有条件投降的谈判，把保存汪精卫政府作为日本从中国撤军的条件。另外蒋介石也担心苏联对日宣战，出兵中国战场和日军作战，这样中国就要成为共产党的天下了。在担心被美英出卖和担心苏联出兵的情况下，蒋介石通过地下渠道，派南京政府的考试院副院长缪斌赴日与日本秘密谈判单独讲和。缪斌表面是汪精卫的人，背后却又是蒋介石的人。１９４５年３月，缪斌受蒋介石的重托，化名“佐藤”来到东京，开始了“佐藤工作”。日本对这次谈判非常重视，当时的首相小矶国昭亲自领导与缪斌的谈判。 中国方面提出的与日本单独讲和的条件是：日本从中国全面撤军，解散南京政府和取消满洲国国号，中国即可与日本单独签署和平条约。小矶首相对中国的方案很感兴趣，有意接受中国的条件。当时日本正准备进行本土决战，如果能和平体面地解决中国问题，把几十万大军撤回日本，可以有效地解决兵员不足的问题。此外和中国单独讲和还有助于瓦解同盟国阵营，在外交上也是一大胜利。但日本的军部却极力反对与中国单独讲和，小矶首相最后遗憾地说：“错过这次机会，百年以后都要后悔。” 抗战胜利后，缪斌被作为汉奸逮捕。缪斌本以为他很快就会被无罪释放，但不久却传来了尽快执行死刑的命令。缪斌于１９４６年５月２１日被处决，比“第一汉奸”陈公博的刑期还早。原来美军占领日本后，发现中国准备与日本单独讲和的“佐藤工作”秘密资料，麦克阿瑟大怒，要传唤缪斌到东京法庭出庭作证。蒋介石赶紧向美国否认曾经和日本进行过秘密和谈，另一方面却下令立即处死缪斌，这可以说是“杀人灭口”。缪斌作为南京政府的考试院副院长，并非政府要职，缪斌本人也没有特别重大的卖国行为，本来不应判死刑。将缪斌如此迅速地处死，也反映出蒋介石害怕得罪美国人的心虚。不过在日本福冈久留米市的有名古寺善导寺中，却有供祭缪斌的牌位；在东京中央区的稻荷神社，还有“和平神缪斌显彰碑”，把缪斌奉为“和平神”，表示不忘缪斌的“和平工作”。 １９４６年１月，在重庆的蒋介石通知何应钦：在重庆政府还都南京之前，必须将汪精卫在梅花山上的坟墓处理掉。１月２１日工兵用炸药炸开汪精卫的墓壳，打开棺木，见汪精卫的尸体上覆盖著青天白日满地红旗，身穿南京政府的文官礼服：黑色长马褂，胸佩大绶，头戴礼帽。由于使用过防腐剂，尸体尚未腐烂。棺内没有任何陪葬品，只发现尸体的上衣口袋里有一张３寸长的纸条，上书“魂兮归来”四个字，这是陈壁君在名古屋帝大医院汪精卫去世时写的。 汪精卫的棺木和尸体被运往清凉山火葬场彻底焚化，梅花山的坟地由工兵铲平后建了一座小亭，四周添植许多花木，彻底改变了模样。１９９４年时，在汪精卫的原墓地上面修建了一座汪精卫跪像，似乎是模仿岳飞墓前的秦桧跪像供人们唾骂。但到１９９９年１月，汪精卫跪像突然被撤除，原因尚不明了。 尽管人们常说“不以成败论英雄”，但实际上往往是“成者英雄败者贼”。如果客观分析一下当时的形势，汪精卫的南京政府存续下来的可能性亦不算小。第一种情况是日本胜利，美国放弃远东地区；第二种情况是日本有条件投降，从中国和南洋各地撤军，但日本很可能把保留汪精卫政权作为撤军条件。如果美国没有及时发明原子弹，对日本进行本土作战必然要付出巨大伤亡，美英为了自己的利益，很可能出卖中国的利益接受日本的有条件投降。另外从反共一面来看，如果苏联参战的话，苏军的首先攻击目标肯定是在中国的日军，这样中国就不免会共产化。而汪精卫政权是反共的，美英看来保留汪精卫政权总比苏联出兵中国强。第三种是日本向美英苏无条件投降，却不向中国无条件投降，这从美英苏三国不邀请中国一起发表敦促日本政府无条件投降的《波茨坦公告》可以看出这种可能性。如果这样日军就会给汪精卫政府留下一批武器装备后突然撤军，留下汪精卫政府自生自灭，就象美国抛下南越政府撤军一样。由于汪精卫政府掌握了中国三分之一的土地和近半数的人口，蒋介石要想消灭汪精卫政权也非易事。因此从“运气”的角度来看，汪精卫南京政府的结局可以说是一种最糟的结局。 从汪精卫的一生来看，汪精卫是个典型的“文人革命家”，善于用笔而不善于用枪。孙中山非常重视汪精卫的文才，孙中山的重要文件均由汪精卫起草，孙中山阅后总感满意，极少改动，汪精卫其实担任了孙中山秘书的角色。１９０５年成立的同盟会，孙中山任总理，黄兴任执行部部长，汪精卫任评议部部长，可见孙中山对汪的器重，也说明汪在同盟会里有相当高的声望。 不过使汪精卫在中国名声大振的，还是他以“精卫”的笔名在同盟会主办的《民报》上发表的一系列文章。汪精卫写的《满洲立宪与国民革命》、《驳革命可以召瓜分说》、《驳革命可以生内乱说》等一系列文章，都是当时广为流传的政论文佳作。１９０８年８月１９日，孙中山在新加坡《中兴日报》上以“南洋小学生”为笔名发表文章《论惧革命召瓜分者乃不识时务者也》，文中说：“自精卫先生《民报》第六号《驳革命可以召瓜分说》一论出，言中外情势原原本本，使中国人士恍然大悟，惧外之见为之一除。。。。拜读精卫先生革命可杜瓜分之论，不禁五体投地，神圣奉之。”此文后来收入《孙中山全集》。 但汪精卫的命运和他的老师孙中山一样，都是只有威望却无实权的领袖人物。文人革命家在夺取政权以前起著极其重要的舆论制造工作，可是一旦政权到手，他们就被掌握军队的军人政治家们排挤到一边。孙中山被袁世凯摆布，汪精卫被蒋介石摆布，都是中国“枪杆子里面出政权”的牺牲品。不过汪精卫对国民党建立和发展的“功勋”是无法抹煞的。现在台湾的国民党，在召开重要会议以前必先朗读孙中山总理的遗言。然而这个遗言其实却是汪精卫所写，孙中山不过签个字而已。这也表现出汪精卫对国民党的影响仍然“阴魂不散”。 汪精卫一生以生命为赌注进行了两次拼搏，一次是刺杀摄政王，另一次是发起和平运动，前一次赌博巨大成功，得到世人的喝采，后一次赌博却完全失败，遭到世人的唾骂。不过“人算不如天算”，在很多重大事件中，运气或天命起著重要的作用。汪精卫行刺摄政王时抱著必死的决心，根本没有想到生还。清政府对行刺满人王公的刺客一直都没有不处死的先例，只是到了汪精卫时才破例免死。如果当时清政府成全汪精卫必死的决心处死汪精卫，中国就会少一个大汉奸而多一个大英雄，现在我们的中小学生们将代代朗读汪烈士“引刀成一快，不负少年头”的豪言壮语。 如果汪精卫在１９３５年遇刺时被打死，也会成为中国可歌可泣的光荣老革命家，而汪精卫却只伤不死。如果１９３９年重庆特务不是错杀曾仲鸣而是打死汪精卫，人们也只是叹惜汪精卫一时糊涂，不会使汪精卫背上史上最大级汉奸的恶名。但命运之神好象是在故意捉弄人，汪精卫最后对自己的人生也是不满意的，在他６０岁还历时曾经写下一首《朝中措》的述怀词：城楼百尺倚空苍，雁背正低翔；满地萧萧落叶，黄花留住斜阳。栏杆拍遍，心头块垒，眼底风光；为问青山绿水，能禁几度兴亡。汪精卫在词前还写了这样一段话：“重九日登北极阁，读元遗山词，至‘故国江山如画，醉来忘却兴亡’，悲不绝于心，亦作一首。”元好问这样的亡国诗人之作引起汪精卫的共鸣，可见汪精卫的内心亦是郁郁颓丧。 不少人把汪精卫投靠日本人解释为与蒋介石争权，但从汪精卫的历史来看，汪精卫并不是特别醉心于权力的人。１９１２年辛亥革命胜利时，以汪精卫当时在党内的地位和社会影响，他至少可以当一个部长以上的官员，胡汉民就作了广东都督。当时汪精卫才３０岁，这样的高官对于一个３０岁的青年应该是很有吸引力的。而汪精卫却提出“不做官、不做议员、不嫖、不赌、不纳妾、不吸鸦片”的“六不主义”，放弃作官到法国留学。辛亥革命后象汪精卫这样具有功劳威望之人却没有作官的，只有汪精卫一人。后来汪精卫任广州国民政府主席时，在完全可以不辞职的情况下主动自责辞职，也反映出汪精卫对权力看得不是很重。所以简单地把汪精卫离开重庆搞和平运动看成是争权夺利，其实是把历史人物脸谱化了。 汪精卫个人的悲剧，其实也是近代中国的悲剧。试想如果当时中国是一个富裕强大的国家，又怎么会遭到外国的侵略？又怎么会有汉奸？一个国家历史上的汉奸越多，就说明这个国家越弱。对于一个遭到强敌侵略的弱国，总要有人挑起“汉奸的担子”，古今中外的历史都是如此。因此我们不应该公式化地把“汉奸”理解为一群整天想著卖国求荣的民族败类，而应从另外一个角度来理解“汉奸”们的悲剧。 附：汪精卫叛国“艳电” １９３８年１２月２９日 汪精卫 重庆中央党部，蒋总统，暨中央执监委员诸同志均鉴： 今年４月，临时全国代表大会宣言，说明此次抗战之原因，曰：“自塘沽协定以来，吾人所以忍辱负重与日本周旋，无非欲停止军事行动，采用和平方法，先谋北方各省之保全，再进而谋东北四省问题之合理解决，在政治上以保持主权及行政之完整为最低限度。在经济上以互惠平等为合作原则。”自去岁７月芦沟桥事变突发，中国认为此种希望不能实现，始迫而出于抗战。顷读日本政府本月２２日关于调整中日邦交根本方针的阐明：第一点，为善邻友好。并郑重声明日本对于中国无领土之要求，无赔偿军费之要求，日本不但尊重中国之主权，且将仿明治维新前例，以允许内地营业之自由为条件，交还租界，废除治外法权，俾中国能完成其独立。日本政府既有此郑重声明，则吾人依于和平方法，不但北方各省可以保全，即抗战以来沦陷各地亦可收复，而主权及行政之独立完整，亦得以保持，如此则吾人遵照宣言谋东北四省问题之合理解决，实为应有之决心与步骤。第二点，为共同防共。前此数年，日本政府屡曾提议，吾人顾虑以此之故，干涉及吾国之军事及内政。今日本政府既已阐明，当以日德意防共协定之精神缔结中日防共协定，则此种顾虑，可以消除。防共目的在防止共产国际之扰乱与阴谋，对苏邦交不生影响。中国共产党人既声明愿为三民主义之实现而奋斗，则应即彻底抛弃其组织及宣传，并取消其边区政府及军队之特殊组织，完全遵守中华民国之法律制度。三民主义为中华民国之最高原则，一切违背此最高原则之组织与宣传，吾人必自动的积极的加以制裁，以尽其维护中华民国之责任。第三点，为经济提携。此亦数年以来，日本政府屡曾提议者，吾人以政治纠纷尚未解决，则经济提携无从说起。今者日本政府既已郑重阐明尊重中国之主权及行政之独立完整，并阐明非欲在中国实行经济上之独占，亦非欲要求中国限制第三国之利益，惟欲按照中日平等之原则，以谋经济提携之实现，则对此主张应在原则上予以赞同，并应本此原则，以商订各种具体方案。以上三点，兆铭经熟虑之后，以为国民政府应即以此为根据，与日本政府交换诚意，以期恢复和平。日本政府１１月３日之声明，已改变１月１６日声明之态度，如国民政府根据以上三点，为和平之谈判，则交涉之途径已开。中国抗战之目的，在求国家之生存独立，抗战年余，创巨痛深，倘犹能以合于正义之和平而结束战事，则国家之生存独立可保，即抗战之目的已达。以上三点，为和平之原则，至其条例，不可不悉心商榷，求其适当。其尤要者，日本军队全部由中国撤去，必须普遍而迅速，所谓在防共协定期间内，在特定地点允许驻兵，至多以内蒙附近之地点为限，此为中国主权及行政之独立完整所关，必须如此，中国始能努力于战后之休养，努力于现代国家之建设。中日两国壤地相接，善邻友好有其自然与必要，历年以来，所以背道而驰，不可不深求其故，而各自明了其责任。今后中国固应以善邻友好为教育方针，日本尤应令其国民放弃其侵华侮华之传统思想，而在教育上确立亲华之方针，以奠定两国永久和平之基础，此为吾人对于东亚幸福应有之努力。同时吾人对于太平之安宁秩序及世界之和平保障，亦必须与关系各国一致努力，以维持增进其友谊及共同利益也。谨引提议，伏祈采纳！汪兆铭，艳。 （《中国近代对外关系史资料选辑》上海人民出版社１９７７年版）]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“哲学”与“生物学“之间的见解探讨]]></title>
    <url>%2F2017%2F10%2F11%2F%E2%80%9C%E5%93%B2%E5%AD%A6%E2%80%9D%E4%B8%8E%E2%80%9C%E7%94%9F%E7%89%A9%E5%AD%A6%E2%80%9C%E4%B9%8B%E9%97%B4%E7%9A%84%E8%A7%81%E8%A7%A3%E6%8E%A2%E8%AE%A8%2F</url>
    <content type="text"><![CDATA[关于”哲学“与”生物学“之间的关系好似是有一番”矛盾“的。在我的浅陋寡闻的基础上，我想对此作一些感想，记录在下。 我所认为的“哲学”是以人类本身的意识认知为基础的，即大多数我们认为的“哲学”是在我们认知的这个自然之内的思考，对于种种之内的现象的思考，并且都是以我们的“意识”为基础的思考从而得出的一系列认知。而我所认为的“生物学”更多的则是在所谓的“科学手段”上的得出的一系列以研究实践或许也是掺杂着一些假设的的认知发现所得出的一系列认知。 而我想表达的是，前者注重个人意识上的思考，而后者可能注重实践加部分的思考。而它们之间的“矛盾”则是在于“意识为主”与“实践为主”的矛盾。这真的是一种矛盾吗？我在现在却也是得不到一个清晰的给我自己也说得过去的答案。 对于它们的认知或许还是需要我去更多的去了解，去思考的。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>思考笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这“完美”的一切如同“神设”，而我们还是依旧一无所知]]></title>
    <url>%2F2017%2F10%2F11%2F%E8%BF%99%E2%80%9C%E5%AE%8C%E7%BE%8E%E2%80%9D%E7%9A%84%E4%B8%80%E5%88%87%E5%A6%82%E5%90%8C%E2%80%9C%E7%A5%9E%E8%AE%BE%E2%80%9D%EF%BC%8C%E8%80%8C%E6%88%91%E4%BB%AC%E8%BF%98%E6%98%AF%E4%BE%9D%E6%97%A7%E4%B8%80%E6%97%A0%E6%89%80%E7%9F%A5%2F</url>
    <content type="text"><![CDATA[如今我们有看到的，未看到的这世上的一切，这自然的一切都好似被创造的“完美”。想一想吧，在我们身上的这一切的运转运作都是那么的完美无缺，在这自然中的一切，如整个星球的运转运作，如整个星系的运转运作，一切都在井然有序的在运作着，无声无息的，像是被谁创造的，这个谁除了用如今的“神”来解释或许是再恰当不过了，除了此之外我们也无从解释。我想说的是，这所有的一切像是“神设”的一般。 从我们熟而简知的一切的先人们对于我们生活的这一片土地的发现，有如这个星球上的真真切切存在着的磁场，真真切切存在的电波等等，我们可以知道的是，这一些东西与我们如今生活的这个星球是有着密切的关系的，我们如今有发现或还有一些未发现的这一些现象东西，是与如今的我们生活的这个星球的运转运作是离不开的。而在除了我们的这个星球外的，还有那么多的形形色色的星球，又或许是数不清的未知的星系，有如地球的这样的现象，这样的在这些个星球上的形形色色的现象东西在无形当中支撑着整个星球运转运作着的，在数量上毫不犹疑的可以确认是数不胜数的。而在这一些个星球当中的相互的联系又是那么的井然有序如同一个都在无声无息的运作着的作品，又或者说是被谁创造，到被创造到我们的如今一直被“展示”着，如今被我们发现，发现这其中的奥秘是多么的无穷，又或者说是如今我们真的还有太多的未知，是的，我想说的是，人类一直以来都是“无知”的生物，因为对于这整个自然，我们无从解释，我们也无从下手，不知如何去发掘这其中的一切井然有序的，无声无息的奥秘究竟是从何而来。除了拿“神”拿这一切如同“神设”来解释之外难道还有什么可以作为“借口”被人们信服吗？没有，从来就没有，从人类出现以来一直都没有。 对于如今的在这个非常火热的“人工智能”的科技项目中，我们又是因为对于生物的未知而停止不前，或者说是除此之外已是无从下手了，毫无办法了，如果无法正确解释解开我们人体的奥秘，“人工智能”就只能是在人类历史时代中出现的一个嚎头，一个“大笑话”罢了，因为那会因为人类的无知而终止对于这个项目的进行，而这个项目在如今的这个时代又是吸引如此多的人们去学习去探索，人们像是对待某一种所谓的“高大上”一样去对待“人工智能”，可能在此中的人人都以为自己在改变世界，在创造历史，可以明确的是，他们的确在创造历史，仅仅是因为如今的“人工智能”的浪潮就可以足以载入人类历史，如果因为人类的无知，对于区区我们的人体之中的奥秘都无法解释得知，毫无疑问，这一次的“人工智能”浪潮必将又是失败，而且是因为人类的无知与无能为力而失败告终。我曾经思考，我们会不会是曾经存在于这个星球上的上一代的“另类”所创造出来的他们所认为的所谓的一类“人工智能”呢？因为在这个我们都知道的自然当中是有着自我循环恢复与自我循环修复的循环过程的。但是很快我又拒绝思考这个假设问题了，因为若是如此，那么创造我们的那一群“另类”又是从何而来？关于他们的奥秘又是从何而来？难道都可以用“自然循环”来解释吗？绝非如此，因为本源的问题并非如此，而是“来”的来由，“来”的来源。我不知，我承认我又一次被无知打倒。而在人类历史上，这样的无知还算是少吗？不少了，因为人类从“无”到“有”以来对于这个所谓的“自然”是一无所知的，除了在我们生活的这个地球上的一些简小发现以外，我们人类的探索之路还是未知的，但是可笑的是还有我们的一些人将这些时间花费到不在“探索”的这条路上。我只能说，他们只会更加的无知罢了。 可以仔细想一想，区区的一个人体我们如今都无法去正确解释解开其中的奥秘究竟是从何而来，那么对于还有那么多的未知，自然之间的这个如同无声无息的井然有序的巨大未知的奥秘，我们又如何去解释解开？难道说还是需要所谓的“神设”去解释这一切吗？只会让人类更加的无知罢了，只会添加人类的无知，只会凸显人类的无能罢了。 我对于整个人体的假设想，是在大脑的方面有一些假设想的。因为如今的“人工智能”的瓶颈在探索“人脑”的路上停滞不前，在没有在搞清楚人脑的奥秘之前，所谓的“人工智能”永远也难有大的突破，那一些担心未来被机器人统治的危机的人们又何必大惊小怪呢，因为我们在如今已经是无法将“人工智能”这个项目再进一步的突破了，瓶颈已是清晰了然，至少是在人类发掘出人体的奥秘之前。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>思考笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（忘记密码下）更改华为手机解锁屏幕密码]]></title>
    <url>%2F2017%2F10%2F11%2F%EF%BC%88%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E4%B8%8B%EF%BC%89%E6%9B%B4%E6%94%B9%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E8%A7%A3%E9%94%81%E5%B1%8F%E5%B9%95%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[今天早上一大早来到图书馆，发现我的华为手机青春版G9的屏幕锁密码早已是在我的脑海里消失得一丝不挂。why?So，I decide to 找方法去将这个烦人的东西给解开啊，现在也终于解开了，花了我宝贵的生命中的一个钟！一个钟啊！！ 前提，在忘记之前 你忘记了屏幕锁密码！ 你的手机不是在关机状态！（如果是关机的情况下忘记了，等着恢复出厂设置吧！因为她妈的华为手机是要求开机输入屏幕锁密码的！） 你的手机可以通过指纹进入！ 开始这烦人的过程吧，实际上简单的我想跳舞 假设你已经进入了手机界面（通过你那恶心的指纹或者是其他的方法！） 点击 手机找回 –&gt; 将允许查找手机开启 –&gt; 点击查找我的手机 –&gt; 选择你现在的要更改解锁密码的手机的华为账号 –&gt; 开始定位–&gt; 手机已经开始定位（当然你得要是在他妈得有网的情况下！）–&gt; 成功之后会提示重新输入密码（这就是他妈得我们的新的密码！记好了！）–&gt; 确认之后，手机会自己锁屏了 –&gt; 你打开输入刚刚的新的密码或者是通过指纹发现都可以解锁了！ 教程他妈的到此结束了！]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>华为</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于科学上网的基本知识]]></title>
    <url>%2F2017%2F10%2F10%2F%E5%85%B3%E4%BA%8E%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[在如今科学上网被越来越多的人所重视的今天，基本的科学上网的知识必不可少。我从这一篇文章中看到了一些需要注意的基本知识，打算在这里记下，并且加上我本人的语言重新组成一篇新的文章。 我有话说 昨天我发现一直可以免费使用的ss账号突然不能使用了，而如今越来越接近“十九大”，想必也是情理之中。在普及科学上网知识的过程中，我发现了不能使用过多的国产软件，在使用迅雷时不能在科学上网的情况下，也就是在ss或者是ssr开启的情况下下载BT种子，因为这样易导致IP被封杀。我在想是否是因为我的粗心导致了一直免费使用了近两个月的ss账号被封杀？有一些愧疚的…打算在此记录下。避免更多的人的劳动成果与爱心（分享）被因为无知给“浪费”。 不能过多的相信“免费（free）”VPN软件！ 现在是一个大数据时代，并且因为我国的“特殊情况”下，许多的公司（包括我国的，也包括外国的）可能会不惜手段的获取用户的信息资料！仔细想一想，这都是合乎情理的，当然我不否认也有许多的人在有爱心的无私分享资源软件，比如我🤓这个有爱心，又有才华的帅哥。我的意见是，不要在有重要的信息的机器上使用免费的相关的软件，特别是如今的手机，包含了太多的信息，想一想就知道了。本人已经将免费的软件都换成了ss代理，并且将软件删除，是找的可信的人合租的。 资源：ss,ssr客户端各版本下载 自己搭建服务器，安全，无限制：VPS科学上网教程系列 以下是上面的那一篇文章中的精华内容。 科学上网必清CNNIC根证书，否则你在科学上网的时候他会一直粘着你，你会成为GFW的DDOS的肉鸡，并且他可能还会导致你的VPN、SS被封！所以必须要清除，否则你永远无法安心科学上网！ 关于 安全卫士/杀毒软件/浏览器 等说明 各种国产杀毒/安全卫士和360/百度浏览器等软件都不能使用！简单给你们解释一下为什么。 安全卫士和杀毒软件，常常会在你访问 有病毒/木马网站 或者 嘿嘿嘿的网站的时候，突然弹窗提醒你这个网站不安全什么的。 他为什么知道这个网站不安全？因为他在监视你的一举一动，这很容易。 然后明知道国内在正常途径是不可能访问Google等网站，结果你突然 访问了Google等被墙的网站，那 安全卫士/杀毒软件 又不是傻子，自然知道你在使用代理或者VPN等方式科学上网。 杀毒软件和安全卫士都会以保护电脑不被侵害的理由监控电脑的一举一动，一旦你使用了vpn，他就可以检测到你正在使用vpn，虽然他无法知道你的传输数据，但是只要知道你在使用vpn就够了，然后再查询下你的ip就可以后台上传信息了，或许很快你的vpn的ip就被封了！ 浏览器同样也是，比如你访问了国内根本不可能通过正常途径访问的网站（Google、Youtube），这样子浏览器肯定就知道你用了代理或者vpn，然后就会查一下ip然后上传信息，同样就会被封。 还有一些浏览器都有的同步数据功能，鬼知道他会不会借着同步你的数据作掩护去上传你的某些隐私和科学上网证据，反正加密了。对外声称这是在同步数据，骗过了大部分人。而且就算你关闭，他或许也会换个其他的理由继续上传，反正只要是个浏览器总不能禁止上传流量吧。 很多人会说：“我用了360安全卫士和360浏览器也没见到我的vpn/ss被封啊？”这只能说是时候未到，我们不应该把自己的vpn/ss安全寄托到不靠谱的希望上！我们要未雨绸缪，在问题出现前清除隐患！ 各种国产杀毒/安全卫士和360/百度浏览器等软件都不能使用！简单给你们解释一下为什么。 安全卫士和杀毒软件，常常会在你访问 有病毒/木马网站 或者 嘿嘿嘿的网站的时候，突然弹窗提醒你这个网站不安全什么的。 他为什么知道这个网站不安全？因为他在监视你的一举一动，这很容易。 然后明知道国内在正常途径是不可能访问Google等网站，结果你突然 访问了Google等被墙的网站，那 安全卫士/杀毒软件 又不是傻子，自然知道你在使用代理或者VPN等方式科学上网。 杀毒软件和安全卫士都会以保护电脑不被侵害的理由监控电脑的一举一动，一旦你使用了vpn，他就可以检测到你正在使用vpn，虽然他无法知道你的传输数据，但是只要知道你在使用vpn就够了，然后再查询下你的ip就可以后台上传信息了，或许很快你的vpn的ip就被封了！ 浏览器同样也是，比如你访问了国内根本不可能通过正常途径访问的网站（Google、Youtube），这样子浏览器肯定就知道你用了代理或者vpn，然后就会查一下ip然后上传信息，同样就会被封。 还有一些浏览器都有的同步数据功能，鬼知道他会不会借着同步你的数据作掩护去上传你的某些隐私和科学上网证据，反正加密了。对外声称这是在同步数据，骗过了大部分人。而且就算你关闭，他或许也会换个其他的理由继续上传，反正只要是个浏览器总不能禁止上传流量吧。 很多人会说：“我用了360安全卫士和360浏览器也没见到我的vpn/ss被封啊？”这只能说是时候未到，我们不应该把自己的vpn/ss安全寄托到不靠谱的希望上！我们要未雨绸缪，在问题出现前清除隐患！ 大数据时代，就是要尽一切可能的收集任何用户的资料信息。 360浏览器、百度浏览器等国内浏览器官方内置的科学上网功能都不支持使用，这些代理很可能会被用于中间人攻击。如果该“中间人”与浏览器官方同一阵线，那么浏览器验证机制就会放行这种攻击。国内产浏览器也不推荐使用，有用户透露，360浏览器在安装的过程中就引发了win7系统报警，证明该程序有规避认证的行为。全球三大桌面浏览器在隐私保护方面的比较一般认为，Firefox最优，其次是Chrome/Chromium，再其次是IE。 发照片自爆是很多网友的喜好，但经常发表敏感政治言论的网友这方面就要小心些了，很容易因此被人肉搜索到。另，建议登陆海外网站的时候尽可能不使用和在大陆平台上同样的昵称和同样的本人照片头像，即便墙内身份暴露，只要否认墙外身份，“有关部门”就基本无法获取证据。 很多社交平台都有分享地理位置的功能，比如墙内的微信、微博和墙外的推特等，但不推荐使用，如果您用的是苹果产品，可以直接选择在设置中关闭定位服务的方法来保护行踪隐私。 有些网站希望用户输入求学就业经历，以便联系到同学同事互相添加。如果该应用是大陆开发的产品就不推荐使用这项功能。您肯定有其他方式联系到您觉得值得联系的同学和同事。 尽可能不使用公共场合免费的wifi，如果遭遇恶意搭建的wifi，很容易被盗取个人信息，其他安全性不明的wifi网络也要谨慎选择。 曾经有网友曝，小米手机和小米平板都会在用户使用加密数据或使用VPN科学上网時，窃取数据并发送到北京某服務器；360系列软件则会监控用戶的qq、skype等通讯窃取数据。对于后者已能基本确信，对于前者建议谨慎选择以防患于未然。 国内产的杀毒软件也不推荐使用，比如：360“监控”猥士、腾讯“收集”管家、百度猥士，本网曾有报道，奇虎 360 投资的一家微型公司“麦芽地”，其前身是个人网站“麦克孤独”，被曝是“WireLurker(MacHook)”木马制作者和传播者。 最近发现了一个很有趣的事情，北京大学的校园网VPN也注明了禁止使用360等安全软件，而且说必须卸载。看来他们也知道一些什么事情！ 11月3号出台的《反恐法草案》中第十五条提到： 电信业务经营者、互联网服务提供者应当在电信和互联网的设计、建设和运行中预设技术接口，将密码方案报密码主管部门审查。未预设技术接口，或者未报审密码方案的，相关产品或者技术不得投入使用。已经投入使用的，主管部门应当责令其立即停止使用。在中华人民共和国境内提供电信业务、互联网服务的，应当将相关设备、境内用户数据留存在中华人民共和国境内。拒不留存的，不得在中华人民共和国境内提供服务。 该草案很可能全盘通过，也就是说，极大程度上增强了使用国内平台和服务的危险性。 所以说，国内的软件千万不能用！国内的软件千万不能用！国内的软件千万不能用！很重要所以说三遍！！！ 给你们普及一下相关的法律法规，免得水表被炒爆了也不知道！ 根据《计算机信息网络国际互联网安全保护管理办法》（公安部令第33号）第五条： 任何单位和个人不得利用国际联网制作、复制、查阅和传播下列信息：(一)煽动抗拒、破坏宪法和法律、行政法规实施的；(二)煽动颠覆国家政权，推翻社会主义制度的；(三)煽动分裂国家、破坏国家统一的；(四)煽动民族仇恨、民族歧视，破坏民族团结的；(五)捏造或者歪曲事实，散布谣言，扰乱社会秩序的；(六)宣扬封建迷信、淫秽、色情、赌博、暴力、凶杀、恐怖，教唆犯罪的；(七)公然侮辱他人或者捏造事实诽谤他人的；(八)损害国家机关信誉的；(九)其他违反宪法和法律、行政法规的。违反法律、行政法规，有本办法第五条、第六条所列行为之一的，由公安机关给予警告，有违法所得的，没收违法所得，对个人可以并处五千元以下的罚款，对单位可以并处一万五千元以下的罚款；情节严重的，并可以给予六个月以内停止联网、停机整顿的处罚，必要时可以建议原发证、审批机构吊销经营许可证或者取消联网资格；构成违反治安管理行为的，依照治安管理处罚条例的规定处罚；构成犯罪的，依法追究刑事责任。 情节较轻的只是警告一下，并进行经济处罚。虽然不多但是那些键盘侠屌丝就别再出去丢人乱说了，否则你也只能一辈子屌丝了！ 但是情节严重给予的处罚就会很严重了，构成犯罪的还会追究刑事责任。所以那些反gong心理的人自己注意点吧！ 根据2013年9月发布的最高人民法院和最高人民检察院 《关于办理利用信息网络实施诽谤等刑事案件适用法律若干问题的解释》中的第五条： 利用信息网络辱骂、恐吓他人，情节恶劣，破坏社会秩序的，依照刑法第二百九十三条第一款第（二）项的规定，以寻衅滋事罪定罪处罚。编造虚假信息，或者明知是编造的虚假信息，在信息网络上散布，或者组织、指使人员在信息网络上散布，起哄闹事，造成公共秩序严重混乱的，依照刑法第二百九十三条第一款第（四）项的规定，以寻衅滋事罪定罪处罚。这条司法解释曾经遭到了部分律师强烈反对，认为其对于网络言论的控制和镇压违背宪法有关言论自由的权利精神。 有些人看了上面的内容之后就会很担心科学上网会不会犯法、查水表，所以我在科普一下科学上网的相关法律法规。 从国内关于互联网管制立法角度上来讲，目前可以将科学上网行为解释为犯法的法律和条文只有如下条文 《中华人民共和国计算机信息网络国际联网惯例暂行规定》（国务院令第195号）中的第六条： 计算机信息网络直接进行国际联网，必须使用邮电部国家公用电信网提供的国际出入口信道。任何单位和个人不得自行建立或者使用其他信道进行国际联网。牵强一点的讲，提供和开发科学上网工具的行为，可以算作自行建立或者使用其它信道进行国际联网。而对这一条的违法行为的处罚措施，则列于同一规定的第十四、十五条： 第十四条 违反本规定第六条、第八条和第十条的规定的，由公安机关责令停止联网，给予警告，可以并处15000元以下的罚款；有违法所得的，没收违法所得。第十五条 违反本规定，同时触犯其他有关法律、行政法规的，依照有关法律、行政法规的规定予以处罚；构成犯罪的，依法追究刑事责任。应该说，这项规定处罚较低，只是经济处罚，但另外约定构成犯罪的行为，也将追究刑事责任，但具体是什么行为构成犯罪，处罚依据哪条刑律，都没有具体言明。而且在实际操作中，也从未援引过这条法令对科学上网工具的开发者和使用者进行处罚。 综上所述，被查水表的往往是因为不当言论造成的，但是如果开发出科学上网软件并广泛传播 难以封锁，那么也会被墙查水表来断绝软件前途，当然也不排除上述多种因素的共同作用。 所以目前状况下不必因为使用科学上网服务而过分担心被查水表（简单的说你们还没被查水表的资格），但随着目前互联网管制的日趋紧张，今后的形势不容乐观。 最后，据称网警是通过“钓鱼执法”假扮一个需要购买科学上网服务的客户，通过QQ等通讯工具查水表的。 声明 转载请超链接注明：逗比根据地 » 科学上网的注意事项及相关法律（必读）责任声明：本站一切资源仅用作交流学习，请勿用作商业或违法行为！如造成任何后果，本站概不负责！ 链接已在上方的文章声明。]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用免费的SuperVPN翻墙]]></title>
    <url>%2F2017%2F10%2F09%2F%E5%88%A9%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84SuperVPN%E7%BF%BB%E5%A2%99%2F</url>
    <content type="text"><![CDATA[前言 SuperVPN是一个安全的，免费的，无限制的翻墙软件，并且在经过我的手机端测试确实是如此，是一个不可多得的好的良心软件作品。更加重要的是，它是一个适合全平台的软件，即手机端，PC端都可以用其翻墙。 了解SuperVPN： SuperVPN官网 在其中的官网中还有很多的免费的VPN软件的链接可以进入，即表示这里是有很多的免费VPN软件可以给我们使用的，刚刚经过我的测试，好像不需要翻墙就可以进去官网了。 开始下载安装过程 以下是官网对于其的介绍： SuperVPN Free VPN For PC, Windows 10, And MacSuperVPN Free VPN for PC is a free and best one VPN client app. It’s an easy to use app like with one click you can easily connect to VPN. With SuperVPN Free VPN app you can browse your internet in safe and secure place. You will find this app quite easy to use. As this app asked access to a lot of personal information so you may be found it little interrupted. But being a VPN app users, this SuperVPN Free VPN app did require this information in order to function properly. So you will find this option good for you. This app can easily protect your privacy and keep you safe from 3rd party tracking. SuperVPN Free VPN app has SuperVPN for pcmany interesting features such as you can unblock geographically restricted websites. You don’t need any kind of registration or settings. You also can encrypt your internet traffic. you can use most VPN solution. With its free layout VPN client, you can easily navigate those users who haven’t used VPN clients before. The best feature of this app is to allows you to connect those websites whose access has been restricted to you. You must ever want privacy while you are browsing the world-wide, so in that case VPN is the best app to keep up your sensitive information secret. Now you can free download SuperVPN Free VPN for PC client. This app provides 20 days trial after that you can use this app for 60 minutes each sessions. And when you want to reconnect, simply end the session and reconnect. 官网介绍的免费的SuperVPN的功能 Main features of SuperVPN Free VPN Client: Bypass internet censorshipSecure your connectionyou can protect your privacyAlso can unblock websites and AppsYou can hide your public and local IP Addresses. 官网中如何在PC端下载SuperVPN的介绍： How To Download SuperVPN on PC: First you need to download BlueStacks Android emulator on your PC or Windows and Mac. Once you download complete install the pack, and add your Gmail account in Bluestacks by go to setting then Accounts and add your Gmail account. SO type in your search bad “SuperVPN” by Next Streaming. Click on the app and install it on your Bluestacks. Once installation is complete go to your apps area and find the downloaded application. Find SuperVPN and start using it. See also: Best Android Emulator For Windows 10 即在上方提到的需要下载BlueStacks 这个软件可以在官网之中下载，当然也可在我的百度云可以下载：下载BlueStacks 下载完成之后根据上方提到的，绑定账号之后，搜索SuperVPN并且下载。打开之后选择地区连接，即可使用了。 最后 关于安卓手机端的SuperVPN的下载与使用可以参考官网的教程，当然也可以参考我的这一篇文章： 手机利用SuperVPN无限制翻墙]]></content>
      <categories>
        <category>软件使用</category>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（安卓）手机利用免费的SuperVPN翻墙]]></title>
    <url>%2F2017%2F10%2F09%2F%EF%BC%88%E5%AE%89%E5%8D%93%EF%BC%89%E6%89%8B%E6%9C%BA%E5%88%A9%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84SuperVPN%E7%BF%BB%E5%A2%99%2F</url>
    <content type="text"><![CDATA[前言 每次看看新闻，查询资料都要打开电脑用ss翻墙，现在决定用手机翻墙了。因为用的是来自网上的资源，担心是少不了。经过测试是安全，无毒，可行的，关键是无限制的，速度上游 安卓系统 SuperVPN 华为浏览器 声明 资源参考：资源参考 大家有钱的请还是要支持正版哦！，在此说说华为手机上的自配的浏览器，体验挺不错，有点像是Mac上的 Safari 浏览器，也使用过了谷歌浏览器与火狐，最终选择了自带的，毕竟内存也是个问题。 SuperVPN官网： SuperVPN官网 在官网中也是支持PC端的，即是说，SuperVPN是支持全平台的，并且都是免费的，无限制的使用的！ 关于PC端的使用与下载可以参考我的这一篇文章： PC端下载SuperVPN 安装使用过程安装 下载SuperVPN 下载地址 如下图选择SuperVPN相关的软件，选择 SuperVPN_v4.4_NoAD.apk 本地下载，如果想用蓝灯破解版可以选择 Lantern-2.2.5 (20160627.192617).apk ，后者是经过其他人测试过的。 下载完安装过程中，选择 在后台开启 ，也可以选择在启动时开启 ，因为是破解版，将其的权限全部选择为 拒绝。之后安装成功之后如下图出现图标： 如图选择地区，实际上都可行，差不多 保持软件在后台运行（如图1），连接打开浏览器上谷歌，发现可以上去了，并且速度还是不错滴，VeryGood！（如图2） 图1 图2 最后 在资源参考的那一篇文章中有关于蓝灯破解版的下载资源。因为是破解版，在交易什么的界面，还是关闭软件的好.. GoodJ！翻墙愉快。]]></content>
      <categories>
        <category>软件使用</category>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[认识到庸愚的我]]></title>
    <url>%2F2017%2F10%2F08%2F%E8%AE%A4%E8%AF%86%E5%88%B0%E5%BA%B8%E6%84%9A%E7%9A%84%E6%88%91%2F</url>
    <content type="text"><![CDATA[从前的我是愚蠢的，我必须要认识到这一点。 “真正的自由就是要消灭欲望。” “那么，又是什么使人们感到不安和害怕呢？是暴君和他的卫兵吗？但愿不是这样。本性自由的事物，除了会受到它本身的阻碍和困扰以外，是不会受任何其他事物的阻碍与困扰的。所以，困扰我们的往往都是我们自己的观念。当我们逃出了这种思维，就会豁然开朗。” 摘录来自: 马可·奥勒留. “沉思录大全集(超值白金版)。 通过阅读《沉思录》，我认识到了自己对于“自由”的认知是多么的肤浅与无知。并且对于我的思维我认为是有着巨大的缺陷的。当然我并没有认为这本书可以就此定义我的人生意想，又或者是定义我对于这个人世间的看法，又或者是我对于这个宇宙的看法。奇怪的是我又在就此解释一些什么？为了一些所谓的观众？还是用来解释说服自己？我对于此问题，我可以说，以上的两者我都是有一些“偏好”的。可笑不可笑呢。这就是我的自以为是了罢，我的肤浅，我的无知罢。我曾经自以为着的，以为自己可以是一个“写作手”，我如今现在想起，真的是让我自己都羞愧不已。我想我是真的有一些忘记了，我开这个博客的初衷了。而现在我又试图解释一些什么，为了我那愚蠢的不行的想法。 关于对于我自己这一段时间的沉沦，在这片土地上的所谓的“国庆节”假期的中的这一段时间中的沉沦，我想大部分的缘由不就是看到了自己最厌恶的一些东西吗，一个“九评”？罢了罢了，我又在找什么借口说服自己呢？不过是自己的无能与愚蠢罢。关于对于恐惧，我竟然如从前一般的窝囊，我的意志的坚定是我没有想到过的脆弱易碎，这真的是我未曾想到的，我的勇气，我的热血好似因为那一场沉沦都好似不见了，我也开始变得比从前更加的恐惧了。如果说是由外来的威胁与行为所影响波及到了我，使得我出现了“恐惧感”与“无力感”，那么我自身的引发亦然是不可或缺的过渡过程，可以断定的是，我是因为内心意志的不稳定与自心对于自身的思维的不契合与不坚定所被外界波及，继而影响到了我自身的感觉层面的波动，也就是我的“恐惧感”与“无力感”的出现的缘由罢。这么一说来，我还是因为自己的无能所以才把自己推向了“恐惧感”与“无力感”的空间，让自己饱受这些个感觉的影响的。这亦然是可以解释我的无能的，我的懦夫行为的。我在如今现在发现，我的勇气层面还在吗？还剩多少？我没有了勇气，所以我感觉到了自己的无能，我必须要承认。 有一些事情与认知依旧需要我去发现，需要我去思考，找回我的勇气。然而在这之前，我还需要更多的学习，更多的去挖掘，去稳定我的内心意志，这样我的勇气才会有朝一日在默默中回归。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20岁的今天]]></title>
    <url>%2F2017%2F10%2F08%2F20%E5%B2%81%E7%9A%84%E4%BB%8A%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[今天一早，母亲打电话过来，我还在睡梦中呢，醒来也是像从前那一般一样的不屑。后来我才知道原来我已经20岁了。 哇，“20岁”。可是我却是没有什么特别的感觉，或许是在从前我会感觉是一个还难以碰触到的数字，而今天我到了“20”这个数字了，而在此刻在如今，真的是一点感觉都没有，一点点悲伤都没有，奇怪，为什么我要悲伤呢？哈哈。 今天的哈尔滨有一点冷啊，不过像去年的这个时候都已经下雪了的。今天是这片土地上的“国庆节”的假期的最后一天，我还是像往常一样吃完了早饭来到了图书馆，看完了一些想看的新闻，写完了要求的作业，之后便是捧着《沉思录》看了起来。再之后，看了看微信上的信息，才知道我已经20岁了。那么祝我生日快乐吧🎂。 “20岁”究竟意味着什么呢？对于现在的我来说或许真的是一个数字罢了，因为我不再对此拥有什么幻想了。但是又仔细想想，我向往过大学生活，但是从来没有向往过“20岁”这个字词呢😹，我也向往过那一些个大学生活像电影那般的青春热血好玩，但是反观现在，我过的真的是狼狈的不行呢，为了以后的生活做努力，为了自己的需求，为了自己的理想，每天干着自己从前不曾想过的事，过着自己从前从未想过的大学生活。但是我可以大声的说这是我自己的选择啊，我不后悔呀。真的是这样吗？我突然感觉到了一股悲伤了呢。我明明就是在苟且着，何必又要找什么烂借口来说服自己？真的是有一点可笑的意味了，哈哈。我一直相信着，大学之道不是为了去苟且，而是为了在之后能够更好的生活。 我现在在说这一些的时候我却是能够心平气和的去接受，去诉说，去毫不留情面地去笑自己，去告诫自己，去批判自己。这就是所谓的“成长”吧，所谓的更好的能与自己生活吧。 现在的已经20岁的我，干着不是我想干的事情，但是这是我想要改变这个世界上的一些东西的工具，我想为这个世界带来更多的需要，带来更多的“爱”与“希望”。我想要这个世界更加的美好，人们能够更好的生活。 “刘俊”是我的父母在我出生之后给我的名字，也是我在这个世界上的代名词，那么这样就好了，我要向这个世界大声的说：刘俊，祝你20岁生日快乐呀！ “20岁”，真的是一个好的数字呢，给我带来了那么多的惊喜，那么的感悟，那么多的未知，还有那么多的如今的我从未想过的未来。谢谢啦，刘俊的“20岁”，😁。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[观读“九评”有感]]></title>
    <url>%2F2017%2F10%2F06%2F%E8%A7%82%E8%AF%BB%E2%80%9C%E4%B9%9D%E8%AF%84%E2%80%9D%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[原来我也不过是一个懦夫。一个不敢言声，一个在中共邪灵下的自以为是的，却是正中其下怀的懦夫罢。 我是被中共这个人类历时难得有的邪灵所震撼到了。遥想这个中华大地，遥想这片土地上的社会人群，遥想这个社会的人文风气，一切都是契合的那么的天衣无缝，但我认为这绝对不是什么为了哗众取目的言辞，这真的是现实的真实写照。共产党的产生真的是人类历迹上的一大悲哀，因为从此又一个真正的魔鬼被释放到了人间。而我却是在认识了这个魔鬼的真相之后，居然不由自主的感觉到了可怕，这是怎样的一个恶魔般的团体啊，从此将噩梦带来到了这片土地，带来了无数的谎言与欺骗，带来了比噩梦还要可怕的毒药，可悲的是，无数的人们却是在它的毒害下却是毫不知情，居然反过来帮着魔鬼“求情”。 不可否认的是，现在的我，又或者是现在的许多的国人们心中还残留着这个魔鬼给我们灌输的毒药，这是一种精神毒药，真正的让我感觉到细思恐极，我感到愤怒，然而更多的是恐惧与无奈，我们的这一片中华大地如今因为这个魔鬼是一个怎样的国度啊，这里的人们还是可以称之为“人”的吗？我发至内心的感到了恐惧。我也同时对于这个民族的未来而悲叹，对这个魔鬼的嗔恨无处安放，而我如今现在却只有在此像个懦夫一样的在此记录下我的不甘。这是我的悲哀，亦是这个民族的悲哀！ 所幸，现在还有着许多的在内外的一些爱国人士没有放弃对这个好似被上帝摒弃的中华大地的拯救，他们与中共这个魔鬼在做着斗争，冒着随时可能被夺取生命的危险，真的是让人感到一丝欣慰与一丝希望呀，中国的未来的希望就是因为这一群人们而在前方闪闪发光，我们每一个有良知的中国人都应该站起来，为了将“中共”这个魔鬼赶出中华大地尽我们的一份力，甚至于我们的生命。 “九评共产党”是一部可以帮助国人看清离这个离自己是多么近的魔鬼的真面目的，我们从前在童话故事中听说过的魔鬼，如今在现实中却是离我们是多么的近呀，然而这个魔鬼却是比童话故事中更加的恶毒，不由得让人感觉到对于它的无尽的恐惧与嗔恨。这是一部有勇气的，敢于向魔鬼挑战的片子，可以唤醒国人们的一部良心之作，亦然是一部为国人为中国大地着想的一部救国的之作。感谢这一些不畏魔鬼暴权的人们的默默贡献。希望能让更多的后来人看到，真正的了解自己身边的这个魔鬼的真面目。 那一些还在违背良知帮助“中共”这个魔鬼的人们，亦或者是仍然麻木不仁的人们啊，你们是多么的可悲呀。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[思学，思己]]></title>
    <url>%2F2017%2F10%2F05%2F%E6%80%9D%E5%AD%A6%EF%BC%8C%E6%80%9D%E5%B7%B1%2F</url>
    <content type="text"><![CDATA[哲学，哲，有折射世间成理的意味，也有以理为基口授于人的意味。学，则是学无止境的意味罢。“道”与“理”，源于生活，来于生活，简与生活。思想与宇宙自然之理，一切的“道”与“理”好似都是早已有之，好似都是井然有序的了。学，人生的意义在于学？人生以学为铺。不光光是对于我们自己的人生亦或者是仅限于这个我们生活的人世间，而是整个自然。反观自然，若是仅仅的以为是我们所在的这个所谓的地球上的大自然，那真的是愚不可及了。整个自然的范围是我们人类所思索不到的，以这个所谓的我们已知的这个宇宙来描述自然？还是整个所谓的星系来描述？那也是微不足道的。自然的奥秘在于它的未知的广阔与“成理”的魅力，这对于那一些拥有追求未知的强盛求知欲的人们来说，这真的是让人兴奋的，同时也是让人好奇与敬畏的。好奇与兴奋是因自然的未知与我们的求知欲望相吻合，所以我们如此。而敬畏，是因为这个自然的未知范围真的是太广太阔，它的无边无际，它的学无止境，足以给人一种人生短暂之叹。人生是要以“学”为铺的，思索人生，思索并且不断的追与自然的未知，再也不会有比这更让人热血沸腾的了，以此来记得自己还活着，真是一件美好之事呀。 人啊，没有勇气去拷问我们自己的灵魂，没有勇气去改变我们自己的灵魂所有的丑恶，是一件多么愚蠢，多么可悲的事情。如果是因为此而随之带来给我们烦恼与恼怒，那又是更高一层的可笑了，何为更高一层的可笑？我所认为的即是比可笑更为可笑罢。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>思考笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有感]]></title>
    <url>%2F2017%2F10%2F02%2F%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[最近香港，四川的大游行让我热血沸腾。我看到了国人的血性与中国未来的希望。我衷心的希望每个中国人都要站起来为这片土地，为中华民族，为我们，为我们的子孙后代，为我们自己的人权，为了实现这片我们自己的土地的民主。加油，所有在争取的人们。 我始终相信着一场变革将会在不久到来。一场我们中国人自己的变革，一场我们中国人自己争取的民主变革。 我热血沸腾，我也好狠自己却是在行动上在现在无能为力，我也狠还有那么多的国人没有血性继续麻木。我心向着所有在争取的人们，以你们正在争取为自豪，我永远支持你们！]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[看电影“飞越疯人院”有感]]></title>
    <url>%2F2017%2F10%2F01%2F%E7%9C%8B%E7%94%B5%E5%BD%B1%E2%80%9C%E9%A3%9E%E8%B6%8A%E7%96%AF%E4%BA%BA%E9%99%A2%E2%80%9D%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[刚刚看完了“飞越疯人院”这一电影，对我的感触是有一些的，至少能使得我看的比较认真。在更多的看到的是“自由”之外，我又想起对于这个世界上的所谓的“体制”的感想了。所谓的“体制”只是一些人的自己的“私欲”罢了。 如果说科学是完全可信的，权威是不可撼动的，那才是真正的所谓的“体制”了吧。想一想，这是多么的可怕。几个人拿出它们所谓的“证明书”，并且打着“科学”的，“权威”的帽子用以来使得让人们去相信，去拥护他的想法与他的所谓的成果，说到底，那也不过是一个人的想法罢了。有一些时候，所谓的“科学”与“权威”才是真正意义上的“邪教”罢。 这一些的，被一少部分人所“制定”的“体制”，真的是让人们失去了太多宝贵的东西，更加受伤的是我们每个人生来据有的“自由”。难道不是吗，在我们这个人世间处处都是所谓的“体制”，处处都是“限制”。无论是所谓的“素质”与“修养”，什么是“素质”与“修养”？还不是这个人世间可笑的“体制”说的谎言。还有那可笑的“信仰”，什么是信仰？去信奉一个人人都爱去信奉的不知是真是假的人，一个由自己的“私欲”所得的各种“道”与“理”？还是所谓的“爱”与“神”？，这就是信仰？还不是给人设置了种种的“体制”。这是一个处处都是“体制”的世界，由人类自己创建的“体制”世界，或许在其中的人们还在天天喊着追求“自由”呢，多么的可笑啊。 我开始懂了在《沉思录》中说的，人是没有自由而言的，在这个处处都是“体制”的人世间，这个大自然的自然“体制”的万物世界中。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>思考笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(Mac下）hadoop2.8.1伪分布式的搭建，以及用eclipse开发Hadoop]]></title>
    <url>%2F2017%2F10%2F01%2F(Mac%E4%B8%8B%EF%BC%89hadoop2-8-1%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%8C%E4%BB%A5%E5%8F%8A%E7%94%A8eclipse%E5%BC%80%E5%8F%91Hadoop%2F</url>
    <content type="text"><![CDATA[前言 声明 我所有参考的文章，均在我的简书中已标明参考链接出处。 Mac系统。（当然其他的系统也可以参考，区别并不大。） Hadoop2.8.1 homebrew eclipse 相关的插件 最近在学习Hadoop，在搭建环境当中遇到了一些问题，如今总算是解决了，花了不少时间，毕竟万事开头难嘛，现在也有一些了解了。在此，我将记录下我遇到的所有的问题以及搭建的所有详细过程，以此帮助需要的朋友。 准备 homebrew下载： homebrew官网 用homebrew下载可以自动为此配置系统环境，是Mac系统不可或缺的下载神器，但就是它的镜像在国外，所以有时下载会非常慢，甚至于没有动静。若是下载太慢，可以参考这篇文章 homebrew下载之后打开终端，输入 brew install Hadoop ，开始自动下载Hadoop，我的是Hadoop2.8.1版本。homebrew下载到的目录（如图） Hadoop-eclipse-plugin2.7.3.jar插件，见我的百度云下载 。实际上这个插件对于Hadoop2.8.1版本同样适用，本人已经用此搭建环境成功。当然，如果你有强迫症之类的可以见我的百度云下载2.7.3版本 ，这个版本已经在官网查找不到了，实际上经过我的测试这个对应的版本问题多多.. GitHub上的Hadoop-eclipse-plugin2.X.jar插件，见我的百度云下载 eclipse下载。自行去官网解决吧。 声明 以上的插件资源来自此处 开始Hadoop的伪分布式配置 参考： 参考 Hadoop官网 配置ssh 打开 系统偏好设置 –&gt; 共享 –&gt; 远程登录 –&gt; 所有用户（如图） 配置ssh 即为免密码输入的繁琐过程的配置 打开终端，输入 ssh localhost 是否以前有过配置，没有的话 输入ssh-keygen -t dsa -P &#39;&#39; -f ~/.ssh/id_dsa 回车至可以输入下一行命令行，输入 cat ~/.ssh/id_dsa.pub &gt;&gt;~/.ssh/authorized_keys，再次输入验证 ssh localhost，发现不需要密码输入了（如图） 配置Hadoop伪分布式 找到下面所有需要的配置文件 Finder –&gt; hadoop2.8.1 –&gt; libexec –&gt; etc –&gt; hadoop 打开 hadoop-env.sh 将其中的export HADOOP_OPTS=&quot;$HADOOP_OPTS -Djava.net.preferIPv4Stack=true&quot; 改为export HADOOP_OPTS=&quot;$HADOOP_OPTS -Djava.net.preferIPv4Stack=true -Djava.security.krb5.realm= -Djava.security.krb5.kdc=&quot; ` 打开 yarn-env.sh在下面添加YARN_OPTS=&quot;$YARN_OPTS -Djava.security.krb5.realm=OX.AC.UK -Djava.security.krb5.kdc=kdc0.ox.ac.uk:kdc1.ox.ac.uk&quot; ` 打开 core-site.xml添加配置如下： ` &lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt;` 如图： 其中端口号：9000的对应以下的用eclipse搭建Hadoop时的窗口连接的 DFS Master Port 其中的 localhost 对应本机号，也可以自己根据需要设置 打开 hdfs-site.xml添加配置如下： `&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; ` 因为是一台机伪分布式，1 即可 打开 mapred-site.xml ，其中一般没有，需要将文件 mapred-site.xml.template 改为 mapred-site.xml 之后再进行配置过程添加配置如下： ` &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapred.child.java.opts&lt;/name&gt; &lt;value&gt;-Xmx4096m&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapred.job.tracker&lt;/name&gt; &lt;value&gt;localhost:9001&lt;/value&gt; &lt;/property&gt; ` 其中的 localhost 同样对应本机端，9001 默认端口号对应eclipse Hadoop环境搭建时的连接窗口中的 Map／Reducr Master Port，均可根据需要更改 打开 yarn-site.xml添加配置如下： ` &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; ` 启动过程 打开终端，先将目录对应到Hadoop2.8.1安装目录 cd /usr/local/Cellar/hadoop/2.8.1/sbin 格式化 HDFS 若是以前有过Hadoop启动，清除 rm -rf /tmp/hadoop-tanjiti 格式化 hadoop namenode -format 启动 1`./start-all.sh` 输入 jps,查看是否部署伪分布式成功（如图） 在想要关闭Hadoop可以如下输入推出 1`./stop-all.sh` 配置Hadoop伪分布式介绍结束，开始eclipse的Hadoop开发环境搭建，这是一个折磨人的过程，我花了一天时间终于建好（比较幸运了..）。记录在下 再次声明，在我的简书均已声明来处，同时感谢那一些默默分享的人们。 eclipse搭建Hadoop开发环境配置好需要的前提 参考：参考 进行以下过程前提： 在Hadoop端打开的情况下进行连接开发 将下载好的插件放入eclipse的 plugin 目录文件夹（如图1，图2），之后重新打开eclipse之后，打开eclipse preferences 偏好设置可以看到插件（如图3） 图1 图2 图3 对应自己的Hadoop下载地址（如图） 打开窗口端添加 Map／Reduce 窗口（如图） 右键添加 DFS Locations 连接配置（如图1，图2） 图1 图2 其中 Localtion name 随意 两边的端口号根据我上方提到的，可以根据需要自行更改 若是有文件夹出现（如图），表示连接成功 如果是文件显示为0，不要慌张，这是需要自己来增加文件的（如图1）增加文件，注意，并且在在每一次创建文件要自行刷新（如图2），也大大避免了运行命令行的繁琐过程，增加一个 user 文件夹（如图3），在user 下增加一个 hadoop 文件夹，在 hadoop 下增加一个 input 文件夹，在其下并且导入安装Hadoop目录中的 README.txt文件（如图4，图5）。注意，许多教程中说的 output 文件夹是不需要自行增加的，是系统在运行结果出来后自行创建的，这是一个坑 图1 图2 图3 图4 图5 最终效果： 建立一个Hadoop项目 如图1，图2，图3 图1 图2 名字随意取 图3 在这个项目下像建立一个java工程一样建立一个Hadoop工程名为 WorkCount 文件（如图1），并且自行配置导入所有的Hadoop的包（如图2，图3），包得要自行导入了，这个是比较麻烦一点，但是毕竟一个项目导入一次就一劳永逸啦～ 图1 图2 图3 之后效果如下 将Hadoop内的被修改过的文件与日志文件加入在工程下，即将配置过的文件与其中的日志文件加入到工程文件中的 src 目录下，否则会发生不必要的错误。如下图 我是将整个的 Hadoop 目录（其中包括所有配置文件的哪个Hadoop文件夹）都加入在了 src 目录下 效果如下 测试WorkCount例子 注意，工程命为 WorkCount 的前提下 在建立的工程中输入如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import java.io.IOException;import java.util.StringTokenizer; import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;import org.apache.hadoop.util.GenericOptionsParser;public class WordCount &#123;public static class TokenizerMapper extends Mapper&lt;Object, Text, Text, IntWritable&gt;&#123; private final static IntWritable one = new IntWritable(1); private Text word = new Text(); public void map(Object key, Text value, Context context ) throws IOException, InterruptedException &#123; StringTokenizer itr = new StringTokenizer(value.toString()); while (itr.hasMoreTokens()) &#123; word.set(itr.nextToken()); context.write(word, one); &#125; &#125;&#125; public static class IntSumReducer extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt; &#123; private IntWritable result = new IntWritable(); public void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context ) throws IOException, InterruptedException &#123; int sum = 0; for (IntWritable val : values) &#123; sum += val.get(); &#125; result.set(sum); context.write(key, result); &#125;&#125; public static void main(String[] args) throws Exception &#123; Configuration conf = new Configuration(); String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs(); if (otherArgs.length != 2) &#123; System.err.println("Usage: wordcount &lt;in&gt; &lt;out&gt;"); System.exit(2); &#125; Job job = new Job(conf, "word count"); job.setJarByClass(WordCount.class); job.setMapperClass(TokenizerMapper.class); job.setCombinerClass(IntSumReducer.class); job.setReducerClass(IntSumReducer.class); job.setOutputKeyClass(Text.class); job.setOutputValueClass(IntWritable.class); FileInputFormat.addInputPath(job, new Path(otherArgs[0])); FileOutputFormat.setOutputPath(job, new Path(otherArgs[1])); System.exit(job.waitForCompletion(true) ? 0 : 1); &#125; &#125; 配置参数 如图1，如图2，其中的参数配置，即机号，端口号，我们先前建立的 user hadoop input 一一对应，可以根据需要自行更改，其中的 output 是结果出来以后自行创建的，并且记得要在每一次运行结果前更改 output 为其他的不冲突的名字，比如 output1(如图3） 图1 图2 图3 运行 点击运行刚刚配置好的参数配置运行（如图） 在系统自行创建的 output 的文件夹（看不到文件夹就如上刷新）下面的文件可以看到结果输出了（如图） 至此，环境搭建大功告成！！！期间没有像其他人遇到什么问题，不过虽然是迟早的事，不过也是在以后了，哈哈😹。 GoodJ,可以开始安心学习Hadoop基础理论了🤓 在eclipse中直接读取Hadoop源码 参考我的这一篇文章 最后 提示 要记得在看不到文件时就刷新。 注意配置的字母多少与大小。 每一次在输出时要将参数中的 output 部分更改名字，以免冲突。 资源链接 Hadoop官网快速入门参考 Hadoop官网文档 MapReduce官网学习 Hadoop零基础学习资源]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
        <category>Hadoop</category>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Hadoop</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[eclipse下直接读取Hadoop源码配置]]></title>
    <url>%2F2017%2F09%2F30%2Feclipse%E4%B8%8B%E7%9B%B4%E6%8E%A5%E8%AF%BB%E5%8F%96Hadoop%E6%BA%90%E7%A0%81%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言 参考源码很重要啦，记录下来。 参考： 参考 Mac系统 eclipse Hadoop2.X.src源码包（已经解压） 如以下例图 官网下载 例图： 例图（解压后）： 配置过程 在需要的关键词上停留，按F3快捷键，或者是如图选择 Open Declaration 配置，手动写上解压包的位置，之后会发现可以查看源码了。]]></content>
      <categories>
        <category>笔记</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo 博客结合七牛云超链接视频与音乐]]></title>
    <url>%2F2017%2F09%2F30%2Fhexo-%E5%8D%9A%E5%AE%A2%E7%BB%93%E5%90%88%E4%B8%83%E7%89%9B%E4%BA%91%E8%B6%85%E9%93%BE%E6%8E%A5%E8%A7%86%E9%A2%91%E4%B8%8E%E9%9F%B3%E4%B9%90%2F</url>
    <content type="text"><![CDATA[七牛云结合hexo博客，导入视频与音乐文件 前言 需要注册七云牛 可以参考我的这一篇文章 以下为视频教学，点击查看效果(由于为了节省在七🐂云的空间，本人将它放在了YouTube） 点击查看教学视频 音乐效果如下（这个是本地的，可以直接查看） 音乐欣赏 一条龙部署谷歌视频教学（在YouTube）： 点击查看]]></content>
      <categories>
        <category>笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Hexo</tag>
        <tag>七牛云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大道至简]]></title>
    <url>%2F2017%2F09%2F28%2F%E5%A4%A7%E9%81%93%E8%87%B3%E7%AE%80%2F</url>
    <content type="text"><![CDATA[不可否认，在生活中的大多数思考的目的我们都只是在尽力地在去说服我们自己罢了。 今天看了《沉思录》的一些章节，又是引发了我的思考。当然，这本书真的对我来说是对我影响最为大的一本书了，至少是目前在我看过的所有书中，她曾无数次引发我思考，对这个世间，对整个自然，又或者是对整个宇宙。冥冥之中，我从中收获了许多，我的精神因此较从前也开朗不少。这是一本好书。 今天看到的是，作者说了关于性行为的一些看法。 “性行为能为你带来快乐，但是经过时间与经验的总结，随意的性行为并不能给你带来长久的满足，只能表示我们对自己和他人的不尊重。性行为并不是一种游戏，它在情感上和生活中都会产生实实在在的后果。所以要避免随意性行为，就要避免婚前性行为。忽视这一点，就是在自我贬低，漠视人类关系的重要性。也许有人会觉得这种想法过于拘谨和老套，遇到这种人，他们可能会把随意性行为当作一种正常的生活方式。不必去强迫他们接受我的观点，因为这会让他们觉得我在自以为是。不要因为贪图一时快乐而发生随意的性行为，带有责任和义务的积极的性行为，才能构成你完整的人生、健康的生活。” 摘录来自: 马可·奥勒留. “沉思录大全集(超值白金版)”。 然而关于作者的看法我是有一些异议的，我是不怎么认同的。如果说我们因为此而应该对我们有这方面的约束，那么也毫无疑问是关乎到我们的自由的，有人会说我的这个自由属于任性，我当然不认同这种说法，自由与任性根本就是两回事。 如果说我们不认同作者的这种说法，我们热衷于你情我愿的性行为，又或者说是自由的选择对象去享受性交，即便是在有了配偶之后，当然，必须是在双方都愿意的情况下。那么肯定有人会说这是不人道，不道德的，是不合理的，也是不允许的。我的意思是这当然不属于所谓的“淫乱”，我说的是在双方只是单单因为这方面的需求，并且是没有利益方面的做交换的筹码的，并且双方都是你情我愿的，不存在强迫的情况下的这种性行为。那么我为什么要说这么一大堆的东西来解释我的不认同呢？说到底，这是对于绝大多数人类来说是一种不可碰触的禁区的，这是对于他们来说是一种渗入脑子里的一种限制的。那么又何来的这种限制？ 人类由所谓的野蛮社会进步到了今天的所谓的文明社会，当然不能全全说是所谓的“文明”。无论在哪个国家，都有他们所认为的“礼节”与“道德”的，这恰恰是对我们的限制的主要来源，对于多数人看来，没有这种限制，人类与野蛮社会的“文明”无区别，即人类会因为没有这种限制而后退到野蛮社会，对于他们来说，这是一种社会后退的，错乱的进步，也是不应该，不允许的。这些个限制不难知道是从野蛮社会之中繁衍出来的，即为是在以野蛮社会的基础下得出的这些个”礼“与”道“，并且渐渐的得到多数人的认可，以致成为了如今人类社会所谓的精神与行为限制。 我清楚的认识到这些个所谓的”礼“与”道“，都是提出的那些个不同于大多数的当时社会并且见识到了野蛮是残暴的应该是不可取的人是为了”和“而提出来的。即”以和为贵“的思想下才繁衍了这些个”礼“，”道“。 当今的人类之所以认同亦然也是因为认同这是正确的，即为”和“对于他们来说是需要的，对这个社会来说是需要的，所以这些个”礼“与”道“自然会占到了”限制“的作用了，换取得来的将是多数人想要的”和“，即我们平时都说的“和平”一词。 以上是我认为的，“礼”与“道”这些个“限制”的来由。 但是，我们看书读书，并不是为了完全的盲目的去吸收一个人的全部思想，不然真的是与行尸走肉没有任何的区别。对于我们来说，大多数的人来说如果我们认可的，我们可以选择性吸收，来增加自己对于这个人世间的种种看法，即自我思考的能力。然而对于不认同的，我们也应该来加以思考来“说服”自己，并且允许自己的“异议”存在。 大“道”至简，源于生活。这个人世间因为每个人的选择与思维的不同，所以才精彩。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>思考笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初学Linux有感]]></title>
    <url>%2F2017%2F09%2F27%2F%E5%88%9D%E5%AD%A6Linux%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[最近看《鸟哥的Linux私房菜》学习Linux，体验非常的不错，关键是没有想到这部书里面在第一节还介绍了一些计算机概论的知识，虽然并不是非常的深入，但是经过此入门认识已经是足够了，至少是达到了我的一些需求，也达到我的预期。之后的若是再需要想要认识的话，我想还是有必要去找一本专门的书来补充的，亦或者是需要在网上看一些详细的介绍的。 初学Linux的一些感想 没想到终端的命令行会让我感到非常的兴奋，大概是在Mac上也是经常使用终端的缘故吧，但是在Linux上的体验又是更胜一筹，也有可能与我本身喜欢小界面编写有一定关系啦。 命令行功能的强大。 还有待去了解更多..]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 博客在谷歌搜索引擎中的优化，目标：上头条..]]></title>
    <url>%2F2017%2F09%2F27%2FHexo-%E5%8D%9A%E5%AE%A2%E5%9C%A8%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%EF%BC%8C%E7%9B%AE%E6%A0%87%EF%BC%9A%E4%B8%8A%E5%A4%B4%E6%9D%A1%2F</url>
    <content type="text"><![CDATA[前言 在搜索引擎中的优化可以增加在他人搜索相关的字词时，可以增加我们自己的博客的展现几率，自己的东西，自己的成果可以帮助更多的人，可以与他人分享是一件快乐的事。而现在的我，是快乐的。（如图）🤓 我的博客内容因为优化已经登上了相关内容的第一名，意味着上了谷歌搜索引擎的头条了，而看完我接下来的文章，你也可以登上谷歌之巅 开始优化的过程 前提是当然你的博客已经是被谷歌收录了，没有的话可以参考我的这一篇文章 进入谷歌搜索平台 –&gt; 抓取 –&gt; Google抓取工具 输入自己的文章域名，完成之后点击 抓取 完成之后会有以下界面 点击下方的 请求编入索引 进入这个界面，验证提交即可 当然在每次写完文章之后，都可以这样请求，这样你的文章就可以让更多的人看到了。 限制谷歌搜索引擎对博客内容的抓取 即通过修改我们的 robots.txt 文件内容，即这个文件是在我们通过生成 sitemap.xml 文件自动生成的，修改完上交谷歌控制平台就好了。修改完可以将其中的内容手动复制粘贴上去，然后提交就好了。如图 最后 参考： 参考]]></content>
      <categories>
        <category>笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>SEO优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下VirtualBox虚拟机Centos7配置Wifi，用佩带的火狐翻墙]]></title>
    <url>%2F2017%2F09%2F27%2FMac%E4%B8%8BVirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BACentos7%E9%85%8D%E7%BD%AEWifi%EF%BC%8C%E7%94%A8%E4%BD%A9%E5%B8%A6%E7%9A%84%E7%81%AB%E7%8B%90%E7%BF%BB%E5%A2%99%2F</url>
    <content type="text"><![CDATA[前言 Mac系统 VirtualBox虚拟机 已经安装好的Centos7系统 可用的WiFi 最近自己在学习Linux系统，想到了在虚拟机中如何为系统配置WiFi的问题，毕竟以后下载软件也需要。我仅仅花了两分钟就把这个给摸索出来了，哈哈，绝对是原创哦。 废话不多说，马上开始我的表演。 配置 第一步当然是在有Wi-Fi的情况下咯 第二步当然是已是打开了虚拟机咯 点击图标（如上图），再点击 有线设置 ，选择 网络代理，之后写上本机连接的Wi-Fi的名称（当然本机要是在连接的情况下咯） 然后发现可以正常的在虚拟机上上网了，是不是很溜？我是天才，哈哈！ 用佩带的火狐浏览器翻墙 打开佩带的浏览器点击 添加组件 搜索 hoxx 的插件，并且下载 登陆账号。没有的话就申请一个好了 选择免费服务器 可以上谷歌咯 最后 goodluck]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>学习笔记</tag>
        <tag>VirtualBox虚拟机</tag>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下解决Matlab License Manager Error -8问题]]></title>
    <url>%2F2017%2F09%2F27%2FMac%E4%B8%8B%E8%A7%A3%E5%86%B3Matlab-License-Manager-Error-8%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题如下： 其实很简单。 前提是各位一定都是下的盗版的…（在我本人的简书博客的“资源”这一篇文章里也有下载资源，不过各位有钱的尽量还是支持正版哦…） 打开下好的盗版文件之中是有一个补丁名为Crack的文件的： （即为其中的Crack文件）其中有一个插件：如下图 新建一个窗口打开matlab的包的内容：如下图 打开bin: 点开maci64: 再将这个插件移动到maci64文件当中： 替换即可。 关闭窗口。 注意：最好还是将前面的提到的Crack文件备份一个，避免又出现同样的问题。 最后则可以正常打开了。]]></content>
      <categories>
        <category>笔记</category>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>问题记录笔记</tag>
        <tag>Mac</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谈专家组来学校检查与“利”]]></title>
    <url>%2F2017%2F09%2F27%2F%E8%B0%88%E4%B8%93%E5%AE%B6%E7%BB%84%E6%9D%A5%E5%AD%A6%E6%A0%A1%E6%A3%80%E6%9F%A5%E4%B8%8E%E2%80%9C%E5%88%A9%E2%80%9D%2F</url>
    <content type="text"><![CDATA[专家组来学校检查留在窝里，又要出来活动活动了，这一群所谓的专家们。 他们靠抽签的方式来决定去哪个专业的哪一些班级来听课，“有幸”的是我们班级被抽中了，喔～，代表着学校的名义来应付所谓的专家组的检查，我是有一些不自然了，昨天在专家组眼皮子底下上课的老师们个个也都是不自然了，上课的声音不是颤抖就是结巴。笑死我了。这个是与学校的名誉相挂钩的，所以我的母校来啦，多么低级的各种“战术”开始发行了，所谓的导员游说，面卷考察，多么愚昧的领导人才能想得出这样的方式。反正我也是不会去关注。 你们随意。你们就与“专家组”去自娱自乐好了。 “利”谈“利”这个字词仿佛都是让人不舒服的，无论是“利益”，还是“利用”，好似都给人一种不好的印象。我们从小在这个国家，看得到的有关的电视，书籍，关于“利”却大都是来描述一些所谓的“恶”与“坏”的，也是无可奈何了吧，底层的老百姓除了被人管制的苟且之外，也只有通过一些轨道来表达自己的思想了。但是如此久而久之，“利”便是容易把人都给洗脑，脑子里关于它的都是“厌恶”的印象。今天看了《沉思录》的一些章节，里面关于“利”的相关的字词都是信手拈来，我却是读不出什么厌恶的感觉了。 可以知道，明显的是各个国家地区的人文景观与社会风气有不一般的差别的。但是在中国，在这一片土地上的这个字词却是给我一种明显的敏感的不舒畅。 我也只是底层的老百姓，被人管制着。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（Mac下）用Hexo3.X next5.1.2搭建自己的博客，安装，正确配置，部署谷歌，结合用七牛云写作]]></title>
    <url>%2F2017%2F09%2F26%2F%EF%BC%88Mac%E4%B8%8B%EF%BC%89%E7%94%A8Hexo3-X-next5-1-2%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%8C%E5%AE%89%E8%A3%85%EF%BC%8C%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%83%A8%E7%BD%B2%E8%B0%B7%E6%AD%8C%EF%BC%8C%E7%BB%93%E5%90%88%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%86%99%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言 Hexo3.X next主题5.1.2 Mac系统 github账号密码 在自己终于搭建了一个自己的个人独立博客后，虽然还有一些小的空间之类的限制，不过也是有余了。 因为这个版本的不同导致我在这个新的版本走了不少的弯路，看了官网也发现了有一些不正确的配置，现在打算记录下来帮助需要的朋友。 开始 了解Hexo: Hexo官网 安装 因为安装的这个部分没有变动，所以本人不再详细介绍了。下面提供我在安装时参考的网页教程，按照其中的顺序步骤安装即可。 不过我会在此提醒一下一些细节的问题。 参考网页： 参考1 参考2 参考3 这是我个人感觉比较好的几篇文章，在以上的页面中可以依次参考，最好是同时打开参考，看一遍左右就可以知道大概需要做那一些工作了。 安装过程中的细节提示 写完后的空格应该要注意留。 大小写的严格要求，应该反复检查，往往可以抓出问题的所在。 配置文件的编写，或者是文件的误删。 比如在需要GitHub的域名时的前面的repo 或者是 repository ，两者都是可行的。 各个命令行的顺序运行。 配置 详细的配置都在next主题的官网可以找到：next主题官网 但是其中有一些配置是错误的，配置完达不到预期效果的，我将一一进行补充说明，以下的相关的配置说明是经过本人配置了多次得到的发现问题的所在。 配置完主题后必须要记得使用命令 hexo s -debug 表示主题调试，否则肯定达不到预期的效果！并且应该要注意记得在每次配置完主题在使用这个命令后，应该要打开 http://localhost:4000/ 来进行查看网页的情况，以便出现错误了，可以提前知道。 开始使用的配置 next开始使用的官网 即在配置标签的小图标时的错误，以下才是正确的配置，即不要分开来编写： 即为菜单的小图标的配置问题 next主题配置next主题配置官网 以下为配置链接时的小图标的问题 以上是next主题开始使用及主题配置的相关的官网配置的纠正错误 但是如果想要解决自己的网页打开慢的问题，可以如下配置： 即在 font 下的 global 的子目录处 family 对应的字体去掉并且在上方加上 use_font_lato: flase （如图），这是因为在打开博客网页的时候会加载谷歌字体，需要占大量的时间，官网还有一个加速的配置，继续往文章下看。 第三方服务配置第三方配置的官网 注意在百度统计的这个配置上面是行不通的，即为以下的这个配置是可产生错误的，本人经过多次测试 内建标签next主题的内建标签官网配置 本人暂时没用到 进阶配置next进阶配置官网 在这个配置中是可以加速网页打开的，本人亲自测试，快了不止一点点（如下图1），注意的是需要将其中的（如下图2）_internal: 后面改为 lib ,因为新的版本已经将 vendors 文件夹改为了 lib,若是不改，动画效果展示会没有预期的效果出现的！ 图1 图2 提示 在每次配置完主题，或者是写完文章上传命令的顺序应该是： hexo s -debug 主题调示生效 并且打开 http://localhost:4000 查看是否无问题 hexo clean. 清理页面缓存 hexo g hexo d 上交到GitHub 将网页部署到谷歌，即被谷歌收录 第一步 注册谷歌 因为本人时间问题，请参考： 仅仅参考其中的验证过程及后续的站点地图过程即可，中间的过程我来进行补充，不然会发生错误！！！！！！！ 参考1 参考2 在验证之后的配置补充 进入主要配置文件，将url对应的网站换成自己的之后（如图） 再命令npm install hexo-generator-sitemap --save hexo -g hexo -d 生成自己对应的 sitemap.xml 文件之后再进行站点的环节！！！ 是这样的才是正确的，如图 如果是在配置站点时提示出现错误的，即为错误的原因是没有更改url的问题 修改文件 robots.txt 配置，即为你允许搜索引擎搜索你的哪一些的内容的配置。如我修改的 具体可以参考此篇文章，seo优化，让你的博客在谷歌搜索得到优化： 参考 将图片存在七牛云，一齐写作 第一步，为什么要用七牛云？因为我们的博客基于GitHub上会有内存的限制，不能将每一张图片上传GitHub空间，而七云牛之类的可以解决这个问题，并且空间也足够用了。 了解七云牛 注册七云牛 点击 存储对象 新建一个空间，名字随意 点击 镜像储存之后绑定自己的域名，可以加速访问，并且写作添加图片也需要。 之后可以上传文件了 在写作时的添加图片格式，复制外链，然后运用markdown语法即可完成图片添加 最后 在Mac上的可以用Macdown来写markdown语法 Macdown下载 在使用命令行的过程时，有时使用 hexo -g hexo -d 会出现找不到命令行的错误提示。使用完整的命令行就可以解决了，即 hexo clean`` hexo generate`` hexo deploy 在出现 unable to access &#39;https://github.com/... 之类的问题，也是切换命令行的简写或者是全写即可解决。 声明 被参考的其他网页均在我的简书上已经声明]]></content>
      <categories>
        <category>笔记</category>
        <category>Hexo</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>教程笔记</tag>
        <tag>Hexo</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在自己的独立博客，第一篇总得说一些什么..]]></title>
    <url>%2F2017%2F09%2F26%2F%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%EF%BC%8C%E7%AC%AC%E4%B8%80%E7%AF%87%E6%80%BB%E5%BE%97%E8%AF%B4%E4%B8%80%E4%BA%9B%E4%BB%80%E4%B9%88%2F</url>
    <content type="text"><![CDATA[本来在前几天就建立好了这个独立博客了，到现在才来写上，日期更改了一下。 开门见山吧。 为什么要建立这个博客我对于一个博客的见解： 一个自己的博客应该是一个自由的个人空间，可以是开放，也可以是封闭的，决定权在于自己。 一个自己的博客应该是代表着自己的个人的想法与展示个人思维的空间，即在这里应该是不受任何约束的。 一个自己的博客应该是自己的一个思维空间，在这里可以大胆的说出自己的想法的，这里是自我言论的地方，并且都仅仅是代表个人的。 一个自己的博客可以是一个家的样子，自己来搭配，自己来管理，可以迎接来到这里的来访者，到了晚上的时候，也可以是自己聆听自己的心灵空间。 我建立的初衷： 自由。自由对我来说是不可或缺的。 空间。我想要一个空间来记录自己的成长与学习的资料，我是要求把他开放的，并且希望通过这个空间能与更多的人交流。 回报。我是因为在这个拥有无数个默默贡献者的巨大网络空间才成长到今天的这个模样的，而现在，我希望我也能对这个网络世界贡献一点力量，帮助后来人成长，就像当初的我被那一些默默的，不知姓名的人们帮助一样。这对于我来说是一件可以让我感到开心的事。 对于我影响很大的： 哲学。主要是古代西方世界的哲人们，主要是自然哲学。让我至今生活的更美好，我很感谢她。 自己感兴趣的科技力量。 乔丹。他的精神与华丽的球技影响了我。 乔布斯。活着就是为了改变世界。哈 最后的： 希望可以帮助更多的人，这应该是我建立这个博客的主要原因。 希望自己可以坚持记录自己的成长的一历一迹。 特别的： 感谢Hexo。 也感谢其创始者，给我提供了这个平台，实现了我的个人独立博客需求。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SS的使用与下载]]></title>
    <url>%2F2017%2F09%2F25%2FSS%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[虽然说是Mac演示，其实其他的PC平台也可以参考参考。 好了。其实我老早就想写一篇这之类的文章了。很多同学学习的时候需要翻墙什么的啦，即教一下还不会利用一些方式去翻墙的同学朋友了，废话不多说，我现在开始说说怎么利用SS去代理网桥！！ 第一步：结合你的PC平台去下载相关的SS软件： 点击这里下载（注意你的PC平台对应好再点击下载） 下载之后，安装界面一路点击就好了。 下载好之后，打开会有一个飞机样式在屏幕上方。 第二步： 点开软件，点击服务器（我的是Mac，其他的PC平台应该都差不了多少啦） （在这里点击打开服务器设定） ￼ （点击“+”号，创建服务器连接界面，在此就需要一些帐号了） ￼ 有些可以通过二维码登录的，可以先打开相关的帐号网页，点击相关帐号的二维码，再到软件上点击“从屏幕上扫描二维码”即可自动识别登录 第三步：好了各位，现在你们需要的就是找这些SS的帐号（有免费，也有收费的），并且输入相对应的号就O了。再去打开浏览器搜索谷歌之类的就发现可以进去了。（当然，如果是进不去，可能是帐号的问题，换一个帐号试试看）帐号就下面分享一些网站（有一些免费的帐号可以使用）： 免费账号 免费账号 第四步（个人建议）：（若是没必要可以跳过）： 点击这里 （请看到最后，总有你想要或者是感兴趣的） 最后：好了，到这里就差不多了。谢谢大家的查看。废话：这个世界很大很大，还有很多很多的事情需要我们去了解。本人去暗网查看过一些想看的资料，一些实情。有机会可以与各位分享如何进暗网的文章。文章在这里就结束了，希望每个人都有开开心心的每一天。 参考: 参考 Shadowsocks原理以及介绍： 原理]]></content>
      <categories>
        <category>软件使用</category>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>SS</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[集思]]></title>
    <url>%2F2017%2F09%2F25%2F%E9%9B%86%E6%80%9D%2F</url>
    <content type="text"><![CDATA[1. 在这里，在今天，我也有了自己的博客了。哈哈。 我很小的时候便是七龙珠迷呢，二话不说，我想我应该把头像换成这个。哈哈。 我是一个有自我约束力的人，设置的时候但我有一些犹豫了。哈哈 从前我一直期待着有这样一个自己的平台，即尝试着去写博客玩玩，没想到这么快就可以开始了。但是现在刚刚创建了自己的小窝后，居然不知该如何说一些什么是好了。 来说说为什么来这里的一些想法吧，这个地方将是我的新的小窝了，没错，属于我自己的小窝。平时在生活中会有好多的想法与心得呢，想着有这么一个平台可以记录下来。不过现在该是实现了一半了吧。 我想在这里从现在就开始记录下来一些想写的，或者是想法呀，心得啊，现在此刻有一些小窃喜，我知道这种感觉，但我说不出来，怎么描述呢。就像是小时候偷偷地买了一本新的漫画书到手的那种感觉吧，哈哈。 简书的这个排版挺好，不至于密密麻麻的咯，哈哈。 这个文集显示的是日记本，但对于我来说，随笔与日记本好像是没有区别，随心所欲咯，从小到大都不怎么喜欢被约束呢。不过，日记本的格式倒是合我的胃口的，哈哈。 我不喜欢取目哗众的感觉，但是从前我总是有这么一个流弊，现在在这个平台可能亦然是对于我是一个锻炼。如今，每次看到从前的被记录下来的自己的言语，总是会有莫名的羞愧感。 为何要来这里写下一些东西呢，除了是这里的空间大之外，可能就是我迫切希望能得到与更多优秀的人交流的机会。 现在，我开始冷静下来了一些，第一篇文章难免会有一些激动之情呢。哈哈 我从来都不愿意刻意去想一些不必要的东西，事实上，就如去想着去写一篇文章该怎么写之类的。有感而发咯。 我承认我写到这里，我开始有一些飘飘然的感觉了，这样一点都不好。这真的是一个对于我来说是一个流弊，我个人并不喜欢这种感觉。我想我还是需要去尝试更多一些，改变这个让人不舒服的感觉。一面飘飘然，然而更多的是羞愧的感觉。 最后，我应当知道并且去记住。 这里终究只是记录我成长点滴的平台罢了。 终于写完了。 2. 由于时间问题至于整个文章我将要分开来进行记录了。 为什么要写这个文章，我认为很有必要，其实我亦有这个冲动。 我想从以下几个主要方面来一一记录。 一，关于我： 每一个时段都是决定我这一生是否是我追求理想当中的人那个样子的重要衡量（至少现在以为的那个理想的人的样子），我相信我的思维绝对还会改变的。 现在我在这里写下，我这一生永远也不会向世俗妥协，即使我会有一人走向肉体灰飞烟灭的那一刻。 我如今快要步入20岁的年纪了，毫无疑问，这将是我的一个思维大转变的时段。我能感觉的到现在的我真的是与从前有了很大的改变了，当然，我指的是我的思维。 从前的我和从前的人们好似格外不同又好似分毫未差，这就是从前的我的想法。在同一年纪的人群里，我看到了有人在努力的学习，也有的人在自甘堕落，对于自甘堕落的那一些人总是要多一些呢，哈哈，这又或许是像我现在理解的那般，真正醒悟的人并且不断努力去寻求人生意义追求真理的人在这个世上总是占少数部分的，现在的人们和过去的人们相比又是如何如何，我不知也不愿去了解了，真正的历史只有时间知道，至少我现在理解的是这样。 从前我总是会有莫名的像是被周围的人们抛弃的一种感觉，后来现在意识到不过是自己的自尊心受不了罢了，我是有一些非常的强势的（孩子气叛逆类型的强势），现在的我可能还会有那么一点点，哈哈，不过我已经尽量在克制了，我开始变得很会“照顾自己”了，说成这样，不如说是我的自我约束力越来越强了，我开始意识到我的身体应该要健康，前提是我平常要不断的自我约束与不断的克制，我开始意识到我要不断的寻求真理，而真理在平常生活的每一个角落，我在想，如果有上帝与我谈及真理，它会不会也是这样说呢？哈哈。真理至简，我如今一直很认同这句话。我也想着要好奇的去发现真相，现在发现所有的如此为此付出，不过是浪费我的生命罢了，我开始对于这一方面的好奇变淡了，当然，有一些好奇真的是我不应该去寻求的，但我平时也会有这种冲动，哈哈，不过我也开始意识到，谣言有时或许就是真相，而真相在这个人类社会太难得了。 现在的我在写现在的这些竟然会有一些兴奋了，这是我没有想到的。 从前的我不爱读书（仅仅指的是单纯的读书），在我出生的这个国家，人们总是在自己的孩子还小的时候叫他们（她们）好好读书，而这只是一少数人，即真正懂得的人给他们的后人说的教训罢了，现在的多数人以为的读书就是在学校里的成绩，多数人是不知道读书的好处在哪里还且去跟那些真正的追求真理用尽一生至于最后生命在这个世上殆尽的人的“风”并且打着“爱”口号来要求自己的孩子去学校考得好成绩的，多数人在人群里久了也就离世俗越来越近了。后来在世俗里的他们以为这就是人类应该有的文化，居然去教导自己的后人应该这样去做，这真的是一件可笑可悲的人类历迹。多数人是不知道这个世界上有真理这一回事的。 我很感谢我在别人空闲的时候爱上了读书，读书，是我在这个世界上感觉最美好的一件事情。从前我看完一本书，会为作者的离去而伤心落泪，而现在的我除了感激毫无感觉。西方的文学对我的影响是有改变性的，让我的思维有了巨大的改变，我很感谢能在这个美好的年纪感受到了这么好的书籍，了解到那些真正在不断追求人生意义的人的一些思维与想法。我很爱这种感觉，一种教会我自由的感觉，一种教会我如何生活的更好的感觉。读书将会是我这一生会一直做的事，至死不渝？哈哈。 我预感到这一篇文章将要进入尾声了。 现在的我能够按照我的思维去看待更多的问题了，然而我意识到我的能力还远远不够我的预期，除了不断地去尝试去探索，别无他法。 从前的我相信有人身上存在伟大，现在的我依然相信着。我相信伟大在每一个生活的角落，在这整个世界的，宇宙的每一个角落里，而不应该以一些个为人类进步带来改变的人的品质来衡量真正的伟大，那对于他们来说或许只是他们的工作，他们热爱的并且愿意去付出生命地去探索的。每个人都是伟大的，有的我们看到了，有的我们看不到，更多的是我们没有机会看到。 关于平凡，当我们想象着整个无边的宇宙，在这里在这个星球上的每一个人难道还有不平凡可言？在平凡之路上的我们，却是总是在想着不平凡，殊不知所谓的不平凡就是平凡。 人似一片一片落叶，从同一颗树上出生，随着一年四季的变化，我们都要长大，都要离开。有的叶子随风走了，飘来飘去飘到了异乡，他们之间最后有的回来了，有的没有回来。回来的，落叶归根。没有回来的，有的不知去向，有的腐烂在异乡，大树除了默默还是默默。又一年，大树上新的叶子慢慢的像从前一样的无变化的，都冒出来了。 关于人生，我所认为的人生，就是来去都是一无所有。我们带着无知的空壳来到这个世上，急急忙忙过着我们一种以为的生活，到了最后，我们流着泪离开这个世界，不是因为不舍，也不是因为有着种种遗憾，而是发现了我们到了自己忙忙碌碌一生的最后，我们真的是一无所有，好似从来没有来过这个人世上一般。 我很喜欢一句话：真正的人生，是翻过一座座大山，到了最后发现，背后却是什么也没有。 对于现在，我只想要尽可能的去了解更多，去发现我未曾看到，听到的人世间。 （想着也是对于自己的一封信，还是留下时间地点吧，哈哈）。 写于：大学（黑龙江科技大学图书馆） 时间：2017.8.29 （我的现在的这个人生时段学弟学妹快要来了….） 3. 我从未像今天一样感到无尽的孤独。从来未曾像今天一样，渴望得到真正的那些有良知的人们的心声。 我为祖国的未来担忧，为无数的在这里的人们担忧，而我如今现在除了流下泪水，却是什么也干不了。 我热爱这片土地，而如今这片土地却被没有良知的绝大多数人侵占着，人们没有人权没有言论自由，我在这里看到的除了愚昧无知的人们，居然还有企图将残暴的无人性可言的留给一群手无寸铁的学生们，将毒药强加于他们，他们还是成长的阶段啊。为什么这一群没有人性的人们可以走上讲台，为什么要将这样的毒药赋予他们，我看不到祖国这片我热爱的热爱的土地未来的模样。 一群愚人管理着这片土地，这里曾经散漫了无数人鲜血的土地，这一群人们却是在这里为了自己的私欲残忍地对待无数手无寸铁的人民，夺走了本应该属于人民的权利，这一群人们手里嘴里全是一徒虚名。 这一群人们为了霸占这片土地，为了虚有的权利与钱财，创建了自己的拥有邪教性质的团党，打着是热爱这片土地与正义的口号，欺骗与隐瞒，扩大着自己的阴谋，对于这里的人民的死活不顾不问，这一群对于人之性命不顾不问的暴徒们啊，真的是可悲可恨的一群苟活者们。为何要将暴力与谎言带来这片土地，这片神圣土地，这片我可以不顾一切为之付出生命的土地，这片我一直热爱着的土地，为何要加害于勇于争取人权的人民们，将谎言与无知带来这片土地，一群可恨的暴徒们啊，利用无尽的谎言欺骗着这里原本纯洁无邪的人们，为了那虚有徒表的政权？可笑啊可悲啊，中华民族几千年的伟大历程，无尽伟大的人文文化，在这里居然被一群暴徒企图想要在他们的统治下来扭曲，建立自己更为邪恶的王国。 无数的人们却是毫不知情，无数的人们又是装着毫不知情，无数的人们被这具有邪教性质的谎言洗脑慢慢的变得人不像人，还有着人们为了拯救这个国家，为了拯救这片土地，却是被这一群暴徒们加以残害。 国人们啊，什么时候可以站起来与这一群暴徒们决斗，拿回我们的这片土地，拿回这片生我们养我们的这片土地。但我现在看不到，在这一群暴徒之下，看不到我的祖国，我的这片土地未来的样子。 4. 所有的曾经存在于这个世上的却是还在如今被尊奉的人们，以及他们的曾经说过的却是如今依旧被现在的人所当做名言在这个人世间流传的话语，真的是人类史上一个天大的笑话，又或许是人类史上巨大的一个悲剧。 这是当今的人们没有信仰，不知真理何在的一种表现。 曾经过去存在的都已经成为过眼云烟，本应该消失殆尽，为何又要被这一群没有信仰，没有真正的去认识真理的人们到如今还要被拿来做为他们自己的所谓的信仰，无非是一种拿来掩饰自己从未追求真理的，如同行尸走肉的真实面目罢了。 唯有理性才能让我们在追求真理的路上不会迷失方向，没有理性又何来人格，又如何去挖掘自己的本性何在，本性的方向何在，说是一具行尸走肉又何妨。 唯有不断的维持理性，真理永远不会太远。唯有理性，才能真正的接触到真理的面貌。才不至于如同一具行尸走肉。虽然在这人世间，我们都会成为过眼云烟，永远离去至于回归大地，然而对于自然法则的原则，这只是属于自然的一种罢了，在这整个宇宙，整个自然，都无法避免，来来去去，更秋换代。 5. 既然这个人世间的所有不过是这个自然，这个宇宙法则的其中种种罢了，大多数人类到原始以来的野蛮与残暴，与当时的所有存在的生物没有任何区别，更为简便的可以理解为，人类只是这个自然的一部分，更是这个宇宙的小小砂砾。可以想象的到，人类如今的多元化并没有什么非常新鲜的东西存在可言，一切在自然中不过早已是司空见惯的现象罢了。为何如今总是会有一些东西让人们感到新奇呢，甚至于有人感觉不可思议的存在，我想这与历史的那一部分被时间所埋没的关系，或者是被人为的生物所有意的埋没亦然是有着不可或缺的关系的。 人类之中从诞生以来，是肯定有着乐于思考的那一群人们存在的，这一点从古罗马或者是古希腊的那一些哲人们留下的哲言就可以得知的，可想而知，有着这一群的存在是多么有意义的一件事，他们发现的自然宇宙的法则存在于这个所在的世间的种种之间的关系，流传至今，给予了无数后来人去认知到了这一些，并且会不断的传承下去，被那些乐于不断思考的后人去发现更多的法则秘密，这真的是人类最为伟大的一处了：思考。 那么既然善与恶都是法则之中情理之中的事情，并且在现在我开始慢慢的理解，认识到了那些所谓的有着邪恶的思想的坏人们也只是自然法则中不可或缺的存在罢了，我开始是有一些怜悯之心了。然而这却是与我在之前的为了人权人道这一些不过也是属于法则之中的一部分罢了的东西，我开始有一些思考了，即既然那些邪恶的存在是属于法则中的情理之中的，那我去做究竟会不会与法则产生冲突？我继续的维持人道人权会不会是属于反法则？这让我陷入了思考。 在这个法则中所谓的“好”与“坏”是共存的这一点是无可置疑，也是无可争议的，然而之所以在法则之中的所谓的“好”与“坏”是属于共存的，那就应该是有一点平衡存在的，即所谓的“好”与“坏”之间是有着一条界线存在的。当任何一方超越了这一界线之后，都是会有反抗出现的，要不然在人类没有参与到从前的自然生活里的时候从而导致了一些自然生物的永远离去（至少是这么认为的），为什么在这之前却是没有一方生物独大的时刻呢，即便是在所谓的恐龙时代这一点好似也没有发生过的。 现在在这一片土地上，可能是“坏”的一方的势力快要超越那一条界线了，所以有“好”的一方要来争取了，不准自己一方的界线被“坏”超越了，这真的是自然宇宙法则的一个再也不过典型的其中一个有力的依据罢了。而我是属于旁观者还是站出来成为所谓的“好”的一方呢（至少我现在是有这个想法的，即为“好”的一方）？ 然而我开始意识到了，我并不是上帝，所以亦然不可能是不变的旁观者（当然不否认有人选择），即对于所谓的旁观者而言，这一切这一群不过是属于法则之中的情理之中的罢了，所以不会选择去干涉这一切。我是属于这个法则中的一部分，所以我必须要从“好”或者是“恶”之中来进行选择吗？又或者是选择旁观者的身份？我开始有一些思考了。 或许对于我而言，在目前是倾斜于所谓的“好”的一方面的，因为所谓的“坏”是真正的侵犯到了真正的人所应该的生来具有的权利与本性的，这也是毫无疑问的是属于破坏法则的行为，即人生自由的所谓的称之为人权的东西。而这对于我而言亦然是不可或缺的。 所以在目前我选择”好“的一方。 6. 一群垃圾们，你们应当记住了，你们到死永远都是垃圾，不会有翻身之日的。 笑吧哭吧，这并不是你们的命运，只是你们应当的结果，为何自然在自古以来会有优胜劣汰之言，冥冥中这已是许多人信奉的所谓的真理了，因为已有了无数人在这个验证上做了牺牲品。而现在你们就是后来居上的牺牲品，可悲吗？可笑啊。不要去抱怨，不要去狡辩了，现在的你所在做的一切就是最好的表迹，害怕吗？可是现在的你们以此为荣啊。 7. 一： 所有的在这个地方或者是世上还在愤世嫉俗的人们真的是一群自以为是，和他们以为的那一群人们其实都是一样无异的人，无知并且愚蠢。即便曾经我亦是如此，即使这个地方及世界上有那么多的慵懒与处处都是的各个有理有据的借口不去自己去争取去进步去学习的人存在，那也不能因为如此而愤世嫉俗，且让自己变得“有色”去看待所有的人，这个真的是最傻不过的思维想法了。 清醒的人是很少的，但却更多的是一群自以为的清醒却是总是在愤世嫉俗的生活着的人们。不愿意去接受他们认为的所谓不如他自己的人的意见或者是想法，并且不愿意去看到他人不去学习争取进步的面貌，他们的想法总是抱有极端与自我为中心的思维看法，并且更容易的因此而越发狭义，从而使得自己的灵魂充斥着愤怒与偏见，然而，他们应该意识到这样伤害却总是自己，这真的是一种典型的无知与自以为是了，可笑的是，他们却总以为自己就是那一群清醒的为数不多的人类精英，这是多么可笑的一种思维想法。他们应该想到这个自然宇宙的宽广与容忍，并且多去思考这方面的问题，不要以为这是可笑的无知的幼稚的问题，若是真的这么认为，那你才是真正的无知与麻木啊，这样的人又是多么可悲啊。 二： 这个国家的领导人若是真正的关心人民与未来，若不是为了权力与利益而存在，为何在同胞们在外遇害之时没有做到雪中送炭？又是为何想要极力的去掩埋这一段历史悲剧？这真的是腐败无能的一种表现。从中国自古以来的所谓的“礼”与“仁爱”的一直的以传统文化去教导人们去以平和的态度去解决纷争与挑衅，然而这个国家的领导人却是以这个为借口，为了和平的去争取更多的利益去贪腐人民的血肉，只顾自身与所谓的亲人们的未来，不顾不管人民的死活，这样一群腐败无能的人们为何还有资格去领导这个国家去占有这块土地，为了继续的腐败，并且不断的去迫害更多的心智未曾成熟的年轻人们，去施以暴力并且还不忘打着人民的名义与国家的名义去镇压那一些真正的有良知的清醒的人们的反抗，在对外却是打着自以为的“大国”之名义对外宣传与他国建立交流，这个是多么可怕地一个国度啊。一群暴徒们霸占了这一片曾经有着孔子孟子这一般的圣人的土地，却还拿着“孔孟”之识去为自己当借口，不断的施以暴政，使得更多的国人因此磨灭了血性，自由人权与梦想。只有血性与梦想才能证明一个人还是活着的，若是没有血性没有梦想没有本性生就以来的自由人权，若是在他人伤及自身与亲人的情况下却是依然麻木着无动于衷，任人摆布，不争与妥协是为“礼”之道？可笑之极。虽然在西方哲学中，有哲人教人以平和与宽容去对待这一切，然而在伤及自身自由人权或者是生命安全之事，我们应该去有血性的去反抗，而不是选择沉默与容忍这一切真真切切的发生着的。 人就应该不失血性与梦想与自由，不然这有如行尸走肉一般又有何区别？没有区别。人可以有宽容与容忍，但是在必要时刻我们必须要去反抗争取，不是为了我们，而是为了无数后来的人们与人类的未来命运，亦然是为了这个自然宇宙之法则的平衡。 三： 今日荒唐之事如此之多，更多的是人太荒唐。 而我在想下一个百年，国人会醒吗？ 8. 不可否认，人真的是一种愚昧的生物。 今日晚看了一些关于中国共产党本质与一些关于“火星男孩”的文章，让我又有了一些新的思考，与其说是新的思考，不如说是从前的被我搁下的问题又被这一些内容给唤醒了，我又有了想要去思考的欲望了。在此不打算谈及中国共产党如何如何，其中一些东西我想已是许多人都心知肚明的了。 关于报道的”火星男孩“的一些其中的对话，让我有了思考的冲动的。 关于这一方面，即是关于宇宙的一些奥秘的方面。是的没错，我在现在是有了一些动摇了，我开始有一些相信上帝的存在的这一说法是否真实的而产生的动摇了。怀疑？倒不至于，我是相信自然之力是存在的（我所认为的自然之力包括了她的规律联系与种种的冥冥能力），这一点是毫无疑问的，无可争意的了，但我不相信上帝是否是真的存在的这一说法，因为在人类的历程中，有太多的不可思议的虚假被捏造致于它们的存在并且一直流传至今的。我是相信自然之力的规律与其中的冥冥联系的，但我依旧不相信有命运的这一说法，把所有的一切甚至于自己的生命交给所谓的命运，未免太可笑了。 既然在中国古代有着由人世间的一些种种事情而出现的一些用词并且都有流传至今的，有如因为一些残暴的无人性可言的政权打压与所谓的在当今来说的一些反人类的做法等一系列人为做法，才致于一些名家在他们的文章中的用词的描述，有如地狱，有如妖魔与鬼怪等等，我相信这一些不过是当时这一些人在当时的所见所闻但是真正的是为了用来描述惨状世态所虚构出来的词语罢了。那么，在所谓的西方的上帝一说，即也有可能的，是被人用来描述美好世界的一种追求或者是一种美好的信仰的才所被虚构出来的，并且流传至今的？其中固然结合了自然之力的种种关系，当然，在其他的宗教也是存在的，有如佛教等，都是有结合自然之力的规律的，后加以描述的所形成的如今的状态的。无可非议，自然之力的规律是深入人类的理解与已是渗入人心的存在了。 继续讨论”火星男孩“的所说的，有一个”神国“存在的，在控制着整个宇宙的存在的这样的一个”众神“国度。与我之前的一些想法却是不谋而合的，即整个宇宙是被”有为“地创造出来的”实体“，并且是被操控着的监管着的，是的，我们都是被创造的，是创造我们的那一些创造者的”玩具“罢了，不光光是我们人类，即整个所有的宇宙都是有可能的。但是在这之前，我又有了新的疑惑，即那一些创造者又是怎么来的呢？难道真的要以所谓的人类科学去解释这一切已发生的实体？事实上，科学有时就有如同所谓的邪教一般的洗脑性质的意喻的，无可逃避的可以说，所谓的人类科学才是人类史上最为”邪恶“的，因为至于如今的越来越多的人们去开始”信仰“它了，实为是有一些可怕的。 人是需要有独立思考的，并且去以达到真正的独立去成长的。 现在的我只能依靠着自己的猜测去想象整个宇宙的奥秘了，目前只能是这样的了。 9. 最近心情郁闷的不行，今日早上开始就又有了一些荒唐事。 所谓的中央要来人检查这里的所谓的大学了，而在这里的大学的管理者却是那么的愚蠢。当然，所谓的中央的那一群人究竟是以什么样子的方式去考察的呢，像检查小学一样的？我想不会差到哪里去。 听说是来的是专家来检查的呢，可笑的不行，专家会像这样天天考察来考察去的吗，不如在家里研究怎么把中国教育措施建设的更加的合人意一些，更加的有意义一些吧。不过是一些无所事事的寄生虫。这片土地，这个时代，好像人人都可以成为专家呢，说到底还是人们太无知，太愚笨。 10. 今天看了龙应台的书，从前好久不曾有的感觉好似都回来了。 关于人生，或许都是沉沦与沉默的。 真的，这样的感觉，好似又回到了从前在年少的时候的感觉，好像一下下地全部回来了，而我不知说一些什么。 人生啊，给我的感觉，除了在所谓的各种人世牵绊中忘记了人生这一回事，然后在孤凉的时候，所有的一切都好似都真正的感觉到了，是沉沦与加倍的虚无。 路的尽头，是虚无。我们还在真正的去在意什么？所谓人世一趟。 11. 无他，现在我只是想讨论一下规矩。 规矩，每个人都有自己的所谓的规矩，那就难免一些人被动的被接受种种规矩，既然是在他人之下的工作与生活又怎么能说可以避免他人对我们的规矩？ 原则导致出来的规矩，就是大部分的人的所谓的原则与私心所认为的值得他本人肯定的思维想法，难免会被他用在自己的东西上面，又或者说难免用在他所认为的是他自己的东西上面。 就是这样的罢了，人世间的种种规矩，都是因为种种“人类”罢了。 人类，人的类型是种种的，即各种规矩所以又是种种的。 打算就此在此完结了。不知怎么的，我的心现在怎么的无端飞起来了。。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>思考笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
