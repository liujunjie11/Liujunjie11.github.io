<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LXiHa`Notes</title>
  
  <subtitle>The House Belong to Love and Freedom.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liujunjie11.github.io/"/>
  <updated>2017-12-07T07:45:33.965Z</updated>
  <id>https://liujunjie11.github.io/</id>
  
  <author>
    <name>刘俊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>今后的打算</title>
    <link href="https://liujunjie11.github.io/2017/12/07/%E4%BB%8A%E5%90%8E%E7%9A%84%E6%89%93%E7%AE%97/"/>
    <id>https://liujunjie11.github.io/2017/12/07/今后的打算/</id>
    <published>2017-12-07T07:18:53.000Z</published>
    <updated>2017-12-07T07:45:33.965Z</updated>
    
    <content type="html"><![CDATA[<p>恍然大悟，等我看到还有保研一说的说法时，我如今已是一名大二的学生了，保研的机会我基本上已是错过了。在我参考了一些相关的资料时，我又一次看到了人与人之间的差距…</p><p><strong>眼界对于一个人真的是太重要了，一个人不应该总是停留在现在，应该时时思考自己未来的方向。</strong></p><p>在如今的科技浪潮上，更高的学历当然是我所向往的，而我不喜欢考试，我深深的感觉到了自己不擅长考试，不管是小的还是大的，我对于考试已是到了难以忍耐的地步了，我能从内心感觉的到。</p><p>在我的这个时代，人工智能的浪潮早已是滚滚而来了。如今的我们身处在这个看似大好的“时代”，我也想分一杯羹，我也想通过这一次浪潮发挥自己的效用，借此实现自己的理想，为世界带来更多的福利，为世界人民带来更好的生活。</p><p>而在如今的现实是，高学历的普遍存在…这无疑会成为我的短板…而我可能也会因此而做出退让，放弃自己的技术选项…这真的是我的悲剧啊,会是我人生最大的悲剧吗？</p><p>如今的我需要突出自己的优势了，一定要突出自己的优势。更高的学历意味着无疑拥有更大的机会会得到更好的资源与更加广阔的眼界，不得不说，一个人的学习应该是终生的…</p><p>目前的我太过于浮躁与无定向的迷乱了…<strong>我还需要更多的学习与实践，突出自己的优势，必将是我应当做的，就在不远的今后。</strong></p><p><strong>摆正心态，不断实践，突出优势！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;恍然大悟，等我看到还有保研一说的说法时，我如今已是一名大二的学生了，保研的机会我基本上已是错过了。在我参考了一些相关的资料时，我又一次看到了人与人之间的差距…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;眼界对于一个人真的是太重要了，一个人不应该总是停留在现在，应该时时思考自己未来的方向
      
    
    </summary>
    
      <category term="成长" scheme="https://liujunjie11.github.io/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="成长" scheme="https://liujunjie11.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于利用python爬虫爬取小说的实战例子</title>
    <link href="https://liujunjie11.github.io/2017/12/04/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E5%B0%8F%E8%AF%B4%E7%9A%84%E5%AE%9E%E6%88%98%E4%BE%8B%E5%AD%90/"/>
    <id>https://liujunjie11.github.io/2017/12/04/关于利用python爬虫爬取小说的实战例子/</id>
    <published>2017-12-04T14:33:41.000Z</published>
    <updated>2017-12-05T07:43:13.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近对<strong><em>python爬虫</em></strong>很感兴趣，就花了一些时间来学习，学习了近一周的时间，终于在看了一些其他博客的大神写的教程之后，学会了利用<strong><em>beautifulsoup</em></strong>的方法爬取了一些网站的小说。在此分享我学习的成果。</p><ul><li><strong>关于详细的<em>python3爬虫</em>的学习教程以及参考：</strong><a href="http://blog.csdn.net/column/details/15321.html" target="_blank" rel="external">学习教程</a></li></ul><ul><li>本文参考并且学习了：<a href="http://blog.csdn.net/c406495762/article/details/71158264" target="_blank" rel="external">这篇文章</a></li></ul><ul><li>在以下的文中主要介绍<strong>爬小说的技巧</strong>。</li></ul><h1 id="爬取的过程"><a href="#爬取的过程" class="headerlink" title="爬取的过程"></a>爬取的过程</h1><h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><ul><li><p><a href="http://www.biqukan.com/38_38278/17032848.html" target="_blank" rel="external">笔趣阁小说网</a></p></li><li><p><a href="https://www.readnovel.com/chapter/7943133504728103/21429716840455516" target="_blank" rel="external">小说阅读网</a></p></li></ul><hr><h2 id="技巧分析"><a href="#技巧分析" class="headerlink" title="技巧分析"></a>技巧分析</h2><p>在编写代码前应先在浏览器中（推荐<em>Chrome</em>，我用的<em>Safari</em>）查看在网页抓包中的相关的内容信息，一般查看其中的：</p><ul><li><p><code>charset</code>（<strong>即其中的编码类型，在后面的程序中需要</strong>）</p></li><li><p><code>在文章开始阶段的前的那一小段html编码</code></p></li></ul><p>如下图所示的（等下将要用到）：</p><ul><li><code>charset</code>所示：</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-05%20%E4%B8%8B%E5%8D%8812.50.43.png" alt=""></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-05%20%E4%B8%8B%E5%8D%8812.49.48.png" alt=""></p><blockquote><p>一般在最前头可以看到。</p></blockquote><hr><ul><li><code>主要的一小段html</code>所示：</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-05%20%E4%B8%8B%E5%8D%8812.50.55.png" alt=""></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-05%20%E4%B8%8B%E5%8D%8812.50.09.png" alt=""></p><blockquote><p>如上在文章的前边的那一小段的<em>html代码</em>。</p></blockquote><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>可先用相关的代码查看相关的网页字符属于那种编码类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 用beautifulsoup爬取小说的例子</div><div class="line">#     可先将网页编码的字符先行得知</div><div class="line"> from urllib import request</div><div class="line"> import chardet</div><div class="line"> </div><div class="line"> re=request.urlopen(&apos;http://www.biqukan.com/1_1094/5403177.html&apos;)</div><div class="line"> charset=chardet.detect(re.read())</div><div class="line"> print(&apos;we can see the cahrset about the html:&apos;,charset)</div></pre></td></tr></table></figure><blockquote><p>具体的学习可以参考<a href="http://blog.csdn.net/c406495762/article/details/58716886" target="_blank" rel="external">这篇文章</a>。</p></blockquote><hr><ul><li>开始编写爬取相关内容的代码。<strong>将其中的<em>URL</em>地址以及相关的<em>charset所属字符</em>在以下的代码中修改一下均可达到在下方效果的显示</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#开始爬取相关的内容</div><div class="line">from urllib import request</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">from urllib import error</div><div class="line">try:</div><div class="line">    if __name__ == &apos;__main__&apos;:</div><div class="line">        #相关的URL的输入以及代理</div><div class="line">        re=request.Request(url=&apos;http://www.biqukan.com/1_1094/5403177.html&apos;,headers=&#123;&apos;User-Agent&apos;:&apos;* Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&apos;&#125;)</div><div class="line">         #打开,并且以相关的解码方式，此处应当对应上方的charset</div><div class="line">             html=request.urlopen(re).read().decode(&apos;gbk&apos;,&apos;ignore&apos;)</div><div class="line">        #接下来创建beautifulsoup对象,找到相关的参数以便爬取内容</div><div class="line">        soup_text=BeautifulSoup(html,&apos;lxml&apos;)</div><div class="line">        #在html中若是有class注意将其中的class改为class_,在此应当对应上方说明的html的一小段的编码</div><div class="line">        texts=soup_text.find_all(id=&quot;content&quot; ，class_=&quot;showtxt&quot;)</div><div class="line">        soup_texts=BeautifulSoup(str(texts),&apos;lxml&apos;)</div><div class="line">        #输出时将删除相关的不符合要求的字符,将其替换为空白</div><div class="line">        print(soup_texts.div.text.replace(&apos;\xa0&apos;,&apos;&apos;))</div><div class="line">except error.URLError as e:</div><div class="line">    if hasattr(e, &apos;code&apos;):</div><div class="line">        print(&apos;httperroe:&apos;)</div><div class="line">        print(e.cond)</div><div class="line">    if hasattr(e, &apos;reason&apos;):</div><div class="line">        print(&apos;urlerror&apos;)</div><div class="line">        print(e.reason)</div></pre></td></tr></table></figure><blockquote><p>详细可参考：<a href="http://blog.csdn.net/c406495762/article/details/71158264" target="_blank" rel="external">这篇文章</a></p></blockquote><hr><h2 id="结果查看"><a href="#结果查看" class="headerlink" title="结果查看"></a>结果查看</h2><ul><li>关于在第一段的实战效果：</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-05%20%E4%B8%8B%E5%8D%883.25.11.png" alt=""></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-05%20%E4%B8%8B%E5%8D%883.25.26.png" alt=""></p><hr><ul><li>关于在第二段的实战效果：</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-05%20%E4%B8%8B%E5%8D%883.27.06.png" alt=""></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-05%20%E4%B8%8B%E5%8D%883.27.17.png" alt=""></p><hr><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><blockquote><p><strong>在网页中爬取的小说内容都是可以直接下载至本地的，具体的可以参考以上的那个学习教程。</strong></p></blockquote><ul><li><p>可学习的参考网站：</p><p>  <a href="http://blog.csdn.net/column/details/15321.html" target="_blank" rel="external"><em>python3爬虫教程</em></a></p><p>  <a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">beautifulsoup官网教程</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近对&lt;strong&gt;&lt;em&gt;python爬虫&lt;/em&gt;&lt;/strong&gt;很感兴趣，就花了一些时间来学习，学习了近一周的时间，终于在看了一些
      
    
    </summary>
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于Mac关机与iCloud的打不开的问题记录</title>
    <link href="https://liujunjie11.github.io/2017/12/03/%E5%85%B3%E4%BA%8EMac%E5%85%B3%E6%9C%BA%E4%B8%8EiCloud%E7%9A%84%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2017/12/03/关于Mac关机与iCloud的打不开的问题记录/</id>
    <published>2017-12-03T07:16:59.000Z</published>
    <updated>2017-12-03T07:25:22.367Z</updated>
    
    <content type="html"><![CDATA[<p>这一段时间因为开的网页比较重要，<em>Mac</em>一直没有关机，晚上睡觉也是合上就这样了，没想到才3天这样，<em>Mac</em>好像支撑不了了…变得有些卡了，在未关机前的硬盘空间大小与关机后打开之后的硬盘空间大小相差了<strong>5个G</strong>，在重启开机时出现了一段绿屏…，由此可知，一段有规律的关机保养还是很有必要的…</p><p>关于<em>iCloud</em>的一些打开错误，如打开查看存储信息时的错误问题等等，一般的解决方法为：换一个网络连接即可解决。</p><blockquote><p>此时换<em>DNS</em>的地址是不管用的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一段时间因为开的网页比较重要，&lt;em&gt;Mac&lt;/em&gt;一直没有关机，晚上睡觉也是合上就这样了，没想到才3天这样，&lt;em&gt;Mac&lt;/em&gt;好像支撑不了了…变得有些卡了，在未关机前的硬盘空间大小与关机后打开之后的硬盘空间大小相差了&lt;strong&gt;5个G&lt;/strong&gt;，在重
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于Mac网速慢的原因记录</title>
    <link href="https://liujunjie11.github.io/2017/12/01/%E5%85%B3%E4%BA%8EMac%E7%BD%91%E9%80%9F%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2017/12/01/关于Mac网速慢的原因记录/</id>
    <published>2017-12-01T10:56:07.000Z</published>
    <updated>2017-12-01T11:07:50.743Z</updated>
    
    <content type="html"><![CDATA[<p>最近<em>Mac</em>突然变得很慢，明明网速很快的。</p><p>在网上看了一下，发现可能是<em>DNS</em>的问题，果然换了一下（以前用的都是<em>8.8.8.8</em>估计用的人多了就卡了），把号删除了，发现网速飞的快起…</p><p>不过在平时中下载<em>app</em>失败时可以考虑换回来就好使了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近&lt;em&gt;Mac&lt;/em&gt;突然变得很慢，明明网速很快的。&lt;/p&gt;
&lt;p&gt;在网上看了一下，发现可能是&lt;em&gt;DNS&lt;/em&gt;的问题，果然换了一下（以前用的都是&lt;em&gt;8.8.8.8&lt;/em&gt;估计用的人多了就卡了），把号删除了，发现网速飞的快起…&lt;/p&gt;
&lt;p&gt;不过在平时中下
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于python下载scrapy失败的问题记录</title>
    <link href="https://liujunjie11.github.io/2017/12/01/%E5%85%B3%E4%BA%8Epython%E4%B8%8B%E8%BD%BDscrapy%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2017/12/01/关于python下载scrapy失败的问题记录/</id>
    <published>2017-12-01T05:10:33.000Z</published>
    <updated>2017-12-01T05:16:20.172Z</updated>
    
    <content type="html"><![CDATA[<p>用的<em>anaconda</em>的<em>python3</em>，下载<em>scrapy</em>出现以下情况：</p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-01%20%E4%B8%8B%E5%8D%881.09.17.png" alt=""></p><blockquote><p>即表示下载失败。</p></blockquote><hr><p><strong>看到网上大部分说的太复杂的解决方案，其实太过于小题大做了。</strong></p><p><strong>解决方法：重新下载一次。</strong></p><ul><li>图1</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-01%20%E4%B8%8B%E5%8D%881.09.23.png" alt=""></p><hr><ul><li>用命令行<em>conda list</em>查看</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-01%20%E4%B8%8B%E5%8D%881.09.36.png" alt=""></p><blockquote><p>下载成功了。</p></blockquote><hr><ul><li><strong>若是失败了，多下载几次大多即可解决。</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用的&lt;em&gt;anaconda&lt;/em&gt;的&lt;em&gt;python3&lt;/em&gt;，下载&lt;em&gt;scrapy&lt;/em&gt;出现以下情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%
      
    
    </summary>
    
      <category term="成长" scheme="https://liujunjie11.github.io/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="成长" scheme="https://liujunjie11.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于用java编译的mapreduce与用Scala编译的spark的对比（单词统计的例子说明）</title>
    <link href="https://liujunjie11.github.io/2017/11/29/%E5%85%B3%E4%BA%8E%E7%94%A8java%E7%BC%96%E8%AF%91%E7%9A%84mapreduce%E4%B8%8E%E7%94%A8Scala%E7%BC%96%E8%AF%91%E7%9A%84spark%E7%9A%84%E5%AF%B9%E6%AF%94%EF%BC%88%E5%8D%95%E8%AF%8D%E7%BB%9F%E8%AE%A1%E7%9A%84%E4%BE%8B%E5%AD%90%E8%AF%B4%E6%98%8E%EF%BC%89/"/>
    <id>https://liujunjie11.github.io/2017/11/29/关于用java编译的mapreduce与用Scala编译的spark的对比（单词统计的例子说明）/</id>
    <published>2017-11-29T13:56:35.000Z</published>
    <updated>2017-11-29T14:08:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习<em>spark</em>，顺便也学习了<em>Scala</em>的在其间的使用。我发现与用<em>java</em>编译的<em>mapreduce</em>相比，用<em>Scala</em>编译的<em>spark</em>更加的容易让人被其折服…</p><p>直接看图说话吧，感受<em>spark</em>的强大！以统计单词为例。</p><ul><li>以下为<em>java</em>编译的<em>mapreduce</em></li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-29%20%E4%B8%8B%E5%8D%8810.00.19.png" alt=""></p><blockquote><p>70+行的代码。</p></blockquote><hr><ul><li><em>Scala</em>编译的<em>spark</em></li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-29%20%E4%B8%8B%E5%8D%8810.00.32.png" alt=""></p><blockquote><p>仅仅为6行代码….</p></blockquote><hr><ul><li>同样的结果如下：</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-29%20%E4%B8%8B%E5%8D%8810.01.11.png" alt=""></p><hr><ul><li>最后，据说官方会考虑将<em>mapreduce</em>优化,拭目以待吧…相比如今的<em>spark</em>的威力…</li></ul><p><strong>记录此文章仅仅是为了表达我心中的兴奋，因为遇到了<em>spark</em>…</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习&lt;em&gt;spark&lt;/em&gt;，顺便也学习了&lt;em&gt;Scala&lt;/em&gt;的在其间的使用。我发现与用&lt;em&gt;java&lt;/em&gt;编译的&lt;em&gt;mapreduce&lt;/em&gt;相比，用&lt;em&gt;Scala&lt;/em&gt;编译的&lt;em&gt;spark&lt;/em&gt;更加的容易让人被其折服…&lt;/p
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于在用Scala编译spark中的reduce方法计算的问题疑惑记录</title>
    <link href="https://liujunjie11.github.io/2017/11/28/%E5%85%B3%E4%BA%8E%E5%9C%A8%E7%94%A8Scala%E7%BC%96%E8%AF%91spark%E4%B8%AD%E7%9A%84reduce%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97%E7%9A%84%E9%97%AE%E9%A2%98%E7%96%91%E6%83%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2017/11/28/关于在用Scala编译spark中的reduce方法计算的问题疑惑记录/</id>
    <published>2017-11-28T13:34:35.000Z</published>
    <updated>2017-11-28T13:46:19.143Z</updated>
    
    <content type="html"><![CDATA[<p>在学习<em>spark</em>中，<em>reduce</em>方法是绕不开的。但是我在测试时发现与从前的规则好像有一点冲突了…</p><p>如下分析：</p><ul><li>输入代码   </li></ul><blockquote><p>1, <strong>val a=sc.parallelize(1 to 10)</strong>//理论上理解为0～9的数字放在一个分区</p><p>2, <strong>a.reduce((x,y) =&gt; x+y)</strong></p></blockquote><ul><li>输出</li></ul><blockquote><p><strong>55</strong>//即意味着从0（0可省亦可）到10(包括10在内了，与上方的<em>to</em>方法冲突了)都被相加了…</p></blockquote><p>这测试我想了老半天了…没想到是这种结果…<em>bug</em>???</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习&lt;em&gt;spark&lt;/em&gt;中，&lt;em&gt;reduce&lt;/em&gt;方法是绕不开的。但是我在测试时发现与从前的规则好像有一点冲突了…&lt;/p&gt;
&lt;p&gt;如下分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入代码   &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1, &lt;stron
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>名人效应</title>
    <link href="https://liujunjie11.github.io/2017/11/28/%E5%90%8D%E4%BA%BA%E6%95%88%E5%BA%94/"/>
    <id>https://liujunjie11.github.io/2017/11/28/名人效应/</id>
    <published>2017-11-28T10:33:07.000Z</published>
    <updated>2017-11-28T11:03:13.369Z</updated>
    
    <content type="html"><![CDATA[<p>“名人效应”在我们的生活中屡见不鲜，当我们在遇到一些挂有所谓的“名气”的人，比如“名校”出来的人，或者是一些本身就是所谓的“名人”的人时，心中大多会不由自主的产生一种敬畏与向往，有时竟然会产生自卑的感觉…我感觉这好似一种“阴差阳错”，又不得不感慨这种“名人效应”对我们的这种“潜移默化”教化的感觉。</p><p>那么这种效应究竟是从何而来？为何又产生这种貌似人与生就有的“天性”？我想可以在我们的生活中可以找到答案。</p><p>因为我们从小到大的生活环境都是如此“教育”我们的，所以在我们身边大部分的人的这种相关的“感觉”会伴随我们成长，久而久之我们也是这般如此了。简要分析可知这一类的大部分人在我们成长的过程中好似又是不可或缺的，又好似是不可避免的，哈哈，难道不是吗，我们身边的大多数父母即是如此，最简单的理解，“考上一个好的大学”。在此我们就知道了，原来世界上有一些“有名”的大学，从身边的一些“名人”的崇拜者，我们与之交流亦或者是道听途说，听多了看多了自然也就易被“名化”了…</p><p>那么“自卑感”又从何而来？…我想这是一种错误的，被“名化”扭曲了的心理活动吧，至少我是这么认为的。这里的“名化”可以理解为被“名”影响化了的意思，这样的人往往不由自主的随波逐流，被“名”波及到。当然，可能也与所谓的“好强心”，所谓的“羡慕嫉妒”也会有一定的挂钩吧。</p><p>不管怎么说，我感觉这就是一种“不应该”，带“名”的东西亦然有其的优势，但是如果一味“随波逐流”的因此把自己搞得扭曲，那真的是得不偿失，对不起自己了…与我而言，真的是一种非常蠢的心理活动呢…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“名人效应”在我们的生活中屡见不鲜，当我们在遇到一些挂有所谓的“名气”的人，比如“名校”出来的人，或者是一些本身就是所谓的“名人”的人时，心中大多会不由自主的产生一种敬畏与向往，有时竟然会产生自卑的感觉…我感觉这好似一种“阴差阳错”，又不得不感慨这种“名人效应”对我们的这种
      
    
    </summary>
    
      <category term="成长" scheme="https://liujunjie11.github.io/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="成长" scheme="https://liujunjie11.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于在eclipse中编译Scala自动补全的添加设置</title>
    <link href="https://liujunjie11.github.io/2017/11/27/%E5%85%B3%E4%BA%8E%E5%9C%A8eclipse%E4%B8%AD%E7%BC%96%E8%AF%91Scala%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E7%9A%84%E6%B7%BB%E5%8A%A0%E8%AE%BE%E7%BD%AE/"/>
    <id>https://liujunjie11.github.io/2017/11/27/关于在eclipse中编译Scala自动补全的添加设置/</id>
    <published>2017-11-27T11:40:07.000Z</published>
    <updated>2017-11-27T11:43:16.533Z</updated>
    
    <content type="html"><![CDATA[<ul><li>如下图</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-27%20%E4%B8%8B%E5%8D%887.39.14.png" alt=""></p><blockquote><p>全部打勾上，还犹豫个啥子？编译过程中会发现比之前轻松不少。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;如下图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-27%20%E4%B8%8B%E5%8D%88
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于在简要学习Scala中的疑惑记录</title>
    <link href="https://liujunjie11.github.io/2017/11/27/%E5%85%B3%E4%BA%8E%E5%9C%A8%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0Scala%E4%B8%AD%E7%9A%84%E7%96%91%E6%83%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2017/11/27/关于在简要学习Scala中的疑惑记录/</id>
    <published>2017-11-27T07:51:49.000Z</published>
    <updated>2017-11-28T12:56:47.428Z</updated>
    
    <content type="html"><![CDATA[<p>在简要学习<em>Scala</em>的一些基本的使用，有一些学习上的感到疑惑的问题记录在此。</p><ul><li><p><strong>调用方法时不加<em>“.”</em>一样可以，在方法最后不加<em>“return”</em>亦可，不过为了可读性，一般都是加的。</strong></p></li><li><p><strong>在语句时常出现的“-”</strong></p></li></ul><p>其实这就是一种变量的简写。打个比方：</p><p><code>val a = Array(1, 2, 3, 4)</code></p><p><code>val b = a.map(_ * 2)</code></p><p><em>输出变量b：</em><code>（2，4，6，8）</code></p><blockquote><p>则易可知其中的语句<strong>val b = a.map(_ * 2)</strong>就相当于<strong>val b = a.map(a * 2)</strong></p></blockquote><ul><li><strong>关于其中的lazy</strong></li></ul><blockquote><p>详细可以参考此<a href="https://segmentfault.com/a/1190000006126119" target="_blank" rel="external">文章</a></p></blockquote><p><em>如下打个比方：</em></p><p><strong>lazy val property = initProperty()</strong></p><p>使用lazy关键字修饰变量后，只有在使用该变量时，才会调用其实例化方法。也就是说在定义property=initProperty()时并不会调用initProperty()方法，只有在后面的代码中使用变量property时才会调用initProperty()方法。</p><blockquote><p>如果不使用lazy关键字对变量修饰，那么变量property是立即实例化的</p></blockquote><p><em>可以再看看下面的利于理解：</em></p><pre><code> object LazyOps {def init(): String = {    println(&quot;call init()&quot;)    return &quot;&quot;}def main(args: Array[String]) {    val property = init();//没有使用lazy修饰    println(&quot;after init()&quot;)    println(property)}  }</code></pre><p>上面的property没有使用lazy关键字进行修饰，所以property是立即实例化的，如果观察程序的输出:</p><pre><code>call i nit()after init()</code></pre><p>可以发现，property声明时，立即进行实例化,调用了init()`实例化方法</p><p>而如果使用lazy关键字进行修饰：</p><pre><code> object LazyOps {def init(): String = {    println(&quot;call init()&quot;)    return &quot;&quot;}def main(args: Array[String]) {    lazy val property = init();//使用lazy修饰    println(&quot;after init()&quot;)    println(property)    println(property)} }</code></pre><p>观察输出:</p><pre><code>after init()call init()</code></pre><p>在声明property时，并没有立即调用实例化方法intit(),而是在使用property时，才会调用实例化方法,并且无论缩少次调用，实例化方法只会执行一次。</p><ul><li>在<em>Scala</em>中的<em>break</em>可用<em>return</em>替代。</li></ul><blockquote><p>暂时这么多，以后再补充。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在简要学习&lt;em&gt;Scala&lt;/em&gt;的一些基本的使用，有一些学习上的感到疑惑的问题记录在此。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;调用方法时不加&lt;em&gt;“.”&lt;/em&gt;一样可以，在方法最后不加&lt;em&gt;“return”&lt;/em&gt;亦可，不过为了可读性，一般都是加的
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>用eclipse搭建Spark的运行环境(单机)</title>
    <link href="https://liujunjie11.github.io/2017/11/26/%E7%94%A8eclipse%E6%90%AD%E5%BB%BASpark%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83(%E5%8D%95%E6%9C%BA)/"/>
    <id>https://liujunjie11.github.io/2017/11/26/用eclipse搭建Spark的运行环境(单机)/</id>
    <published>2017-11-26T10:36:47.000Z</published>
    <updated>2017-11-29T13:48:02.945Z</updated>
    
    <content type="html"><![CDATA[<p>学习<em>Spark</em>用的<em>eclipse</em>习惯了，看了<a href="http://kevin12.iteye.com/blog/2274179" target="_blank" rel="external">这一篇文章</a>搭建了一个单机环境，不过这个单机环境搭建起来了，以后的集群环境我相信也容易了…</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li><p><em>本地下载Scala</em></p></li><li><p><em>本地有下载Spark</em></p></li><li><p><em>本地有下载eclipse以及Scala的插件</em></p></li></ul><blockquote><p>以上过程在网上已经有一大堆教程了。</p></blockquote><hr><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><blockquote><p>我的搭建过程与上方的文章有一些差距，毕竟年代久远了…</p></blockquote><ul><li><p>第一步：以上的环境都搭建好以后，建一个<em>Scala</em>工程。</p></li><li><p>第二步：在此工程下建一个<em>Scala Object</em>，在<em>Scala</em>中是以建立一个<em>Object</em>为准的，意思就是相当于<em>python</em>的一个方法工程。<em>Scala</em>一向诡异，看它的语法就知道了…</p></li><li><p>第三步：导入<em>spark</em>中的相关的包（如图），为了避免什么问题反正我是全部导入了</p></li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-26%20%E4%B8%8B%E5%8D%886.53.28.png" alt=""></p><hr><blockquote><p>如果在建立之后，工程的下边出现有一个小叉叉，右键<em>Scala Library container</em>,选择<em>Properties</em>,选择上一代一版本的<em>Scala</em>（如图）即可解决小叉叉的问题，如果不行可以尝试其他的版本试试。(我的默认是2.12,换下面的2.11小叉叉消失,<em>spark2.2.0</em>建立和分发默认使用<em>Scala 2.11</em>)</p></blockquote><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-26%20%E4%B8%8B%E5%8D%886.58.06.png" alt=""></p><hr><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li>环境搭建就是那么的简单，在此测试一下。在刚刚建好的工程下输入以下代码，<strong>注意其中的提示</strong></li></ul><blockquote><p>import org.apache.spark.SparkConf<br>import org.apache.spark.SparkContext<br>      //以下主类名为工程名<br>object First<em>Spark {<br>  def main(args: Array[String]): Unit = {<br>    val conf = new SparkConf()<br>    conf.setAppName(“Frist Spark”)<br>    conf.setMaster(“local”)<br>    val sc = new SparkContext(conf)<br>                             //以下为文件的所在地<br>    val lines = sc.textFile(“/Users/junjieliu/Downloads/README.md”, 1)<br>    val words = lines.flatMap { (lines =&gt; lines.split(“ “)) }<br>    val pairs = words.map { word =&gt; (word, 1) }<br>    val wordcount = pairs.reduceByKey(</em> + _)<br>    wordcount.foreach(pair =&gt; println(pair._1 + “:” + pair._2))<br>    sc.stop()<br>  }</p></blockquote><p>}</p><hr><ul><li>运行，点击<em>run</em>（如图）</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-26%20%E4%B8%8B%E5%8D%887.01.52.png" alt=""></p><hr><ul><li>测试效果：</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-26%20%E4%B8%8B%E5%8D%886.35.33.png" alt=""></p><blockquote><p>看起来是不是比<em>Hadoop</em>的<em>mapreduce</em>简单多了，哈哈。</p></blockquote><ul><li><strong>补充：</strong></li></ul><p><strong>在<em>eclipse</em>中编译<em>spark</em>代码时，应当加上<em>println</em>之类的方法在最后以保结果可以正确输出，为何要强调这一点呢？因为在终端运行代码时，我们通常是不需要输入<em>println</em>之类的方法就可输出相关的结果的，这一点应该记住，不然易导致在<em>eclipse</em>中运行代码时容易出错，并且大部分人我相信也会像从前的我一样没有什么头绪，而现在就有了…</strong></p><ul><li>如图：</li></ul><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-29%20%E4%B8%8B%E5%8D%889.43.20.png" alt=""></p><hr><blockquote><p>这些真的都需要自己去实践发现的，我也是在参考了一些资料之后才发现的这个问题…因为网上关于用<em>eclipse</em>像我这样编译<em>spark</em>的教程并不多，据我所看到的，大多用<em>maven</em>来搭建<em>spark</em>的编译环境的。</p><p><strong>最为重要的一点是在<em>eclipse</em>中编译相关的代码时，输出的结果是无法判断是否是正确的…即使我们在平时的编译中是有一定的错误提示的，但是对于初学者来说还是有一点不友好的感觉…</strong></p></blockquote><p><strong>另外的补充：在<em>eclipse</em>中运行结果时，有一定的会在右下角显示的缓冲时间，细心一点的朋友可能会发现了，由此说来结果是需要一点时间来输出的（不如说是正确的结果）。所以在<em>eclipse</em>运行时需要多运行几次（因为需要在第一次运行之后缓冲才会开始，所以一般运行两次这样就可得之正确的相关的结果了），若是结果还不对，最大的问题可能就是在代码上了…</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习&lt;em&gt;Spark&lt;/em&gt;用的&lt;em&gt;eclipse&lt;/em&gt;习惯了，看了&lt;a href=&quot;http://kevin12.iteye.com/blog/2274179&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这一篇文章&lt;/a&gt;搭建了一个单机环境
      
    
    </summary>
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于在《用python写网络爬虫》一书中的补充</title>
    <link href="https://liujunjie11.github.io/2017/11/23/%E5%85%B3%E4%BA%8E%E5%9C%A8%E3%80%8A%E7%94%A8python%E5%86%99%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E3%80%8B%E4%B8%80%E4%B9%A6%E4%B8%AD%E7%9A%84%E8%A1%A5%E5%85%85/"/>
    <id>https://liujunjie11.github.io/2017/11/23/关于在《用python写网络爬虫》一书中的补充/</id>
    <published>2017-11-23T10:32:52.000Z</published>
    <updated>2017-11-23T10:40:45.791Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习爬虫，感觉挺有意思，在看《用python写网络爬虫》以及《python网络数据采集》，前者使用<em>python2</em>为主，后者则是以<em>python3</em>为主，各有千秋，对我来说都不错。</p><p>不过在前者的书中的一些方法代码却是有时运行容易出错，解决的方法是将书中的方法裁开，用非方法的方式写出相应的代码即可正确。关于此可以参考<a href="http://cuiqingcai.com/1052.html" target="_blank" rel="external">这位大神的博客</a>。博客以<em>python2</em>写的爬虫，有一些实战，与书搭配着看效果非常不错。</p><blockquote><p>另外的一些问题，在我之后在补充。目前问题并没有发现太多。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近学习爬虫，感觉挺有意思，在看《用python写网络爬虫》以及《python网络数据采集》，前者使用&lt;em&gt;python2&lt;/em&gt;为主，后者则是以&lt;em&gt;python3&lt;/em&gt;为主，各有千秋，对我来说都不错。&lt;/p&gt;
&lt;p&gt;不过在前者的书中的一些方法代码却是有时运行容
      
    
    </summary>
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于Vi/Vim的基本使用的记录</title>
    <link href="https://liujunjie11.github.io/2017/11/22/%E5%85%B3%E4%BA%8EVi-Vim%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2017/11/22/关于Vi-Vim的基本使用的记录/</id>
    <published>2017-11-22T13:52:47.000Z</published>
    <updated>2017-11-22T13:56:44.054Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>关于vi / vim命令的记录</strong></li></ul><p><em>其中的命令的快捷键均对应Mac的“control”键</em></p><p>一般模式到编辑模式：i,o,a,r(可大写)  按下ESC推回<br>            ↑↑<br>           编译模式与命令模式两者不可切换<br>            ↓↓<br>一般模式到命令模式：：，/，？进入 按下ESC推回</p><p>vi /vim （文件）        //编译一个文件</p><p>在一般模式中输入“：wq” 保存之后离开vi（输入“：wq!”可强行写入，即在权限可改的前提下）<br>另外用“：w”可获得文件的相关的基本信息，利用“：q”可直接推出编译</p><p>alias 的使用得知一些命令行名字的改变</p><p>vim 与 vi的区别：<br>最为简单的一点为两者在打开文件的显示亦然不同，前者的功能亦然是相比后者多多的。</p><p>即在一般模式下的关于文件内容的选择相关的操作（亦称为所谓的Visual Block，即块选择）：<br>在需要的地方按下Ctrl+v —&gt; 移动到需求的地方，开始发白…此时即可进行相关的操作了（y:复制，p:粘贴，d:删除）</p><p>vim的多文本的编译：<br>多个文件的打开：vim (文件名1） （文件名2）<br>多个文本编译的按键<br>:n    编译下一个文件<br>:N    编译上一个文件<br>:fiel    目前所有的文件展示<br>其中的快捷键记录：“G:到最后一行”，“u:还原数据”，“q:推出”</p><p>vim多个窗口的实现：<br>:sp    在目前的窗口中按下得出同一个文件的另一个新的窗口<br>:sp (文件名)    在目前的窗口打开新的文件的一个新的窗口<br>Ctrl+w+j / ↓    换窗口操作，按ctrl不放，在按下w放开所有的键按下最后的键即可<br>Ctrl+w+k / ↑     如上操作<br>Ctrl +w+q    等于在一个窗口中按下“:q”推出现在的窗口</p><p>关于在vim之中的一些环境设置可参考其他的材料。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关于vi / vim命令的记录&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;其中的命令的快捷键均对应Mac的“control”键&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一般模式到编辑模式：i,o,a,r(可大写)  按下ESC推回&lt;br&gt;      
      
    
    </summary>
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于Linux与win的基本命令的简要记录</title>
    <link href="https://liujunjie11.github.io/2017/11/22/%E5%85%B3%E4%BA%8ELinux%E4%B8%8Ewin%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E7%9A%84%E7%AE%80%E8%A6%81%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2017/11/22/关于Linux与win的基本命令的简要记录/</id>
    <published>2017-11-22T12:24:35.000Z</published>
    <updated>2017-11-22T12:26:09.145Z</updated>
    
    <content type="html"><![CDATA[<p>基本命令</p><p>实际上的命令通过man /info /—help即可快速掌握命令的使用</p><p>Centos                    Windons</p><p>ls （目录名）            dir            //查看其中的内容<br>ls —help / man ls /info ls                       //查看命令帮助<br>clear                cls            //清屏<br>cd .                    cd  .            //进入当前目录<br>cd . .                cd . .         //进入上级目录<br>cd /xxx/xx<br>cd / / cd ~                                //根目录<br>cd -                             //返回上一级目录<br>pwd                                //显示当前目录<br>whoami    / who                        //查看当前名与版本号等等…<br>lsb_release -a                        //查看系统信息<br>rmdir                            //删除一个空的目录<br>echo $PATH                        //查看用户的配置情况</p><p>～表示自己的主文件夹,即为root根目录</p><p>date （可加相关的对应符号得出对应的理想的日期）         //日前<br>cal（可指名时间）                                //日历<br>bc （quit推出）                                //系统计算器的进入</p><p>shutdown  //关机<br>reboot    //重启<br>有时会因为权限问题导致命令执行失败，即为root与本人的切换可以解决</p><p>chgrp    //改变文件所属用户组<br>chown    //改变文件所有者<br>chmod    //改变文件的权限，r:4 ; w:2; x:1 </p><p>su (root)                            //切换用户<br>exit                                //推出当前的用户<br>chown （用户）(文件目录)                //以给予文件到一个没有权限的用户</p><p>passwd                            //当前用户密码更改<br>以上两者一并使用</p><p>ifconfig                ipconfig            //查看IP地址</p><p>ping (域名地址 / localhost)             //网络延迟<br>有一些需要在有网的情况下ping…</p><p>ll                             //别名, 即为ls -l的命令行罢了<br>alias                                //查看所有别名<br>ls -a -l -h                        //查看当前目录 -h , 人性化 -l ,列表 -a,显示，开头<br>mkdir ~/xxx/x                        //创建目录文件夹<br>touch ~/xxx/x/x.txt                //创建文件，亦可结合相关的参数更改文件的日期<br>echo (内容）&gt; x.txt                    //重定向输出，即为输入内容到此中<br>echo (内容) &gt;&gt; x.txt                //追加内容入文件<br>cat x.txt / more x.txt                type x.txt        //查看文件<br>tac x.txt                            //以最后的行数输出，即与cat的命令功能相反<br>nl （参数）（文件）                //将文件内容添加行数打印出来<br>more / less                             //翻页参考文件内容</p><p>cp x.txt （可有多个一同）x1.txt                        //复制文件</p><p>rm x.txt                            //删除文件</p><p>cp *.txt（可有多个一同） tmp/（可不加 / ）                //复制文件入某个文件夹</p><p>rm *                                //删除当下文件夹全部文件<br>rm x.txt                            //删除文件<br>rm -rf tmp                        //强制删除<br>mv x.txt tmp/                        //强行删除文件夹<br>以上的目录应当清晰自己在哪…</p><p>centos 切换模式:<br>若是在Mac系统的虚拟机运行的系统，则ctrl对应control, alt对应option，按fn显示F键盘<br>ctrl + alt +f6                        //切换到文本模式<br>Ctrl + alt                         //切换鼠标<br>Ctrl + alt +f1                        //切换到桌面模式<br>Ctrl + alt +f5                        //切换到新的文本模式</p><p>Nano文本编译器命令行<br>若是在Mac系统的虚拟机运行的系统，则ctrl对应control, alt对应option，按fn显示F键盘</p><p>nano x.txt                        //打开nano编译器，编译对应的文件<br>在nano的文本编译器中注意本人与root的区别</p><p>ctrl + o                             //保存文件，之后直接回车保存<br>Ctrl + x                             //提出文件<br>Ctrl + k                             //cut文件<br>Ctrl + u                             //uncut / 复制相关的内容到当前文件</p><p>more  （（可加）-5（数字，表示显示多少行））x.txt                         //分屏显示<br>在当前的目录下直接使用more亦可</p><p>tail x.txt                            //最后10行<br>find . | more                        // | 是管道符，前面的命令的输出作为后面命令输入<br>find ~<br>ls<br>head  -(数字）x.txt                        //取出前几行的文件内容<br>tail    -（数字）x.txt                            //取出后面几行的额文件内容<br>od                                 //改为进制表的形式来输出相关的文件内容</p><p>umask (-S)                            //文件默认权限的查看<br>chattr                            //设置文件的隐藏属性，如不能被删除等..<br>lsattr                            //显示文件的隐藏属性<br>file                                //查看一个文件的基本信息<br>which                            //查找“执行文件”，一般的“执行文件”可以理解为可以cd到的文件<br>whereis                            //查找文件地址，或者是说查找包含有相关的字词的文件<br>locate                            //查找相关的字词的文件位置<br>find                                //强大的查找命令，包括有关于日期的，本人的限定条件查找等..<br>还有一些SGID的特殊权限在书中查找即可..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基本命令&lt;/p&gt;
&lt;p&gt;实际上的命令通过man /info /—help即可快速掌握命令的使用&lt;/p&gt;
&lt;p&gt;Centos                    Windons&lt;/p&gt;
&lt;p&gt;ls （目录名）            dir            //查看其中
      
    
    </summary>
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
    
      <category term="学习 成长" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0-%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>无言</title>
    <link href="https://liujunjie11.github.io/2017/11/22/%E6%97%A0%E8%A8%80/"/>
    <id>https://liujunjie11.github.io/2017/11/22/无言/</id>
    <published>2017-11-22T03:34:20.000Z</published>
    <updated>2017-11-22T12:29:59.450Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>搞海外民运的所谓的核心人员，像是无头无脑的庸人似的，毫无表现出应有的政治才能，除了一味的附和大众，一味的解脱自己，依然也做不成什么气候，那为何要这般折腾呢。这不像是所谓的民运，不像是所谓的要解放华夏人民，这像是一番闹剧，给多数的明智的人们看来就像是一出笑话。在我看来，民运可以得到支持，但是前提是需要一个靠谱的领导人来领导前行，现在的一些所谓的天天喊着要搞民运的却是没有什么才能没有什么实干的人不适合当这个角色。</p></li><li><p>中国大陆历史以来都是一代又一代的专制者的舞台，如今的中共也不过是铺了前人的后台，不过历史告诉人们，灭亡的一天终将会到来。</p></li><li><p>人们不应麻木，应当时时保持清醒，保持自我的理智，迎接好不确定的未来明天。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;搞海外民运的所谓的核心人员，像是无头无脑的庸人似的，毫无表现出应有的政治才能，除了一味的附和大众，一味的解脱自己，依然也做不成什么气候，那为何要这般折腾呢。这不像是所谓的民运，不像是所谓的要解放华夏人民，这像是一番闹剧，给多数的明智的人们看来就像是一出笑话
      
    
    </summary>
    
      <category term="成长" scheme="https://liujunjie11.github.io/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="成长" scheme="https://liujunjie11.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于python爬虫代码的运行</title>
    <link href="https://liujunjie11.github.io/2017/11/20/%E5%85%B3%E4%BA%8Epython%E7%88%AC%E8%99%AB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C/"/>
    <id>https://liujunjie11.github.io/2017/11/20/关于python爬虫代码的运行/</id>
    <published>2017-11-20T12:39:40.000Z</published>
    <updated>2017-11-20T12:51:00.322Z</updated>
    
    <content type="html"><![CDATA[<p>关于<em>python爬虫</em>的关键几点简单在此记录下好了。</p><ul><li><p>下载<em>Scrap</em>库。</p></li><li><p>在每一个基于<em>python2</em>工程中的第一行加上<code># -*- coding: UTF-8 -*-</code>，否则运行时出现会不必要的错误。</p></li><li><p>在<em>eclipse</em>中运行代码。实际上以上的要求达到后，直接在<em>eclipse</em>中创建工程，编写好了一步在<em>eclipse</em>中运行即可得知结果。</p></li><li><p>在终端中运行代码。在其中打开<em>python</em>编译环境，之后对向工程的所在目录，一般是<em>eclipse</em>的<em>workspace</em>之中的子目录（即指向工程的上一级目录处），用命令行<code>python XXX.py</code>直接运行即可得知结果。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于&lt;em&gt;python爬虫&lt;/em&gt;的关键几点简单在此记录下好了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载&lt;em&gt;Scrap&lt;/em&gt;库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在每一个基于&lt;em&gt;python2&lt;/em&gt;工程中的第一行加上&lt;code&gt;# -*- coding:
      
    
    </summary>
    
      <category term="学习 爬虫" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="学习 爬虫" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Mac上关于路欧词典的破解问题记录...</title>
    <link href="https://liujunjie11.github.io/2017/11/20/Mac%E4%B8%8A%E5%85%B3%E4%BA%8E%E8%B7%AF%E6%AC%A7%E8%AF%8D%E5%85%B8%E7%9A%84%E7%A0%B4%E8%A7%A3%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2017/11/20/Mac上关于路欧词典的破解问题记录/</id>
    <published>2017-11-20T06:30:58.000Z</published>
    <updated>2017-11-20T07:06:18.963Z</updated>
    
    <content type="html"><![CDATA[<p>因为在<em>iPad</em>上用了<em>路欧词典</em>，感觉还不错，想在<em>Mac上也用用</em>，发现要不少的钱…在网上看了一下也糊里糊涂摸索了一下，今天一打开发现已经是破解状态了…在此记录下。</p><ul><li><strong>希望有钱的还是支持正版，学生没钱才这样的…</strong></li></ul><blockquote><p><strong>链接</strong>：<a href="https://www.eudic.net/v4/en/home/dictionaryresource" target="_blank" rel="external">路欧词典官网</a></p></blockquote><hr><ul><li>第一步，找到相关的文件</li></ul><p><em>图1</em></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%20%E4%B8%8B%E5%8D%882.35.51.png" alt=""></p><p><em>图2</em></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%20%E4%B8%8B%E5%8D%882.35.35.png" alt=""></p><blockquote><p>点击打开如上的相关的文件，我用的<em>Xcode</em></p></blockquote><hr><ul><li>第二步，添加相关的内容</li></ul><p><em>图1</em></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%20%E4%B8%8B%E5%8D%882.39.57.png" alt=""></p><blockquote><p>以上的没有，所以要自己添加，<em>ID</em>不一定要一致</p></blockquote><p><em>图2</em></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%20%E4%B8%8B%E5%8D%882.40.07.png" alt=""></p><blockquote><p>改为<em>820711</em>，据说只有这个才是<em>专业版</em>的代号…据说改这个数字可以延长免费期限…</p></blockquote><hr><ul><li>第三步，锁定文件，避免自动文件修改</li></ul><p><em>图1</em></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%20%E4%B8%8B%E5%8D%882.44.08.png" alt=""></p><p><em>图2</em></p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%20%E4%B8%8B%E5%8D%882.44.19.png" alt=""></p><hr><blockquote><p><strong>接下来就需要重新打开词典等待结果了，可能一下就得到破解了…</strong></p></blockquote><hr><ul><li>关于下载相关的扩展到<em><a href="https://www.eudic.net/v4/en/home/dictionaryresource" target="_blank" rel="external">官网下载</a></em>：</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ul><li>其实<em>Mac</em>自带的也不错，但是<em>路欧词典</em>还要简单一些。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为在&lt;em&gt;iPad&lt;/em&gt;上用了&lt;em&gt;路欧词典&lt;/em&gt;，感觉还不错，想在&lt;em&gt;Mac上也用用&lt;/em&gt;，发现要不少的钱…在网上看了一下也糊里糊涂摸索了一下，今天一打开发现已经是破解状态了…在此记录下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;希望有钱的还是支持
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于Mac自带语音时而快捷键不灵时的问题</title>
    <link href="https://liujunjie11.github.io/2017/11/19/%E5%85%B3%E4%BA%8EMac%E8%87%AA%E5%B8%A6%E8%AF%AD%E9%9F%B3%E6%97%B6%E8%80%8C%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8D%E7%81%B5%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://liujunjie11.github.io/2017/11/19/关于Mac自带语音时而快捷键不灵时的问题/</id>
    <published>2017-11-19T05:36:45.000Z</published>
    <updated>2017-11-19T05:40:21.908Z</updated>
    
    <content type="html"><![CDATA[<p>有时关机了又开机发现想要利用<em>Mac</em>自带的语音按下快捷键发声时怎么也不好使了。</p><ul><li>解决：先对选中的字词右键 –&gt; <em>语音</em> –&gt; <em>开始朗读</em>  –&gt; 在这之后会发现用快捷键就好使了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时关机了又开机发现想要利用&lt;em&gt;Mac&lt;/em&gt;自带的语音按下快捷键发声时怎么也不好使了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决：先对选中的字词右键 –&amp;gt; &lt;em&gt;语音&lt;/em&gt; –&amp;gt; &lt;em&gt;开始朗读&lt;/em&gt;  –&amp;gt; 在这之后会发现用快捷键就好使了。&lt;/
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python2.7爬虫使用一些方法问题记录</title>
    <link href="https://liujunjie11.github.io/2017/11/18/Python2.7%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2017/11/18/Python2.7爬虫使用一些方法问题记录/</id>
    <published>2017-11-18T12:44:17.000Z</published>
    <updated>2017-11-23T10:28:00.001Z</updated>
    
    <content type="html"><![CDATA[<p>在学习基本的网站技术查看就遇到了问题…在此记录一下。</p><p>我是在<em>eclipse</em>中编的<em>python</em>，用的是<em>anaconda python2.7</em>。</p><p>在<em>eclipse</em>使用<em>builtwith</em>的方法提示需要工程名以<em>builtwith</em>为名的前提下，但是也是失败了（提示<em>builtwith.parse</em>方法找不到…）</p><ul><li><strong>解决</strong>：</li></ul><p>在以后遇到了这类情况可以直接到<em>终端</em>运行就好了，可能第一次运行会出现<em>(‘Error:’, URLError(error(65, ‘No route to host’),))</em>的错误问题，不过再重新运行一次就能解决了。如下图：</p><p><img src="http://owudg3xs2.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-18%20%E4%B8%8B%E5%8D%888.42.42.png" alt=""></p><blockquote><p>完美解决。</p></blockquote><p><strong>包括有<em>whois.whois</em>的之类的方法，在终端运行都可得到好的解决</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习基本的网站技术查看就遇到了问题…在此记录一下。&lt;/p&gt;
&lt;p&gt;我是在&lt;em&gt;eclipse&lt;/em&gt;中编的&lt;em&gt;python&lt;/em&gt;，用的是&lt;em&gt;anaconda python2.7&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;em&gt;eclipse&lt;/em&gt;使用&lt;em&gt;bui
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于Anaconda python两个版本共存时的包的下载问题</title>
    <link href="https://liujunjie11.github.io/2017/11/18/%E5%85%B3%E4%BA%8EAnaconda-python%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98%E6%97%B6%E7%9A%84%E5%8C%85%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
    <id>https://liujunjie11.github.io/2017/11/18/关于Anaconda-python两个版本共存时的包的下载问题/</id>
    <published>2017-11-18T09:27:43.000Z</published>
    <updated>2017-11-18T09:37:46.870Z</updated>
    
    <content type="html"><![CDATA[<p>关于<em>Anaconda</em>下载的问题就不在此多说了，去官网下载好即可，环境也会随着下载好之后自动配置好了。</p><p>如现在我已经安装有了<em>Anaconda python2.7</em>与<em>anaconda python3.6</em>。</p><h1 id="下载包过程"><a href="#下载包过程" class="headerlink" title="下载包过程"></a>下载包过程</h1><p><strong>先创建两个<em>基于anaconda的python虚拟环境</em>，后面下载包需要那个版本即切换到那个版本再利用<em>pip install</em>即可完成下载</strong></p><ul><li>关于相关的虚拟环境创建步骤可以参考：<a href="https://foofish.net/compatible-py2-and-py3.html" target="_blank" rel="external">此处</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于&lt;em&gt;Anaconda&lt;/em&gt;下载的问题就不在此多说了，去官网下载好即可，环境也会随着下载好之后自动配置好了。&lt;/p&gt;
&lt;p&gt;如现在我已经安装有了&lt;em&gt;Anaconda python2.7&lt;/em&gt;与&lt;em&gt;anaconda python3.6&lt;/em&gt;。&lt;/p&gt;
      
    
    </summary>
    
      <category term="学习" scheme="https://liujunjie11.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
