<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LXiHa`Notes</title>
  
  <subtitle>The House Belong to Love and Freedom.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liujunjie11.github.io/"/>
  <updated>2019-03-05T13:57:57.904Z</updated>
  <id>https://liujunjie11.github.io/</id>
  
  <author>
    <name>刘俊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Photoshop cc 2018教程笔记记录</title>
    <link href="https://liujunjie11.github.io/2019/03/05/Photoshop-cc-2018%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2019/03/05/Photoshop-cc-2018教程笔记记录/</id>
    <published>2019-03-05T07:16:29.000Z</published>
    <updated>2019-03-05T13:57:57.904Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直想学习<em>PS</em>这个之前就一直很感兴趣的技能，想着借此实现自己的想法，和作为另一个重要的技能也是不错的。由于是<em>Photoshop cc 2018</em>，所以在此分享一些学习资源和下载资源，另外对于一些值得记住的内容做一些笔记以观后效之用。</p><a id="more"></a><h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><p><em>Adobe</em>家族软件全套破解下载(网友分享～)：</p><blockquote><p> <strong>链接: <a href="https://pan.baidu.com/s/1RDfGzhLVCFoWxg5D7D2Jjg" target="_blank" rel="external">https://pan.baidu.com/s/1RDfGzhLVCFoWxg5D7D2Jjg</a> 提取码: p57f</strong></p></blockquote><p>关于破解之前记得看好：<strong>下载好软件之后，断网，然后打开破解的插件进行破解，破解之后就能使用了。</strong></p><p>另外关于下载百度网盘文件的一些实用方法(全平台均有)：<a href="https://www.runningcheese.com/baiduyun" target="_blank" rel="external">3个方法解决百度网盘限速 （2019-02-20 更新）</a></p><h1 id="学习资源分享"><a href="#学习资源分享" class="headerlink" title="学习资源分享"></a>学习资源分享</h1><p>关于我是跟着在<em>YouTube</em>上的几个大神学习～所以就在此分享这些资源吧。</p><ul><li><p><a href="https://www.youtube.com/watch?v=7AbUkwpwZ9E&amp;list=PLdQlQR22jq3VLBuAxsHIhOEWvEWihAz4I" target="_blank" rel="external">Mr. Yuan：Photoshop cc 2018最新教程 01（认识Photoshop）</a></p></li><li><p><a href=""></a></p></li></ul><h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li><p>切换前景色和背景色：<strong>X</strong></p></li><li><p>返回前选色：<strong>D</strong></p></li><li><p><strong>shift</strong>键加<strong>option</strong>键盘(Win为<strong>Alt键</strong>)在结合选区时有更为方便的的效果</p></li><li></li></ul><h2 id="基本认识及操作"><a href="#基本认识及操作" class="headerlink" title="基本认识及操作"></a>基本认识及操作</h2><ul><li><p>通过首选项以及上方的属性栏来进行调整图片的原始排列等；</p></li><li><p>工具之间是相互交叉配合使用的；</p></li><li><p>一个工具里有多个选项选择交叉可使用；</p></li><li><p>羽化即虚化；</p></li></ul><h2 id="抠图"><a href="#抠图" class="headerlink" title="抠图"></a>抠图</h2><p>通过选区选框圈出大概的位置，可利用上方属性的“变换选区”，结合放大来进行完善选框的完整性：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Mar-05-2019%2016-46-57.gif" alt=""></p><h2 id="填充取景"><a href="#填充取景" class="headerlink" title="填充取景"></a>填充取景</h2><p>通过选区(可通过“取消选择”来取消选区)，进行“填充”，补色，“模糊”来进行进一步的简要特效。</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Mar-05-2019%2020-51-45.gif" alt=""></p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Mar-05-2019%2020-51-10.gif" alt=""></p><p>“自由变换”进行拖拉选区尺寸的大小。</p><h2 id="图层变换"><a href="#图层变换" class="headerlink" title="图层变换"></a>图层变换</h2><p>可将右侧的图层上下来结合实际情况进行摆布，可选择“叠加”，“透明度”等等使得更为符合实际情况。</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Mar-05-2019%2021-06-00.gif" alt=""></p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Mar-05-2019%2021-06-30.gif" alt=""></p><h2 id="多面抠图"><a href="#多面抠图" class="headerlink" title="多面抠图"></a>多面抠图</h2><blockquote><p><strong>以下步骤必须一步完成！！！不可中途更改！</strong></p></blockquote><p>多面抠图，利用“套索工具”，其中的多方面可选择工具，可先将图片放大以便抠图更为准确。</p><p>在套索完之后选择“选择并遮住…”才可进一步切剪多余的部分（可结合放大图像，按住“option”/“Alt”配合套索工具即可）。</p><p>之后在右下角图层下面选择“建立新的图层或调整图层”，“纯色”，将此脱在剪好的图层下边。（<strong>换成白底效果！！</strong>）</p><blockquote><p><a href="https://www.youtube.com/watch?v=Zo8P4JYeIFg&amp;list=PLdQlQR22jq3VLBuAxsHIhOEWvEWihAz4I&amp;index=8" target="_blank" rel="external">多边形抠图</a></p></blockquote><h2 id="快速选择工具抠图"><a href="#快速选择工具抠图" class="headerlink" title="快速选择工具抠图"></a>快速选择工具抠图</h2><p>“快速选择工具”与“魔棒”在一按钮处…可增可减。</p><p>另外操作可与上面的多面抠图的操作一致，如放大来进行抠图，加上快捷键等等。</p><blockquote><p><a href="https://www.youtube.com/watch?v=kxW420eVuOY&amp;list=PLdQlQR22jq3VLBuAxsHIhOEWvEWihAz4I&amp;index=9" target="_blank" rel="external">快速选择工具抠图</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直想学习&lt;em&gt;PS&lt;/em&gt;这个之前就一直很感兴趣的技能，想着借此实现自己的想法，和作为另一个重要的技能也是不错的。由于是&lt;em&gt;Photoshop cc 2018&lt;/em&gt;，所以在此分享一些学习资源和下载资源，另外对于一些值得记住的内容做一些笔记以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Photoshop" scheme="https://liujunjie11.github.io/categories/Photoshop/"/>
    
      <category term="教程" scheme="https://liujunjie11.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Photoshop" scheme="https://liujunjie11.github.io/tags/Photoshop/"/>
    
      <category term="教程" scheme="https://liujunjie11.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python分词结合Pyqt5：简单文章查重小工具</title>
    <link href="https://liujunjie11.github.io/2019/03/03/python%E5%88%86%E8%AF%8D%E7%BB%93%E5%90%88Pyqt5%EF%BC%9A%E7%AE%80%E5%8D%95%E6%96%87%E7%AB%A0%E6%9F%A5%E9%87%8D%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://liujunjie11.github.io/2019/03/03/python分词结合Pyqt5：简单文章查重小工具/</id>
    <published>2019-03-03T03:58:16.000Z</published>
    <updated>2019-03-05T12:05:49.335Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在一微信公众号上看到一篇不错的以关键词频率为基础的“文章查重率”的技术文章，我在这里将其套上了<em>PyQt5</em>的<em>UI</em>界面，将其制作成了一个小的工具。其核心代码还是以关键词频率为准的，所以查重率真的是<strong>不靠谱的</strong>…本人只是心血来潮了，想做个玩具玩玩～</p><a id="more"></a><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>因为是在其基础上改造的，所以可直接查看原链接即可：<a href="https://mp.weixin.qq.com/s?__biz=MzU5MjEwMTE2OQ==&amp;mid=2247484948&amp;idx=1&amp;sn=9d079dcfeb51840aadce6fca6eeb0ee1&amp;chksm=fe25ac4ac952255c5751a6a2ddf574fe7f527f0aeee18fc68a2b1bc9a14208e5942a95f78d7a&amp;mpshare=1&amp;scene=23&amp;srcid=0302nzaTeyViT0wOpdHRVmLV" target="_blank" rel="external">我用Python分析了翟天临的论文，学术还是要认真做啊</a></p><h2 id="Ui代码"><a href="#Ui代码" class="headerlink" title="Ui代码"></a>Ui代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">Created on Mar 3, 2019</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">@author: junjieliu</span></div><div class="line"><span class="string">@note: python checking tool</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checking_tool</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        super().__init__()</div><div class="line">        self.initUI()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        UI布局设计、管理，以及信号槽的连襟</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="comment">#第一选取文件按钮</span></div><div class="line">        lbl_1 = QLabel(<span class="string">'请选择输入文件：'</span>)</div><div class="line">        btn_chooseFile_1 = QPushButton(<span class="string">"选取文件"</span>, self)</div><div class="line">        <span class="comment">#第二选取文件按钮</span></div><div class="line">        lbl_2 = QLabel(<span class="string">'请选择对比文件：'</span>)</div><div class="line">        btn_chooseFile_2 = QPushButton(<span class="string">"选取文件"</span>, self)</div><div class="line">        <span class="comment">#输出按钮</span></div><div class="line">        lbl_3 = QLabel(<span class="string">'重复率：'</span>)</div><div class="line">        export_nmb = QLineEdit()</div><div class="line">        <span class="comment">#推出按钮</span></div><div class="line">        qbtn = QPushButton(<span class="string">'Quit'</span>, self)</div><div class="line">        qbtn.clicked.connect(QCoreApplication.instance().quit)</div><div class="line">        </div><div class="line">        <span class="comment">#布局管理</span></div><div class="line">        grid = QGridLayout()</div><div class="line">        grid.setSpacing(<span class="number">6</span>)</div><div class="line">        grid.addWidget(lbl_1, <span class="number">1</span>, <span class="number">0</span>)</div><div class="line">        grid.addWidget(btn_chooseFile_1, <span class="number">1</span>, <span class="number">1</span>)</div><div class="line">        grid.addWidget(lbl_2, <span class="number">2</span>, <span class="number">0</span>)</div><div class="line">        grid.addWidget(btn_chooseFile_2, <span class="number">2</span>, <span class="number">1</span>)</div><div class="line">        grid.addWidget(lbl_3, <span class="number">3</span>, <span class="number">0</span>)</div><div class="line">        grid.addWidget(export_nmb, <span class="number">3</span>, <span class="number">1</span>)</div><div class="line">        grid.addWidget(qbtn, <span class="number">4</span>, <span class="number">1</span>)</div><div class="line">        self.setLayout(grid)</div><div class="line">        self.setGeometry(<span class="number">500</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</div><div class="line">        </div><div class="line">        self.setWindowTitle(<span class="string">'简易查重小工具'</span>)</div><div class="line">        self.cwd = os.getcwd()  <span class="comment"># 获取当前程序文件位置</span></div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">file_content</span><span class="params">()</span>:</span></div><div class="line">            <span class="string">'''</span></div><div class="line"><span class="string">            文章关键词词频输出</span></div><div class="line"><span class="string">            '''</span></div><div class="line">            fileName_choose, filetype = QFileDialog.getOpenFileName(self, <span class="string">"选取文件"</span>, self.cwd)  <span class="comment"># 起始路径 </span></div><div class="line">            </div><div class="line">            file_open = open(str(fileName_choose))</div><div class="line">            file_content = file_open.read()</div><div class="line">            print(file_content) </div><div class="line"></div><div class="line">        btn_chooseFile_1.clicked.connect(file_content)</div><div class="line">        self.show()</div><div class="line"></div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Checking_tool()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><h3 id="Ui效果展示"><a href="#Ui效果展示" class="headerlink" title="Ui效果展示"></a>Ui效果展示</h3><p>如下图：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Mar-05-2019%2019-53-55.gif" alt=""></p><h2 id="结合代码（非完整代码）"><a href="#结合代码（非完整代码）" class="headerlink" title="结合代码（非完整代码）"></a>结合代码（非完整代码）</h2><p><strong>这个代码不是完整代码！！！这是目前写到的地方！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">Created on Mar 3, 2019</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">@author: junjieliu</span></div><div class="line"><span class="string">@note: python checking tool</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> pkuseg</div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> numpy.linalg.linalg <span class="keyword">import</span> norm  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checking_tool</span><span class="params">(QWidget)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        </div><div class="line">        super().__init__()</div><div class="line">        self.initUI()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(self, file_path)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        文件读取，输出文件内容</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        content = []</div><div class="line">        <span class="keyword">with</span> open(file_path, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">            content = f.read()</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> content</div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keywords_TF</span><span class="params">(self, file_content)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        利用北大的中文分词表以及中文停用词表来进行一系列的分词动作，实现输出</span></div><div class="line"><span class="string">        主要关键词的频率,忽略掉停用词的频率出现</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        seg = pkuseg.pkuseg() <span class="comment">#加载模型</span></div><div class="line">        text = seg.cut(file_content)</div><div class="line">        </div><div class="line">        <span class="comment">#停用词运用</span></div><div class="line">        stopwords = []</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'Users/junjieliu/Documents/stopwords-master/中文停用词表.txt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">            stopwords = f.read()</div><div class="line">        </div><div class="line">        <span class="comment">#去除在文章中的停用词</span></div><div class="line">        new_text = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> text:</div><div class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</div><div class="line">                new_text.append(i)</div><div class="line">        <span class="keyword">return</span> new_text</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculateSimilarity</span><span class="params">(self, file_1, file_2)</span>:</span></div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add_space</span><span class="params">(s)</span>:</span></div><div class="line">            <span class="keyword">return</span> <span class="string">' '</span>.join(keywords_TF(s))  </div><div class="line">  </div><div class="line">        <span class="comment"># 将字中间加入空格</span></div><div class="line">        s1, s2 = add_space(file_1), add_space(file_2)</div><div class="line">        <span class="comment"># 转化为TF矩阵</span></div><div class="line">        cv = TfidfVectorizer(tokenizer=<span class="keyword">lambda</span> s: s.split())</div><div class="line"> </div><div class="line">        corpus = [s1, s2]</div><div class="line"> </div><div class="line">        vectors = cv.fit_transform(corpus).toarray()</div><div class="line">        <span class="comment"># 计算TF系数</span></div><div class="line">        <span class="keyword">return</span> np.dot(vectors[<span class="number">0</span>], vectors[<span class="number">1</span>]) / (norm(vectors[<span class="number">0</span>]))</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        UI布局设计、管理，以及信号槽的连襟</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="comment">#第一选取文件按钮</span></div><div class="line">        lbl_1 = QLabel(<span class="string">'请选择输入文件：'</span>)</div><div class="line">        btn_chooseFile_1 = QPushButton(<span class="string">"选取文件"</span>, self)</div><div class="line">        <span class="comment">#第二选取文件按钮</span></div><div class="line">        lbl_2 = QLabel(<span class="string">'请选择对比文件：'</span>)</div><div class="line">        btn_chooseFile_2 = QPushButton(<span class="string">"选取文件"</span>, self)</div><div class="line">        <span class="comment">#输出按钮</span></div><div class="line">        lbl_3 = QLabel(<span class="string">'重复率：'</span>)</div><div class="line">        export_nmb = QLineEdit()</div><div class="line">        <span class="comment">#推出按钮</span></div><div class="line">        qbtn = QPushButton(<span class="string">'Quit'</span>, self)</div><div class="line">        qbtn.clicked.connect(QCoreApplication.instance().quit)</div><div class="line">        </div><div class="line">        <span class="comment">#布局管理</span></div><div class="line">        grid = QGridLayout()</div><div class="line">        grid.setSpacing(<span class="number">6</span>)</div><div class="line">        grid.addWidget(lbl_1, <span class="number">1</span>, <span class="number">0</span>)</div><div class="line">        grid.addWidget(btn_chooseFile_1, <span class="number">1</span>, <span class="number">1</span>)</div><div class="line">        grid.addWidget(lbl_2, <span class="number">2</span>, <span class="number">0</span>)</div><div class="line">        grid.addWidget(btn_chooseFile_2, <span class="number">2</span>, <span class="number">1</span>)</div><div class="line">        grid.addWidget(lbl_3, <span class="number">3</span>, <span class="number">0</span>)</div><div class="line">        grid.addWidget(export_nmb, <span class="number">3</span>, <span class="number">1</span>)</div><div class="line">        grid.addWidget(qbtn, <span class="number">4</span>, <span class="number">1</span>)</div><div class="line">        self.setLayout(grid)</div><div class="line">        self.setGeometry(<span class="number">500</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</div><div class="line">        </div><div class="line">        self.setWindowTitle(<span class="string">'简易查重小工具'</span>)</div><div class="line">        self.cwd = os.getcwd()  <span class="comment"># 获取当前程序文件位置</span></div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">TF</span><span class="params">()</span>:</span></div><div class="line">            <span class="string">'''</span></div><div class="line"><span class="string">            文章关键词词频输出</span></div><div class="line"><span class="string">            '''</span></div><div class="line">            fileName_choose, filetype = QFileDialog.getOpenFileName(self, <span class="string">"选取文件"</span>, self.cwd)  <span class="comment"># 起始路径 </span></div><div class="line">            </div><div class="line">            file_open = open(str(fileName_choose))</div><div class="line">            file_content = file_open.read()</div><div class="line">            print(file_content) </div><div class="line"></div><div class="line">        btn_chooseFile_1.clicked.connect(TF)</div><div class="line">        self.show()</div><div class="line"></div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Checking_tool()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><blockquote><p>有时间有精力来再补上这个坑…</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>以下是参考过的文章，代码其中一些不懂的可作为参考学习。</p><ul><li><p><a href="https://blog.csdn.net/humanking7/article/details/80546728" target="_blank" rel="external">[PyQt5]文件对话框QFileDialog的使用</a></p></li><li><p><a href="http://www.runoob.com/python/python-files-io.html" target="_blank" rel="external">Python 文件I/O</a></p></li><li><p><a href="https://maicss.gitbooks.io/pyqt5/content/布局管理.html" target="_blank" rel="external">PyQt5 中文教程</a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2013/03/tf-idf.html" target="_blank" rel="external">TF-IDF与余弦相似性的应用（一）：自动提取关键词</a></p></li><li><p><a href="https://github.com/hahaahaha111/stopwords" target="_blank" rel="external">中文常用停用词表</a></p></li><li><p><a href="https://blog.csdn.net/laobai1015/article/details/80451371" target="_blank" rel="external">Python中的TfidfVectorizer参数解析</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间在一微信公众号上看到一篇不错的以关键词频率为基础的“文章查重率”的技术文章，我在这里将其套上了&lt;em&gt;PyQt5&lt;/em&gt;的&lt;em&gt;UI&lt;/em&gt;界面，将其制作成了一个小的工具。其核心代码还是以关键词频率为准的，所以查重率真的是&lt;strong&gt;不靠谱的&lt;/strong&gt;…本人只是心血来潮了，想做个玩具玩玩～&lt;/p&gt;
    
    </summary>
    
      <category term="小工具" scheme="https://liujunjie11.github.io/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
      <category term="PyQt5" scheme="https://liujunjie11.github.io/categories/PyQt5/"/>
    
      <category term="python" scheme="https://liujunjie11.github.io/categories/python/"/>
    
      <category term="分词" scheme="https://liujunjie11.github.io/categories/%E5%88%86%E8%AF%8D/"/>
    
    
      <category term="机器学习" scheme="https://liujunjie11.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="PyQt5" scheme="https://liujunjie11.github.io/tags/PyQt5/"/>
    
      <category term="python" scheme="https://liujunjie11.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在这片给我一切的土地上开始我的梦...</title>
    <link href="https://liujunjie11.github.io/2019/02/24/%E5%9C%A8%E8%BF%99%E7%89%87%E7%BB%99%E6%88%91%E4%B8%80%E5%88%87%E7%9A%84%E5%9C%9F%E5%9C%B0%E4%B8%8A%E5%BC%80%E5%A7%8B%E6%88%91%E7%9A%84%E6%A2%A6/"/>
    <id>https://liujunjie11.github.io/2019/02/24/在这片给我一切的土地上开始我的梦/</id>
    <published>2019-02-24T07:56:33.000Z</published>
    <updated>2019-02-27T12:10:22.445Z</updated>
    
    <content type="html"><![CDATA[<p>就在这片给我一切的土地上开始我的梦吧！我怎么舍得离开？我亦舍不得，这里的所有，我的亲情，我的幻想…</p><a id="more"></a><p>尽管所有明白的人想要逃离，尽管在这片土地上依旧一片荒芜，但偏偏的我的根就在这里，我从这里出生，收获的所有感情，所有回忆，所有幻想，我真的舍不得、放不下…</p><p>曾经想着游走异国他乡，我无所畏惧。而如今我慢慢的开始有了我所发自内心的真正的牵挂，有了真正离不开的纽带。我变了，变得焕然一新了？怎么突然的在短短的一段时间变得如此不像从前的那个自己了，可能是我慢慢的懂得了珍惜吧…</p><p>人浮于事，为了生计，为了心中的梦想，离不开这人情世故，离不开自心本就瞧不起的平庸低俗。浮躁的心牵动引导着自我慢慢的变得不像、再也不是自己。这鱼龙混杂的世界让人眼花缭乱，它所有的迷魂记使得多少行尸走肉度过再为平凡不过的刹那人生，这样的人太可悲…</p><p>我怎么了？我呕心自问。我不过是变了，不再是从前那个真的无所畏惧的我了。我怎么在心中开始有了枷锁，自找的枷锁？无论如何，我该做的事，我想做的事就要继续去做。</p><p>此时此刻我还不够冷静，我的内心波澜不断，怎么了，滚滚红尘迷蒙住我的双眼，我的理性有时就这样的容易不翼而飞…</p><p>….</p><p>这份儿女情长应当铭记在我心，此刻仔细想来确实庸人自扰了吧…我不够冷静，不够冷静，这又算是一篇杂记了吧，就这样吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就在这片给我一切的土地上开始我的梦吧！我怎么舍得离开？我亦舍不得，这里的所有，我的亲情，我的幻想…&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>视频模版制作记录</title>
    <link href="https://liujunjie11.github.io/2019/02/23/%E8%A7%86%E9%A2%91%E6%A8%A1%E7%89%88%E5%88%B6%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2019/02/23/视频模版制作记录/</id>
    <published>2019-02-23T07:04:54.000Z</published>
    <updated>2019-02-23T07:22:00.621Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直有一些困扰我的几个问题，其中就包括了关于一些视频模版怎么做成的问题，更为准确的说是那些劲爆的片头或者片尾镜头是怎么做成的问题，现在终于有了一些解决的方案，在此记录一下，以观后效之用。</p><a id="more"></a><p>其实一个关于<em>PS</em>的使用也困扰过一些，但是了解了一下之后兴趣亦随之消退…还是研究视频模版制作好玩一些。</p><p>片尾片头的制作无非就是借用了其他的工具制作成功之后导出为视频格式，之后再进行进一步的加工即可(当然有些简单的直接结合字幕和照片或者是视频片段来进行下一步的操作也是可以的)。</p><p>在此简要记录一下一些制作的几种方式。</p><h2 id="结合PPT类软件输出片段"><a href="#结合PPT类软件输出片段" class="headerlink" title="结合PPT类软件输出片段"></a>结合PPT类软件输出片段</h2><p>在此一说明者恐怕早已自明了。就是结合<em>PPT</em>啊(在此我要推荐那个<em>Mac</em>自带的<em>Keynote</em>)，可以做成许多自想要的图片效果，有甚者甚至可以以此添加一些特效之类的以此丰富视频的展示效果～</p><blockquote><p>当然我以上所说的两款不是最佳的，还有许多的另类的软件做出来的效果远远胜于传统的PPT展示效果，比如国产的<em>AxeSlide</em>等，会让人感到眼前一亮～</p></blockquote><h2 id="结合海报制作软件输出精美片段"><a href="#结合海报制作软件输出精美片段" class="headerlink" title="结合海报制作软件输出精美片段"></a>结合海报制作软件输出精美片段</h2><p>这一类与上所述的类似，即与字幕的结合就可以输出一段又一段的精美视频片段～</p><h2 id="网上的模版套用"><a href="#网上的模版套用" class="headerlink" title="网上的模版套用"></a>网上的模版套用</h2><p>一些网上分享的免费模版套用，可以利用好搜索引擎自行搜索一下类似的网站～</p><p>综上所述，我个人还是比较喜欢<em>DIY</em>的～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直有一些困扰我的几个问题，其中就包括了关于一些视频模版怎么做成的问题，更为准确的说是那些劲爆的片头或者片尾镜头是怎么做成的问题，现在终于有了一些解决的方案，在此记录一下，以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>(Python)PyQT5编写51单片机的取模机和上位机</title>
    <link href="https://liujunjie11.github.io/2019/02/22/Python-PyQT5%E7%BC%96%E5%86%998x8x8%E5%85%89%E7%AB%8B%E6%96%B9%E7%9A%84%E5%8F%96%E6%A8%A1%E6%9C%BA%E5%92%8C%E4%B8%8A%E4%BD%8D%E6%9C%BA/"/>
    <id>https://liujunjie11.github.io/2019/02/22/Python-PyQT5编写8x8x8光立方的取模机和上位机/</id>
    <published>2019-02-22T02:52:51.000Z</published>
    <updated>2019-02-22T03:24:01.723Z</updated>
    
    <content type="html"><![CDATA[<p>上学期的一个课程设计要求做一个<em>8x8x8光立方</em>的上位机，一时不知怎么写，上学期太懒了，好久没写程序的缘故，关于<em>PyQT5</em>的运用也是之前用过一点皮毛，所以也忘的差不多了，所以在网上参考一些前辈写的，在此记录一下，以观后效之用。</p><a id="more"></a><blockquote><p><strong>首先得声明一下：这是我从网上的前辈拿来的程序，并非我个人所写。</strong></p></blockquote><h1 id="取模器"><a href="#取模器" class="headerlink" title="取模器"></a>取模器</h1><ul><li><strong>pattern.py：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pattern</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page=<span class="number">8</span>, row=<span class="number">8</span>, column=<span class="number">8</span>)</span>:</span></div><div class="line">        self.page = page</div><div class="line">        self.row = row</div><div class="line">        self.column = column</div><div class="line">        self.init_data()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_data</span><span class="params">(self)</span>:</span></div><div class="line">        self.data = []</div><div class="line">        self.page_flag = []</div><div class="line">        self.row_flag = []</div><div class="line">        self.column_flag = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, self.page):</div><div class="line">            page_data = []</div><div class="line">            self.page_flag.append(<span class="number">0</span>)</div><div class="line">            a_row_flag = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, self.row):</div><div class="line">                a_row_flag.append(<span class="number">0</span>)</div><div class="line">                a_column_flag = []</div><div class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, self.column):</div><div class="line">                    a_column_flag.append(<span class="number">0</span>)</div><div class="line">                    page_data.append(<span class="number">0</span>)</div><div class="line">            self.column_flag.append(a_column_flag)</div><div class="line">            self.row_flag.append(a_row_flag)</div><div class="line">            self.data.append(page_data)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.format(format=<span class="string">'hex'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;Pattern Object %dx%dx%d&gt;'</span> % (self.page, self.row, self.column)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, page, row, column, value)</span>:</span></div><div class="line">        self.data[page][row * <span class="number">8</span> + column] = value</div><div class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> self.data[page]:</div><div class="line">            self.page_flag[page] = bit</div><div class="line">            <span class="keyword">if</span> bit == <span class="number">0</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        start = self.column * row</div><div class="line">        end = start + self.column</div><div class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> self.data[page][start:end]:</div><div class="line">            self.row_flag[page][row] = bit</div><div class="line">            <span class="keyword">if</span> bit == <span class="number">0</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">        start = column</div><div class="line">        step = self.column</div><div class="line">        end = start + step * self.row</div><div class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> self.data[page][start:end:step]:</div><div class="line">            self.column_flag[page][column] = bit</div><div class="line">            <span class="keyword">if</span> bit == <span class="number">0</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_row</span><span class="params">(self, page, row, value)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, self.column):</div><div class="line">            self.set(page, row, i, value)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_column</span><span class="params">(self, page, column, value)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.row):</div><div class="line">            self.set(page, i, column, value)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_page</span><span class="params">(self, page, value)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.row * self.column):</div><div class="line">            self.data[page][i] = value</div><div class="line">        self.page_flag[page] = value</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.row):</div><div class="line">            self.row_flag[page][i] = value</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.column):</div><div class="line">            self.column_flag[page][i] = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_all</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, self.page):</div><div class="line">            self.set_page(i, value)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zip</span><span class="params">(self)</span>:</span></div><div class="line">        zipped_data = []</div><div class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(self.row):</div><div class="line">            <span class="keyword">for</span> page <span class="keyword">in</span> range(self.page):</div><div class="line">                column_sum = <span class="number">0</span></div><div class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> range(self.column):</div><div class="line">                    bit = self.data[page][row * self.column + column]</div><div class="line">                    <span class="keyword">if</span> bit:</div><div class="line">                        column_sum += <span class="number">2</span>**column</div><div class="line">                zipped_data.append(column_sum)</div><div class="line">        <span class="keyword">return</span> zipped_data</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unzip</span><span class="params">(self, zipped_data)</span>:</span></div><div class="line">        unzipped_data = []</div><div class="line">        zipped_data_t = []</div><div class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> range(self.page):</div><div class="line">            p_data_t = []</div><div class="line">            <span class="keyword">for</span> pt <span class="keyword">in</span> zipped_data:</div><div class="line">                p_data_t.append(pt[p])</div><div class="line">            zipped_data_t.append(p_data_t)</div><div class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> zipped_data_t:</div><div class="line">            page = []</div><div class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> p:</div><div class="line">                c = list(bin(r)[<span class="number">2</span>:].zfill(<span class="number">8</span>))</div><div class="line">                cint = []</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> c[::<span class="number">-1</span>]:</div><div class="line">                    cint.append(int(i))</div><div class="line">                page.extend(cint)</div><div class="line">            unzipped_data.append(page)</div><div class="line">        <span class="keyword">return</span> unzipped_data</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">format</span><span class="params">(self, format=<span class="string">'hex'</span>, sep=<span class="string">', '</span>, beautify=True)</span>:</span></div><div class="line">        data = self.zip()</div><div class="line">        data_str = []</div><div class="line">        <span class="keyword">if</span> format == <span class="string">'dec'</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> data:</div><div class="line">                data_str.append(str(i))</div><div class="line">        <span class="keyword">elif</span> format == <span class="string">'hex'</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> data:</div><div class="line">                data_str.append(<span class="string">'0x%.2X'</span> % i)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"No such format '%s'"</span> % format)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> beautify:</div><div class="line">            data_beauty = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, self.row):</div><div class="line">                start = self.page * i</div><div class="line">                end = start + <span class="number">8</span></div><div class="line">                a_row = sep.join(data_str[start:end])</div><div class="line">                data_beauty.append(a_row)</div><div class="line">            data_beauty_str = <span class="string">',\n'</span>.join(data_beauty)</div><div class="line">            <span class="keyword">return</span> data_beauty_str</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> sep.join(data_str)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restore</span><span class="params">(self, text)</span>:</span></div><div class="line">        text = text.split(<span class="string">',\n'</span>)</div><div class="line">        self.page = len(text)</div><div class="line">        zipped_data = []</div><div class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> text:</div><div class="line">            rows = p.split(<span class="string">', '</span>)</div><div class="line">            self.row = len(rows)</div><div class="line">            rows = [int(i, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> rows]</div><div class="line">            zipped_data.append(rows)</div><div class="line">        unzipped_data = self.unzip(zipped_data)</div><div class="line">        self.init_data()</div><div class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(self.page):</div><div class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(self.row):</div><div class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> range(self.column):</div><div class="line">                    index = self.column * row + column</div><div class="line">                    new_bit = unzipped_data[page][index]</div><div class="line">                    <span class="keyword">if</span> new_bit:</div><div class="line">                        self.set(page, row, column, <span class="number">1</span>)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        self.set(page, row, column, <span class="number">0</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p = Pattern(<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>)</div><div class="line">    <span class="comment"># print(p.page_flag)</span></div><div class="line">    <span class="comment"># print(p.row_flag)</span></div><div class="line">    <span class="comment"># print(p.column_flag)</span></div><div class="line">    <span class="comment"># for i in range(8):</span></div><div class="line">    <span class="comment">#     p.set_column(0, i, 1)</span></div><div class="line">    <span class="comment">#     p.set(0, i, 0, 0)</span></div><div class="line">    <span class="comment"># print(p.format('dec'))</span></div><div class="line">    <span class="comment"># print(p.page_flag)</span></div><div class="line">    <span class="comment"># print(p.row_flag)</span></div><div class="line">    <span class="comment"># print(p.column_flag)</span></div><div class="line">    hex_text = <span class="string">"""0xFF, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,</span></div><div class="line"><span class="string">0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,</span></div><div class="line"><span class="string">0xFF, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,</span></div><div class="line"><span class="string">0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,</span></div><div class="line"><span class="string">0xFF, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,</span></div><div class="line"><span class="string">0xFF, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,</span></div><div class="line"><span class="string">0xFF, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,</span></div><div class="line"><span class="string">0xFF, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00"""</span></div><div class="line">    <span class="comment"># p.restore(dec_text)</span></div><div class="line">    p.restore(hex_text)</div><div class="line">    print(p.data)</div><div class="line">    print(p.page_flag)</div><div class="line">    print(p.row_flag)</div><div class="line">    print(p.column_flag)</div></pre></td></tr></table></figure><ul><li><strong>patternflow.py：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (</div><div class="line">    QMainWindow, QDesktopWidget, QApplication, QWidget,</div><div class="line">    QVBoxLayout, QHBoxLayout, QGridLayout,</div><div class="line">    QPushButton, QComboBox, QTextEdit, QCheckBox</div><div class="line">)</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication, Qt</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QGuiApplication</div><div class="line"><span class="keyword">from</span> pattern <span class="keyword">import</span> Pattern</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PatternFlow</span><span class="params">(QWidget)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page=<span class="number">8</span>, row=<span class="number">8</span>, column=<span class="number">8</span>)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.page = page</div><div class="line">        self.row = row</div><div class="line">        self.column = column</div><div class="line"></div><div class="line">        self.pt = Pattern()</div><div class="line">        self.format = <span class="string">'dec'</span></div><div class="line"></div><div class="line">        self.cb = QGuiApplication.clipboard()</div><div class="line"></div><div class="line">        matrixs = self.matrixs(<span class="number">8</span>)</div><div class="line"></div><div class="line">        console = self.console()</div><div class="line"></div><div class="line">        main_layout = QVBoxLayout()</div><div class="line">        main_layout.addLayout(matrixs)</div><div class="line">        main_layout.addStretch(<span class="number">1</span>)</div><div class="line">        main_layout.addLayout(console)</div><div class="line"></div><div class="line">        self.setLayout(main_layout)</div><div class="line">        self.center_windows()</div><div class="line">        self.setWindowTitle(<span class="string">'PatternFlow'</span>)</div><div class="line">        self.resize(<span class="number">800</span>, <span class="number">400</span>)</div><div class="line">        self.show()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">console</span><span class="params">(self)</span>:</span></div><div class="line">        format_cbo = QComboBox()</div><div class="line">        format_cbo.addItem(<span class="string">'Dec'</span>)</div><div class="line">        format_cbo.addItem(<span class="string">'Hex'</span>)</div><div class="line">        format_cbo.activated[str].connect(self.set_format)</div><div class="line"></div><div class="line">        self.code_text = QTextEdit()</div><div class="line">        copy_btn = QPushButton(<span class="string">'Copy'</span>)</div><div class="line">        copy_btn.setToolTip(<span class="string">'Copy the pattern code to the clipboard'</span>)</div><div class="line">        copy_btn.clicked.connect(self.copy_to_clipboard)</div><div class="line"></div><div class="line">        reset_btn = QPushButton(<span class="string">'Reset'</span>)</div><div class="line">        reset_btn.setToolTip(<span class="string">'Reset all bit to 0'</span>)</div><div class="line">        reset_btn.clicked.connect(self.reset)</div><div class="line">        setall_btn = QPushButton(<span class="string">'Set All'</span>)</div><div class="line">        setall_btn.setToolTip(<span class="string">'Set all bit to 1'</span>)</div><div class="line">        setall_btn.clicked.connect(self.setall)</div><div class="line"></div><div class="line">        restore_btn = QPushButton(<span class="string">'Restore'</span>)</div><div class="line">        restore_btn.clicked.connect(self.restore)</div><div class="line">        restore_btn.setToolTip(<span class="string">'Restore pattern from code'</span>)</div><div class="line"></div><div class="line">        quit_btn = QPushButton(<span class="string">'Quit'</span>)</div><div class="line">        quit_btn.clicked.connect(QCoreApplication.instance().quit)</div><div class="line"></div><div class="line">        console = QGridLayout()</div><div class="line">        console.addWidget(self.code_text, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">4</span>)</div><div class="line">        console.setColumnStretch(<span class="number">0</span>, <span class="number">1</span>)</div><div class="line">        console.addWidget(format_cbo, <span class="number">0</span>, <span class="number">6</span>)</div><div class="line">        console.addWidget(copy_btn, <span class="number">1</span>, <span class="number">6</span>)</div><div class="line">        console.addWidget(reset_btn, <span class="number">3</span>, <span class="number">6</span>)</div><div class="line">        console.addWidget(setall_btn, <span class="number">2</span>, <span class="number">6</span>)</div><div class="line">        console.addWidget(restore_btn, <span class="number">4</span>, <span class="number">6</span>)</div><div class="line">        console.addWidget(quit_btn, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        <span class="keyword">return</span> console</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        self.pt.init_data()</div><div class="line">        self.mapto_btn()</div><div class="line">        self.code_text.clear()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setall</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.page):</div><div class="line">            self.pt.set_page(i, <span class="number">1</span>)</div><div class="line">        self.mapto_btn()</div><div class="line">        self.gen_result()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy_to_clipboard</span><span class="params">(self)</span>:</span></div><div class="line">        text = self.code_text.toPlainText()</div><div class="line">        self.cb.setText(text)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">matrixs</span><span class="params">(self, page)</span>:</span></div><div class="line">        self.bit_btns = []</div><div class="line">        matrixs = QGridLayout()</div><div class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">            matrix = QGridLayout()</div><div class="line">            matrix.setSpacing(<span class="number">2</span>)</div><div class="line">            set_page = QPushButton()</div><div class="line">            set_page.setFixedSize(<span class="number">16</span>, <span class="number">16</span>)</div><div class="line">            set_page.setToolTip(<span class="string">'set_page(%d'</span> % page)</div><div class="line">            set_page.setStyleSheet(</div><div class="line">                <span class="string">'QPushButton &#123;background-color: #fff; border: 1px solid #ccc; border-radius: 4px&#125;'</span></div><div class="line">                <span class="string">'QPushButton:open &#123;background-color: #666; border: 1px solid #ccc&#125;'</span></div><div class="line">            )</div><div class="line">            set_page.clicked.connect(self.set_page)</div><div class="line">            matrix.addWidget(set_page, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">                set_row = QPushButton()</div><div class="line">                set_row.setFixedSize(<span class="number">16</span>, <span class="number">16</span>)</div><div class="line">                set_row.setToolTip(<span class="string">'set_row(%d, %d)'</span> % (page, row))</div><div class="line">                set_row.setStyleSheet(</div><div class="line">                    <span class="string">'QPushButton &#123;background-color: #fff; border: 1px solid #ccc; border-radius: 4px&#125;'</span></div><div class="line">                    <span class="string">'QPushButton:open &#123;background-color: #aaa&#125;'</span></div><div class="line">                )</div><div class="line">                set_row.clicked.connect(self.set_row)</div><div class="line">                matrix.addWidget(set_row, row + <span class="number">1</span>, <span class="number">0</span>)</div><div class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">                set_column = QPushButton()</div><div class="line">                set_column.setFixedSize(<span class="number">16</span>, <span class="number">16</span>)</div><div class="line">                set_column.setToolTip(<span class="string">'set_column(%d, %d)'</span> % (page, column))</div><div class="line">                set_column.setStyleSheet(</div><div class="line">                    <span class="string">'QPushButton &#123;background-color: #fff; border: 1px solid #ccc; border-radius: 4px&#125;'</span></div><div class="line">                    <span class="string">'QPushButton:open &#123;background-color: #aaa&#125;'</span></div><div class="line">                )</div><div class="line">                set_column.clicked.connect(self.set_column)</div><div class="line">                matrix.addWidget(set_column, <span class="number">0</span>, column + <span class="number">1</span>)</div><div class="line">            btn_page = []</div><div class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">                    name = <span class="string">'set_bit(%d, %d, %d)'</span> % (page, row, column)</div><div class="line">                    bit_btn = QPushButton()</div><div class="line">                    bit_btn.setToolTip(name)</div><div class="line">                    bit_btn.setFixedSize(<span class="number">16</span>, <span class="number">16</span>)</div><div class="line">                    bit_btn.setCheckable(<span class="keyword">True</span>)</div><div class="line">                    bit_btn.setStyleSheet(</div><div class="line">                        <span class="string">'QPushButton &#123;background: #ddd; border: none; margin: 0px; padding: 0px&#125;'</span></div><div class="line">                        <span class="string">'QPushButton:checked &#123;background-color: #2c9e4b; border: none&#125;'</span></div><div class="line">                    )</div><div class="line">                    bit_btn.clicked[bool].connect(self.set_bit)</div><div class="line">                    btn_page.append(bit_btn)</div><div class="line">                    matrix.addWidget(bit_btn, row + <span class="number">1</span>, column + <span class="number">1</span>)</div><div class="line">            self.bit_btns.append(btn_page)</div><div class="line">            matrixs.addLayout(matrix, page / <span class="number">4</span>, page % <span class="number">4</span>)</div><div class="line">        <span class="keyword">return</span> matrixs</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mapto_code</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(self.page):</div><div class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(self.row):</div><div class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> range(self.column):</div><div class="line">                    bit_btn = self.bit_btns[page][self.column * row + column]</div><div class="line">                    <span class="keyword">if</span> bit_btn.isChecked():</div><div class="line">                        self.pt.set(page, row, column, <span class="number">1</span>)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        self.pt.set(page, row, column, <span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mapto_btn</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(self.page):</div><div class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(self.row):</div><div class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> range(self.column):</div><div class="line">                    bit_btn = self.bit_btns[page][self.column * row + column]</div><div class="line">                    bit = self.pt.data[page][self.column * row + column]</div><div class="line">                    <span class="keyword">if</span> bit == <span class="number">1</span>:</div><div class="line">                        bit_btn.setChecked(<span class="keyword">True</span>)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        bit_btn.setChecked(<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restore</span><span class="params">(self)</span>:</span></div><div class="line">        text = self.code_text.toPlainText()</div><div class="line">        <span class="keyword">if</span> text:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.pt.restore(text)</div><div class="line">                self.mapto_btn()</div><div class="line">            <span class="keyword">except</span> (ValueError, IndexError):</div><div class="line">                <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_format</span><span class="params">(self, text)</span>:</span></div><div class="line">        self.format = text.lower()</div><div class="line">        self.gen_result()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_result</span><span class="params">(self)</span>:</span></div><div class="line">        self.code_text.setText(self.pt.format(self.format))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_page</span><span class="params">(self, state)</span>:</span></div><div class="line">        sender = self.sender()</div><div class="line">        page = sender.toolTip().strip(<span class="string">'set_page('</span>).strip(<span class="string">')'</span>)</div><div class="line">        page = int(page)</div><div class="line">        <span class="keyword">if</span> self.pt.page_flag[page] == <span class="number">0</span>:</div><div class="line">            self.pt.set_page(page, <span class="number">1</span>)</div><div class="line">            <span class="keyword">for</span> bit_btn <span class="keyword">in</span> self.bit_btns[page]:</div><div class="line">                bit_btn.setChecked(<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.pt.set_page(page, <span class="number">0</span>)</div><div class="line">            <span class="keyword">for</span> bit_btn <span class="keyword">in</span> self.bit_btns[page]:</div><div class="line">                bit_btn.setChecked(<span class="keyword">False</span>)</div><div class="line">        self.gen_result()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_row</span><span class="params">(self, state)</span>:</span></div><div class="line">        sender = self.sender()</div><div class="line">        text = sender.toolTip().strip(<span class="string">'set_row('</span>).strip(<span class="string">')'</span>).split(<span class="string">', '</span>)</div><div class="line">        page = int(text[<span class="number">0</span>])</div><div class="line">        row = int(text[<span class="number">1</span>])</div><div class="line">        start = self.column * row</div><div class="line">        end = start + self.column</div><div class="line">        <span class="keyword">if</span> self.pt.row_flag[page][row]:</div><div class="line">            self.pt.set_row(page, row, <span class="number">0</span>)</div><div class="line">            <span class="keyword">for</span> bit_btn <span class="keyword">in</span> self.bit_btns[page][start:end]:</div><div class="line">                bit_btn.setChecked(<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.pt.set_row(page, row, <span class="number">1</span>)</div><div class="line">            <span class="keyword">for</span> bit_btn <span class="keyword">in</span> self.bit_btns[page][start:end]:</div><div class="line">                bit_btn.setChecked(<span class="keyword">True</span>)</div><div class="line">        self.gen_result()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_column</span><span class="params">(self, state)</span>:</span></div><div class="line">        sender = self.sender()</div><div class="line">        text = sender.toolTip().strip(<span class="string">'set_column('</span>).strip(<span class="string">')'</span>).split(<span class="string">', '</span>)</div><div class="line">        page = int(text[<span class="number">0</span>])</div><div class="line">        column = int(text[<span class="number">1</span>])</div><div class="line">        start = column</div><div class="line">        step = self.column</div><div class="line">        end = start + step * self.row</div><div class="line">        <span class="keyword">if</span> self.pt.column_flag[page][column]:</div><div class="line">            self.pt.set_column(page, column, <span class="number">0</span>)</div><div class="line">            <span class="keyword">for</span> bit_btn <span class="keyword">in</span> self.bit_btns[page][start:end:step]:</div><div class="line">                bit_btn.setChecked(<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.pt.set_column(page, column, <span class="number">1</span>)</div><div class="line">            <span class="keyword">for</span> bit_btn <span class="keyword">in</span> self.bit_btns[page][start:end:step]:</div><div class="line">                bit_btn.setChecked(<span class="keyword">True</span>)</div><div class="line">        self.gen_result()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_bit</span><span class="params">(self, pressed)</span>:</span></div><div class="line">        sender = self.sender()</div><div class="line">        text = sender.toolTip().strip(<span class="string">'set_bit('</span>).strip(<span class="string">')'</span>).split(<span class="string">', '</span>)</div><div class="line">        page = int(text[<span class="number">0</span>])</div><div class="line">        row = int(text[<span class="number">1</span>])</div><div class="line">        column = int(text[<span class="number">2</span>])</div><div class="line">        <span class="keyword">if</span> pressed:</div><div class="line">            self.pt.set(page, row, column, <span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.pt.set(page, row, column, <span class="number">0</span>)</div><div class="line">        self.gen_result()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center_windows</span><span class="params">(self)</span>:</span></div><div class="line">        qr = self.frameGeometry()</div><div class="line">        cp = QDesktopWidget().availableGeometry().center()</div><div class="line">        qr.moveCenter(cp)</div><div class="line">        self.move(qr.topLeft())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    pf = PatternFlow()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><blockquote><p>取模器的代码来源一个网上的前辈分享的<a href="https://github.com/xinhangliu/cube8" target="_blank" rel="external">Github</a>。</p></blockquote><h1 id="上位机"><a href="#上位机" class="headerlink" title="上位机"></a>上位机</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> serial</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> binascii </div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</div><div class="line"><span class="keyword">import</span> serial.tools.list_ports</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span><span class="params">(object)</span>:</span></div><div class="line">    ser = serial.Serial()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, MainWindow)</span>:</span></div><div class="line">        MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</div><div class="line">        MainWindow.resize(<span class="number">579</span>, <span class="number">369</span>)</div><div class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</div><div class="line">        self.centralwidget.setObjectName(<span class="string">"centralwidget"</span>)</div><div class="line">        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)</div><div class="line">        self.groupBox.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">141</span>, <span class="number">311</span>))</div><div class="line">        self.groupBox.setObjectName(<span class="string">"groupBox"</span>)</div><div class="line">        self.label = QtWidgets.QLabel(self.groupBox)</div><div class="line">        self.label.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">20</span>, <span class="number">31</span>, <span class="number">16</span>))</div><div class="line">        self.label.setObjectName(<span class="string">"label"</span>)</div><div class="line">        self.label_2 = QtWidgets.QLabel(self.groupBox)</div><div class="line">        self.label_2.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">50</span>, <span class="number">41</span>, <span class="number">16</span>))</div><div class="line">        self.label_2.setObjectName(<span class="string">"label_2"</span>)</div><div class="line">        self.label_3 = QtWidgets.QLabel(self.groupBox)</div><div class="line">        self.label_3.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">110</span>, <span class="number">41</span>, <span class="number">16</span>))</div><div class="line">        self.label_3.setObjectName(<span class="string">"label_3"</span>)</div><div class="line">        self.label_4 = QtWidgets.QLabel(self.groupBox)</div><div class="line">        self.label_4.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">80</span>, <span class="number">41</span>, <span class="number">16</span>))</div><div class="line">        self.label_4.setObjectName(<span class="string">"label_4"</span>)</div><div class="line">        self.label_5 = QtWidgets.QLabel(self.groupBox)</div><div class="line">        self.label_5.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">140</span>, <span class="number">41</span>, <span class="number">16</span>))</div><div class="line">        self.label_5.setObjectName(<span class="string">"label_5"</span>)</div><div class="line">        self.comboBox_4 = QtWidgets.QComboBox(self.groupBox)</div><div class="line">        self.comboBox_4.setGeometry(QtCore.QRect(<span class="number">60</span>, <span class="number">20</span>, <span class="number">71</span>, <span class="number">22</span>))</div><div class="line">        self.comboBox_4.setObjectName(<span class="string">"comboBox_4"</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_4.addItem(<span class="string">""</span>)</div><div class="line">        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)</div><div class="line">        self.lineEdit_3.setGeometry(QtCore.QRect(<span class="number">60</span>, <span class="number">50</span>, <span class="number">71</span>, <span class="number">20</span>))</div><div class="line">        self.lineEdit_3.setObjectName(<span class="string">"lineEdit_3"</span>)</div><div class="line">        self.comboBox = QtWidgets.QComboBox(self.groupBox)</div><div class="line">        self.comboBox.setGeometry(QtCore.QRect(<span class="number">60</span>, <span class="number">80</span>, <span class="number">71</span>, <span class="number">22</span>))</div><div class="line">        self.comboBox.setObjectName(<span class="string">"comboBox"</span>)</div><div class="line">        self.comboBox.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox)</div><div class="line">        self.comboBox_2.setGeometry(QtCore.QRect(<span class="number">60</span>, <span class="number">110</span>, <span class="number">71</span>, <span class="number">22</span>))</div><div class="line">        self.comboBox_2.setObjectName(<span class="string">"comboBox_2"</span>)</div><div class="line">        self.comboBox_2.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_2.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_2.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_2.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_2.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_3 = QtWidgets.QComboBox(self.groupBox)</div><div class="line">        self.comboBox_3.setGeometry(QtCore.QRect(<span class="number">60</span>, <span class="number">140</span>, <span class="number">71</span>, <span class="number">22</span>))</div><div class="line">        self.comboBox_3.setObjectName(<span class="string">"comboBox_3"</span>)</div><div class="line">        self.comboBox_3.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_3.addItem(<span class="string">""</span>)</div><div class="line">        self.comboBox_3.addItem(<span class="string">""</span>)</div><div class="line">        self.pushButton = QtWidgets.QPushButton(self.groupBox)</div><div class="line">        self.pushButton.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">240</span>, <span class="number">51</span>, <span class="number">23</span>))</div><div class="line">        self.pushButton.setObjectName(<span class="string">"pushButton"</span>)</div><div class="line">        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)</div><div class="line">        self.pushButton_2.setGeometry(QtCore.QRect(<span class="number">80</span>, <span class="number">240</span>, <span class="number">51</span>, <span class="number">23</span>))</div><div class="line">        self.pushButton_2.setObjectName(<span class="string">"pushButton_2"</span>)</div><div class="line">        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)</div><div class="line">        self.pushButton_3.setGeometry(QtCore.QRect(<span class="number">40</span>, <span class="number">200</span>, <span class="number">61</span>, <span class="number">23</span>))</div><div class="line">        self.pushButton_3.setObjectName(<span class="string">"pushButton_3"</span>)</div><div class="line">        self.label_11 = QtWidgets.QLabel(self.groupBox)</div><div class="line">        self.label_11.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">170</span>, <span class="number">41</span>, <span class="number">16</span>))</div><div class="line">        self.label_11.setObjectName(<span class="string">"label_11"</span>)</div><div class="line">        self.label_12 = QtWidgets.QLabel(self.groupBox)</div><div class="line">        self.label_12.setGeometry(QtCore.QRect(<span class="number">70</span>, <span class="number">170</span>, <span class="number">54</span>, <span class="number">16</span>))</div><div class="line">        font = QtGui.QFont()</div><div class="line">        font.setFamily(<span class="string">"Aharoni"</span>)</div><div class="line">        font.setBold(<span class="keyword">True</span>)</div><div class="line">        font.setWeight(<span class="number">75</span>)</div><div class="line">        self.label_12.setFont(font)</div><div class="line">        self.label_12.setObjectName(<span class="string">"label_12"</span>)</div><div class="line">        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)</div><div class="line">        self.groupBox_2.setGeometry(QtCore.QRect(<span class="number">160</span>, <span class="number">10</span>, <span class="number">411</span>, <span class="number">181</span>))</div><div class="line">        self.groupBox_2.setObjectName(<span class="string">"groupBox_2"</span>)</div><div class="line">        self.textBrowser = QtWidgets.QTextBrowser(self.groupBox_2)</div><div class="line">        self.textBrowser.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">20</span>, <span class="number">391</span>, <span class="number">151</span>))</div><div class="line">        self.textBrowser.setObjectName(<span class="string">"textBrowser"</span>)</div><div class="line">        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)</div><div class="line">        self.groupBox_3.setGeometry(QtCore.QRect(<span class="number">160</span>, <span class="number">200</span>, <span class="number">261</span>, <span class="number">121</span>))</div><div class="line">        self.groupBox_3.setObjectName(<span class="string">"groupBox_3"</span>)</div><div class="line">        self.textEdit = QtWidgets.QTextEdit(self.groupBox_3)</div><div class="line">        self.textEdit.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">20</span>, <span class="number">241</span>, <span class="number">91</span>))</div><div class="line">        self.textEdit.setObjectName(<span class="string">"textEdit"</span>)</div><div class="line">        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)</div><div class="line">        self.checkBox.setGeometry(QtCore.QRect(<span class="number">430</span>, <span class="number">210</span>, <span class="number">61</span>, <span class="number">16</span>))</div><div class="line">        self.checkBox.setObjectName(<span class="string">"checkBox"</span>)</div><div class="line">        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)</div><div class="line">        self.checkBox_2.setGeometry(QtCore.QRect(<span class="number">500</span>, <span class="number">210</span>, <span class="number">61</span>, <span class="number">20</span>))</div><div class="line">        self.checkBox_2.setObjectName(<span class="string">"checkBox_2"</span>)</div><div class="line">        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)</div><div class="line">        self.pushButton_4.setGeometry(QtCore.QRect(<span class="number">430</span>, <span class="number">240</span>, <span class="number">61</span>, <span class="number">23</span>))</div><div class="line">        self.pushButton_4.setObjectName(<span class="string">"pushButton_4"</span>)</div><div class="line">        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)</div><div class="line">        self.pushButton_5.setGeometry(QtCore.QRect(<span class="number">430</span>, <span class="number">280</span>, <span class="number">61</span>, <span class="number">23</span>))</div><div class="line">        self.pushButton_5.setObjectName(<span class="string">"pushButton_5"</span>)</div><div class="line">        MainWindow.setCentralWidget(self.centralwidget)</div><div class="line">        self.menubar = QtWidgets.QMenuBar(MainWindow)</div><div class="line">        self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">579</span>, <span class="number">23</span>))</div><div class="line">        self.menubar.setObjectName(<span class="string">"menubar"</span>)</div><div class="line">        MainWindow.setMenuBar(self.menubar)</div><div class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</div><div class="line">        self.statusbar.setObjectName(<span class="string">"statusbar"</span>)</div><div class="line">        MainWindow.setStatusBar(self.statusbar)</div><div class="line"></div><div class="line">        MainWindow.setFixedSize(MainWindow.width(), MainWindow.height());  </div><div class="line">        self.retranslateUi(MainWindow)</div><div class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, MainWindow)</span>:</span></div><div class="line">        _translate = QtCore.QCoreApplication.translate</div><div class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"Serial_gui"</span>))</div><div class="line">        self.groupBox.setTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"串口设置"</span>))</div><div class="line">        self.label.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"串 口"</span>))</div><div class="line">        self.label_2.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"波特率"</span>))</div><div class="line">        self.label_3.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"校验位"</span>))</div><div class="line">        self.label_4.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"数据位"</span>))</div><div class="line">        self.label_5.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"停止位"</span>))</div><div class="line">        self.lineEdit_3.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"9600"</span>))</div><div class="line">        self.comboBox.setItemText(<span class="number">0</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"8"</span>))</div><div class="line">        self.comboBox.setItemText(<span class="number">1</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"7"</span>))</div><div class="line">        self.comboBox.setItemText(<span class="number">2</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"6"</span>))</div><div class="line">        self.comboBox.setItemText(<span class="number">3</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"5"</span>))</div><div class="line">        self.comboBox_2.setItemText(<span class="number">0</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"N"</span>))</div><div class="line">        self.comboBox_2.setItemText(<span class="number">1</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"E"</span>))</div><div class="line">        self.comboBox_2.setItemText(<span class="number">2</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"O"</span>))</div><div class="line">        self.comboBox_2.setItemText(<span class="number">3</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"M"</span>))</div><div class="line">        self.comboBox_2.setItemText(<span class="number">4</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"S"</span>))</div><div class="line">        self.comboBox_3.setItemText(<span class="number">0</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"1"</span>))</div><div class="line">        self.comboBox_3.setItemText(<span class="number">1</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"1.5"</span>))</div><div class="line">        self.comboBox_3.setItemText(<span class="number">2</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"2"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">0</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM1"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">1</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM2"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">2</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM3"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">3</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM4"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">4</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM5"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">5</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM6"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">6</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM7"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">7</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM8"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">8</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM9"</span>))</div><div class="line">        self.comboBox_4.setItemText(<span class="number">9</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"COM10"</span>))</div><div class="line">        self.pushButton.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"打开"</span>))</div><div class="line">        self.pushButton.clicked.connect(self.port_open)</div><div class="line"></div><div class="line">        self.pushButton_2.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"关闭"</span>))</div><div class="line">        self.pushButton_2.clicked.connect(self.port_close)</div><div class="line"></div><div class="line">        self.pushButton_3.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"检测串口"</span>))</div><div class="line">        self.pushButton_3.clicked.connect(self.port_cheak)</div><div class="line"></div><div class="line">        self.label_11.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"状 态："</span>))</div><div class="line">        self.label_12.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"串口状态"</span>))</div><div class="line">        self.groupBox_2.setTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"接收区"</span>))</div><div class="line">        self.groupBox_3.setTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"发送区"</span>))</div><div class="line">        self.checkBox.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"Hex显示"</span>))</div><div class="line">        self.checkBox_2.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"Hex发送"</span>))</div><div class="line">        self.pushButton_4.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"清除"</span>))</div><div class="line">        self.pushButton_4.clicked.connect(self.clean_data)</div><div class="line"></div><div class="line">        self.pushButton_5.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"发送"</span>))</div><div class="line">        self.pushButton_5.clicked.connect(self.send_data)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">port_open</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        self.ser.port = self.comboBox_4.currentText()</div><div class="line">        self.ser.baudrate = int(self.lineEdit_3.text())</div><div class="line">        self.ser.bytesize = int(self.comboBox.currentText()) </div><div class="line">        self.ser.stopbits = int(self.comboBox_3.currentText())</div><div class="line">        self.ser.parity = self.comboBox_2.currentText()</div><div class="line">        self.ser.open()</div><div class="line">        <span class="keyword">if</span>(self.ser.isOpen()):</div><div class="line">            self.pushButton.setEnabled(<span class="keyword">False</span>)</div><div class="line">            self.label_12.setText(<span class="string">"打开成功"</span>)</div><div class="line">            self.t1 = threading.Thread(target=self.receive_data)</div><div class="line">            self.t1.setDaemon(<span class="keyword">True</span>)</div><div class="line">            self.t1.start()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.label_12.setText(<span class="string">"打开失败"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">port_close</span><span class="params">(self)</span>:</span></div><div class="line">        self.ser.close()</div><div class="line">        <span class="keyword">if</span>(self.ser.isOpen()):</div><div class="line">            self.label_12.setText(<span class="string">"关闭失败"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.pushButton.setEnabled(<span class="keyword">True</span>)</div><div class="line">            self.label_12.setText(<span class="string">"关闭成功"</span>)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_data</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span>(self.ser.isOpen()):</div><div class="line">            <span class="keyword">if</span>(self.checkBox_2.isChecked()):</div><div class="line">                self.ser.write(binascii.a2b_hex(self.textEdit.toPlainText()))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.ser.write(self.textEdit.toPlainText().encode(<span class="string">'utf-8'</span>))</div><div class="line">            self.label_12.setText(<span class="string">"发送成功"</span>)</div><div class="line">    <span class="comment">#       self.ser.flushOutput()</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.label_12.setText(<span class="string">"发送失败"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive_data</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"The receive_data threading is start"</span>)</div><div class="line">        res_data = <span class="string">''</span> </div><div class="line">        num = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> (self.ser.isOpen()):</div><div class="line">            size = self.ser.inWaiting()</div><div class="line">            <span class="keyword">if</span> size:</div><div class="line">                res_data = self.ser.read_all()</div><div class="line">                <span class="keyword">if</span>(self.checkBox.isChecked()):</div><div class="line">                    self.textBrowser.append(binascii.b2a_hex(res_data).decode())</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    self.textBrowser.append(res_data.decode())</div><div class="line">                self.textBrowser.moveCursor(QtGui.QTextCursor.End)</div><div class="line">                self.ser.flushInput()               </div><div class="line">                num +=<span class="number">1</span></div><div class="line">                self.label_12.setText(<span class="string">"接收："</span>+str(num))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_data</span><span class="params">(self)</span>:</span></div><div class="line">        self.textBrowser.setText(<span class="string">""</span>)</div><div class="line">        self.label_12.setText(<span class="string">"接收清空"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">port_cheak</span><span class="params">(self)</span>:</span></div><div class="line">        Com_List=[] </div><div class="line">        port_list = list(serial.tools.list_ports.comports())</div><div class="line">        self.comboBox_4.clear()</div><div class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> port_list:</div><div class="line">            Com_List.append(port[<span class="number">0</span>])</div><div class="line">            self.comboBox_4.addItem(port[<span class="number">0</span>])</div><div class="line">        <span class="keyword">if</span>(len(Com_List) == <span class="number">0</span>):</div><div class="line">            self.label_12.setText(<span class="string">"没串口"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QtWidgets.QApplication(sys.argv)</div><div class="line">    MainWindow = QtWidgets.QMainWindow()</div><div class="line">    ui = Ui_MainWindow()</div><div class="line">    ui.setupUi(MainWindow) </div><div class="line"></div><div class="line"></div><div class="line">    MainWindow.show()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><blockquote><p>这是从一个<em>CSDN</em>前辈写的拿来用的，一些日子我也忘记了从哪里来的了…但是灯只能亮前三排…总之非常感谢前辈的分享～</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上学期的一个课程设计要求做一个&lt;em&gt;8x8x8光立方&lt;/em&gt;的上位机，一时不知怎么写，上学期太懒了，好久没写程序的缘故，关于&lt;em&gt;PyQT5&lt;/em&gt;的运用也是之前用过一点皮毛，所以也忘的差不多了，所以在网上参考一些前辈写的，在此记录一下，以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://liujunjie11.github.io/categories/Python/"/>
    
      <category term="PyQT5" scheme="https://liujunjie11.github.io/categories/PyQT5/"/>
    
      <category term="51单片机" scheme="https://liujunjie11.github.io/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="8x8x8光立方" scheme="https://liujunjie11.github.io/categories/8x8x8%E5%85%89%E7%AB%8B%E6%96%B9/"/>
    
    
      <category term="Python" scheme="https://liujunjie11.github.io/tags/Python/"/>
    
      <category term="单片机" scheme="https://liujunjie11.github.io/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>润物细无声</title>
    <link href="https://liujunjie11.github.io/2019/01/28/%E6%B6%A6%E7%89%A9%E7%BB%86%E6%97%A0%E5%A3%B0/"/>
    <id>https://liujunjie11.github.io/2019/01/28/润物细无声/</id>
    <published>2019-01-28T13:13:04.000Z</published>
    <updated>2019-01-28T13:58:18.145Z</updated>
    
    <content type="html"><![CDATA[<p>这些天我自从回来了这边之后，趁着一些闲工夫看了一些自认为比较优秀的电视剧，其中感触极大的是《父母爱情》。这部剧真的是一部高质量的、优秀的电视剧，在看的过程中太过于饥渴难耐，满怀兴奋的熬夜看完了，看完之后更是犹意未尽，总是一味的再而再三的重复回味那些喜欢的片段，如今在写下的此时此刻也是不时的浮现那些片段，真的太喜欢这部剧了。</p><a id="more"></a><p>通过《父母爱情》这部剧的“洗礼”之后，重新认识了很多的东西，之前的我入戏太深，久久不能摆脱戏里的故事与我喜欢的主人公的影子，他们确实的让我不能开怀去接受这部剧已尽的现实…父母年代的平凡爱情、平淡生活的细无声、悲喜交加的小波澜…我太爱了，太爱这部剧了～</p><p>…</p><p>太久未曾在此更新我的感悟了，这与我变懒了不无关系。但是我从来没有像在上学期之前的一段时间里那么自在欢快了，之前的我为了毕业之后加紧自己的步伐，逼着自己做该做的工作与事情，其实仔细想想收获了许多，但是未曾像现在那么快乐、自在。我承认，刚刚过去的那个学期我变得有些松懈了，没有之前对于自己那么的严格要求了，我是有点松懈过度了，我确实也浪费了不少的时间。学时醒悟过来方恨时少啊，但是确实是我自找的。</p><p>我的规划在我的松懈之下变得不堪一击，零零散散的，现在我自己都有一些惊慌失措。我急须改变了。</p><p>…</p><p>现在的我会学着更多的去看待现有的一切了，我开始慢慢的更多的去阅读这个社会，阅读身边的生活及其中的人与事。我好久没有过感悟了，我变得安逸了，变得拖延了，变得好像没有梦想了…但是，我确实也对于一些事情较之从前看得开了，这些看得开的所有无意中好像变成我安逸度日的理由了。我明显的感觉到我一只脚陷入了生活的泥潭。</p><p>看街上小店小摊，路过的人山人海，生活真的像是一部人间剧，只不过少了一些精准紧致的配乐显得那么动人心弦，生活像是一部无声的人间剧。每个人自己的人生都是不一样的剧本。无论所谓的平凡与所谓的不平凡、所谓的伟大都好似显得微不足道，无声无息，生生不息，这就是生活的真谛。润物细无声，就是所有的平凡，也是所有的不平凡。</p><p>人生多数的“艰”与“难”在于那“良心”。它是一个人安生偷生的最好依据，无论生活有多难有多么不合意。亦正所谓人间正道是沧桑呐，也不无道理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这些天我自从回来了这边之后，趁着一些闲工夫看了一些自认为比较优秀的电视剧，其中感触极大的是《父母爱情》。这部剧真的是一部高质量的、优秀的电视剧，在看的过程中太过于饥渴难耐，满怀兴奋的熬夜看完了，看完之后更是犹意未尽，总是一味的再而再三的重复回味那些喜欢的片段，如今在写下的此时此刻也是不时的浮现那些片段，真的太喜欢这部剧了。&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="https://liujunjie11.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="感悟" scheme="https://liujunjie11.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="日记" scheme="https://liujunjie11.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="父母爱情" scheme="https://liujunjie11.github.io/tags/%E7%88%B6%E6%AF%8D%E7%88%B1%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>所谓中国的精英？</title>
    <link href="https://liujunjie11.github.io/2018/11/28/%E6%89%80%E8%B0%93%E4%B8%AD%E5%9B%BD%E7%9A%84%E7%B2%BE%E8%8B%B1%EF%BC%9F/"/>
    <id>https://liujunjie11.github.io/2018/11/28/所谓中国的精英？/</id>
    <published>2018-11-28T07:56:58.000Z</published>
    <updated>2019-01-02T06:47:25.156Z</updated>
    
    <content type="html"><![CDATA[<p>我今日在一个技术群里看到了一些所谓“高学历”层次的人讨论各种社会问题并且津津乐道着。在这里我看到了一部分人的各种“娱乐精神”，活像是一个娱乐至死的时代的缩影，还有对于那些盲目迷信的一群人，在他们身上我看不到一个人的存在，像是一群只会迎合的瘪嘴小丑。</p><a id="more"></a><p>这是所谓的支撑着中国未来脊梁的精英们吗？我有些想讽刺性的嘲笑和想有意的去嘲弄一番，但是我忍住了，我和他们有不一样的想法，所以我控制住了自己，这样的人我见的太多了，我没有勇气去跟那些人去讨论一下自己内心的想法，因为我始终相信着明者自明，不明白的人或者是曾经明白过的而现在早已改变了自己的人是不会理解我想要说的意思的。人总是这样的，包括我自己有时也是这样的，大多数时候对于大多数人们来说这是难以察觉的，有的人可能一辈子也不会察觉到。其实到现在想了想，好像也没有什么好说的，人们因为经历的不同都会有自己的想法，但是，对于那些没有自我灵魂的人，我却是有些想要多此一举的。这是所谓的中国式精英吗？</p><p>如今的大多数人们会有一种拥有更高学历的人就是人上人的感觉，这就是一些无法看清问题本质的典型人群。这样的盲目迷信的人群在这个地方应有尽有。这是所谓的中国式精英吗？他们把社会上的恶习当做自己成长的经验，把社会上的各种悲剧当做津津乐道的剧本，进而的再把这些东西当做人生的真理去传授给予涉世未深的学弟学妹们，要求他们吸收并且像自己一样去乐意接受。最后走到了人生的一个段点，他们以为自己获得了升华，并且成为了真正的成熟的”大人“了。我感觉可笑的同时也感觉到可悲。为钱而读书，为钱舍命去奔波，为钱出卖自己的灵魂，这些对于如今的我是有些接受不了的。</p><p>人浮于事(世)。社会真的是最好的大学吗？还是一个吞没人性，违背人理道德的垃圾池？这是一个浮躁的大时代。而我现在在的地方还有那一群人被称为“中国精英”！我为自己和这个国家而不甘心，我没有能力去改变这个浮躁的现实，而这个国家却是在这一群所谓的精英手里，他们享受着这个国家最好的待遇与资源，但是本身却是一样的糜烂。</p><p>于我而言，中国所谓的“精英”不应该是这样的。至少的，他们应该有着自己的灵魂。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我今日在一个技术群里看到了一些所谓“高学历”层次的人讨论各种社会问题并且津津乐道着。在这里我看到了一部分人的各种“娱乐精神”，活像是一个娱乐至死的时代的缩影，还有对于那些盲目迷信的一群人，在他们身上我看不到一个人的存在，像是一群只会迎合的瘪嘴小丑。&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="https://liujunjie11.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="https://liujunjie11.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>各种英语词性(基础语法)的学习以及入门学习日语的记录</title>
    <link href="https://liujunjie11.github.io/2018/11/24/%E5%90%84%E7%A7%8D%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%80%A7(%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95)%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AF%AD%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2018/11/24/各种英语词性(基础语法)的学习以及入门学习日语的记录/</id>
    <published>2018-11-24T05:27:11.000Z</published>
    <updated>2019-01-02T06:47:38.834Z</updated>
    
    <content type="html"><![CDATA[<p>最近在一股劲的学习日语和英语，打算明年搞定日语N1考试以及托福去日本留学，读日本国立大学的研究生。</p><p>在此记录了我学习到的一些资源以及感想，因为目前是刚刚学习到不久，所以会根据需求不定时更新。</p><a id="more"></a><h1 id="英语词性的认识与学习"><a href="#英语词性的认识与学习" class="headerlink" title="英语词性的认识与学习"></a>英语词性的认识与学习</h1><p>因为在初一时没有好好的学习各种词性的意识，所以导致我一直以来的在这方面的欠缺，我这会打算好好学习一些基础知识了，我在YouTube上找到了一些特别适合我的资源，首先是英语的语法入门教学视频，里面有特别好的入门教学，通俗易懂：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/EmNNRMXf1oc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><blockquote><p>这是一个系列教学，学完之后会学到很多以前没有认真学的基础知识，也就是词性的认识以及一些英语的基础入门学习。</p></blockquote><p><strong>一定要好好的学习各种词性是什么，该怎么用(老老实实认真做笔记)，因为在我学习日语的时候也会用到这个词性的理解，进而才能进阶学习。很重要！非常重要！因为如果理解了各种词性是什么，那么在学习日语(不仅仅是日语，包括各种语言)时就会学习的很快。</strong></p><p>另外学习英语语法本身就是很重要的，应当找几本经典的书籍看看研究一下。</p><h1 id="日语入门学习"><a href="#日语入门学习" class="headerlink" title="日语入门学习"></a>日语入门学习</h1><p>这个我是打算直接在明年考试N1的，所以我买了一些N1的备考书籍(<code>新完全掌握N1系列</code>)以及所谓的<code>蓝/红宝书</code>系列作为备考书籍选项，另外我也买了近几年来的N1真题考试试卷。为了激活那个<strong>中日标准日本语</strong>电子书我也买了全套的相关的书籍(为了激活码…)。<strong>以上这些都可以到淘宝买到。</strong></p><p>另外推荐在YouTube上的新东方日语教学，这个系列特别的通俗易懂，好好学就没什么问题：</p><ul><li>链接：<a href="https://www.youtube.com/watch?v=6OYluEuz1tU&amp;list=PL1vjT6bepDu03GYEcuy0z2_Bou-9bAbGb&amp;index=13" target="_blank" rel="external">新东方日语</a></li></ul><blockquote><p>这个系列也是非常的不错的，这个老师也是很专业滴，好好学，好好的入门没问题。</p></blockquote><p>另外还有一些推荐的YouTube日语入门教学视频：</p><ul><li><p><a href="https://www.youtube.com/watch?v=5voKwhASN7k&amp;index=8&amp;list=PLuNucubP18snvU3Zz8FXF-kACs5EPK4XU" target="_blank" rel="external">從零開始學日文系列～</a></p></li><li><p><a href="https://www.youtube.com/watch?v=MWDdsZ3Vemc&amp;list=PLycXmlzOfI4I-lFd1wH8EHEXFXpd56aro" target="_blank" rel="external">N1日语语法蓝宝书</a></p></li></ul><blockquote><p>也是非常不错的～</p></blockquote><h2 id="一些小的建议"><a href="#一些小的建议" class="headerlink" title="一些小的建议"></a>一些小的建议</h2><ol><li><p>关于五十音图可以先简要的过一遍就好，到时不懂再查，慢慢的就能都记住了，这样效率还是不错的。</p></li><li><p>下载一些APP配合学习，比如那个<code>中日标准日本语</code>的APP就不错。</p></li></ol><p>…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在一股劲的学习日语和英语，打算明年搞定日语N1考试以及托福去日本留学，读日本国立大学的研究生。&lt;/p&gt;
&lt;p&gt;在此记录了我学习到的一些资源以及感想，因为目前是刚刚学习到不久，所以会根据需求不定时更新。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="资源分享" scheme="https://liujunjie11.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="学习笔记" scheme="https://liujunjie11.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="英语" scheme="https://liujunjie11.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
      <category term="日语" scheme="https://liujunjie11.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>考研or工作，抉择与想法</title>
    <link href="https://liujunjie11.github.io/2018/11/19/%E8%80%83%E7%A0%94or%E5%B7%A5%E4%BD%9C%EF%BC%8C%E6%8A%89%E6%8B%A9%E4%B8%8E%E6%83%B3%E6%B3%95/"/>
    <id>https://liujunjie11.github.io/2018/11/19/考研or工作，抉择与想法/</id>
    <published>2018-11-19T05:10:14.000Z</published>
    <updated>2019-01-02T06:47:53.087Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉，大三上学期也过一大半了，我这几天一直在<code>考研</code>or<code>工作</code>之间进行一场自我的挣扎。</p><a id="more"></a><p>有时想的太多真的会成为人们进步的碍脚石。我为何要选择考研？必须得问自己的真心，必须得深入了解自己更加倾向于哪一方面！如果不了解自己需要什么，什么都不会，不如直接去考研待在学校寻找自我吧，还可以顺便学点知识应付未来的生计什么的。我是个自我了解很深的人，我选择工作，因为我更加倾向于喜欢毕业之后去工作。</p><p>如果我考研为了什么？我想过去日本留学，冷静下来想了一下发现自己只是想去体验日本的生活环境，另外成本太高，而且我也不愿去为了这个单独的目标去花更多的时间了，所以我放弃留学的打算。光光是成本不说，我想过去考研国内的大学，我冷静下来想了想，不过是自己的一些能力因素达不到理想中的那个样子罢了，而我现在还有时间！！学历真的重要吗？我通过参考了很多前辈的话，我冷静下来想了想，发现还是自身的能力不足的问题，焦虑的大多数时候只是能力不足的表现罢了，这时候就需要读书看书学习了。</p><p>再者，我其实不是喜欢考研的，只不过是想要个学历学位证书以及多一些的项目经验罢了，我的这个目的经过我的考虑之后，我有点接受不了，因为我为了这种东西而去花费一年时间去准备的话，或许不适合我的性格与选择。</p><p>学习是终身的，不是一时的。</p><p>一些事情理性考虑好之后，干，就完了！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉，大三上学期也过一大半了，我这几天一直在&lt;code&gt;考研&lt;/code&gt;or&lt;code&gt;工作&lt;/code&gt;之间进行一场自我的挣扎。&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="https://liujunjie11.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="https://liujunjie11.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL语句疑惑记录</title>
    <link href="https://liujunjie11.github.io/2018/11/15/MySQL%E8%AF%AD%E5%8F%A5%E7%96%91%E6%83%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2018/11/15/MySQL语句疑惑记录/</id>
    <published>2018-11-15T01:53:00.000Z</published>
    <updated>2019-01-02T06:48:06.106Z</updated>
    
    <content type="html"><![CDATA[<p>主要是记录一些比较有疑惑的语句，方便以后的查找以及回忆。</p><a id="more"></a><h1 id="LIMIT子句"><a href="#LIMIT子句" class="headerlink" title="LIMIT子句"></a>LIMIT子句</h1><blockquote><p> <strong>主要参考：<a href="https://www.yiibai.com/mysql/limit.html" target="_blank" rel="external">https://www.yiibai.com/mysql/limit.html</a></strong></p></blockquote><p>LIMIT子句语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT </div><div class="line">    column1,column2,...</div><div class="line">FROM</div><div class="line">    table</div><div class="line">LIMIT offset , count;</div></pre></td></tr></table></figure><p>SQL我们来查看LIMIT子句参数：</p><p><code>offset</code>参数:指定要返回的第一行的偏移量。第一行的偏移量为0，而不是1。</p><p><code>count</code>:指定要返回的最大行数。</p><p>使用带有一个参数的LIMIT子句时，此参数将用于确定从结果集的开头返回的最大行数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT </div><div class="line">    column1,column2,...</div><div class="line">FROM</div><div class="line">    table</div><div class="line">LIMIT count;</div></pre></td></tr></table></figure><p>SQL上面的查询等同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT </div><div class="line">    column1,column2,...</div><div class="line">FROM</div><div class="line">    table</div><div class="line">LIMIT 0 , count;</div></pre></td></tr></table></figure><h2 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT productCode, productName, buyprice</div><div class="line">FROM products</div><div class="line">ORDER BY buyprice DESC;</div><div class="line"></div><div class="line">+-------------+--------------------------------------+----------+</div><div class="line">| productCode | productName                          | buyprice |</div><div class="line">+-------------+--------------------------------------+----------+</div><div class="line">| S10_4962    | 1962 LanciaA Delta 16V               | 103.42   |</div><div class="line">| S18_2238    | 1998 Chrysler Plymouth Prowler       | 101.51   |</div><div class="line">| S10_1949    | 1952 Alpine Renault 1300             | 98.58    |</div><div class="line">| S24_3856    | 1956 Porsche 356A Coupe              | 98.3     |</div><div class="line">| S12_1108    | 2001 Ferrari Enzo                    | 95.59    |</div><div class="line">| S12_1099    | 1968 Ford Mustang                    | 95.34    |</div><div class="line">... ....</div><div class="line">+-------------+--------------------------------------+----------+</div><div class="line">110 rows in set</div></pre></td></tr></table></figure><p>默认语句为输出最前面的几行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT customernumber, customername, creditlimit</div><div class="line">FROM customers</div><div class="line">ORDER BY creditlimit DESC</div><div class="line">LIMIT 5;</div><div class="line"></div><div class="line">相当于：</div><div class="line">mysql&gt; SELECT customernumber, customername, creditlimit</div><div class="line">FROM customers</div><div class="line">ORDER BY creditlimit DESC</div><div class="line">LIMIT 0, 5; #从第一个偏移量的指定开始向下输出指定行数的所有内容。</div><div class="line"></div><div class="line"></div><div class="line">+----------------+------------------------------+-------------+</div><div class="line">| customernumber | customername                 | creditlimit |</div><div class="line">+----------------+------------------------------+-------------+</div><div class="line">|            141 | Euro+ Shopping Channel       | 227600      |</div><div class="line">|            124 | Mini Gifts Distributors Ltd. | 210500      |</div><div class="line">|            298 | Vida Sport, Ltd              | 141300      |</div><div class="line">|            151 | Muscle Machine Inc           | 138500      |</div><div class="line">|            187 | AV Stores, Co.               | 136800      |</div><div class="line">+----------------+------------------------------+-------------+</div><div class="line">5 rows in set</div></pre></td></tr></table></figure><p>简要深入理解偏移量的作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT productCode, productName, buyprice FROM  products</div><div class="line">ORDER BY buyprice DESC</div><div class="line">LIMIT 1, 1; #偏移量从0开始，所以要指定从1开始，然后取一行记录，以行数为1的指定仅输出一行对应的内容。</div><div class="line"></div><div class="line">+-------------+--------------------------------+----------+</div><div class="line">| productCode | productName                    | buyprice |</div><div class="line">+-------------+--------------------------------+----------+</div><div class="line">| S18_2238    | 1998 Chrysler Plymouth Prowler | 101.51   |</div><div class="line">+-------------+--------------------------------+----------+</div><div class="line">1 row in set</div><div class="line"></div><div class="line"></div><div class="line">#如下几个深入理解</div><div class="line">mysql&gt; SELECT productCode, productName, buyprice FROM  products</div><div class="line">ORDER BY buyprice DESC</div><div class="line">LIMIT 0, 1; #这时指定第一行(偏移量默认为第一行取0)</div><div class="line"></div><div class="line">+-------------+--------------------------------+----------+</div><div class="line">| productCode | productName                    | buyprice |</div><div class="line">+-------------+--------------------------------+----------+</div><div class="line">| S10_4962    | 1962 LanciaA Delta 16V | 103.42   |</div><div class="line">+-------------+--------------------------------+----------+</div><div class="line">1 row in set</div><div class="line"></div><div class="line"></div><div class="line">mysql&gt; SELECT productCode, productName, buyprice FROM  products</div><div class="line">ORDER BY buyprice DESC</div><div class="line">LIMIT 0, 2; #从已指定第一行偏移量开始输出以此为基础的指定行数的以下所有内容</div><div class="line"></div><div class="line">+-------------+--------------------------------------+----------+</div><div class="line">| productCode | productName                          | buyprice |</div><div class="line">+-------------+--------------------------------------+----------+</div><div class="line">| S10_4962    | 1962 LanciaA Delta 16V               | 103.42   |</div><div class="line">| S18_2238    | 1998 Chrysler Plymouth Prowler       | 101.51   |</div><div class="line">+----------------+------------------------------+-------------+</div><div class="line">2 rows in set</div></pre></td></tr></table></figure><blockquote><p>总结：<code>offset</code>就是相当于一个定位，<code>count</code>就是要返回指定的最大行数。</p></blockquote><h1 id="ORDER-BY-ASC-DESC"><a href="#ORDER-BY-ASC-DESC" class="headerlink" title="ORDER BY ASC/DESC"></a>ORDER BY ASC/DESC</h1><p><code>ASC</code>:[A~Z], [1~N]…</p><p><code>DESC</code>:[Z~A}, [N~1]…</p><blockquote><p>A，B，…Z。Z相当于最大的。</p></blockquote><h1 id="经度-Longitude-纬度-Latitude"><a href="#经度-Longitude-纬度-Latitude" class="headerlink" title="经度(Longitude) 纬度(Latitude)"></a>经度(Longitude) 纬度(Latitude)</h1><p><code>经度(Longitude)</code>：<code>东经</code>，<code>西经</code>。</p><blockquote><p>东经正数，西经为负数。越大越靠东。</p></blockquote><p><code>纬度(Latitude)</code>：<code>南纬</code>，<code>北纬</code>。</p><blockquote><p>北纬为正数，南纬为负数。越大越靠北。</p></blockquote><p>方便记忆：东经，东北正。</p><p><strong>参考：<a href="https://baike.baidu.com/item/%E7%BB%8F%E7%BA%AC%E5%BA%A6" target="_blank" rel="external">https://baike.baidu.com/item/%E7%BB%8F%E7%BA%AC%E5%BA%A6</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要是记录一些比较有疑惑的语句，方便以后的查找以及回忆。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://liujunjie11.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://liujunjie11.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习资源与实践学习</title>
    <link href="https://liujunjie11.github.io/2018/11/13/MySQL%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%AD%A6%E4%B9%A0/"/>
    <id>https://liujunjie11.github.io/2018/11/13/MySQL学习资源与实践学习/</id>
    <published>2018-11-13T13:12:31.000Z</published>
    <updated>2019-01-02T06:48:16.491Z</updated>
    
    <content type="html"><![CDATA[<p>最近心血来潮想写几个SQL玩玩，在此会分享学习的书籍资源以及YouTube教程使用语法的实践项目，以及会进行一系列的简单实践。这里通过在YouTube上的一个大佬的视频来进行在线的实践即可。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/xYMhPZ_L3fI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><blockquote><p>就是这个视频。</p></blockquote><p>可主要参考书籍<a href="https://pan.baidu.com/s/15hIkCroy2w7RvBdVH8LRmA" target="_blank" rel="external">疯狂Java讲义(李刚)</a>来进行学习，当然还有参考其他的经典书籍以备用学习，这类书籍很多，就不在此一一说明了。</p><blockquote><p>《疯狂Java讲义》书籍的配套资源地址：<a href="https://github.com/DoingLee" target="_blank" rel="external">https://github.com/DoingLee</a></p></blockquote><a id="more"></a><h1 id="MySQL学习"><a href="#MySQL学习" class="headerlink" title="MySQL学习"></a>MySQL学习</h1><p>这一部分由于一些基础性的基本知识在上面和下面的书籍中已经是多如牛毛了，我就不重复说明了，需要的自行下载去了解吧。可结合书中直接开始语法的学习！实际上几个实用性强的语句就那么几个。</p><h2 id="书籍资源分享"><a href="#书籍资源分享" class="headerlink" title="书籍资源分享"></a>书籍资源分享</h2><ul><li><p><a href="https://pan.baidu.com/s/1rZwbEXEV_GlGsN7UVZ5Z6Q" target="_blank" rel="external">MySQL必知必会.pdf</a></p></li><li><p><a href="https://pan.baidu.com/s/1pA9V9weH33j7ZiV6fFNU1Q" target="_blank" rel="external">SQL语法查询(W3school).pdf</a></p></li><li><p><a href="https://pan.baidu.com/s/1cglHK9k4VY1SSJsg_C2mWA" target="_blank" rel="external">MySQL完全教程.pdf</a></p></li><li><p><a href="https://pan.baidu.com/s/14W7WJBoVnybd_r8pXQ6J4Q" target="_blank" rel="external">MySQL经典教程.pdf</a></p></li><li><p><a href="http://www.manongjc.com/article/1436.html" target="_blank" rel="external">码农教程</a></p></li></ul><blockquote><p>就这么多吧，都是网上的人们分享出来的。</p></blockquote><h2 id="网页在线学习"><a href="#网页在线学习" class="headerlink" title="网页在线学习"></a>网页在线学习</h2><ul><li><a href="https://sqlbolt.com" target="_blank" rel="external">sqlbolt</a></li></ul><blockquote><p>强烈推荐！还可在线实践(结合上面的视频一起来即可)。</p></blockquote><ul><li><p><a href="http://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="external">MySQL教程(菜鸟教程)</a></p></li><li><p><a href="https://m.w3cschool.cn/mysql/" target="_blank" rel="external">MySQL教程(w3cschool)</a></p></li><li><p><a href="https://www.yiibai.com/mysql/" target="_blank" rel="external">MySQL教程(易百教程)</a></p></li></ul><blockquote><p>相较于上面的书籍，在线教程更加的通俗易懂，可先通过这些入门简单认识一下以及学习语法，不懂的更深的部分可查看书籍即可。</p></blockquote><h2 id="YouTube上的资源"><a href="#YouTube上的资源" class="headerlink" title="YouTube上的资源"></a>YouTube上的资源</h2><ul><li><a href="https://www.youtube.com/results?search_query=mysql" target="_blank" rel="external">https://www.youtube.com/results?search_query=mysql</a></li></ul><blockquote><p>就这么简单～</p></blockquote><h1 id="实践学习"><a href="#实践学习" class="headerlink" title="实践学习"></a>实践学习</h1><p>强烈建议先根据视频学习！根据上面的YouTube教程结合<a href="https://sqlbolt.com" target="_blank" rel="external">sqlbolt</a>网站一步步来即可～若是英文看不懂，可结合上面的书籍资源以及在线资源查询即可。实践才是掌握一门语言的最快方法！</p><blockquote><p>有时根据网速快慢加载的数据库可能有点慢，等待一下即可。</p></blockquote><h3 id="实践网站："><a href="#实践网站：" class="headerlink" title="实践网站："></a>实践网站：</h3><ul><li><p><a href="https://sqlbolt.com/" target="_blank" rel="external">SQLbolt</a></p></li><li><p><a href="https://www.tutorialspoint.com/" target="_blank" rel="external">tutorialspoint</a></p></li><li><p><a href="https://www.w3schools.com/sql/sql_exercises.asp" target="_blank" rel="external">W3Schools</a></p></li><li><p><a href="https://www.codecademy.com/" target="_blank" rel="external">codecademy</a></p></li><li><p><a href="https://www.udemy.com/courses/search/?ref=home&amp;src=ukw&amp;q=mysql" target="_blank" rel="external">udemy</a></p></li></ul><h1 id="进阶好文章"><a href="#进阶好文章" class="headerlink" title="进阶好文章"></a>进阶好文章</h1><ul><li><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">MySQL索引背后的数据结构及算法原理</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1004475" target="_blank" rel="external">MySQL 开发实践 8 问</a></p></li><li><p><a href="https://juejin.im/post/5b4f710be51d45195c073912" target="_blank" rel="external">从I/O到索引的那些事</a></p></li><li><p><a href="https://juejin.im/post/5b8ba5dbe51d4538d63b9345" target="_blank" rel="external">从理论到实践，Mysql查询优化剖析</a></p></li></ul><blockquote><p>再者就是看书了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近心血来潮想写几个SQL玩玩，在此会分享学习的书籍资源以及YouTube教程使用语法的实践项目，以及会进行一系列的简单实践。这里通过在YouTube上的一个大佬的视频来进行在线的实践即可。&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xYMhPZ_L3fI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;就是这个视频。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可主要参考书籍&lt;a href=&quot;https://pan.baidu.com/s/15hIkCroy2w7RvBdVH8LRmA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;疯狂Java讲义(李刚)&lt;/a&gt;来进行学习，当然还有参考其他的经典书籍以备用学习，这类书籍很多，就不在此一一说明了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《疯狂Java讲义》书籍的配套资源地址：&lt;a href=&quot;https://github.com/DoingLee&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/DoingLee&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://liujunjie11.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://liujunjie11.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>学习计算机组成、计算机系统资源分享</title>
    <link href="https://liujunjie11.github.io/2018/11/13/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    <id>https://liujunjie11.github.io/2018/11/13/学习计算机组成、计算机系统资源分享/</id>
    <published>2018-11-13T08:32:42.000Z</published>
    <updated>2019-01-02T06:48:25.253Z</updated>
    
    <content type="html"><![CDATA[<p>一直想写一些关于计算机的基础知识的，但是我又看到许多的优秀书籍以及优秀文章，我从其中也学习到了非常的东西，也解开了我的许多疑惑，在此感谢那些人们的付出～</p><p>回到正题，自己一直想写，但是由于时间问题以及质量不能保证…所以我打算将一些优秀的资源拿出来分享好了，也解决了自己的那块心头肉。</p><p>以下资源是我从网上收集到的，仅用于学习使用。</p><a id="more"></a><h1 id="云盘资源分享"><a href="#云盘资源分享" class="headerlink" title="云盘资源分享"></a>云盘资源分享</h1><ul><li><a href="https://pan.baidu.com/s/1Z9BcwV3fKGqwVXlLfU8B_g" target="_blank" rel="external">深入理解计算机系统（原书第三版）.pdf</a></li></ul><blockquote><p>一本非常好的书！！</p></blockquote><ul><li><p><a href="https://pan.baidu.com/s/1JIC9vxu1CnKgqBnfgrfEAw" target="_blank" rel="external">计算机组成.pdf</a></p></li><li><p><a href="https://pan.baidu.com/s/1LI2Cc9dFgAgBro_Tn7uKUA" target="_blank" rel="external">计算机操作系统（第3版）_汤小丹.pdf</a></p></li><li><p><a href="https://pan.baidu.com/s/1li3YCywQlfEMtRCkRdS1tQ" target="_blank" rel="external">计算机是怎么跑起来的.pdf</a></p></li></ul><blockquote><p>一本科普书吧，很简单，但是够用了。</p></blockquote><ul><li><p><a href="https://pan.baidu.com/s/1uDVuroObwbvuqlZWokE3dg" target="_blank" rel="external">计算机组成.pdf</a></p></li><li><p><a href="https://pan.baidu.com/s/1ix393Of_pPVnvAQZEdZumw" target="_blank" rel="external">Linux设备驱动程序(中文版第三版).pdf</a></p></li><li><p><a href="https://pan.baidu.com/s/1N6Y7faTYkmU7gyaXUv9YqA" target="_blank" rel="external">Linux内核完全注释.pdf</a></p></li><li><p><a href="https://pan.baidu.com/s/1jvuMLTCtrmytamVYtR2G7A" target="_blank" rel="external">深入Linux内核架构.pdf</a></p></li></ul><blockquote><p>以上都是网上收集的电子书，我个人平时喜欢看书，基本上都是电子书，有收集很多技术类的电子书，都是根据需求来收集的。</p></blockquote><h1 id="最近看到的相关的优秀文章"><a href="#最近看到的相关的优秀文章" class="headerlink" title="最近看到的相关的优秀文章"></a>最近看到的相关的优秀文章</h1><ul><li><p><a href="https://juejin.im/post/5b3c34e3e51d45190e34c680" target="_blank" rel="external">印象系列-理解进程的存在</a></p></li><li><p><a href="https://juejin.im/post/59eaf70ff265da432b49f6bc" target="_blank" rel="external">印象系列-磁盘和内存的基本认识</a></p></li><li><p><a href="https://juejin.im/post/59be20e6f265da06633d1648" target="_blank" rel="external">印象系列-linux内核启动过程</a></p></li><li><p><a href="https://juejin.im/post/5b4f710be51d45195c073912" target="_blank" rel="external">从I/O到索引的那些事</a></p></li></ul><blockquote><p>以上都是一个作者写的，最近在学习<code>MySQL</code>时无意中看到的，很好的文章。</p></blockquote><p>还是要多看书学习才行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想写一些关于计算机的基础知识的，但是我又看到许多的优秀书籍以及优秀文章，我从其中也学习到了非常的东西，也解开了我的许多疑惑，在此感谢那些人们的付出～&lt;/p&gt;
&lt;p&gt;回到正题，自己一直想写，但是由于时间问题以及质量不能保证…所以我打算将一些优秀的资源拿出来分享好了，也解决了自己的那块心头肉。&lt;/p&gt;
&lt;p&gt;以下资源是我从网上收集到的，仅用于学习使用。&lt;/p&gt;
    
    </summary>
    
      <category term="资源分享" scheme="https://liujunjie11.github.io/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
      <category term="计算机基础" scheme="https://liujunjie11.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="资源分享" scheme="https://liujunjie11.github.io/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
      <category term="计算机基础" scheme="https://liujunjie11.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客图片外链从七牛云移至腾讯云</title>
    <link href="https://liujunjie11.github.io/2018/11/11/Hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E5%A4%96%E9%93%BE%E4%BB%8E%E4%B8%83%E7%89%9B%E4%BA%91%E7%A7%BB%E8%87%B3%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    <id>https://liujunjie11.github.io/2018/11/11/Hexo博客图片外链从七牛云移至腾讯云/</id>
    <published>2018-11-11T10:30:01.000Z</published>
    <updated>2019-01-08T08:17:14.217Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现博客中的一些文章图片无法正常显示了，查看了一些文章之后，发现原来是测试域名失效了…我的图片存放了这么多…全都不能用了，妈蛋啊！</p><p>我研究了一下关于它的这个恢复的方法，需要实名不说了，还要我的网站备案，不可能的绝对不可能的，我要走了，再见了，七牛云！！</p><p>我要搬去腾讯云了。以下是我的记录。</p><a id="more"></a><h1 id="将七牛云的图片下载至本地"><a href="#将七牛云的图片下载至本地" class="headerlink" title="将七牛云的图片下载至本地"></a>将七牛云的图片下载至本地</h1><h2 id="过程操作"><a href="#过程操作" class="headerlink" title="过程操作"></a>过程操作</h2><p>具体需要用到<a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="external">七牛云命令行工具(qshell)</a>，将曾经上传上去的图片批量下载到本地然后使用腾讯云再次慢慢整理即可…</p><ul><li>可参考官方介绍：<a href="http://songfeifeids.qiniuts.com/spjc/avthumb/batchdelete.mov.mp4" target="_blank" rel="external">使用 qshell 进行批量删除</a></li></ul><blockquote><p>由于我在七牛云上的图片有一部分可以显示，一部分无法显示，但是这个量真的太大了，我不打算一个一个替换了，之后的图片我就直接用腾讯云来充当图床好了…唉…心累。</p></blockquote><h1 id="关于在腾讯云的图床操作"><a href="#关于在腾讯云的图床操作" class="headerlink" title="关于在腾讯云的图床操作"></a>关于在腾讯云的图床操作</h1><p>可参考：</p><ul><li><a href="https://blog.csdn.net/a201577F0546/article/details/80146350" target="_blank" rel="external">使用腾讯云对象存储作为图床</a></li></ul><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>我通过一个兄弟买了一个已备案的域名，在<a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="external">这里</a>跟着设置了一下，就OK了，接下来我需要将以前的在文件中域名更改为现在的就行了，图片就能正常显示出来了。为了更有效率的处理可以自己写个脚本或者是利用好一些编译软件替换掉域名即可：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-12%20%E4%B8%8B%E5%8D%886.57.30.png" alt=""></p><blockquote><p>我用的<em>Macdown</em>编译软件，平时用这个来写博客的。</p></blockquote><p>另外可以用公用的图床(以下为推荐的参考链接)：</p><ul><li><p><a href="https://sspai.com/post/40499" target="_blank" rel="external">https://sspai.com/post/40499</a></p></li><li><p><a href="https://blog.nfz.moe/archives/collection-of-image-hosting.html" target="_blank" rel="external">https://blog.nfz.moe/archives/collection-of-image-hosting.html</a></p></li></ul><blockquote><p>不过为了稳定，我是真的不想从来一遍了…文件太多了。所以我买了个备案的域名。</p></blockquote><h1 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h1><p>最近买的不久的备案域名被收回了…于是我决心从七牛云搬出来。以下是我的一些心得。</p><p><strong>需要先将七牛云的上的所有的文件下载下来，之后再将文件上传腾讯云上，之后更改一些外链链接即可万事大吉了！</strong></p><blockquote><p>具体步骤可参考：<a href="http://robotkang.cc/2018/11/pic/" target="_blank" rel="external">将图床从七牛云迁移到腾讯COS</a></p></blockquote><p>另外要补充的一些：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-02%20%E4%B8%8B%E5%8D%883.11.27.png" alt=""></p><blockquote><p>这是我摸索出来的正确的符合当下情况的<code>batch_download.conf</code>文件描述，空白表示全部下载的意识。</p></blockquote><p>另外这个基本的下载与使用的官方指导：<a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="external">Mac上的七牛云命令行工具(qshell)使用</a></p><blockquote><p>但是单单看这个视频是不行的，还是出现了一些错误，比如：命令行根本运行不了！<strong>所以还需要参考下面的官方的API进行操作！！！！</strong></p></blockquote><ul><li><p><a href="https://github.com/qiniu/qshell" target="_blank" rel="external">qshell-Github</a></p></li><li><p><a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="external">官方文档命令行工具(qshell)</a></p></li></ul><p>另外关于批量更改文字内容（尝试未成功…）可参考：</p><ul><li><a href="https://blog.csdn.net/lzyzuixin/article/details/7638979" target="_blank" rel="external">linux sed命令 批量替换文件内容的方法</a></li></ul><h2 id="注意-amp-提示"><a href="#注意-amp-提示" class="headerlink" title="注意&amp;提示"></a>注意&amp;提示</h2><p>使用的命令行如果出现错误一定看官方的文档进行修改重新来过！！以官方文档为准！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现博客中的一些文章图片无法正常显示了，查看了一些文章之后，发现原来是测试域名失效了…我的图片存放了这么多…全都不能用了，妈蛋啊！&lt;/p&gt;
&lt;p&gt;我研究了一下关于它的这个恢复的方法，需要实名不说了，还要我的网站备案，不可能的绝对不可能的，我要走了，再见了，七牛云！！&lt;/p&gt;
&lt;p&gt;我要搬去腾讯云了。以下是我的记录。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://liujunjie11.github.io/categories/Hexo/"/>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="https://liujunjie11.github.io/tags/Hexo/"/>
    
      <category term="教程笔记" scheme="https://liujunjie11.github.io/tags/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="七牛云" scheme="https://liujunjie11.github.io/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
      <category term="腾讯云" scheme="https://liujunjie11.github.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>（Mac）Julia的下载及结合notebook使用</title>
    <link href="https://liujunjie11.github.io/2018/11/09/%EF%BC%88Mac%EF%BC%89Julia%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%8F%8A%E7%BB%93%E5%90%88notebook%E4%BD%BF%E7%94%A8/"/>
    <id>https://liujunjie11.github.io/2018/11/09/（Mac）Julia的下载及结合notebook使用/</id>
    <published>2018-11-09T06:50:59.000Z</published>
    <updated>2019-01-02T06:48:54.745Z</updated>
    
    <content type="html"><![CDATA[<p>关于Julia这个语言，这是一个鲜为人知的语言，听说在处理数值分析方面还不错，最近也总是无意间看到，所以想试试看看，就在此顺便记录一下安装的过程以及如何在notebook中运行的过程。</p><a id="more"></a><h1 id="安装Julia"><a href="#安装Julia" class="headerlink" title="安装Julia"></a>安装Julia</h1><ul><li>在这里下载：<a href="https://julialang.org/downloads/" target="_blank" rel="external">https://julialang.org/downloads/</a></li></ul><p>或者是在<code>Mac</code>上可用<code>homebrew</code>命令行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew cask install julia</div></pre></td></tr></table></figure><blockquote><p>可参考：<a href="https://julialang.org/downloads/platform.html#macos" target="_blank" rel="external">https://julialang.org/downloads/platform.html#macos</a></p></blockquote><p>我使用直接下载安装的方式。</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vi ~/.bash_profile <span class="comment">#打开配置文件</span></div><div class="line"></div><div class="line"><span class="comment">#输入对应目录</span></div><div class="line"><span class="comment">#Julia</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="string">"/Applications/Julia-1.0.app/Contents/Resources/julia/bin:<span class="variable">$&#123;PATH&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="built_in">source</span> ~/.bash_profile <span class="comment">#快速生效</span></div></pre></td></tr></table></figure><p>这样之后在终端直接输入<code>Julia</code>即可使用Julia了。</p><h1 id="notebook中运行"><a href="#notebook中运行" class="headerlink" title="notebook中运行"></a>notebook中运行</h1><p>下载相关的内核就OK了。</p><p>打开Julia终端进程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">using Pkg</div><div class="line">Pkg.add(<span class="string">"IJulia"</span>)</div></pre></td></tr></table></figure><blockquote><p>重启notebook，发现可以了。</p></blockquote><p>可参考：</p><ul><li><p><a href="https://github.com/JuliaLang/IJulia.jl" target="_blank" rel="external">https://github.com/JuliaLang/IJulia.jl</a></p></li><li><p><a href="https://www.youtube.com/watch?v=uRIQXJXRtqg" target="_blank" rel="external">https://www.youtube.com/watch?v=uRIQXJXRtqg</a></p></li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>附上几个学习链接：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/41802723" target="_blank" rel="external">一个简单的Julia教程（一）</a></li></ul><blockquote><p>这篇文章有介绍用其他运行<code>Julia</code>的方案。</p></blockquote><ul><li><p><a href="http://discourse.juliacn.com" target="_blank" rel="external">Julia中文discourse</a></p></li><li><p><a href="https://www.zhihu.com/question/284356534" target="_blank" rel="external">Julia 解决了 C++/Python/Matlab 的哪些痛点？</a></p></li><li><p><a href="https://www.zhihu.com/question/20072632" target="_blank" rel="external">怎么看待新出的 Julia 语言？它的前景怎么样？</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Julia这个语言，这是一个鲜为人知的语言，听说在处理数值分析方面还不错，最近也总是无意间看到，所以想试试看看，就在此顺便记录一下安装的过程以及如何在notebook中运行的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="软件使用" scheme="https://liujunjie11.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Julia" scheme="https://liujunjie11.github.io/categories/Julia/"/>
    
    
      <category term="Jupyter Notebook" scheme="https://liujunjie11.github.io/tags/Jupyter-Notebook/"/>
    
      <category term="Julia" scheme="https://liujunjie11.github.io/tags/Julia/"/>
    
  </entry>
  
  <entry>
    <title>Python结合OCR以及Opencv提取并且实时翻译图片内容</title>
    <link href="https://liujunjie11.github.io/2018/11/08/Python%E7%BB%93%E5%90%88OCR%E4%BB%A5%E5%8F%8AOpencv%E6%8F%90%E5%8F%96%E5%B9%B6%E4%B8%94%E5%AE%9E%E6%97%B6%E7%BF%BB%E8%AF%91%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9/"/>
    <id>https://liujunjie11.github.io/2018/11/08/Python结合OCR以及Opencv提取并且实时翻译图片内容/</id>
    <published>2018-11-08T04:09:42.000Z</published>
    <updated>2019-01-02T06:49:04.071Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述基于python的一些模块进行<code>图片内容的提取</code>、<code>图片内容的翻译</code>。本文主要进行记录一些在实践中的构想以及遇到的问题，并且记录上一些实现的代码，因为技术含量实在是不怎么高的，不过若是自己玩玩，参加那种水比赛也许能获得个不错的名次，或者是应付个学生报告什么的…</p><p>由于时间关系，本文多数只是起到一个构想记录的效用。</p><a id="more"></a><h1 id="基于OCR的图片内容提取"><a href="#基于OCR的图片内容提取" class="headerlink" title="基于OCR的图片内容提取"></a>基于OCR的图片内容提取</h1><p>在python使用到的模块是<code>pytesseract</code>，关于简要的下载介绍什么的可见：<a href="https://zhuanlan.zhihu.com/p/31530755" target="_blank" rel="external">Python–文字识别–Tesseract</a>。</p><p>运行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pytesseract</div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line">image = cv2.imread(<span class="string">'/Users/junjieliu/Desktop/1.png'</span>)</div><div class="line">text = pytesseract.image_to_string(image)</div><div class="line">print(text)</div></pre></td></tr></table></figure><p>在此记录一下在使用过程中的出现的问题：</p><h2 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error: [Errno 2] No such file or directory using pytesser</div></pre></td></tr></table></figure><blockquote><p>之后我参考了：<a href="https://stackoverflow.com/questions/35609773/oserror-errno-2-no-such-file-or-directory-using-pytesser" target="_blank" rel="external">https://stackoverflow.com/questions/35609773/oserror-errno-2-no-such-file-or-directory-using-pytesser</a></p></blockquote><p>我使用了其中的前面的几个答案的方案，结果出现了下面的错误…</p><h2 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PermissionError: [Errno 13] Permission denied</div></pre></td></tr></table></figure><blockquote><p>之后我参考了：<a href="https://github.com/madmaze/pytesseract/issues/62" target="_blank" rel="external">https://github.com/madmaze/pytesseract/issues/62</a></p></blockquote><p>但是依旧得不到解决。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>使用命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span> tesseract</div></pre></td></tr></table></figure><p>找到了它的位置（没想到Mac自带的一个？）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/bin/tesseract</div></pre></td></tr></table></figure><p>然后虽然在替换了地址之后可以正常运行代码了(即<code>tesseract_cmd = “/usr/local/bin/tesseract”</code>)，就会变得很麻烦，因为自带的根本难以进行扩展。</p><p>将下载好的加入环境变量替换掉原装的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ~/.bash_profile</div></pre></td></tr></table></figure><p>写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#tesseract</span></div><div class="line">export PATH=<span class="string">"/usr/local/Cellar/tesseract/4.0.0/bin:$PATH"</span></div></pre></td></tr></table></figure><p>立即生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure><p>之后再使用命令行<code>which tesseract</code>,就会发现变了位置，更改<code>tesseract_cmd = “/usr/local/Cellar/tesseract/4.0.0/bin/tesseract”</code>，之后程序就能成功运行并且可以得到以后的更多的扩展使用了，比如语言包的选择。</p><h1 id="在线提取图片文字小工具"><a href="#在线提取图片文字小工具" class="headerlink" title="在线提取图片文字小工具"></a>在线提取图片文字小工具</h1><p>提取这一块的具体过程就不多说了，简单记录一下结合其他技术可以实现的想法：</p><blockquote><p>可结合<code>Pyqt5</code>的GUI界面化开发，输入图片的目录地址，下方即出现提取的内容。</p><p>在以上的基础上结合爬虫实现翻译。</p></blockquote><p><strong>可参考我以前写的文章：<a href="https://liujunworld.com/2018/05/07/python3爬虫与GUI-基于有道词典的词典小工具/" target="_blank" rel="external">python3爬虫与GUI-基于有道词典的词典小工具</a></strong></p><p>这样一来这个小工具就能出来了。这里就这样吧，因为时间关系加上实现的过程不是很难，所以就不多说了。</p><ul><li>关于提取的精确度可移步参考更强大的工具：<a href="https://github.com/JinpengLI/deep_ocr" target="_blank" rel="external">deep_ocr</a></li></ul><h1 id="结合OpenCV实时翻译"><a href="#结合OpenCV实时翻译" class="headerlink" title="结合OpenCV实时翻译"></a>结合OpenCV实时翻译</h1><p>这里主要是我在参考了：<a href="https://zhuanlan.zhihu.com/p/40025902" target="_blank" rel="external">用OpenCV和Python识别二维码和条形码</a>这篇文章之后结合本身的需求出现的启发。</p><p>这是我经过修改之后的代码（添加并且修改了几行代码）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> imutils.video <span class="keyword">import</span> VideoStream</div><div class="line"><span class="keyword">from</span> pyzbar <span class="keyword">import</span> pyzbar</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> imutils</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</div><div class="line">vs = VideoStream(src=<span class="number">0</span>).start()</div><div class="line">time.sleep(<span class="number">2.0</span>)</div><div class="line"></div><div class="line"><span class="comment"># open the output CSV file for writing and initialize the set of</span></div><div class="line"><span class="comment"># barcodes found thus far</span></div><div class="line">csv = open(<span class="string">"barcodes.csv"</span>, <span class="string">"w"</span>)</div><div class="line">found = set()</div><div class="line"></div><div class="line"><span class="comment"># loop over the frames from the video stream</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># grab the frame from the threaded video stream and resize it to</span></div><div class="line">    <span class="comment"># have a maximum width of 400 pixels</span></div><div class="line">    frame = vs.read()</div><div class="line">    frame = imutils.resize(frame, width=<span class="number">400</span>)</div><div class="line"></div><div class="line">    <span class="comment"># find the barcodes in the frame and decode each of the barcodes</span></div><div class="line">    barcodes = pyzbar.decode(frame)</div><div class="line"></div><div class="line">    <span class="comment"># loop over the detected barcodes</span></div><div class="line">    <span class="keyword">for</span> barcode <span class="keyword">in</span> barcodes:</div><div class="line">        <span class="comment"># extract the bounding box location of the barcode and draw</span></div><div class="line">        <span class="comment"># the bounding box surrounding the barcode on the image</span></div><div class="line">        (x, y, w, h) = barcode.rect</div><div class="line">        cv2.rectangle(frame, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</div><div class="line"></div><div class="line">        <span class="comment"># the barcode data is a bytes object so if we want to draw it</span></div><div class="line">        <span class="comment"># on our output image we need to convert it to a string first</span></div><div class="line">        barcodeData = barcode.data.decode(<span class="string">"utf-8"</span>)</div><div class="line">        barcodeType = barcode.type</div><div class="line"></div><div class="line">        <span class="comment"># draw the barcode data and barcode type on the image</span></div><div class="line">        text = <span class="string">"&#123;&#125; (&#123;&#125;)"</span>.format(barcodeData, barcodeType)</div><div class="line">        cv2.putText(frame, text, (x, y - <span class="number">10</span>),</div><div class="line">            cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</div><div class="line"></div><div class="line">        <span class="comment"># if the barcode text is currently not in our CSV file, write</span></div><div class="line">        <span class="comment"># the timestamp + barcode qto disk and update the set</span></div><div class="line">        <span class="keyword">if</span> barcodeData <span class="keyword">not</span> <span class="keyword">in</span> found:</div><div class="line">            csv.write(<span class="string">"&#123;&#125;,&#123;&#125;\n"</span>.format(datetime.datetime.now(),</div><div class="line">                barcodeData))</div><div class="line">            csv.flush()</div><div class="line">            found.add(barcodeData)</div><div class="line"></div><div class="line">    <span class="comment"># show the output frame</span></div><div class="line">    cv2.imshow(<span class="string">"Barcode Scanner"</span>, frame)</div><div class="line">    key = cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span></div><div class="line"> </div><div class="line">    <span class="comment"># if the `q` key was pressed, break from the loop</span></div><div class="line">    <span class="keyword">if</span> key == ord(<span class="string">"q"</span>):</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="comment"># close the output CSV file do a bit of cleanup</span></div><div class="line">print(<span class="string">"[INFO] cleaning up..."</span>)</div><div class="line">cap.release()  <span class="comment"># 释放摄像头</span></div><div class="line">csv.close()</div><div class="line">cv2.destroyAllWindows()</div><div class="line">vs.stop()</div></pre></td></tr></table></figure><blockquote><p>性能得到了一点的优化，少写了点代码。效果没变化。</p></blockquote><p>关于实现实时翻译的效果，这里可结合上面的有道爬虫与OpenCV来完成。基本上进行一些修改就行了，实现的过程不算太难。多参考官方文档以及他人的做法即能实现。</p><p>大概的代码样本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> imutils.video <span class="keyword">import</span> VideoStream</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> imutils</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</div><div class="line"><span class="comment"># initialize the video stream and allow the camera sensor to warm up</span></div><div class="line">print(<span class="string">"starting video stream..."</span>)</div><div class="line"><span class="comment"># vs = VideoStream(src=0).start()</span></div><div class="line">vs = VideoStream(src=<span class="number">0</span>).start()</div><div class="line">time.sleep(<span class="number">2.0</span>)</div><div class="line"></div><div class="line">csv = open(<span class="string">"barcodes.csv"</span>, <span class="string">"w"</span>)</div><div class="line">found = set()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># grab the frame from the threaded video stream and resize it to</span></div><div class="line">    <span class="comment"># have a maximum width of 400 pixels</span></div><div class="line">    frame = vs.read()</div><div class="line">    frame = imutils.resize(frame, width=<span class="number">400</span>)</div><div class="line"></div><div class="line">    word = frame</div><div class="line">    <span class="keyword">for</span> words <span class="keyword">in</span> word:</div><div class="line">        r = str(int(time.time() * <span class="number">1000</span> + random.randint(<span class="number">1</span>, <span class="number">10</span>)))  <span class="comment"># 模仿JS代码的仿写</span></div><div class="line">        S = <span class="string">'fanyideskweb'</span></div><div class="line">        n = words</div><div class="line">        D = <span class="string">"ebSeFb%=XZ%T[KZ)c(sy!"</span>  <span class="comment"># 在完整的JS代码中可找到    </span></div><div class="line">        o = hashlib.md5((S + n + str(r) + D).encode(<span class="string">'utf-8'</span>)).hexdigest()</div><div class="line">        </div><div class="line">        data = &#123;</div><div class="line">            <span class="string">'i'</span>: words,</div><div class="line">            <span class="string">'from'</span>: <span class="string">'AUTO'</span>,</div><div class="line">            <span class="string">'to'</span>: <span class="string">'AUTO'</span>,</div><div class="line">            <span class="string">'smartresult'</span>: <span class="string">'dict'</span>,</div><div class="line">            <span class="string">'client'</span>: S,</div><div class="line">            <span class="string">'salt'</span>: r,</div><div class="line">            <span class="string">'sign'</span>: o,</div><div class="line">            <span class="string">'doctype'</span>: <span class="string">'json'</span>,</div><div class="line">            <span class="string">'version'</span>: <span class="string">'2.1'</span>,</div><div class="line">            <span class="string">'keyfrom'</span>: <span class="string">'fanyi.web'</span>,</div><div class="line">            <span class="string">'action'</span>: <span class="string">'FY_BY_REALTIME'</span>,</div><div class="line">            <span class="string">'typoResult'</span>: <span class="string">'false'</span></div><div class="line">        &#125;</div><div class="line">        url = <span class="string">'http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule'</span></div><div class="line">        </div><div class="line">        <span class="comment"># 在代理中需要加入cookies信息，否则会出现代码错误信息的返回</span></div><div class="line">        header = &#123;</div><div class="line">            <span class="string">'Cookie'</span>: <span class="string">'OUTFOX_SEARCH_USER_ID=432464843@10.168.8.76; _ntes_nnid=25aff2b1480f17471ca1585f6f2f4293,1512024136653; OUTFOX_SEARCH_USER_ID_NCOO=132154936.07902834; JSESSIONID=aaa3TFIg-JJJN4xEog6mw; ___rl__test__cookies=1525691300664'</span>,</div><div class="line">            <span class="string">'Referer'</span>: <span class="string">'http://fanyi.youdao.com/'</span>,</div><div class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36'</span></div><div class="line">        &#125;</div><div class="line">        response = requests.post(url=url, headers=header, data=data)</div><div class="line">        response.encoding = <span class="string">'utf-8'</span></div><div class="line">        </div><div class="line">        translateResult = json.loads(response.text)[<span class="string">"translateResult"</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">'tgt'</span>]</div><div class="line">        <span class="comment">#(x, y, w, h) = words.rect</span></div><div class="line">        cv2.rectangle(frame, (<span class="number">10</span>, <span class="number">10</span>), (<span class="number">20</span>, <span class="number">20</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</div><div class="line">        </div><div class="line">               cv2.putText(frame, translateResult, (<span class="number">10</span>, <span class="number">10</span> - <span class="number">10</span>),</div><div class="line">        cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</div><div class="line">        </div><div class="line">        <span class="comment"># if the  text is currently not in our CSV file, write</span></div><div class="line">        <span class="comment"># the timestamp + text qto disk and update the set</span></div><div class="line">        <span class="keyword">if</span> translateResult <span class="keyword">not</span> <span class="keyword">in</span> found:</div><div class="line">            csv.write(<span class="string">"&#123;&#125;,&#123;&#125;\n"</span>.format(datetime.datetime.now(),</div><div class="line">                translateResult))</div><div class="line">            csv.flush()</div><div class="line">            found.add(translateResult)</div><div class="line"></div><div class="line">    <span class="comment"># show the output frame</span></div><div class="line">    cv2.imshow(<span class="string">"Translate Discern"</span>, frame)</div><div class="line">    key = cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span></div><div class="line"> </div><div class="line">    <span class="comment"># if the `q` key was pressed, break from the loop</span></div><div class="line">    <span class="keyword">if</span> key == ord(<span class="string">"q"</span>):</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="comment"># close the output CSV file do a bit of cleanup</span></div><div class="line">print(<span class="string">"cleaning up..."</span>)</div><div class="line">cap.release()  <span class="comment"># 释放摄像头</span></div><div class="line">csv.close()</div><div class="line">cv2.destroyAllWindows()</div><div class="line">vs.stop()</div></pre></td></tr></table></figure><p>可参考：</p><ul><li><p><a href="https://www.jiqizhixin.com/articles/2017-09-21-3" target="_blank" rel="external">深度学习 + OpenCV，Python实现实时视频目标检测</a></p></li><li><p><a href="https://yongyuan.name/pcvwithpython/chapter10.html#sec-10-2-1" target="_blank" rel="external">OpenCV Python接口</a></p></li><li><p><a href="https://www.pyimagesearch.com/2015/04/06/zero-parameter-automatic-canny-edge-detection-with-python-and-opencv/" target="_blank" rel="external">Zero-parameter, automatic Canny edge detection with Python and OpenCV</a></p></li><li><p><a href="https://juejin.im/entry/5b5e694ee51d4535c75631e7" target="_blank" rel="external">Opencv获取身份证号码区域</a></p></li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>记录一下在下载tesseract之后的提示，有一天可能会用到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">icu4c is keg-only, which means it was not symlinked into /usr/local,</div><div class="line">because macOS provides libicucore.dylib (but nothing else).</div><div class="line"></div><div class="line">If you need to have icu4c first in your PATH run:</div><div class="line">  echo &apos;export PATH=&quot;/usr/local/opt/icu4c/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line">  echo &apos;export PATH=&quot;/usr/local/opt/icu4c/sbin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line"></div><div class="line">For compilers to find icu4c you may need to set:</div><div class="line">  export LDFLAGS=&quot;-L/usr/local/opt/icu4c/lib&quot;</div><div class="line">  export CPPFLAGS=&quot;-I/usr/local/opt/icu4c/include&quot;</div><div class="line"></div><div class="line">For pkg-config to find icu4c you may need to set:</div><div class="line">  export PKG_CONFIG_PATH=&quot;/usr/local/opt/icu4c/lib/pkgconfig&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述基于python的一些模块进行&lt;code&gt;图片内容的提取&lt;/code&gt;、&lt;code&gt;图片内容的翻译&lt;/code&gt;。本文主要进行记录一些在实践中的构想以及遇到的问题，并且记录上一些实现的代码，因为技术含量实在是不怎么高的，不过若是自己玩玩，参加那种水比赛也许能获得个不错的名次，或者是应付个学生报告什么的…&lt;/p&gt;
&lt;p&gt;由于时间关系，本文多数只是起到一个构想记录的效用。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://liujunjie11.github.io/categories/Python/"/>
    
      <category term="OCR" scheme="https://liujunjie11.github.io/categories/OCR/"/>
    
      <category term="OpenCV" scheme="https://liujunjie11.github.io/categories/OpenCV/"/>
    
    
      <category term="Python" scheme="https://liujunjie11.github.io/tags/Python/"/>
    
      <category term="OCR" scheme="https://liujunjie11.github.io/tags/OCR/"/>
    
      <category term="OpenCV" scheme="https://liujunjie11.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Kaggle比赛：数字识别的多种算法实现</title>
    <link href="https://liujunjie11.github.io/2018/11/07/Kaggle%E6%AF%94%E8%B5%9B%EF%BC%9A%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E7%9A%84%E5%A4%9A%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>https://liujunjie11.github.io/2018/11/07/Kaggle比赛：数字识别的多种算法实现/</id>
    <published>2018-11-07T07:09:27.000Z</published>
    <updated>2019-02-28T07:44:59.854Z</updated>
    
    <content type="html"><![CDATA[<p>关于<code>Kaggle</code>大赛就不多说了，我打算进一步了解一下入门级的比赛之后再另作参加项目/比赛的打算，在此之前需要更多的实践才行。</p><p>以下是我学习的地址(在一个<code>GitHub</code>大神分享的相关的资源)：</p><blockquote><p><a href="https://github.com/apachecn/kaggle" target="_blank" rel="external">https://github.com/apachecn/kaggle</a><br>里面有多种可以实现的算法的代码以及思想，我在此进行进一步的整理，进行一个简单的代码记录，以及会进行一点修改以符合我自身的情况。</p></blockquote><ul><li>需要的数据下载地址：<a href="https://www.kaggle.com/c/digit-recognizer/data" target="_blank" rel="external">https://www.kaggle.com/c/digit-recognizer/data</a></li></ul><a id="more"></a><h1 id="KNN实现"><a href="#KNN实现" class="headerlink" title="KNN实现"></a>KNN实现</h1><blockquote><p>首先应当理解这个数字识别数据集里数值表达的意思：<strong>每个标签即代表一个数字，而一个数字的每一个像素值是不一样的(在训练数据集中可看到)，KNN的作用就是在以测试集中的数值与训练集中的数值做距离计算，最终以“K”值的多少得出像素值相近的数字标签(即为最终的数字选项)。</strong></p></blockquote><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">Created on 2017-10-26</span></div><div class="line"><span class="string">Update  on 2018-05-16</span></div><div class="line"><span class="string">Author: 片刻/ccyf00</span></div><div class="line"><span class="string">Github: https://github.com/apachecn/kaggle</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</div><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</div><div class="line"></div><div class="line">data_dir = <span class="string">'/opt/data/kaggle/getting-started/digit-recognizer/'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 加载数据</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">opencsv</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 使用 pandas 打开</span></div><div class="line">    data = pd.read_csv(os.path.join(data_dir, <span class="string">'input/train.csv'</span>))</div><div class="line">    data1 = pd.read_csv(os.path.join(data_dir, <span class="string">'input/test.csv'</span>))</div><div class="line"></div><div class="line">    train_data = data.values[<span class="number">0</span>:, <span class="number">1</span>:]  <span class="comment"># 读入全部训练数据,  [行，列]</span></div><div class="line">    train_label = data.values[<span class="number">0</span>:, <span class="number">0</span>]  <span class="comment"># 读取列表的第一列</span></div><div class="line">    test_data = data1.values[<span class="number">0</span>:, <span class="number">0</span>:]  <span class="comment"># 测试全部测试个数据</span></div><div class="line">    <span class="keyword">return</span> train_data, train_label, test_data</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveResult</span><span class="params">(result, csvName)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(csvName, <span class="string">'w'</span>) <span class="keyword">as</span> myFile:  <span class="comment"># 创建记录输出结果的文件（w 和 wb 使用的时候有问题）</span></div><div class="line">        <span class="comment"># python3里面对 str和bytes类型做了严格的区分，不像python2里面某些函数里可以混用。所以用python3来写wirterow时，打开文件不要用wb模式，只需要使用w模式，然后带上newline=''</span></div><div class="line">        myWriter = csv.writer(myFile)</div><div class="line">        myWriter.writerow([<span class="string">"ImageId"</span>, <span class="string">"Label"</span>])</div><div class="line">        index = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> result:</div><div class="line">            index += <span class="number">1</span></div><div class="line">            myWriter.writerow([index, int(r)])</div><div class="line">    print(<span class="string">'Saved successfully...'</span>)  <span class="comment"># 保存预测结果</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">knnClassify</span><span class="params">(trainData, trainLabel)</span>:</span></div><div class="line">    knnClf = KNeighborsClassifier()  <span class="comment"># default:k = 5,defined by yourself:KNeighborsClassifier(n_neighbors=10)</span></div><div class="line">    knnClf.fit(trainData, np.ravel(trainLabel))  <span class="comment"># ravel Return a contiguous flattened array.</span></div><div class="line">    <span class="keyword">return</span> knnClf</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 数据预处理-降维 PCA主成成分分析</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dRPCA</span><span class="params">(x_train, x_test, COMPONENT_NUM)</span>:</span></div><div class="line">    print(<span class="string">'dimensionality reduction...'</span>)</div><div class="line">    trainData = np.array(x_train)</div><div class="line">    testData = np.array(x_test)</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    使用说明：https://www.cnblogs.com/pinard/p/6243025.html</span></div><div class="line"><span class="string">    n_components&gt;=1</span></div><div class="line"><span class="string">      n_components=NUM   设置占特征数量比</span></div><div class="line"><span class="string">    0 &lt; n_components &lt; 1</span></div><div class="line"><span class="string">      n_components=0.99  设置阈值总方差占比</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    pca = PCA(n_components=COMPONENT_NUM, whiten=<span class="keyword">False</span>)</div><div class="line">    pca.fit(trainData)  <span class="comment"># Fit the model with X</span></div><div class="line">    pcaTrainData = pca.transform(trainData)  <span class="comment"># Fit the model with X and 在X上完成降维.</span></div><div class="line">    pcaTestData = pca.transform(testData)  <span class="comment"># Fit the model with X and 在X上完成降维.</span></div><div class="line"></div><div class="line">    <span class="comment"># pca 方差大小、方差占比、特征数量</span></div><div class="line">    print(pca.explained_variance_, <span class="string">'\n'</span>, pca.explained_variance_ratio_, <span class="string">'\n'</span>,</div><div class="line">          pca.n_components_)</div><div class="line">    print(sum(pca.explained_variance_ratio_))</div><div class="line">    <span class="keyword">return</span> pcaTrainData, pcaTestData</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dRecognition_knn</span><span class="params">()</span>:</span></div><div class="line">    start_time = time.time()</div><div class="line"></div><div class="line">    <span class="comment"># 加载数据</span></div><div class="line">    trainData, trainLabel, testData = opencsv()</div><div class="line">    <span class="comment"># print("trainData==&gt;", type(trainData), shape(trainData))</span></div><div class="line">    <span class="comment"># print("trainLabel==&gt;", type(trainLabel), shape(trainLabel))</span></div><div class="line">    <span class="comment"># print("testData==&gt;", type(testData), shape(testData))</span></div><div class="line">    print(<span class="string">"load data finish"</span>)</div><div class="line">    stop_time_l = time.time()</div><div class="line">    print(<span class="string">'load data time used:%f'</span> % (stop_time_l - start_time))</div><div class="line"></div><div class="line">    <span class="comment"># 降维处理</span></div><div class="line">    trainData, testData = dRPCA(trainData, testData, <span class="number">0.8</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 模型训练</span></div><div class="line">    knnClf = knnClassify(trainData, trainLabel)</div><div class="line"></div><div class="line">    <span class="comment"># 结果预测</span></div><div class="line">    testLabel = knnClf.predict(testData)</div><div class="line"></div><div class="line">    <span class="comment"># 结果的输出</span></div><div class="line">    saveResult(testLabel, os.path.join(data_dir, <span class="string">'output/Result_sklearn_knn.csv'</span>))</div><div class="line">    print(<span class="string">"finish!"</span>)</div><div class="line">    stop_time_r = time.time()</div><div class="line">    print(<span class="string">'classify time used:%f'</span> % (stop_time_r - start_time))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    dRecognition_knn()</div></pre></td></tr></table></figure><blockquote><p>代码来源：<a href="https://github.com/apachecn/kaggle/blob/master/src/python/getting-started/digit-recognizer/knn-python3.6.py" target="_blank" rel="external">https://github.com/apachecn/kaggle/blob/master/src/python/getting-started/digit-recognizer/knn-python3.6.py</a></p></blockquote><h1 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h1><p>因为时间有限，并且是以学习为主，与我自己写的代码也大同小异，所以我也就不再重复贴上代码了。直接贴上Github的代码链接。</p><blockquote><p><a href="https://github.com/apachecn/kaggle/blob/master/src/python/getting-started/digit-recognizer/svm-python3.6.py" target="_blank" rel="external">https://github.com/apachecn/kaggle/blob/master/src/python/getting-started/digit-recognizer/svm-python3.6.py</a></p></blockquote><h1 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h1><blockquote><p><a href="https://github.com/apachecn/kaggle/blob/master/src/python/getting-started/digit-recognizer/rf-python3.6.py" target="_blank" rel="external">https://github.com/apachecn/kaggle/blob/master/src/python/getting-started/digit-recognizer/rf-python3.6.py</a></p></blockquote><h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><blockquote><p><a href="https://github.com/apachecn/kaggle/blob/master/src/python/getting-started/digit-recognizer/nn-python3.6.py" target="_blank" rel="external">https://github.com/apachecn/kaggle/blob/master/src/python/getting-started/digit-recognizer/nn-python3.6.py</a></p></blockquote><h1 id="cnn算法"><a href="#cnn算法" class="headerlink" title="cnn算法"></a>cnn算法</h1><blockquote><p><a href="https://github.com/apachecn/kaggle/blob/master/competitions/getting-started/digit-recognizer/cnn算法描述.md" target="_blank" rel="external">https://github.com/apachecn/kaggle/blob/master/competitions/getting-started/digit-recognizer/cnn算法描述.md</a></p></blockquote><h2 id="各种主流机器学习算法的区别与选择"><a href="#各种主流机器学习算法的区别与选择" class="headerlink" title="各种主流机器学习算法的区别与选择"></a>各种主流机器学习算法的区别与选择</h2><ul><li><p>可查看周志华《机器学习》一书得出各种算法的区别。</p></li><li><p>可参考：<a href="https://mp.weixin.qq.com/s?__biz=MzI5MjQ2MzM0Ng==&amp;mid=2247484169&amp;idx=2&amp;sn=3ccbae0c763e8ead96b0960fdef278fc&amp;chksm=ec01b494db763d829080bfa680a517021bfd30c8e1f2f49c759fd81ced0b4a869bab1f0b1766&amp;mpshare=1&amp;scene=23&amp;srcid=02285ivRtPCZmFHSOWxYn5d5" target="_blank" rel="external">机器学习算法优缺点 &amp; 如何选择</a></p></li><li><p>学习主流机器学习算法的GitHub资源参考：<a href=""></a></p></li><li><p>……</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于&lt;code&gt;Kaggle&lt;/code&gt;大赛就不多说了，我打算进一步了解一下入门级的比赛之后再另作参加项目/比赛的打算，在此之前需要更多的实践才行。&lt;/p&gt;
&lt;p&gt;以下是我学习的地址(在一个&lt;code&gt;GitHub&lt;/code&gt;大神分享的相关的资源)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apachecn/kaggle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/apachecn/kaggle&lt;/a&gt;&lt;br&gt;里面有多种可以实现的算法的代码以及思想，我在此进行进一步的整理，进行一个简单的代码记录，以及会进行一点修改以符合我自身的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;需要的数据下载地址：&lt;a href=&quot;https://www.kaggle.com/c/digit-recognizer/data&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.kaggle.com/c/digit-recognizer/data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Kaggle" scheme="https://liujunjie11.github.io/categories/Kaggle/"/>
    
      <category term="机器学习" scheme="https://liujunjie11.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/categories/Python/"/>
    
    
      <category term="Kaggle" scheme="https://liujunjie11.github.io/tags/Kaggle/"/>
    
      <category term="机器学习" scheme="https://liujunjie11.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python机器学习系列：均值平移(Mean Shift)算法的实现及应用</title>
    <link href="https://liujunjie11.github.io/2018/10/30/python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9A%E5%9D%87%E5%80%BC%E5%B9%B3%E7%A7%BB(Mean%20Shift)%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>https://liujunjie11.github.io/2018/10/30/python机器学习系列：均值平移(Mean Shift)算法的实现及应用/</id>
    <published>2018-10-30T12:54:58.000Z</published>
    <updated>2019-01-02T06:49:24.074Z</updated>
    
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/3ERPpzrDkVg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><blockquote><p>这里是对应的课程地址：<a href="https://pythonprogramming.net/hierarchical-clustering-mean-shift-machine-learning-tutorial/?completed=/k-means-from-scratch-2-machine-learning-tutorial/" target="_blank" rel="external">https://pythonprogramming.net/hierarchical-clustering-mean-shift-machine-learning-tutorial/?completed=/k-means-from-scratch-2-machine-learning-tutorial/</a></p></blockquote><p>关于这个算法更像是<code>无监督学习</code>，它相较于<code>K-Means</code>算法不用指定<code>K</code>的个数，可以自动的通过求解一个向量，使得圆心一直往数据集密度最大的方向移动。说的再简单一点，就是每次迭代的时候，都是找到圆里面点的平均位置作为新的圆心位置。</p><blockquote><p>可参考：<a href="https://blog.csdn.net/hjimce/article/details/45718593" target="_blank" rel="external">机器学习（十）Mean Shift 聚类算法</a>、<br><a href="https://zh.wikipedia.org/wiki/%E7%88%AC%E5%B1%B1%E7%AE%97%E6%B3%95" target="_blank" rel="external">爬山算法</a></p></blockquote><p>在原作者的原代码上进行一些符合当今实际情况的修改。</p><a id="more"></a><h1 id="均值平移-Mean-Shift-的实现"><a href="#均值平移-Mean-Shift-的实现" class="headerlink" title="均值平移(Mean Shift)的实现"></a>均值平移(Mean Shift)的实现</h1><p>首先通过代码来理解看看他是个什么情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MeanShift</div><div class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_blobs</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"></div><div class="line">plt.style.use(<span class="string">'ggplot'</span>)</div><div class="line"></div><div class="line">centers = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>], [<span class="number">3</span>,<span class="number">10</span>,<span class="number">10</span>]]</div><div class="line"></div><div class="line"><span class="comment">#样本以及聚类型</span></div><div class="line">X, label = make_blobs(n_samples=<span class="number">100</span>, centers=centers, cluster_std=<span class="number">1.5</span>) <span class="comment">#样本数量，中心点，方差设置</span></div><div class="line"></div><div class="line">ms = MeanShift()</div><div class="line">ms.fit(X)</div><div class="line">labels = ms.labels_</div><div class="line">cluster_centers = ms.cluster_centers_</div><div class="line">n_clusters = len(np.unique(labels))</div><div class="line">print(labels,cluster_centers)</div><div class="line"></div><div class="line">colors = [<span class="string">'r'</span>,<span class="string">'g'</span>,<span class="string">'k'</span>]</div><div class="line">fig = plt.figure()</div><div class="line">ax = fig.add_subplot(<span class="number">111</span>, projection = <span class="string">'3d'</span>)</div><div class="line"></div><div class="line"><span class="comment">#画出所有的样本点</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(X)):</div><div class="line">    ax.scatter(X[i][<span class="number">0</span>], X[i][<span class="number">1</span>], X[i][<span class="number">2</span>], c=colors[labels[i]], marker=<span class="string">'o'</span>)</div><div class="line"></div><div class="line"><span class="comment">#画出中心点</span></div><div class="line">ax.scatter(cluster_centers[:,<span class="number">0</span>], cluster_centers[:,<span class="number">1</span>], cluster_centers[:,<span class="number">2</span>],marker=<span class="string">'x'</span>, color=<span class="string">'k'</span>, s=<span class="number">150</span>, linewidths=<span class="number">5</span>, zorder=<span class="number">1</span>) <span class="comment">#zorder参数的数值越小表示越早画上去，在图表在叠加状态下时有一定的调整作用，比如不让画出来的交叉图分不清等问题</span></div><div class="line"><span class="comment"># ax.scatter(cluster_centers[0], cluster_centers[1], cluster_centers[2],marker='x', color='k', s=150, linewidths=5, zorder=10)还是跟上面的有区别的，自行检查。</span></div><div class="line">print(cluster_centers[:,<span class="number">0</span>])</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure><p>结果展示：</p><ul><li>直接移步这里看吧：<a href="https://pythonprogramming.net/hierarchical-clustering-mean-shift-machine-learning-tutorial/" target="_blank" rel="external">https://pythonprogramming.net/hierarchical-clustering-mean-shift-machine-learning-tutorial/</a></li></ul><blockquote><p>对我来说，作者的关于<code>均值平移(Mean Shift)算法</code>的教程文章实在是看不下去了…</p></blockquote><h2 id="关于原作者的均值平移-Mean-Shift-算法的实现"><a href="#关于原作者的均值平移-Mean-Shift-算法的实现" class="headerlink" title="关于原作者的均值平移(Mean Shift)算法的实现"></a>关于原作者的均值平移(Mean Shift)算法的实现</h2><ul><li>直接移步这里吧：<a href="https://pythonprogramming.net/weighted-bandwidth-mean-shift-machine-learning-tutorial/" target="_blank" rel="external">https://pythonprogramming.net/weighted-bandwidth-mean-shift-machine-learning-tutorial/</a></li></ul><blockquote><p>原作者的代码不怎么合意，并且不能怎么真正的展现出来实现的意义，我不怎么认同，所以只贴上链接在此。</p></blockquote><h2 id="关于均值平移-Mean-Shift-算法的项目应用"><a href="#关于均值平移-Mean-Shift-算法的项目应用" class="headerlink" title="关于均值平移(Mean Shift)算法的项目应用"></a>关于均值平移(Mean Shift)算法的项目应用</h2><p>在原作者中是关于上次中的<code>titanic</code>数据集。</p><blockquote><p>数据地址：<a href="https://pythonprogramming.net/static/downloads/machine-learning-data/titanic.xls" target="_blank" rel="external">https://pythonprogramming.net/static/downloads/machine-learning-data/titanic.xls</a></p></blockquote><ul><li>这里是实现的地址：<a href="https://pythonprogramming.net/mean-shift-titanic-dataset-machine-learning-tutorial/" target="_blank" rel="external">https://pythonprogramming.net/mean-shift-titanic-dataset-machine-learning-tutorial/</a></li></ul><p>对我来说，这个算法应用到这个数据集上是有一点牵强的，没必要的…因为选择这样的数据集来进行试验品实在有点晦涩难懂不合适。</p><h2 id="铺助理解链接"><a href="#铺助理解链接" class="headerlink" title="铺助理解链接"></a>铺助理解链接</h2><ul><li><p><a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.array_equal.html" target="_blank" rel="external">numpy.array_equal</a></p></li><li><p><a href="https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html" target="_blank" rel="external">mplot3d tutorial</a></p></li><li><p><a href="https://blog.csdn.net/ichuzhen/article/details/51768934" target="_blank" rel="external">sklearn 中 make_blobs模块使用</a></p></li><li><p><a href="https://blog.csdn.net/hjimce/article/details/45718593" target="_blank" rel="external">机器学习（十）Mean Shift 聚类算法</a></p></li><li><p><a href="https://www.zhihu.com/question/56091756/answer/191164507" target="_blank" rel="external">matplotlib.pyplot.plot()函数中参数zorder</a></p></li></ul><p>就这样吧，其实我也很期待写下<code>神经网络</code>的记录教程～</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/3ERPpzrDkVg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;这里是对应的课程地址：&lt;a href=&quot;https://pythonprogramming.net/hierarchical-clustering-mean-shift-machine-learning-tutorial/?completed=/k-means-from-scratch-2-machine-learning-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pythonprogramming.net/hierarchical-clustering-mean-shift-machine-learning-tutorial/?completed=/k-means-from-scratch-2-machine-learning-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于这个算法更像是&lt;code&gt;无监督学习&lt;/code&gt;，它相较于&lt;code&gt;K-Means&lt;/code&gt;算法不用指定&lt;code&gt;K&lt;/code&gt;的个数，可以自动的通过求解一个向量，使得圆心一直往数据集密度最大的方向移动。说的再简单一点，就是每次迭代的时候，都是找到圆里面点的平均位置作为新的圆心位置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可参考：&lt;a href=&quot;https://blog.csdn.net/hjimce/article/details/45718593&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器学习（十）Mean Shift 聚类算法&lt;/a&gt;、&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%88%AC%E5%B1%B1%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;爬山算法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在原作者的原代码上进行一些符合当今实际情况的修改。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://liujunjie11.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/categories/Python/"/>
    
    
      <category term="机器学习" scheme="https://liujunjie11.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python机器学习系列：K-均值算法(K-Means)的实现及应用</title>
    <link href="https://liujunjie11.github.io/2018/10/26/python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9AK-%E5%9D%87%E5%80%BC%E7%AE%97%E6%B3%95(K-Means)%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>https://liujunjie11.github.io/2018/10/26/python机器学习系列：K-均值算法(K-Means)的实现及应用/</id>
    <published>2018-10-26T13:22:11.000Z</published>
    <updated>2019-01-02T06:49:35.141Z</updated>
    
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/ZueoXMgCd1c" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><ul><li>对应的课程地址：<a href="https://pythonprogramming.net/machine-learning-clustering-introduction-machine-learning-tutorial/?completed=/support-vector-machine-parameters-machine-learning-tutorial/" target="_blank" rel="external">https://pythonprogramming.net/machine-learning-clustering-introduction-machine-learning-tutorial/?completed=/support-vector-machine-parameters-machine-learning-tutorial/</a></li></ul><p>K-均值算法(K-Means)属于无监督学习、聚类算法。即将无标签的数据集进行分类，并且无训练过程(监督学习的数据集才存在训练一说)等，又可理解为<code>自动分类器</code>。</p><p>本文对于原作者的代码进行了一点修改以符合当今情况。</p><a id="more"></a><h1 id="K-均值算法-K-Means-的实现"><a href="#K-均值算法-K-Means-的实现" class="headerlink" title="K-均值算法(K-Means)的实现"></a>K-均值算法(K-Means)的实现</h1><p>这个算法不算是很难理解，实际上很容易理解，在此就不多废话了。</p><p>简单说说等下代码实现的思想原理以及相关的需要注意的一些东西。关于这个实现的过程中，会想从前一样，使用自制的数据集样本，在其中会选择两个作为最初的中心点(亦可通过洗牌后进行选择)，然后将剩下的数据集与这两个中心点进行计算，通过得出的距离大小使得离得哪个中心点近就归属于那个中心点的分类处(非0即1的分类)，接着会从这些已经各就各位的点中得出平均点。我们会设置一个最大迭代次数以及一个固定公差数(迭代次数在此不够严谨，仅仅起到学习认知的作用)，关于这个公差数是起到一个监督的作用，若是在未得出平均点之前的数据点与中心点之间的公差数值大于固定公差数阈值，就说明优化失败了，之后这次的优化就忽略，直接进行下一次的优化过程(得出最佳平均点就是一次又一次优化的过程，最终目标就是得出最佳的平均点，最具代表性的点)。最终我们会通过数据可视化来进行图表结果的展示。</p><p>以下是实现代码。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"> 自制训练数据集</div><div class="line">X = np.array([[<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">             [<span class="number">1.5</span>,<span class="number">1.8</span>],</div><div class="line">             [<span class="number">5</span>,<span class="number">8</span>],</div><div class="line">             [<span class="number">8</span>,<span class="number">8</span>],</div><div class="line">             [<span class="number">1</span>,<span class="number">0.6</span>],</div><div class="line">             [<span class="number">9</span>,<span class="number">11</span>],</div><div class="line">             [<span class="number">1</span>,<span class="number">3</span>],</div><div class="line">             [<span class="number">8</span>,<span class="number">9</span>],</div><div class="line">             [<span class="number">0</span>,<span class="number">3</span>],</div><div class="line">             [<span class="number">5</span>,<span class="number">4</span>],</div><div class="line">             [<span class="number">6</span>,<span class="number">4</span>]])</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">K_Means</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k=<span class="number">2</span>, tol=<span class="number">0.001</span>, max_iter=<span class="number">300</span>)</span>:</span></div><div class="line">        self.k = k</div><div class="line">        self.tol = tol</div><div class="line">        self.max_iter = max_iter <span class="comment">#最大迭代次数</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, data)</span>:</span></div><div class="line">        </div><div class="line">        self.centroids = &#123;&#125; <span class="comment">#质点圆心</span></div><div class="line">        </div><div class="line">        <span class="comment">#取两个作为中心点</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.k):</div><div class="line">            self.centroids[i] = data[i]</div><div class="line">            </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.max_iter):</div><div class="line">            self.classifications = &#123;&#125;</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.k):</div><div class="line">                self.classifications[i] = []</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> featureset <span class="keyword">in</span> data:</div><div class="line">                <span class="comment">#计算点与点之间的距离,分配数据集进入各自合适的阵营</span></div><div class="line">                distances = [np.linalg.norm(featureset-self.centroids[centroid]) <span class="keyword">for</span> centroid <span class="keyword">in</span> self.centroids]</div><div class="line">                classification = distances.index(min(distances)) <span class="comment">#取最小的距离索引位置点</span></div><div class="line">                self.classifications[classification].append(featureset)</div><div class="line">        </div><div class="line">            prev_centroids = dict(self.centroids) <span class="comment">#保留现在的原数据，之后计算公差要用到</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> classification <span class="keyword">in</span> self.classifications:</div><div class="line">                <span class="comment">#得出平均点</span></div><div class="line">                self.centroids[classification] = np.average(self.classifications[classification], axis=<span class="number">0</span>)</div><div class="line">            </div><div class="line">            optimized = <span class="keyword">True</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> self.centroids:</div><div class="line">                original_centroid = prev_centroids[c]</div><div class="line">                current_centroid = self.centroids[c]</div><div class="line">                <span class="keyword">if</span> np.sum((current_centroid - original_centroid)/original_centroid*<span class="number">100.0</span>) &gt; self.tol:</div><div class="line">                    print(np.sum((current_centroid - original_centroid)/original_centroid*<span class="number">100</span>))</div><div class="line">                    optimized = <span class="keyword">False</span></div><div class="line">                </div><div class="line">            <span class="keyword">if</span> optimized:</div><div class="line">                <span class="keyword">break</span></div><div class="line">                </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="comment">#代入数据集与圆心点进行距离计算，并且进行分类0/1</span></div><div class="line">        distances = [np.linalg.norm(data-self.centroids[centroid]) <span class="keyword">for</span> centroid <span class="keyword">in</span> self.centroids]</div><div class="line">        classification = distances.index(min(distances)) </div><div class="line">        <span class="keyword">return</span> classification</div></pre></td></tr></table></figure><p>下面是训练过程以及图表展示相关的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">plt.style.use(<span class="string">'ggplot'</span>)</div><div class="line"></div><div class="line">colors = [<span class="string">'g'</span>, <span class="string">'r'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'k'</span>] </div><div class="line"></div><div class="line">clf = K_Means()</div><div class="line">clf.fit(X)</div><div class="line"></div><div class="line"><span class="comment"># 可视化中心原点</span></div><div class="line"><span class="keyword">for</span> centroid <span class="keyword">in</span> clf.centroids:</div><div class="line">    plt.scatter(clf.centroids[centroid][<span class="number">0</span>], clf.centroids[centroid][<span class="number">1</span>], marker=<span class="string">'o'</span>, color=<span class="string">'k'</span>, s=<span class="number">150</span>, linewidths=<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">#可视化已分类好的各就各位的点</span></div><div class="line"><span class="keyword">for</span> classification <span class="keyword">in</span> clf.classifications:</div><div class="line">    color = colors[classification]</div><div class="line">    <span class="keyword">for</span> featrueset <span class="keyword">in</span> clf.classifications[classification]:</div><div class="line">        plt.scatter(featrueset[<span class="number">0</span>], featrueset[<span class="number">1</span>], marker=<span class="string">'x'</span>, color=color, s=<span class="number">150</span>, linewidths=<span class="number">5</span>)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">plt.style.use(<span class="string">'ggplot'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 自制训练数据集</span></div><div class="line">X = np.array([[<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">             [<span class="number">1.5</span>,<span class="number">1.8</span>],</div><div class="line">             [<span class="number">5</span>,<span class="number">8</span>],</div><div class="line">             [<span class="number">8</span>,<span class="number">8</span>],</div><div class="line">             [<span class="number">1</span>,<span class="number">0.6</span>],</div><div class="line">             [<span class="number">9</span>,<span class="number">11</span>],</div><div class="line">             [<span class="number">1</span>,<span class="number">3</span>],</div><div class="line">             [<span class="number">8</span>,<span class="number">9</span>],</div><div class="line">             [<span class="number">0</span>,<span class="number">3</span>],</div><div class="line">             [<span class="number">5</span>,<span class="number">4</span>],</div><div class="line">             [<span class="number">6</span>,<span class="number">4</span>]])</div><div class="line"></div><div class="line">colors = [<span class="string">'g'</span>, <span class="string">'r'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'k'</span>] </div><div class="line">print(colors)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">K_Means</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k=<span class="number">2</span>, tol=<span class="number">0.001</span>, max_iter=<span class="number">300</span>)</span>:</span></div><div class="line">        self.k = k</div><div class="line">        self.tol = tol</div><div class="line">        self.max_iter = max_iter <span class="comment">#最大迭代次数</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, data)</span>:</span></div><div class="line">        </div><div class="line">        self.centroids = &#123;&#125; <span class="comment">#质点圆心</span></div><div class="line">        </div><div class="line">        <span class="comment">#取两个作为中心点</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.k):</div><div class="line">            self.centroids[i] = data[i]</div><div class="line">            </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.max_iter):</div><div class="line">            self.classifications = &#123;&#125;</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.k):</div><div class="line">                self.classifications[i] = []</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> featureset <span class="keyword">in</span> data:</div><div class="line">                <span class="comment">#计算点与点之间的距离,分配数据集进入各自合适的阵营</span></div><div class="line">                distances = [np.linalg.norm(featureset-self.centroids[centroid]) <span class="keyword">for</span> centroid <span class="keyword">in</span> self.centroids]</div><div class="line">                classification = distances.index(min(distances)) <span class="comment">#取最小的距离索引位置点</span></div><div class="line">                self.classifications[classification].append(featureset)</div><div class="line">        </div><div class="line">            prev_centroids = dict(self.centroids) <span class="comment">#保留现在的原数据，之后计算公差要用到</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> classification <span class="keyword">in</span> self.classifications:</div><div class="line">                <span class="comment">#得出平均点</span></div><div class="line">                self.centroids[classification] = np.average(self.classifications[classification], axis=<span class="number">0</span>)</div><div class="line">            </div><div class="line">            optimized = <span class="keyword">True</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> self.centroids:</div><div class="line">                original_centroid = prev_centroids[c]</div><div class="line">                current_centroid = self.centroids[c]</div><div class="line">                <span class="keyword">if</span> np.sum((current_centroid - original_centroid)/original_centroid*<span class="number">100.0</span>) &gt; self.tol:</div><div class="line">                    print(np.sum((current_centroid - original_centroid)/original_centroid*<span class="number">100</span>))</div><div class="line">                    optimized = <span class="keyword">False</span></div><div class="line">                </div><div class="line">            <span class="keyword">if</span> optimized:</div><div class="line">                <span class="keyword">break</span></div><div class="line">                </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="comment">#代入数据集与圆心点进行距离计算，并且进行分类0/1</span></div><div class="line">        distances = [np.linalg.norm(data-self.centroids[centroid]) <span class="keyword">for</span> centroid <span class="keyword">in</span> self.centroids]</div><div class="line">        classification = distances.index(min(distances)) </div><div class="line">        <span class="keyword">return</span> classification</div><div class="line">            </div><div class="line"></div><div class="line">clf = K_Means()</div><div class="line">clf.fit(X)</div><div class="line"></div><div class="line"><span class="comment"># 可视化中心原点</span></div><div class="line"><span class="keyword">for</span> centroid <span class="keyword">in</span> clf.centroids:</div><div class="line">    plt.scatter(clf.centroids[centroid][<span class="number">0</span>], clf.centroids[centroid][<span class="number">1</span>], marker=<span class="string">'o'</span>, color=<span class="string">'k'</span>, s=<span class="number">150</span>, linewidths=<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">#可视化已分类好的各就各位的点</span></div><div class="line"><span class="keyword">for</span> classification <span class="keyword">in</span> clf.classifications:</div><div class="line">    color = colors[classification]</div><div class="line">    <span class="keyword">for</span> featrueset <span class="keyword">in</span> clf.classifications[classification]:</div><div class="line">        plt.scatter(featrueset[<span class="number">0</span>], featrueset[<span class="number">1</span>], marker=<span class="string">'x'</span>, color=color, s=<span class="number">150</span>, linewidths=<span class="number">5</span>)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure><p>铺助理解链接：</p><ul><li><p><a href="https://cloud.tencent.com/developer/ask/42899" target="_blank" rel="external">np.mean()和Python NumPy中的np.average()有什么区别？</a></p></li><li><p><a href="https://blog.csdn.net/JohinieLi/article/details/78350999" target="_blank" rel="external">关于numpy mean函数的axis参数</a></p></li><li><p><a href="https://matplotlib.org/2.1.1/api/_as_gen/matplotlib.pyplot.plot.html" target="_blank" rel="external">matplotlib.pyplot.plot</a></p></li><li><p><a href="https://www.cnblogs.com/zsr0401/p/6405677.html" target="_blank" rel="external">Python-Matplotlib 9 颜色和样式</a></p></li></ul><h2 id="展示结果"><a href="#展示结果" class="headerlink" title="展示结果"></a>展示结果</h2><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-30%20%E4%B8%8B%E5%8D%889.32.06.png" alt=""></p><blockquote><p>这样在这里就完成了实现的过程。这个算法真的不怎么难，至少相较于上次的<code>SVM</code>来说。</p></blockquote><h1 id="项目应用"><a href="#项目应用" class="headerlink" title="项目应用"></a>项目应用</h1><h2 id="sklearn的K-Means模型训练"><a href="#sklearn的K-Means模型训练" class="headerlink" title="sklearn的K-Means模型训练"></a>sklearn的K-Means模型训练</h2><p>这次用到的数据是再熟悉不过的<code>titanic</code>数据集，就是预测生死的那个<code>kaggle</code>入门级比赛的那个，哈哈。</p><blockquote><p>数据地址：<a href="https://pythonprogramming.net/static/downloads/machine-learning-data/titanic.xls" target="_blank" rel="external">https://pythonprogramming.net/static/downloads/machine-learning-data/titanic.xls</a></p></blockquote><p>在利用这个数据时，先将数据集进行简单的数据预处理，以及将非数值数据进行简单的数值转换(即将非数值型数值转换为数值型数据)，之后代入现成的<code>sklearn</code>对应的K-Means模型进行训练，最后得出预测准确性。</p><p>下面是代码实现部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">plt.style.use(<span class="string">'ggplot'</span>)</div><div class="line"></div><div class="line">df = pd.read_excel(<span class="string">'titanic.xls'</span>)</div><div class="line"></div><div class="line"><span class="comment">#简单的数据预处理</span></div><div class="line">df.drop([<span class="string">'body'</span>,<span class="string">'name'</span>], <span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line">df.fillna(<span class="number">0</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#处理非数值数据</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_non_numerical_data</span><span class="params">(df)</span>:</span></div><div class="line">    columns = df.columns.values</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns: <span class="comment">#取出各个列名作为遍历的基调</span></div><div class="line">        text_digit_vals = &#123;&#125;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">convert_to_int</span><span class="params">(val)</span>:</span></div><div class="line">            <span class="keyword">return</span> text_digit_vals[val]</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> df[column].dtype != np.int64 <span class="keyword">and</span> df[column].dtype != np.float64:</div><div class="line">            column_contents = df[column].values.tolist() <span class="comment">#转换为列表类型以便下方处理</span></div><div class="line">            unique_elements = set(column_contents) <span class="comment">#去掉重复值</span></div><div class="line">            x = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> unique <span class="keyword">in</span> unique_elements:</div><div class="line">                <span class="keyword">if</span> unique <span class="keyword">not</span> <span class="keyword">in</span> text_digit_vals:</div><div class="line">                    text_digit_vals[unique] = x <span class="comment">#即在此将非数值的数据改为了数值型数据集</span></div><div class="line">                    x+=<span class="number">1</span></div><div class="line">                    </div><div class="line">            df[column] = list(map(convert_to_int, df[column])) <span class="comment">#将列名替代掉上面的unique非数值列名</span></div><div class="line">            </div><div class="line">    <span class="keyword">return</span> df</div><div class="line"></div><div class="line">df = handle_non_numerical_data(df)</div><div class="line"></div><div class="line">df.drop([<span class="string">'sex'</span>,<span class="string">'boat'</span>], <span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line">X = np.array(df.drop([<span class="string">'survived'</span>], <span class="number">1</span>).astype(float))</div><div class="line">X = preprocessing.scale(X) <span class="comment">#进行缩放，标准化</span></div><div class="line">y = np.array(df[<span class="string">'survived'</span>])</div><div class="line"></div><div class="line">clf = KMeans(n_clusters=<span class="number">2</span>) <span class="comment">#得出0/1</span></div><div class="line">clf.fit(X)</div><div class="line"></div><div class="line">correct = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(X)):</div><div class="line">    predict_me = np.array(X[i].astype(float))</div><div class="line">    predict_me = predict_me.reshape(<span class="number">-1</span>, len(predict_me)) <span class="comment">#得出每排的数据集</span></div><div class="line">    prediction = clf.predict(predict_me)</div><div class="line">    <span class="keyword">if</span> prediction[<span class="number">0</span>] == y[i]: </div><div class="line">        correct += <span class="number">1</span></div><div class="line">        </div><div class="line">print(correct/len(X))</div></pre></td></tr></table></figure><p>铺助理解链接：</p><ul><li><p><a href="http://sklearn.apachecn.org/cn/stable/index.html" target="_blank" rel="external">sklearn中文主页</a></p></li><li><p><a href="http://www.runoob.com/python/python-func-map.html" target="_blank" rel="external">Python map() 函数</a></p></li><li><p><a href="https://blog.csdn.net/Dream_angel_Z/article/details/49406573" target="_blank" rel="external">Scikit-learn Preprocessing 预处理</a></p></li><li><p><a href="https://blog.csdn.net/nuaadot/article/details/78304642" target="_blank" rel="external">python进行数据处理——pandas的drop函数</a></p></li></ul><p>下面是得出的结果：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-30%20%E4%B8%8B%E5%8D%8810.04.28.png" alt=""></p><blockquote><p>由于数据简单的预处理了一下，所以准确性在0.3～0.7之间。</p></blockquote><h2 id="sklearn的K-Means模型自制数据集训练"><a href="#sklearn的K-Means模型自制数据集训练" class="headerlink" title="sklearn的K-Means模型自制数据集训练"></a>sklearn的K-Means模型自制数据集训练</h2><p>这是用自制的数据集进行的模型训练，最后将结果进行图表展示，可以更好的理解这个在<code>sklearn</code>模块中的现成<code>K-Means</code>模型的运作情况。</p><p>以下是相关的代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</div><div class="line"></div><div class="line">plt.style.use(<span class="string">'ggplot'</span>)</div><div class="line"></div><div class="line">X = np.array([[<span class="number">1</span>,<span class="number">2</span>],</div><div class="line">             [<span class="number">1.5</span>,<span class="number">1.8</span>],</div><div class="line">             [<span class="number">5</span>,<span class="number">8</span>],</div><div class="line">             [<span class="number">8</span>,<span class="number">8</span>],</div><div class="line">             [<span class="number">1</span>,<span class="number">0.6</span>],</div><div class="line">             [<span class="number">9</span>,<span class="number">11</span>]])</div><div class="line"></div><div class="line">clf = KMeans(n_clusters=<span class="number">2</span>) <span class="comment">#聚点设置，必须小于数据集的长度</span></div><div class="line">clf.fit(X)</div><div class="line"></div><div class="line">centroids = clf.cluster_centers_ <span class="comment">#聚类中心坐标</span></div><div class="line">labels = clf.labels_ <span class="comment">#标签</span></div><div class="line"></div><div class="line">colors = [<span class="string">'g.'</span>,<span class="string">'r.'</span>,<span class="string">'c.'</span>,<span class="string">'b.'</span>] <span class="comment">#点加颜色配合</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(X)):</div><div class="line">    plt.plot(X[i][<span class="number">0</span>], X[i][<span class="number">1</span>], colors[labels[i]], markersize = <span class="number">25</span>)</div><div class="line"></div><div class="line">plt.scatter(centroids[:,<span class="number">0</span>], centroids[:,<span class="number">1</span>], marker=<span class="string">'x'</span>, s=<span class="number">150</span>, linewidths=<span class="number">5</span>) </div><div class="line">plt.show()</div></pre></td></tr></table></figure><p>结果图表展示：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-30%20%E4%B8%8B%E5%8D%889.51.36.png" alt=""></p><blockquote><p>还是不错的，有助于理解学习。</p></blockquote><h2 id="用手动实现的K-Means算法训练数据集"><a href="#用手动实现的K-Means算法训练数据集" class="headerlink" title="用手动实现的K-Means算法训练数据集"></a>用手动实现的K-Means算法训练数据集</h2><p>在此将要使用上面实现的K-Means算法来训练上面的<code>titanic</code>数据集，将会输出预测准确性。</p><p>下面是实现的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">plt.style.use(<span class="string">'ggplot'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">K_Means</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k=<span class="number">2</span>, tol=<span class="number">0.001</span>, max_iter=<span class="number">300</span>)</span>:</span></div><div class="line">        self.k = k</div><div class="line">        self.tol = tol</div><div class="line">        self.max_iter = max_iter <span class="comment">#最大迭代次数</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, data)</span>:</span></div><div class="line">        </div><div class="line">        self.centroids = &#123;&#125; <span class="comment">#质点圆心</span></div><div class="line">        </div><div class="line">        <span class="comment">#取两个作为中心点</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.k):</div><div class="line">            self.centroids[i] = data[i]</div><div class="line">            </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.max_iter):</div><div class="line">            self.classifications = &#123;&#125;</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.k):</div><div class="line">                self.classifications[i] = []</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> featureset <span class="keyword">in</span> data:</div><div class="line">                <span class="comment">#计算点与点之间的距离,分配数据集进入各自合适的阵营</span></div><div class="line">                distances = [np.linalg.norm(featureset-self.centroids[centroid]) <span class="keyword">for</span> centroid <span class="keyword">in</span> self.centroids]</div><div class="line">                classification = distances.index(min(distances)) <span class="comment">#取最小的距离索引位置点</span></div><div class="line">                self.classifications[classification].append(featureset)</div><div class="line">        </div><div class="line">            prev_centroids = dict(self.centroids) <span class="comment">#保留现在的原数据，之后计算公差要用到</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> classification <span class="keyword">in</span> self.classifications:</div><div class="line">                <span class="comment">#得出平均点</span></div><div class="line">                self.centroids[classification] = np.average(self.classifications[classification], axis=<span class="number">0</span>)</div><div class="line">            </div><div class="line">            optimized = <span class="keyword">True</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> self.centroids:</div><div class="line">                original_centroid = prev_centroids[c]</div><div class="line">                current_centroid = self.centroids[c]</div><div class="line">                <span class="keyword">if</span> np.sum((current_centroid - original_centroid)/original_centroid*<span class="number">100.0</span>) &gt; self.tol:</div><div class="line">                    print(np.sum((current_centroid - original_centroid)/original_centroid*<span class="number">100</span>))</div><div class="line">                    optimized = <span class="keyword">False</span></div><div class="line">                </div><div class="line">            <span class="keyword">if</span> optimized:</div><div class="line">                <span class="keyword">break</span></div><div class="line">                </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="comment">#代入数据集与圆心点进行距离计算，并且进行分类0/1</span></div><div class="line">        distances = [np.linalg.norm(data-self.centroids[centroid]) <span class="keyword">for</span> centroid <span class="keyword">in</span> self.centroids]</div><div class="line">        classification = distances.index(min(distances)) </div><div class="line">        <span class="keyword">return</span> classification</div><div class="line"></div><div class="line">df = pd.read_excel(<span class="string">'titanic.xls'</span>)</div><div class="line"></div><div class="line"><span class="comment">#简单的数据预处理</span></div><div class="line">df.drop([<span class="string">'body'</span>,<span class="string">'name'</span>], <span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line">df.fillna(<span class="number">0</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#处理非数值数据</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_non_numerical_data</span><span class="params">(df)</span>:</span></div><div class="line">    columns = df.columns.values</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns: <span class="comment">#取出各个列名作为遍历的基调</span></div><div class="line">        text_digit_vals = &#123;&#125;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">convert_to_int</span><span class="params">(val)</span>:</span></div><div class="line">            <span class="keyword">return</span> text_digit_vals[val]</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> df[column].dtype != np.int64 <span class="keyword">and</span> df[column].dtype != np.float64:</div><div class="line">            column_contents = df[column].values.tolist() <span class="comment">#转换为列表类型以便下方处理</span></div><div class="line">            unique_elements = set(column_contents) <span class="comment">#去掉重复值</span></div><div class="line">            x = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> unique <span class="keyword">in</span> unique_elements:</div><div class="line">                <span class="keyword">if</span> unique <span class="keyword">not</span> <span class="keyword">in</span> text_digit_vals:</div><div class="line">                    text_digit_vals[unique] = x <span class="comment">#即在此将非数值的数据改为了数值型数据集</span></div><div class="line">                    x+=<span class="number">1</span></div><div class="line">                    </div><div class="line">            df[column] = list(map(convert_to_int, df[column])) <span class="comment">#将列名替代掉上面的unique非数值列名</span></div><div class="line">            </div><div class="line">    <span class="keyword">return</span> df</div><div class="line"></div><div class="line">df = handle_non_numerical_data(df)</div><div class="line"></div><div class="line">df.drop([<span class="string">'sex'</span>,<span class="string">'boat'</span>], <span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line">X = np.array(df.drop([<span class="string">'survived'</span>], <span class="number">1</span>).astype(float))</div><div class="line">X = preprocessing.scale(X) <span class="comment">#进行缩放，标准化</span></div><div class="line">y = np.array(df[<span class="string">'survived'</span>])</div><div class="line"></div><div class="line">clf = K_Means()</div><div class="line">clf.fit(X)</div><div class="line"></div><div class="line">correct = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(X)):</div><div class="line">    predic_me = np.array(X[i].astype(float))</div><div class="line">    predic_me = predic_me.reshape(<span class="number">-1</span>, len(predic_me))</div><div class="line">    prediction = clf.predict(predic_me)</div><div class="line">    <span class="keyword">if</span> prediction == y[i]:</div><div class="line">        correct += <span class="number">1</span></div><div class="line"></div><div class="line">print(correct/len(X))</div></pre></td></tr></table></figure><p>只是上面代码的连接罢了，代码本身也不难理解。</p><p>下面是输出的预测准确性：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-30%20%E4%B8%8B%E5%8D%889.31.38.png" alt=""></p><blockquote><p>额…效果不咋地…</p></blockquote><p>这样一来这篇文章可以接近尾声了…不懂的地方可以去对应的课程去看看，还有的是，多看书，利用好搜索引擎。</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/ZueoXMgCd1c&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;对应的课程地址：&lt;a href=&quot;https://pythonprogramming.net/machine-learning-clustering-introduction-machine-learning-tutorial/?completed=/support-vector-machine-parameters-machine-learning-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pythonprogramming.net/machine-learning-clustering-introduction-machine-learning-tutorial/?completed=/support-vector-machine-parameters-machine-learning-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;K-均值算法(K-Means)属于无监督学习、聚类算法。即将无标签的数据集进行分类，并且无训练过程(监督学习的数据集才存在训练一说)等，又可理解为&lt;code&gt;自动分类器&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;本文对于原作者的代码进行了一点修改以符合当今情况。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://liujunjie11.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/categories/Python/"/>
    
    
      <category term="机器学习" scheme="https://liujunjie11.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>关于在Mac下的python文字转语音库pyttsx3</title>
    <link href="https://liujunjie11.github.io/2018/10/23/%E5%85%B3%E4%BA%8E%E5%9C%A8Mac%E4%B8%8B%E7%9A%84python%E6%96%87%E5%AD%97%E8%BD%AC%E8%AF%AD%E9%9F%B3%E5%BA%93pyttsx3/"/>
    <id>https://liujunjie11.github.io/2018/10/23/关于在Mac下的python文字转语音库pyttsx3/</id>
    <published>2018-10-23T13:29:17.000Z</published>
    <updated>2019-01-02T06:49:44.883Z</updated>
    
    <content type="html"><![CDATA[<p>最近写python机器学习教程有点累了..就玩一些其他的东西，就包括了这个文字转语音的python3库<em>pyttsx3</em>。</p><p>其中也遇到了一些问题，在此记录一下。</p><a id="more"></a><h1 id="关于下载运行的问题"><a href="#关于下载运行的问题" class="headerlink" title="关于下载运行的问题"></a>关于下载运行的问题</h1><p>在使用命令行<code>pip install pyttsx3</code>下载之后，我在终端写下了如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyttsx3</div><div class="line">engine = pyttsx3.init()</div></pre></td></tr></table></figure><p>结果出现了<code>No module named &#39;Foundation&#39;</code>的错误问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>下载模块<code>pyobjc</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyobjc</div></pre></td></tr></table></figure><p>估计是跟调用系统一些模块有关，毕竟这个库是跟macOS关系还是挺深的…自行了解，没想到这个库可以调用Objective-C的库来进行macOS上的应用程序开发…</p><p>以下是WiKi的解释：</p><blockquote><p>PyObjC是Python和Objective-C编程语言之间的双向桥梁，允许程序员使用Python扩展现有的Objective-C库，例如Apple的Cocoa框架。 PyObjC用于在纯Python中开发macOS应用程序。 对GNUstep的支持也很有限，GNUstep是Cocoa的开源，跨平台实现。</p></blockquote><p>下载完成这个库之后，再运行上面的代码就没有出错了。</p><ul><li>参考链接：<a href="https://blog.csdn.net/noway5456/article/details/78905275" target="_blank" rel="external">https://blog.csdn.net/noway5456/article/details/78905275</a></li></ul><h1 id="关于pyttsx3读中文字的问题"><a href="#关于pyttsx3读中文字的问题" class="headerlink" title="关于pyttsx3读中文字的问题"></a>关于pyttsx3读中文字的问题</h1><p>这个问题其实是跟系统的语音设置相关的，看下图吧。</p><p>我在系统默认的语音类型(在图中两者之间切换)：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-23%20%E4%B8%8B%E5%8D%889.24.59.png" alt=""></p><p>然后又用代码查看<em>pyttsx3</em>的对应默认声音：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-23%20%E4%B8%8B%E5%8D%889.24.30.png" alt=""></p><p>发现了其实pyttsx3的语音是根据本地语音相关的，这又一步说明为何要安装<code>pyobjc</code>这个铺助模块的意义。</p><p>在读取英文或中文时，设置一下本地的默认语音即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写python机器学习教程有点累了..就玩一些其他的东西，就包括了这个文字转语音的python3库&lt;em&gt;pyttsx3&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;其中也遇到了一些问题，在此记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://liujunjie11.github.io/tags/Python/"/>
    
      <category term="问题记录笔记" scheme="https://liujunjie11.github.io/tags/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Pyttsx3" scheme="https://liujunjie11.github.io/tags/Pyttsx3/"/>
    
  </entry>
  
  <entry>
    <title>python机器学习系列：支持向量机(SVM)的应用以及实现</title>
    <link href="https://liujunjie11.github.io/2018/10/23/python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%9A%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA-SVM-%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>https://liujunjie11.github.io/2018/10/23/python机器学习系列：支持向量机-SVM-的应用以及实现/</id>
    <published>2018-10-23T01:44:10.000Z</published>
    <updated>2019-01-02T06:49:54.496Z</updated>
    
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/HHUqhVzctQE" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><p>我记录下的这些东西，如果是有哪些不懂得地方，我强烈建议参考我在<a href="http://liujunworld.com/2018/09/16/%E5%88%9D%E5%AD%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/" target="_blank" rel="external">这里的书籍</a>。另外还有<a href="https://github.com/apachecn/AiLearning" target="_blank" rel="external">《机器学习实战》</a>，<a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="external">《深度学习》</a>这本花书等，利用好搜索引擎也是一大好利器。</p><p>关于这篇文章，我还是和以前记录相关的机器学习知识之类篇章一样的风格。</p><p>不懂可进入<a href="https://pythonprogramming.net/support-vector-machine-intro-machine-learning-tutorial/?completed=/final-thoughts-knn-machine-learning-tutorial/" target="_blank" rel="external">这里的对应的教程</a>，看不懂可借助翻译插件/软件(实际上借助这些看起来轻松多了，看英文头疼的厉害，如果是对于初学者)。</p><a id="more"></a><h1 id="SVM的实现"><a href="#SVM的实现" class="headerlink" title="SVM的实现"></a>SVM的实现</h1><p>SVM算法是有一点难理解的，但是坚持看一些文章和上面说的那些书籍之后就会发现其实也就那么回事。</p><p>关于SVM的实现(仅作通俗说明，以二维为例)：由于这个算法是根据支持向量得出两个函数，而我们取的是这两条线性函数的距离的中间值，从而得到了决策边界函数，这样任务也就完成了。但是由于参数的不同，取这个决策边界是可以有多个甚至是无穷个的，那么取得最优的参数是可以利用梯度下降算法的(符合凸二次规划)。得到了最优的参数就可以得出决策边界的函数了。</p><blockquote><p>涉及到不少的数学知识…我想我大概是说对了吧，哈哈…</p></blockquote><p>为了实现这个算法，必须要提前了解这算法相关的知识，不然真的是寸步难行啊。</p><p>下面是铺助理解链接，不懂还要翻书看吴恩达老师的教程：</p><ul><li><p><a href="https://zh.wikipedia.org/wiki/二次规划" target="_blank" rel="external">二次规划</a></p></li><li><p><a href="http://www.sohu.com/a/206572358_160850" target="_blank" rel="external">干货 | 从超平面到SVM（一）</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/26514613" target="_blank" rel="external">浅谈最优化问题的KKT条件</a></p></li></ul><p>以下就是完整的实现代码了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Support_Vector_Machine</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, visualization=True)</span>:</span></div><div class="line">        self.visualization = visualization</div><div class="line">        self.colors = &#123;<span class="number">1</span>:<span class="string">'r'</span>, <span class="number">-1</span>:<span class="string">'b'</span>&#125;</div><div class="line">        <span class="keyword">if</span> self.visualization:</div><div class="line">            self.fig = plt.figure()</div><div class="line">            self.ax = self.fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, data)</span>:</span></div><div class="line">        self.data = data</div><div class="line">        opt_dict = &#123;&#125;</div><div class="line">        </div><div class="line">        transforms = [[<span class="number">1</span>,<span class="number">1</span>],</div><div class="line">                      [<span class="number">-1</span>,<span class="number">1</span>],</div><div class="line">                      [<span class="number">-1</span>,<span class="number">-1</span>],</div><div class="line">                      [<span class="number">1</span>,<span class="number">-1</span>]]</div><div class="line">        </div><div class="line">        all_data = []</div><div class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> self.data:</div><div class="line">            <span class="keyword">for</span> featureset <span class="keyword">in</span> self.data[yi]:</div><div class="line">                <span class="keyword">for</span> feature <span class="keyword">in</span> featureset:</div><div class="line">                    all_data.append(feature)</div><div class="line">        </div><div class="line">        self.max_feature_value = max(all_data)</div><div class="line">        self.min_feature_value = min(all_data)</div><div class="line">        all_data = <span class="keyword">None</span></div><div class="line">        </div><div class="line">        <span class="comment">#指定梯度下降的步子大小</span></div><div class="line">        step_sizes = [self.max_feature_value * <span class="number">0.1</span>,</div><div class="line">                      self.max_feature_value * <span class="number">0.01</span>,</div><div class="line">                      self.max_feature_value * <span class="number">0.001</span>,]</div><div class="line">        </div><div class="line">        <span class="comment">#b的假设大小，最为重要的是参数w，而不是参数b </span></div><div class="line">        b_range_multiple = <span class="number">2</span></div><div class="line">        b_multiple =<span class="number">5</span></div><div class="line">        latest_optimum = self.max_feature_value*<span class="number">10</span> <span class="comment">#最大的步子</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> step_sizes:</div><div class="line">            w = np.array([latest_optimum, latest_optimum])</div><div class="line">            optimized = <span class="keyword">False</span></div><div class="line">            <span class="keyword">while</span> <span class="keyword">not</span> optimized:</div><div class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> np.arange(<span class="number">-1</span>*(self.max_feature_value * b_range_multiple),</div><div class="line">                                   self.max_feature_value * b_range_multiple,</div><div class="line">                                   step * b_multiple):</div><div class="line">                    <span class="keyword">for</span> transformation <span class="keyword">in</span> transforms:</div><div class="line">                        w_t = w*transformation</div><div class="line">                        found_option = <span class="keyword">True</span></div><div class="line">                        </div><div class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> self.data:</div><div class="line">                            <span class="keyword">for</span> xi <span class="keyword">in</span> self.data[i]:</div><div class="line">                                yi = i</div><div class="line">                                <span class="keyword">if</span> <span class="keyword">not</span> yi*(np.dot(w_t, xi)+b) &gt;= <span class="number">1</span>:</div><div class="line">                                    found_option = <span class="keyword">False</span></div><div class="line">                        </div><div class="line">                        <span class="comment">#如果约束优化条件成立</span></div><div class="line">                        <span class="keyword">if</span> found_option:</div><div class="line">                            opt_dict[np.linalg.norm(w_t)] = [w_t, b]</div><div class="line">                </div><div class="line">                <span class="comment">#若是值为负数则停止进一步的优化步子</span></div><div class="line">                <span class="keyword">if</span> w[<span class="number">0</span>] &lt;<span class="number">0</span>:</div><div class="line">                    optimized = <span class="keyword">True</span></div><div class="line">                    print(<span class="string">'Optimized a step.'</span>)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    w = w - step</div><div class="line">            norms = sorted([n <span class="keyword">for</span> n <span class="keyword">in</span> opt_dict])</div><div class="line">            </div><div class="line">            opt_choice = opt_dict[norms[<span class="number">0</span>]]</div><div class="line">            self.w = opt_choice[<span class="number">0</span>]</div><div class="line">            self.b = opt_choice[<span class="number">1</span>]</div><div class="line">            latest_optimum = opt_choice[<span class="number">0</span>][<span class="number">0</span>]+step*<span class="number">2</span></div><div class="line">            </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.data:</div><div class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> self.data[i]:</div><div class="line">                yi = i</div><div class="line">                print(xi, <span class="string">':'</span>, yi*(np.dot(self.w, xi)+self.b))</div><div class="line">            </div><div class="line">    <span class="comment">#预测部分</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, features)</span>:</span></div><div class="line">        classification = np.sign(np.dot(np.array(features), self.w)+self.b)</div><div class="line">        <span class="keyword">if</span> classification != <span class="number">0</span> <span class="keyword">and</span> self.visualization:</div><div class="line">            self.ax.scatter(features[<span class="number">0</span>], features[<span class="number">1</span>], s=<span class="number">200</span>, marker=<span class="string">'*'</span>, c=self.colors[classification])</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> classification</div><div class="line">    </div><div class="line">    <span class="comment">#可视化部分</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visualize</span><span class="params">(self)</span>:</span></div><div class="line">        [[self.ax.scatter(x[<span class="number">0</span>], x[<span class="number">1</span>], s=<span class="number">100</span>, color=self.colors[i]) <span class="keyword">for</span> x <span class="keyword">in</span> data_dict[i]] <span class="keyword">for</span> i <span class="keyword">in</span> data_dict]</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">hyperplane</span><span class="params">(x, w, b, v)</span>:</span></div><div class="line">            <span class="keyword">return</span> (-w[<span class="number">0</span>]*x-b+v) / w[<span class="number">1</span>]</div><div class="line">        </div><div class="line">        datarange = (self.min_feature_value*<span class="number">0.9</span>, self.max_feature_value*<span class="number">1.1</span>)</div><div class="line">        hyp_x_min = datarange[<span class="number">0</span>]</div><div class="line">        hyp_x_max = datarange[<span class="number">1</span>]</div><div class="line">        </div><div class="line">        psv1 = hyperplane(hyp_x_min, self.w, self.b, <span class="number">1</span>)</div><div class="line">        psv2 = hyperplane(hyp_x_max, self.w, self.b, <span class="number">1</span>)</div><div class="line">        self.ax.plot([hyp_x_min, hyp_x_max], [psv1,psv2], <span class="string">'k'</span>)</div><div class="line">        </div><div class="line">        nsv1 = hyperplane(hyp_x_min, self.w, self.b, <span class="number">-1</span>)</div><div class="line">        nsv2 = hyperplane(hyp_x_max, self.w, self.b, <span class="number">-1</span>)</div><div class="line">        self.ax.plot([hyp_x_min, hyp_x_max], [nsv1,nsv2], <span class="string">'k'</span>)</div><div class="line">        </div><div class="line">        db1 = hyperplane(hyp_x_min, self.w, self.b, <span class="number">0</span>)</div><div class="line">        db2 = hyperplane(hyp_x_max, self.w, self.b, <span class="number">0</span>)</div><div class="line">        self.ax.plot([hyp_x_min, hyp_x_max], [db1, db2], <span class="string">'y--'</span>)</div><div class="line">        </div><div class="line">        plt.show()</div></pre></td></tr></table></figure><p>铺助理解链接：</p><ul><li><p><a href="https://blog.csdn.net/qianwenhong/article/details/41414809" target="_blank" rel="external">Python 中的range(),arange()函数</a></p></li><li><p><a href="https://www.cnblogs.com/hezhiyao/p/8649231.html" target="_blank" rel="external">python中np.multiply（）、np.dot（）和星号（*）三种乘法运算的区别（转）</a></p></li></ul><h2 id="简要数据集预测以及结果可视化"><a href="#简要数据集预测以及结果可视化" class="headerlink" title="简要数据集预测以及结果可视化"></a>简要数据集预测以及结果可视化</h2><p>以下是完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">plt.style.use(<span class="string">'ggplot'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Support_Vector_Machine</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, visualization=True)</span>:</span></div><div class="line">        self.visualization = visualization</div><div class="line">        self.colors = &#123;<span class="number">1</span>:<span class="string">'r'</span>, <span class="number">-1</span>:<span class="string">'b'</span>&#125;</div><div class="line">        <span class="keyword">if</span> self.visualization:</div><div class="line">            self.fig = plt.figure()</div><div class="line">            self.ax = self.fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, data)</span>:</span></div><div class="line">        self.data = data</div><div class="line">        opt_dict = &#123;&#125;</div><div class="line">        </div><div class="line">        transforms = [[<span class="number">1</span>,<span class="number">1</span>],</div><div class="line">                      [<span class="number">-1</span>,<span class="number">1</span>],</div><div class="line">                      [<span class="number">-1</span>,<span class="number">-1</span>],</div><div class="line">                      [<span class="number">1</span>,<span class="number">-1</span>]]</div><div class="line">        </div><div class="line">        all_data = []</div><div class="line">        <span class="keyword">for</span> yi <span class="keyword">in</span> self.data:</div><div class="line">            <span class="keyword">for</span> featureset <span class="keyword">in</span> self.data[yi]:</div><div class="line">                <span class="keyword">for</span> feature <span class="keyword">in</span> featureset:</div><div class="line">                    all_data.append(feature)</div><div class="line">        </div><div class="line">        self.max_feature_value = max(all_data)</div><div class="line">        self.min_feature_value = min(all_data)</div><div class="line">        all_data = <span class="keyword">None</span></div><div class="line">        </div><div class="line">        <span class="comment">#指定梯度下降的步子大小</span></div><div class="line">        step_sizes = [self.max_feature_value * <span class="number">0.1</span>,</div><div class="line">                      self.max_feature_value * <span class="number">0.01</span>,</div><div class="line">                      self.max_feature_value * <span class="number">0.001</span>,]</div><div class="line">        </div><div class="line">        <span class="comment">#b的假设大小，最为重要的是参数w，而不是参数b </span></div><div class="line">        b_range_multiple = <span class="number">2</span></div><div class="line">        b_multiple =<span class="number">5</span></div><div class="line">        latest_optimum = self.max_feature_value*<span class="number">10</span> <span class="comment">#最大的步子</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> step_sizes:</div><div class="line">            w = np.array([latest_optimum, latest_optimum])</div><div class="line">            optimized = <span class="keyword">False</span></div><div class="line">            <span class="keyword">while</span> <span class="keyword">not</span> optimized:</div><div class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> np.arange(<span class="number">-1</span>*(self.max_feature_value * b_range_multiple),</div><div class="line">                                   self.max_feature_value * b_range_multiple,</div><div class="line">                                   step * b_multiple):</div><div class="line">                    <span class="keyword">for</span> transformation <span class="keyword">in</span> transforms:</div><div class="line">                        w_t = w*transformation</div><div class="line">                        found_option = <span class="keyword">True</span></div><div class="line">                        </div><div class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> self.data:</div><div class="line">                            <span class="keyword">for</span> xi <span class="keyword">in</span> self.data[i]:</div><div class="line">                                yi = i</div><div class="line">                                <span class="keyword">if</span> <span class="keyword">not</span> yi*(np.dot(w_t, xi)+b) &gt;= <span class="number">1</span>:</div><div class="line">                                    found_option = <span class="keyword">False</span></div><div class="line">                        </div><div class="line">                        <span class="comment">#如果约束优化条件成立</span></div><div class="line">                        <span class="keyword">if</span> found_option:</div><div class="line">                            opt_dict[np.linalg.norm(w_t)] = [w_t, b]</div><div class="line">                </div><div class="line">                <span class="comment">#若是值为负数则停止进一步的优化步子</span></div><div class="line">                <span class="keyword">if</span> w[<span class="number">0</span>] &lt;<span class="number">0</span>:</div><div class="line">                    optimized = <span class="keyword">True</span></div><div class="line">                    print(<span class="string">'Optimized a step.'</span>)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    w = w - step</div><div class="line">            norms = sorted([n <span class="keyword">for</span> n <span class="keyword">in</span> opt_dict])</div><div class="line">            </div><div class="line">            opt_choice = opt_dict[norms[<span class="number">0</span>]]</div><div class="line">            self.w = opt_choice[<span class="number">0</span>]</div><div class="line">            self.b = opt_choice[<span class="number">1</span>]</div><div class="line">            latest_optimum = opt_choice[<span class="number">0</span>][<span class="number">0</span>]+step*<span class="number">2</span></div><div class="line">            </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.data:</div><div class="line">            <span class="keyword">for</span> xi <span class="keyword">in</span> self.data[i]:</div><div class="line">                yi = i</div><div class="line">                print(xi, <span class="string">':'</span>, yi*(np.dot(self.w, xi)+self.b))</div><div class="line">            </div><div class="line">    <span class="comment">#预测部分</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, features)</span>:</span></div><div class="line">        classification = np.sign(np.dot(np.array(features), self.w)+self.b)</div><div class="line">        <span class="keyword">if</span> classification != <span class="number">0</span> <span class="keyword">and</span> self.visualization:</div><div class="line">            self.ax.scatter(features[<span class="number">0</span>], features[<span class="number">1</span>], s=<span class="number">200</span>, marker=<span class="string">'*'</span>, c=self.colors[classification])</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> classification</div><div class="line">    </div><div class="line">    <span class="comment">#可视化部分</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visualize</span><span class="params">(self)</span>:</span></div><div class="line">        [[self.ax.scatter(x[<span class="number">0</span>], x[<span class="number">1</span>], s=<span class="number">100</span>, color=self.colors[i]) <span class="keyword">for</span> x <span class="keyword">in</span> data_dict[i]] <span class="keyword">for</span> i <span class="keyword">in</span> data_dict]</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">hyperplane</span><span class="params">(x, w, b, v)</span>:</span></div><div class="line">            <span class="keyword">return</span> (-w[<span class="number">0</span>]*x-b+v) / w[<span class="number">1</span>]</div><div class="line">        </div><div class="line">        datarange = (self.min_feature_value*<span class="number">0.9</span>, self.max_feature_value*<span class="number">1.1</span>)</div><div class="line">        hyp_x_min = datarange[<span class="number">0</span>]</div><div class="line">        hyp_x_max = datarange[<span class="number">1</span>]</div><div class="line">        </div><div class="line">        psv1 = hyperplane(hyp_x_min, self.w, self.b, <span class="number">1</span>)</div><div class="line">        psv2 = hyperplane(hyp_x_max, self.w, self.b, <span class="number">1</span>)</div><div class="line">        self.ax.plot([hyp_x_min, hyp_x_max], [psv1,psv2], <span class="string">'k'</span>)</div><div class="line">        </div><div class="line">        nsv1 = hyperplane(hyp_x_min, self.w, self.b, <span class="number">-1</span>)</div><div class="line">        nsv2 = hyperplane(hyp_x_max, self.w, self.b, <span class="number">-1</span>)</div><div class="line">        self.ax.plot([hyp_x_min, hyp_x_max], [nsv1,nsv2], <span class="string">'k'</span>)</div><div class="line">        </div><div class="line">        db1 = hyperplane(hyp_x_min, self.w, self.b, <span class="number">0</span>)</div><div class="line">        db2 = hyperplane(hyp_x_max, self.w, self.b, <span class="number">0</span>)</div><div class="line">        self.ax.plot([hyp_x_min, hyp_x_max], [db1, db2], <span class="string">'y--'</span>)</div><div class="line">        </div><div class="line">        plt.show()</div><div class="line"></div><div class="line"><span class="comment">#训练数据集</span></div><div class="line">data_dict = &#123;<span class="number">-1</span>:np.array([[<span class="number">1</span>,<span class="number">7</span>],</div><div class="line">                          [<span class="number">2</span>,<span class="number">8</span>],</div><div class="line">                          [<span class="number">3</span>,<span class="number">8</span>],]),</div><div class="line">             </div><div class="line">             <span class="number">1</span>:np.array([[<span class="number">5</span>,<span class="number">1</span>],</div><div class="line">                         [<span class="number">6</span>,<span class="number">-1</span>],</div><div class="line">                         [<span class="number">7</span>,<span class="number">3</span>],])&#125;</div><div class="line"></div><div class="line">svm = Support_Vector_Machine()</div><div class="line">svm.fit(data=data_dict)</div><div class="line"></div><div class="line"><span class="comment">#预测数据集</span></div><div class="line">predict_us = [[<span class="number">0</span>,<span class="number">10</span>],</div><div class="line">              [<span class="number">1</span>,<span class="number">3</span>],</div><div class="line">              [<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">              [<span class="number">3</span>,<span class="number">5</span>],</div><div class="line">              [<span class="number">5</span>,<span class="number">5</span>],</div><div class="line">              [<span class="number">5</span>,<span class="number">6</span>],</div><div class="line">              [<span class="number">6</span>,<span class="number">-5</span>],</div><div class="line">              [<span class="number">5</span>,<span class="number">8</span>]]</div><div class="line"></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> predict_us:</div><div class="line">    svm.predict(p)</div><div class="line"></div><div class="line">svm.visualize()</div></pre></td></tr></table></figure><p>这样一来就完成了算法的实现了，可视化的图表如下：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-26%20%E4%B8%8B%E5%8D%887.49.15.png" alt=""></p><blockquote><p>实际上这只是算法的简单实现，许多的细节并没有照顾到。而且这个算法的基础必须要牢固，不然很难理解上面的代码。</p></blockquote><h1 id="SVM进阶"><a href="#SVM进阶" class="headerlink" title="SVM进阶"></a>SVM进阶</h1><p>相关到<code>核函数</code>，<code>硬间隔最大化</code>，<code>软间隔最大化</code>等知识，其中的<code>核函数</code>，<code>软间隔最大化</code>针对于非线性数据(即线性不可分)，<code>硬间隔最大化</code>针对于线性可分数据类型，这需要自行去了解、理解。在上面说的书籍中可以找到相关的知识。</p><p>以下是关于<code>核函数</code>，<code>软间隔最大化</code>的针对于非线性数据python代码的实现，可以理解为SVM的底层实现的一部分，可以更好的理解内部实现的于原理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Mathieu Blondel, September 2010</span></div><div class="line"><span class="comment"># License: BSD 3 clause</span></div><div class="line"><span class="comment"># http://www.mblondel.org/journal/2010/09/19/support-vector-machines-in-python/</span></div><div class="line"></div><div class="line"><span class="comment"># visualizing what translating to another dimension does</span></div><div class="line"><span class="comment"># and bringing back to 2D:</span></div><div class="line"><span class="comment"># https://www.youtube.com/watch?v=3liCbRZPrZA</span></div><div class="line"></div><div class="line"><span class="comment"># Docs: http://cvxopt.org/userguide/coneprog.html#quadratic-programming</span></div><div class="line"><span class="comment"># Docs qp example: http://cvxopt.org/examples/tutorial/qp.html</span></div><div class="line"></div><div class="line"><span class="comment"># Nice tutorial:</span></div><div class="line"><span class="comment"># https://courses.csail.mit.edu/6.867/wiki/images/a/a7/Qp-cvxopt.pdf</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> linalg</div><div class="line"><span class="keyword">import</span> cvxopt</div><div class="line"><span class="keyword">import</span> cvxopt.solvers</div><div class="line">             </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_kernel</span><span class="params">(x1, x2)</span>:</span></div><div class="line">    <span class="keyword">return</span> np.dot(x1, x2)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">polynomial_kernel</span><span class="params">(x, y, p=<span class="number">3</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> + np.dot(x, y)) ** p</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_kernel</span><span class="params">(x, y, sigma=<span class="number">5.0</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> np.exp(-linalg.norm(x-y)**<span class="number">2</span> / (<span class="number">2</span> * (sigma ** <span class="number">2</span>)))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SVM</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kernel=linear_kernel, C=None)</span>:</span></div><div class="line">        self.kernel = kernel</div><div class="line">        self.C = C</div><div class="line">        <span class="keyword">if</span> self.C <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: self.C = float(self.C)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y)</span>:</span></div><div class="line">        n_samples, n_features = X.shape</div><div class="line"></div><div class="line">        <span class="comment"># Gram matrix</span></div><div class="line">        K = np.zeros((n_samples, n_samples))</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n_samples):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n_samples):</div><div class="line">                K[i,j] = self.kernel(X[i], X[j])</div><div class="line"></div><div class="line">        P = cvxopt.matrix(np.outer(y,y) * K)</div><div class="line">        q = cvxopt.matrix(np.ones(n_samples) * <span class="number">-1</span>)</div><div class="line">        A = cvxopt.matrix(y, (<span class="number">1</span>,n_samples))</div><div class="line">        b = cvxopt.matrix(<span class="number">0.0</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.C <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            G = cvxopt.matrix(np.diag(np.ones(n_samples) * <span class="number">-1</span>))</div><div class="line">            h = cvxopt.matrix(np.zeros(n_samples))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            tmp1 = np.diag(np.ones(n_samples) * <span class="number">-1</span>)</div><div class="line">            tmp2 = np.identity(n_samples)</div><div class="line">            G = cvxopt.matrix(np.vstack((tmp1, tmp2)))</div><div class="line">            tmp1 = np.zeros(n_samples)</div><div class="line">            tmp2 = np.ones(n_samples) * self.C</div><div class="line">            h = cvxopt.matrix(np.hstack((tmp1, tmp2)))</div><div class="line"></div><div class="line">        <span class="comment"># solve QP problem</span></div><div class="line">        solution = cvxopt.solvers.qp(P, q, G, h, A, b)</div><div class="line"></div><div class="line">        <span class="comment"># Lagrange multipliers</span></div><div class="line">        a = np.ravel(solution[<span class="string">'x'</span>])</div><div class="line"></div><div class="line">        <span class="comment"># Support vectors have non zero lagrange multipliers</span></div><div class="line">        sv = a &gt; <span class="number">1e-5</span></div><div class="line">        ind = np.arange(len(a))[sv]</div><div class="line">        self.a = a[sv]</div><div class="line">        self.sv = X[sv]</div><div class="line">        self.sv_y = y[sv]</div><div class="line">        print(<span class="string">"%d support vectors out of %d points"</span> % (len(self.a), n_samples))</div><div class="line"></div><div class="line">        <span class="comment"># Intercept</span></div><div class="line">        self.b = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(len(self.a)):</div><div class="line">            self.b += self.sv_y[n]</div><div class="line">            self.b -= np.sum(self.a * self.sv_y * K[ind[n],sv])</div><div class="line">        self.b /= len(self.a)</div><div class="line"></div><div class="line">        <span class="comment"># Weight vector</span></div><div class="line">        <span class="keyword">if</span> self.kernel == linear_kernel:</div><div class="line">            self.w = np.zeros(n_features)</div><div class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(len(self.a)):</div><div class="line">                self.w += self.a[n] * self.sv_y[n] * self.sv[n]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.w = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">project</span><span class="params">(self, X)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.w <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> np.dot(X, self.w) + self.b</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            y_predict = np.zeros(len(X))</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(X)):</div><div class="line">                s = <span class="number">0</span></div><div class="line">                <span class="keyword">for</span> a, sv_y, sv <span class="keyword">in</span> zip(self.a, self.sv_y, self.sv):</div><div class="line">                    s += a * sv_y * self.kernel(X[i], sv)</div><div class="line">                y_predict[i] = s</div><div class="line">            <span class="keyword">return</span> y_predict + self.b</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></div><div class="line">        <span class="keyword">return</span> np.sign(self.project(X))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">import</span> pylab <span class="keyword">as</span> pl</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_lin_separable_data</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># generate training data in the 2-d case</span></div><div class="line">        mean1 = np.array([<span class="number">0</span>, <span class="number">2</span>])</div><div class="line">        mean2 = np.array([<span class="number">2</span>, <span class="number">0</span>])</div><div class="line">        cov = np.array([[<span class="number">0.8</span>, <span class="number">0.6</span>], [<span class="number">0.6</span>, <span class="number">0.8</span>]])</div><div class="line">        X1 = np.random.multivariate_normal(mean1, cov, <span class="number">100</span>)</div><div class="line">        y1 = np.ones(len(X1))</div><div class="line">        X2 = np.random.multivariate_normal(mean2, cov, <span class="number">100</span>)</div><div class="line">        y2 = np.ones(len(X2)) * <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> X1, y1, X2, y2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_non_lin_separable_data</span><span class="params">()</span>:</span></div><div class="line">        mean1 = [<span class="number">-1</span>, <span class="number">2</span>]</div><div class="line">        mean2 = [<span class="number">1</span>, <span class="number">-1</span>]</div><div class="line">        mean3 = [<span class="number">4</span>, <span class="number">-4</span>]</div><div class="line">        mean4 = [<span class="number">-4</span>, <span class="number">4</span>]</div><div class="line">        cov = [[<span class="number">1.0</span>,<span class="number">0.8</span>], [<span class="number">0.8</span>, <span class="number">1.0</span>]]</div><div class="line">        X1 = np.random.multivariate_normal(mean1, cov, <span class="number">50</span>)</div><div class="line">        X1 = np.vstack((X1, np.random.multivariate_normal(mean3, cov, <span class="number">50</span>)))</div><div class="line">        y1 = np.ones(len(X1))</div><div class="line">        X2 = np.random.multivariate_normal(mean2, cov, <span class="number">50</span>)</div><div class="line">        X2 = np.vstack((X2, np.random.multivariate_normal(mean4, cov, <span class="number">50</span>)))</div><div class="line">        y2 = np.ones(len(X2)) * <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> X1, y1, X2, y2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_lin_separable_overlap_data</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># generate training data in the 2-d case</span></div><div class="line">        mean1 = np.array([<span class="number">0</span>, <span class="number">2</span>])</div><div class="line">        mean2 = np.array([<span class="number">2</span>, <span class="number">0</span>])</div><div class="line">        cov = np.array([[<span class="number">1.5</span>, <span class="number">1.0</span>], [<span class="number">1.0</span>, <span class="number">1.5</span>]])</div><div class="line">        X1 = np.random.multivariate_normal(mean1, cov, <span class="number">100</span>)</div><div class="line">        y1 = np.ones(len(X1))</div><div class="line">        X2 = np.random.multivariate_normal(mean2, cov, <span class="number">100</span>)</div><div class="line">        y2 = np.ones(len(X2)) * <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> X1, y1, X2, y2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_train</span><span class="params">(X1, y1, X2, y2)</span>:</span></div><div class="line">        X1_train = X1[:<span class="number">90</span>]</div><div class="line">        y1_train = y1[:<span class="number">90</span>]</div><div class="line">        X2_train = X2[:<span class="number">90</span>]</div><div class="line">        y2_train = y2[:<span class="number">90</span>]</div><div class="line">        X_train = np.vstack((X1_train, X2_train))</div><div class="line">        y_train = np.hstack((y1_train, y2_train))</div><div class="line">        <span class="keyword">return</span> X_train, y_train</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_test</span><span class="params">(X1, y1, X2, y2)</span>:</span></div><div class="line">        X1_test = X1[<span class="number">90</span>:]</div><div class="line">        y1_test = y1[<span class="number">90</span>:]</div><div class="line">        X2_test = X2[<span class="number">90</span>:]</div><div class="line">        y2_test = y2[<span class="number">90</span>:]</div><div class="line">        X_test = np.vstack((X1_test, X2_test))</div><div class="line">        y_test = np.hstack((y1_test, y2_test))</div><div class="line">        <span class="keyword">return</span> X_test, y_test</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_margin</span><span class="params">(X1_train, X2_train, clf)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, w, b, c=<span class="number">0</span>)</span>:</span></div><div class="line">            <span class="comment"># given x, return y such that [x,y] in on the line</span></div><div class="line">            <span class="comment"># w.x + b = c</span></div><div class="line">            <span class="keyword">return</span> (-w[<span class="number">0</span>] * x - b + c) / w[<span class="number">1</span>]</div><div class="line"></div><div class="line">        pl.plot(X1_train[:,<span class="number">0</span>], X1_train[:,<span class="number">1</span>], <span class="string">"ro"</span>)</div><div class="line">        pl.plot(X2_train[:,<span class="number">0</span>], X2_train[:,<span class="number">1</span>], <span class="string">"bo"</span>)</div><div class="line">        pl.scatter(clf.sv[:,<span class="number">0</span>], clf.sv[:,<span class="number">1</span>], s=<span class="number">100</span>, c=<span class="string">"g"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># w.x + b = 0</span></div><div class="line">        a0 = <span class="number">-4</span>; a1 = f(a0, clf.w, clf.b)</div><div class="line">        b0 = <span class="number">4</span>; b1 = f(b0, clf.w, clf.b)</div><div class="line">        pl.plot([a0,b0], [a1,b1], <span class="string">"k"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># w.x + b = 1</span></div><div class="line">        a0 = <span class="number">-4</span>; a1 = f(a0, clf.w, clf.b, <span class="number">1</span>)</div><div class="line">        b0 = <span class="number">4</span>; b1 = f(b0, clf.w, clf.b, <span class="number">1</span>)</div><div class="line">        pl.plot([a0,b0], [a1,b1], <span class="string">"k--"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># w.x + b = -1</span></div><div class="line">        a0 = <span class="number">-4</span>; a1 = f(a0, clf.w, clf.b, <span class="number">-1</span>)</div><div class="line">        b0 = <span class="number">4</span>; b1 = f(b0, clf.w, clf.b, <span class="number">-1</span>)</div><div class="line">        pl.plot([a0,b0], [a1,b1], <span class="string">"k--"</span>)</div><div class="line"></div><div class="line">        pl.axis(<span class="string">"tight"</span>)</div><div class="line">        pl.show()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_contour</span><span class="params">(X1_train, X2_train, clf)</span>:</span></div><div class="line">        pl.plot(X1_train[:,<span class="number">0</span>], X1_train[:,<span class="number">1</span>], <span class="string">"ro"</span>)</div><div class="line">        pl.plot(X2_train[:,<span class="number">0</span>], X2_train[:,<span class="number">1</span>], <span class="string">"bo"</span>)</div><div class="line">        pl.scatter(clf.sv[:,<span class="number">0</span>], clf.sv[:,<span class="number">1</span>], s=<span class="number">100</span>, c=<span class="string">"g"</span>)</div><div class="line"></div><div class="line">        X1, X2 = np.meshgrid(np.linspace(<span class="number">-6</span>,<span class="number">6</span>,<span class="number">50</span>), np.linspace(<span class="number">-6</span>,<span class="number">6</span>,<span class="number">50</span>))</div><div class="line">        X = np.array([[x1, x2] <span class="keyword">for</span> x1, x2 <span class="keyword">in</span> zip(np.ravel(X1), np.ravel(X2))])</div><div class="line">        Z = clf.project(X).reshape(X1.shape)</div><div class="line">        pl.contour(X1, X2, Z, [<span class="number">0.0</span>], colors=<span class="string">'k'</span>, linewidths=<span class="number">1</span>, origin=<span class="string">'lower'</span>)</div><div class="line">        pl.contour(X1, X2, Z + <span class="number">1</span>, [<span class="number">0.0</span>], colors=<span class="string">'grey'</span>, linewidths=<span class="number">1</span>, origin=<span class="string">'lower'</span>)</div><div class="line">        pl.contour(X1, X2, Z - <span class="number">1</span>, [<span class="number">0.0</span>], colors=<span class="string">'grey'</span>, linewidths=<span class="number">1</span>, origin=<span class="string">'lower'</span>)</div><div class="line"></div><div class="line">        pl.axis(<span class="string">"tight"</span>)</div><div class="line">        pl.show()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_linear</span><span class="params">()</span>:</span></div><div class="line">        X1, y1, X2, y2 = gen_lin_separable_data()</div><div class="line">        X_train, y_train = split_train(X1, y1, X2, y2)</div><div class="line">        X_test, y_test = split_test(X1, y1, X2, y2)</div><div class="line"></div><div class="line">        clf = SVM()</div><div class="line">        clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">        y_predict = clf.predict(X_test)</div><div class="line">        correct = np.sum(y_predict == y_test)</div><div class="line">        print(<span class="string">"%d out of %d predictions correct"</span> % (correct, len(y_predict)))</div><div class="line"></div><div class="line">        plot_margin(X_train[y_train==<span class="number">1</span>], X_train[y_train==<span class="number">-1</span>], clf)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_non_linear</span><span class="params">()</span>:</span></div><div class="line">        X1, y1, X2, y2 = gen_non_lin_separable_data()</div><div class="line">        X_train, y_train = split_train(X1, y1, X2, y2)</div><div class="line">        X_test, y_test = split_test(X1, y1, X2, y2)</div><div class="line"></div><div class="line">        clf = SVM(polynomial_kernel)</div><div class="line">        clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">        y_predict = clf.predict(X_test)</div><div class="line">        correct = np.sum(y_predict == y_test)</div><div class="line">        print(<span class="string">"%d out of %d predictions correct"</span> % (correct, len(y_predict)))</div><div class="line"></div><div class="line">        plot_contour(X_train[y_train==<span class="number">1</span>], X_train[y_train==<span class="number">-1</span>], clf)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_soft</span><span class="params">()</span>:</span></div><div class="line">        X1, y1, X2, y2 = gen_lin_separable_overlap_data()</div><div class="line">        X_train, y_train = split_train(X1, y1, X2, y2)</div><div class="line">        X_test, y_test = split_test(X1, y1, X2, y2)</div><div class="line"></div><div class="line">        clf = SVM(C=<span class="number">1000.1</span>)</div><div class="line">        clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">        y_predict = clf.predict(X_test)</div><div class="line">        correct = np.sum(y_predict == y_test)</div><div class="line">        print(<span class="string">"%d out of %d predictions correct"</span> % (correct, len(y_predict)))</div><div class="line"></div><div class="line">        plot_contour(X_train[y_train==<span class="number">1</span>], X_train[y_train==<span class="number">-1</span>], clf)</div><div class="line"></div><div class="line">        </div><div class="line">    <span class="comment">#test_linear()</span></div><div class="line">    <span class="comment">#test_non_linear()</span></div><div class="line">    test_soft()</div></pre></td></tr></table></figure><blockquote><p><strong>具体相关说明可见<a href="https://pythonprogramming.net/soft-margin-kernel-cvxopt-svm-machine-learning-tutorial/?completed=/soft-margin-svm-machine-learning-tutorial/" target="_blank" rel="external">对应的课程地址</a>。</strong></p></blockquote><p>更多的铺助链接：</p><ul><li><p><a href="https://cvxopt.org/userguide/intro.html" target="_blank" rel="external">pythonC最优化模块库：VXOPT二次编程文档</a></p></li><li><p><a href="https://courses.csail.mit.edu/6.867/wiki/images/a/a7/Qp-cvxopt.pdf" target="_blank" rel="external">CVXOPT进行二次编程的更深入的示例</a></p></li><li><p><a href="https://www.csie.ntu.edu.tw/~cjlin/libsvm/" target="_blank" rel="external">用于支持向量机优化的库</a></p></li></ul><h1 id="SVM的应用"><a href="#SVM的应用" class="headerlink" title="SVM的应用"></a>SVM的应用</h1><p>还是利用了在上个文章<a href="http://liujunworld.com/2018/10/21/python机器学习系列：K近邻算法(KNN" target="_blank" rel="external">python机器学习系列：K近邻算法(KNN)的实现及应用</a>的实现及应用/)的实际数据集。只是将<code>sklearn</code>模块中的现成的拿来用了。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing, neighbors, svm</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">df = pd.read_csv(<span class="string">'breast-cancer-wisconsin.data'</span>)</div><div class="line"></div><div class="line">df.replace(<span class="string">'?'</span>,<span class="number">-99999</span>,inplace=<span class="keyword">True</span>) <span class="comment">#替换异常值为-99999，inplace=True表示文件中也将进行同步更改</span></div><div class="line"></div><div class="line"><span class="comment">#去除不相关的特征列</span></div><div class="line">df.drop([<span class="string">'Id'</span>], <span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">X = np.array(df.drop([<span class="string">'Class'</span>], <span class="number">1</span>)) <span class="comment">#去除标签列，自制数据集</span></div><div class="line">y = np.array(df[<span class="string">'Class'</span>])</div><div class="line"></div><div class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>)</div><div class="line"></div><div class="line">clf = svm.SVC() <span class="comment">#分类SVM</span></div><div class="line">clf.fit(X_train, y_train)</div><div class="line"></div><div class="line">accuracy = clf.score(X_test, y_test) <span class="comment">#得出准确值</span></div><div class="line">print(accuracy)</div><div class="line"></div><div class="line"><span class="comment">#创建数据集来进行简单的预测</span></div><div class="line">example_maasurse = np.array([[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]])</div><div class="line"></div><div class="line">example_maasurse = example_maasurse.reshape(len(example_maasurse),<span class="number">-1</span>) <span class="comment">#重朔,其中的-1可理解为，只想输出2行的情况下，后面的列我写上-1由numpy自行得出对应相符的数组，有点抽象...其实也就那么回事</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">prediction = clf.predict(example_maasurse)</div><div class="line">print(prediction)</div></pre></td></tr></table></figure><p>结果跟上篇介绍的用<code>KNN</code>的结果几乎一样，就不展示了。</p><p>关于现成算法的参数的使用可移步：</p><ul><li><a href="http://sklearn.apachecn.org/cn/stable/index.html" target="_blank" rel="external">sklearn中文主页</a></li></ul><p>这样这篇文章基本上就这样了，需要更新的话再来补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/HHUqhVzctQE&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;我记录下的这些东西，如果是有哪些不懂得地方，我强烈建议参考我在&lt;a href=&quot;http://liujunworld.com/2018/09/16/%E5%88%9D%E5%AD%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里的书籍&lt;/a&gt;。另外还有&lt;a href=&quot;https://github.com/apachecn/AiLearning&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《机器学习实战》&lt;/a&gt;，&lt;a href=&quot;https://github.com/exacity/deeplearningbook-chinese&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《深度学习》&lt;/a&gt;这本花书等，利用好搜索引擎也是一大好利器。&lt;/p&gt;
&lt;p&gt;关于这篇文章，我还是和以前记录相关的机器学习知识之类篇章一样的风格。&lt;/p&gt;
&lt;p&gt;不懂可进入&lt;a href=&quot;https://pythonprogramming.net/support-vector-machine-intro-machine-learning-tutorial/?completed=/final-thoughts-knn-machine-learning-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里的对应的教程&lt;/a&gt;，看不懂可借助翻译插件/软件(实际上借助这些看起来轻松多了，看英文头疼的厉害，如果是对于初学者)。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://liujunjie11.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/categories/Python/"/>
    
    
      <category term="机器学习" scheme="https://liujunjie11.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
