<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LXiHa`Notes</title>
  
  <subtitle>The House Belong to Love and Freedom.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liujunjie11.github.io/"/>
  <updated>2019-05-16T11:56:53.335Z</updated>
  <id>https://liujunjie11.github.io/</id>
  
  <author>
    <name>刘俊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于iPhone已购买app应用在iPad上下载使用</title>
    <link href="https://liujunjie11.github.io/2019/05/16/%E5%85%B3%E4%BA%8EiPhone%E5%B7%B2%E8%B4%AD%E4%B9%B0app%E5%BA%94%E7%94%A8%E5%9C%A8iPad%E4%B8%8A%E4%B8%8B%E8%BD%BD%E4%BD%BF%E7%94%A8/"/>
    <id>https://liujunjie11.github.io/2019/05/16/关于iPhone已购买app应用在iPad上下载使用/</id>
    <published>2019-05-16T11:41:03.000Z</published>
    <updated>2019-05-16T11:56:53.335Z</updated>
    
    <content type="html"><![CDATA[<p>今天在iPhone上购买了一个应用，发现在iPad上提示还有要付款的按钮，现在已解决，在此记录一下。</p><a id="more"></a><p>平时经常可在<code>AppStore</code>一个应用上写着<code>提供iPhone App</code>或者是<code>提供iPad App</code>，实际上，<strong>在iPhone中购买了之后，在iPad中是可以免费下载的，也就是一边设备购买付款成功了之后，在另一边设备登陆同一个Apple ID的情况下也是可以不必再次付款下载的，比如在iPhone上已购买下载了，这样在iPad上登陆同一个Apple ID搜索到这个购买的app是可以直接进行下载的。<code>iPhone App</code>/<code>iPad App</code>就是一次付款，两边使用的。</strong></p><p>如果先在iPhone/iPad上进行付款购买了一款app应用，但是基本上在iPad/iPhone上还是显示“付款金额的按钮”，这时点击这个按钮会弹出一个窗口提示“已购买了，可免费下载”(前提是同一个已付款购买的Apple ID的登陆)。</p><p>另外小记一下在使用<code>Apple ID</code>付款购买之后，购买记录显示其处于“待处理”并且没有单号编码出现的情况下的状态，<strong>其实这属于正常的等待行为，因为在与Apple交易付款成功需要一定的时间过渡，耐心等待单号编码出来，此时即代表与Apple交易付款成功了。这种情况可能会影响上面说的“一次购买，两边使用”的情况，耐心等待“待处理”的字样变成单号编码交易成功，之后再尝试也是可以的。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在iPhone上购买了一个应用，发现在iPad上提示还有要付款的按钮，现在已解决，在此记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="https://liujunjie11.github.io/categories/Mac/"/>
    
      <category term="iPhone" scheme="https://liujunjie11.github.io/categories/iPhone/"/>
    
      <category term="iPad" scheme="https://liujunjie11.github.io/categories/iPad/"/>
    
      <category term="app应用" scheme="https://liujunjie11.github.io/categories/app%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="Mac" scheme="https://liujunjie11.github.io/tags/Mac/"/>
    
      <category term="iPad" scheme="https://liujunjie11.github.io/tags/iPad/"/>
    
      <category term="iPhone" scheme="https://liujunjie11.github.io/tags/iPhone/"/>
    
      <category term="app应用" scheme="https://liujunjie11.github.io/tags/app%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>杂记5.10</title>
    <link href="https://liujunjie11.github.io/2019/05/10/%E6%9D%82%E8%AE%B05-10/"/>
    <id>https://liujunjie11.github.io/2019/05/10/杂记5-10/</id>
    <published>2019-05-10T01:53:05.000Z</published>
    <updated>2019-05-10T13:35:53.717Z</updated>
    
    <content type="html"><![CDATA[<p>曾经一致认为的真理，现今一直在动摇。</p><a id="more"></a><p>“民主”与“独裁”，曾经在我一致认知之下，其实不过是最为表面的一面。“民主”不过属于少数人的民主，“独裁”亦然属于少数人的独裁，没有哪个机制是绝对的，相对的却只有“好”与“坏”的当权者或者是执政党。曾经我把“民主”想的太过于美好（以美国为参照物），我早应当意识到这些想法是不现实的，是属于理想状态下的，绝对的“民主”，绝对的“独裁”，这是我曾经偏向的两个极端。</p><p>……</p><p>在政府与人民之间往往有着不可跨越的鸿沟，然而偏见往往来源自不理解。将要行使任务的政府没有深入了解每一个受到牵连的人的想法，总是容易独自行使大权，这往往使得这些大多数人们的利益受损。在另一方面，这些人们自然会形成一股反抗的力量，从而使得政府与人民之间的矛盾开始建立。当然，作为第三方旁观者，其间的复杂性往往还要大的多。当地政府接到“上级”的命令行事（往往是关乎仕途的任务），或许加上更多的因素影响使得任务快速开始进展，照顾不到大多数受牵连的人们的利益所得，长期以往，就会造成官民矛盾的加深。但是当事情发生，人民总是会习惯性将责任归于政府身上，久而久之，另一股“反势力”亦然崛起…这是一个复杂性极强的真命题，在政府与民众之间，太过于偏向哪一方都是不理性的，在没有更多的调研的情况下亦然如此。</p><p>在中国，政府与民众之间的关系处理亦然还有很长一段路要走。</p><p>……</p><p>最近在“五一”之前通过网络有意无意看到了<a href="https://zh.wikipedia.org/zh/婉容" target="_blank" rel="external">末代皇后“婉容”</a>与<a href="https://zh.wikipedia.org/zh/嵯峨浩" target="_blank" rel="external">末代皇妃“嵯峨浩”</a>的图片，从此被她们两人的容颜深深的吸引了…我废寝忘食地花了三天去研读了关于她们的史料书籍。当然，其中最为吸引我的全是她们身后的故事以及那个战火纷飞的年代，无论是谁都难以逃过这场洗礼。每当联想到那个年代千千万万的人们，我突然也不再执着的去为以上两位女性感到极度的惋惜了。然而，因为了解到了婉容皇后的学识背景，深知她是个有智慧，且知书达理的具“现代思想”的女性，所以起初我始终都不相信她跟别人有“私通”一事，但是通过查看其当时身边人的回忆录，我只能去说服自己去相信确实是有着这么一个历史事件存在的…为此我亦感到痛惜，同时也满怀同情。</p><p>……</p><p>最近通过“五一”小长假，我又回到了“王者荣耀”的怀抱，所幸没有以前刚刚玩的时候那般痴迷了，不过时常想买下一些想买的东西，借此机会我偶然了解到了通过退款苹果“app store”免费获取游戏点卷一事，这个问题迄今存在好些年了。我好几次忍不住怀着这种想法想要自己去试试看，但是还是忍住了，但是，我却选择了去购买那些用这个方法得到点卷的人所出售的商品…我亦属于为虎作伥了，因为有需求才会产生市场，我亦是没有资格去评论这件事的，然而，我选择了用少部分钱去安慰自己的内心，使得良心受到的谴责更少一些罢了…我也是有些可笑了呢…但是我坚决不会去做那件实属“诈骗”行为的操作的！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经一致认为的真理，现今一直在动摇。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>杂记4.24</title>
    <link href="https://liujunjie11.github.io/2019/04/24/%E6%9D%82%E8%AE%B04-24/"/>
    <id>https://liujunjie11.github.io/2019/04/24/杂记4-24/</id>
    <published>2019-04-24T09:41:17.000Z</published>
    <updated>2019-04-24T10:13:20.160Z</updated>
    
    <content type="html"><![CDATA[<p>最近在身旁看到一些现象产生的想法。</p><a id="more"></a><p>最近身旁发生的一些事还是有些堵心的，算不上什么难言之隐，只是我也越来越沉默了，越发没有当初的“意气风发”了。碰到站在讲台上的大学老师一副奴才样，我是不忍心揭穿或者是不愿去计较的，人各有异罢了。</p><p>最近上的课的几个老师是与我的价值观格格不入的。在他们身上我难看到几点“客观”存在，大多数时候而是不停地在以主观形式去歌颂、去包庇，甚至毫无立场的去扭曲。如此滔滔不绝地“长篇大论”为生产？为生存？坐在讲台下的我想到“为生存”的一个因素，不免感觉有一股人人自危的硝烟感，心里也是感到岌岌可危的…天下之无道也久矣。深感当今的大学教育真是荒无人烟的感觉，伟大的“百年名校”梦怕是遥不可及矣。</p><p>另外的一个老师以“加分”为由，引诱学生去回答小学水准的问题，可笑的是居然有很多在坐的大学生乐此不疲，个个激情满满，好个朝气蓬勃！荒谬的教育，除了分数还是分数，除了分数一无所有。</p><p>关于食堂的公共座位的问题早已是泛滥成灾，不可收拾了。公共资源属于大家的，不知是哪群占座的杂种们传下来的规矩，一度好似属于私人座位了，他人想要坐在这里之前都还要客气讨问“请问这里有人吗？”，真是荒谬滑稽、可笑至极了。若是讨问的人自以为这是礼貌，那又真的是滑天下之大稽了。</p><p>一些所谓的“成功人士”前几天发表的关于“996”的看法，真是进退两难的窘样。中国的“成功人士”，“大企业家”真是可悲的人物，官前为生，民前为名，甚是悲哀乎。可怜但不值同情，正所谓可怜之人必有可恨之处矣。</p><p>苟志于礼，就此打住。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在身旁看到一些现象产生的想法。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>996的帽子</title>
    <link href="https://liujunjie11.github.io/2019/04/13/%E2%80%9C996%E2%80%9D%E7%9A%84%E5%B8%BD%E5%AD%90/"/>
    <id>https://liujunjie11.github.io/2019/04/13/“996”的帽子/</id>
    <published>2019-04-13T06:16:22.000Z</published>
    <updated>2019-04-13T07:19:59.973Z</updated>
    
    <content type="html"><![CDATA[<p>早就想就<a href="https://996.icu/#/zh_CN" target="_blank" rel="external">“996.ICU”</a>一事做一些感想记录了。</p><a id="more"></a><p>不得不承认这个社会上的一些错误概念是极具迷惑性的，它们都有一个共同的特点：带着“心安理得”的帽子，带着“有理不怕影子斜”的帽子。也确实影响到了当今的一些人们，时不时就会看到有人被这些稍微夸大其词带起来的节奏牵着走，这些人往往也有一个共同的特点：那就是缺乏独立思考的意识。有时这些“披着羊皮的狼”的概念也极容易影响到一些独立思考能力尚不成熟的人，从而让人大惊：“句句在理”的错相，“头头是道”的误感。</p><p>一个国家政府为何总是要宣扬“国民要爱国”？而转身对外却又总是另一番矛盾的话(“人类无国界”、“人类大家庭”等)。一个政府该怎么做总是由一些主要执政人员来做决策的，这一点无论是在所谓的“民主”、“非民主”国家均如此，可以这么说，一个政府，一个国家是由这一些人掌控、发号命令的。当执政党受到了国外对手的压力就会时不时发动“爱国运动”，这是一个政府的一贯作风，平时的“爱国”即是做为为了未来威胁的保障。当然，一个国家政府中的一些执政人员亦然也有所谓的“使命感”，但是往往这样的人被认定为“做不成大事”被上层人员晾在一边。这个丑陋的世界是由一群丑陋的人群组成的，一个丑陋的人是由它丑陋的所作所为造成的。</p><p>反观所谓的企业无不如上如此。</p><p>何为“996”，实际上均是企业方面的要求；何为“奋斗”，往往是发自一个人内心的行动。这两者之间是完全不同的性质与概念。当今中国社会在早已非常流行的“成功文化”大趋势的笼罩下，一个所谓的“成功人士”往往说的一句话总是容易被人们牢记在心，深受“成功文化”影响的人甚至整日在研究这些话，企图从中找到奥秘助自己更上一层楼，早日达到“成功”的境界。仔细琢量，这种文化在整个人类历史中总是不缺范例，各种“成功人士”有很多相似之处也是值得一思的。放眼望去，人类圈子里从来不会缺少可笑与滑稽之人与荒唐无稽的事，与一个家庭的明争暗斗的性质没什么两样。另外，一个人别想着总是把自己所谓的”人生经验“强套在别人身上，难免会有一天引火自焚，这往往是所谓的大多数”成功人士“都会犯的通病。</p><p>生活在当今的中国社会上的人们较生活在上个世纪的清末年代的人们没什么两样，相较当今的主流国际文化，绝大部分国人还是格格不入的。一个国家真正的发达不应是外在的物质层面，应当要以精神文化为第一要义做为主要的衡量标准，这一点国人“还需努力”。</p><p>“996运动”应当成为一场打破荒诞无稽的“平反运动”，还给这个社会一部分正常的价值观。但在另一方面，要让那些思想僵化的人们醒悟实在是一种挑战。</p><p>我期待，同时也在盼望。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早就想就&lt;a href=&quot;https://996.icu/#/zh_CN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“996.ICU”&lt;/a&gt;一事做一些感想记录了。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mac上用iMovie为视频加上水印</title>
    <link href="https://liujunjie11.github.io/2019/04/12/Mac%E4%B8%8A%E7%94%A8iMovie%E4%B8%BA%E8%A7%86%E9%A2%91%E5%8A%A0%E4%B8%8Alogo%E6%B0%B4%E5%8D%B0/"/>
    <id>https://liujunjie11.github.io/2019/04/12/Mac上用iMovie为视频加上logo水印/</id>
    <published>2019-04-12T09:35:13.000Z</published>
    <updated>2019-04-12T10:59:30.066Z</updated>
    
    <content type="html"><![CDATA[<p>最近用到的iMovie有点多，研究了一下怎么在这个软件上为视频加上水印，在此记录以观后效之用。</p><iframe width="500" height="315" src="https://www.youtube.com/embed/fNIom-y2vcI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><a id="more"></a><p>在此之前必须要有一张自己的<code>.PNG</code>格式的图片，也就是要嵌入视频中的水印部分。</p><p>一. 在视频已经编辑好之后，将此图片拖入软件中：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Apr-12-2019%2017-48-08.gif" alt=""></p><p>二. 并且将图片拉至覆盖全视频：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Apr-12-2019%2017-48-27.gif" alt=""></p><p>三. 设置画中画以及摆设位置：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Apr-12-2019%2017-48-44.gif" alt=""></p><blockquote><p>设置完之后预览，你会发现视频中全程都有这个水印了！</p></blockquote><p>四. 保存文件。大功告成！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用到的iMovie有点多，研究了一下怎么在这个软件上为视频加上水印，在此记录以观后效之用。&lt;/p&gt;
&lt;iframe width=&quot;500&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fNIom-y2vcI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="软件使用" scheme="https://liujunjie11.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Mac" scheme="https://liujunjie11.github.io/categories/Mac/"/>
    
      <category term="iMovie" scheme="https://liujunjie11.github.io/categories/iMovie/"/>
    
    
      <category term="Mac" scheme="https://liujunjie11.github.io/tags/Mac/"/>
    
      <category term="iMovie" scheme="https://liujunjie11.github.io/tags/iMovie/"/>
    
  </entry>
  
  <entry>
    <title>关于在Mac上利用QuickTime Player录制系统声音</title>
    <link href="https://liujunjie11.github.io/2019/04/12/%E5%85%B3%E4%BA%8E%E5%9C%A8Mac%E4%B8%8A%E5%88%A9%E7%94%A8QuickTime-Player%E5%BD%95%E5%88%B6%E7%B3%BB%E7%BB%9F%E5%A3%B0%E9%9F%B3/"/>
    <id>https://liujunjie11.github.io/2019/04/12/关于在Mac上利用QuickTime-Player录制系统声音/</id>
    <published>2019-04-12T03:30:14.000Z</published>
    <updated>2019-04-12T10:08:08.670Z</updated>
    
    <content type="html"><![CDATA[<p>最近做几个视频需要录制一些素材，其中就需要录制系统声音这一部分，以前就有过研究，一直没研究明白，现在终于解决了，在此记录以观后效之用。</p><iframe width="500" height="315" src="https://www.youtube.com/embed/PLAxg1GhgEw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><a id="more"></a><h1 id="下载Soundflower"><a href="#下载Soundflower" class="headerlink" title="下载Soundflower"></a>下载Soundflower</h1><p>首先在<a href="https://github.com/mattingalls/Soundflower/releases" target="_blank" rel="external">Soundflower</a>上下载最新的或者是对应的版本。</p><blockquote><p>下载好之后看下面的操作。</p></blockquote><h1 id="配置音频"><a href="#配置音频" class="headerlink" title="配置音频"></a>配置音频</h1><p>首先打开Mac上的<code>实用工具</code>，点击<code>音频MIDI设置</code>：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-12%20%E4%B8%8A%E5%8D%8811.45.25.png" alt=""></p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-12%20%E4%B8%8A%E5%8D%8811.47.42.png" alt=""></p><blockquote><p>如上设置。</p></blockquote><h2 id="偏好系统声音设置"><a href="#偏好系统声音设置" class="headerlink" title="偏好系统声音设置"></a>偏好系统声音设置</h2><p>打开<code>偏好系统设置</code>，点击<code>声音</code>进入设置：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-12%20%E4%B8%8A%E5%8D%8811.53.12.png" alt=""></p><p>之后按下图显示的设置：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-12%20%E4%B8%8A%E5%8D%8811.54.10.png" alt=""></p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-12%20%E4%B8%8A%E5%8D%8811.55.08.png" alt=""></p><blockquote><p>如上设置，<code>Soundflower(2ch)</code>是仅仅表示系统声音的选项。</p></blockquote><h1 id="配合QuickTime-Player录制"><a href="#配合QuickTime-Player录制" class="headerlink" title="配合QuickTime Player录制"></a>配合QuickTime Player录制</h1><p>首先在主屏幕的上方可以看到的声音图标，按下<code>OPtion</code>键点击查看如下：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-12%20%E4%B8%8A%E5%8D%8811.58.38.png" alt=""></p><blockquote><p>以后可通过这个图标自行调节声音选项，很是方便。</p></blockquote><p>打开<code>QuickTime Player</code>，点击<code>文件</code>选择<code>新建屏幕录制</code>：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-12%20%E4%B8%8B%E5%8D%8812.01.31.png" alt=""></p><blockquote><p>或者使用对应的快捷键也行。</p></blockquote><p>之后就是QuickTime Player录制前的配置：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Apr-12-2019%2012-04-08.gif" alt=""></p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-12%20%E4%B8%8B%E5%8D%8812.04.36.png" alt=""></p><p><strong>录制完成之后你会发现录制完成的声音比平时正常的的系统声音小了不少！！！以下是解决方案。</strong></p><h2 id="声音小的解决方案"><a href="#声音小的解决方案" class="headerlink" title="声音小的解决方案"></a>声音小的解决方案</h2><p>打开Mac自带的<code>iMovie</code>(其他的软件亦可，主要是调节一下声音即可)，进行以下的操作：</p><ul><li>首先新建一个视频项目：</li></ul><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Apr-12-2019%2012-11-36.gif" alt=""></p><ul><li>之后导入录制好的影片并且进行声音设置：</li></ul><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Apr-12-2019%2012-21-34.gif" alt=""> </p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-12%20%E4%B8%8B%E5%8D%8812.24.27.png" alt=""></p><ul><li>保存文件：</li></ul><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/Apr-12-2019%2012-22-03.gif" alt=""></p><blockquote><p>选择的音量越大，之后导出来的影片声音就会越大，比如我选择了<code>400%</code>，导出来的影片的声音就会比平时正常的系统声音要大声好几倍！平时只要设置成<code>100%</code>加上<code>自动</code>的选项，之后导出来就是平时正常的系统声音了。</p></blockquote><p>另外，在测试声音的大小时，如果是插上耳机是不会影响测试的，在<code>输出设备</code>选择<code>耳机</code>或者是<code>多输出设备</code>都是不影响声音从耳际传出的(如果前提是插上耳机)。</p><p>导出成功之后在保存的目录下打开影片就会发现声音和系统声音大小一致或者是比系统声音还要大了(可自行如上设置即可)。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4NjQwMDQ1NQ==&amp;mid=2247484132&amp;idx=1&amp;sn=d50b714a03a577ece629490c796db868&amp;chksm=ebdcc84cdcab415a3618753e565873fb53f7ef6c24930f46e60f0e030a238d50e1a3e9088971#rd" target="_blank" rel="external">用Mac自带的QuickTime Player录制只有系统声音的视频教程</a></p></li><li><p><a href="https://www.zhihu.com/question/20251726" target="_blank" rel="external">macOS 下怎么录屏，能同时保留声音？有哪些较好的解决方案？</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做几个视频需要录制一些素材，其中就需要录制系统声音这一部分，以前就有过研究，一直没研究明白，现在终于解决了，在此记录以观后效之用。&lt;/p&gt;
&lt;iframe width=&quot;500&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/PLAxg1GhgEw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="软件使用" scheme="https://liujunjie11.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Mac" scheme="https://liujunjie11.github.io/categories/Mac/"/>
    
    
      <category term="Mac" scheme="https://liujunjie11.github.io/tags/Mac/"/>
    
      <category term="软件使用" scheme="https://liujunjie11.github.io/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="QuickTime Player" scheme="https://liujunjie11.github.io/tags/QuickTime-Player/"/>
    
  </entry>
  
  <entry>
    <title>python3 PyQt5界面开发:YouTube-dl Mac版GUI实用下载工具</title>
    <link href="https://liujunjie11.github.io/2019/04/10/python3-PyQt5%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91-YouTube-dl-Mac%E7%89%88GUI%E5%AE%9E%E7%94%A8%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/"/>
    <id>https://liujunjie11.github.io/2019/04/10/python3-PyQt5界面开发-YouTube-dl-Mac版GUI实用下载工具/</id>
    <published>2019-04-10T10:54:32.000Z</published>
    <updated>2019-05-23T00:15:21.372Z</updated>
    
    <content type="html"><![CDATA[<p>最近因需求自行开发了一个基于<a href="https://github.com/ytdl-org/youtube-dl#embedding-youtube-dl" target="_blank" rel="external">YouTube-dl</a>的下载界面，其中可提供下载最好质量的音频、视频文件，并且实现了添加代理的需求。</p><a id="more"></a><p>以下为现今的半完成品代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> youtube_dl</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stream</span><span class="params">(QtCore.QObject)</span>:</span></div><div class="line">    newText = QtCore.pyqtSignal(str)</div><div class="line">     </div><div class="line"><span class="comment">#     def flush(self):</span></div><div class="line"><span class="comment">#         sys.setrecursionlimit(10000) </span></div><div class="line"><span class="comment">#         ys.stdout.write(text)</span></div><div class="line"><span class="comment">#         sys.stdout.flush()</span></div><div class="line">         </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, text)</span>:</span></div><div class="line">        self.newText.emit(str(text))</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadWorker</span><span class="params">(QThread)</span>:</span></div><div class="line">    newText = pyqtSignal()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></div><div class="line">        super(ThreadWorker, self).__init__(parent)</div><div class="line">        self.working = <span class="keyword">True</span></div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        self.working = <span class="keyword">False</span></div><div class="line">        self.wait()</div><div class="line">    </div><div class="line"><span class="comment">#     def run(self):</span></div><div class="line"><span class="comment">#         Up = YouTube_dl_MacGUI()</span></div><div class="line"><span class="comment">#         self.sys.stdout = Stream(newText=Up.onUpdateText)</span></div><div class="line"><span class="comment">#         </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> self.working == <span class="keyword">True</span>:</div><div class="line">            <span class="string">"""</span></div><div class="line"><span class="string">            下载音乐/音频</span></div><div class="line"><span class="string">            """</span></div><div class="line">            Youtube_UI = YouTube_dl_MacGUI()</div><div class="line">            proxy = Youtube_UI.add_proxy().proxy</div><div class="line">            ydl_opts = &#123;</div><div class="line">                <span class="string">'format'</span>: <span class="string">'140'</span>,</div><div class="line">                <span class="string">'proxy'</span>: proxy,</div><div class="line">                <span class="string">'writesubtitles'</span>: <span class="string">'Yes'</span>,</div><div class="line">                <span class="string">'allsubtitles'</span>: <span class="string">'Yes'</span></div><div class="line">                &#125;</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                start = time.time()</div><div class="line">                <span class="keyword">with</span> youtube_dl.YoutubeDL(ydl_opts) <span class="keyword">as</span> ydl:</div><div class="line">                    ydl.download([Youtube_UI.YouTube_URL_Line.text()])</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                print(<span class="string">"Sorry，your proxy can't use! or URL format error！"</span>)</div><div class="line">            end = time.time()</div><div class="line">            <span class="keyword">return</span> <span class="string">"use time:&lt;&#123;0&#125;&gt;"</span>.format(end - start) </div><div class="line"> </div><div class="line">        self.newText.emit()</div><div class="line"></div><div class="line">         </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(QRunnable)</span>:</span></div><div class="line">    newText = pyqtSignal(str)</div><div class="line"></div><div class="line"><span class="meta">    @pyqtSlot()</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self.newText.emit()</div><div class="line">        </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">YouTube_dl_MacGUI</span><span class="params">(QWidget)</span>:</span></div><div class="line"><span class="comment">#     proxy = 'socks5://127.0.0.1:1080'  # default proxy</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.initUI()</div><div class="line"><span class="comment">#         self.threadpool = QThreadPool()</span></div><div class="line"><span class="comment">#         worker = Worker()</span></div><div class="line"><span class="comment">#         self.threadpool.start()</span></div><div class="line">        <span class="comment"># 自定义输出流</span></div><div class="line"><span class="comment">#         sys.stdout = Stream(newText=self.onUpdateText)</span></div><div class="line"><span class="comment">#         self.MyThread = ThreadWorker()</span></div><div class="line"><span class="comment">#         self.MyThread.start()</span></div><div class="line"><span class="comment">#         sys.stdout = self.MyThread.newText.connect(self.onUpdateText)</span></div><div class="line"><span class="comment">#         MyThread.start()</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Working</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        线程启动</span></div><div class="line"><span class="string">        """</span></div><div class="line">        self.MyThread = ThreadWorker()</div><div class="line">        self.MyThread.start()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_proxy</span><span class="params">(self, proxy)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        添加代理之用，默认显示为'socks5://127.0.0.1:1080'</span></div><div class="line"><span class="string">        """</span></div><div class="line">        self.proxy = proxy </div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(<span class="string">"Current Proxy:&lt;&#123;0&#125;&gt;"</span>.format(self.proxy))</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">"Sorry，your proxy can't use!"</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">down_Music</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        下载音乐/音频</span></div><div class="line"><span class="string">        """</span></div><div class="line">        ydl_opts = &#123;</div><div class="line">            <span class="string">'format'</span>: <span class="string">'140'</span>,</div><div class="line">            <span class="string">'proxy'</span>: self.proxy,</div><div class="line">            <span class="string">'writesubtitles'</span>: <span class="string">'Yes'</span>,</div><div class="line">            <span class="string">'allsubtitles'</span>: <span class="string">'Yes'</span></div><div class="line">            &#125;</div><div class="line">        <span class="keyword">try</span>:</div><div class="line"><span class="comment">#             start = time.time()</span></div><div class="line">            <span class="keyword">with</span> youtube_dl.YoutubeDL(ydl_opts) <span class="keyword">as</span> ydl:</div><div class="line">                ydl.download([url])</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">"Sorry，your proxy can't use! or URL format error！"</span>)</div><div class="line"><span class="comment">#         end = time.time()</span></div><div class="line"><span class="comment">#         return "use time:&lt;&#123;0&#125;&gt;".format(end - start) </span></div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">down_Video</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        下载视频</span></div><div class="line"><span class="string">        """</span></div><div class="line">        ydl_opts = &#123;</div><div class="line">            <span class="string">'proxy'</span>: self.proxy,</div><div class="line">            <span class="string">'writesubtitles'</span>: <span class="string">'Yes'</span>,</div><div class="line">            <span class="string">'allsubtitles'</span>: <span class="string">'Yes'</span></div><div class="line">            &#125;</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            start = time.time()</div><div class="line">            <span class="keyword">with</span> youtube_dl.YoutubeDL(ydl_opts) <span class="keyword">as</span> ydl:</div><div class="line">                <span class="keyword">return</span> ydl.download([url])</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">"Sorry，your proxy can't use! or URL format error！"</span>)</div><div class="line">        end = time.time()</div><div class="line">        <span class="keyword">return</span> <span class="string">"use time:&lt;&#123;0&#125;&gt;"</span>.format(end - start) </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.combo = QComboBox(self)</div><div class="line">        self.combo.addItems([<span class="string">'Download Music/Audio'</span>, <span class="string">'Download Video'</span>])</div><div class="line"><span class="comment">#         combo.addItem('Download Video')</span></div><div class="line">        self.combo.activated[str].connect(self.Sele_Format)</div><div class="line">        </div><div class="line">        self.Proxy_Label = QLabel(<span class="string">'Proxy:'</span>, self)</div><div class="line">        self.YouTube_URL_Label = QLabel(<span class="string">'URL:'</span>, self)</div><div class="line">        self.Proxy_Line = QLineEdit(self)</div><div class="line">        self.Proxy_Line.setPlaceholderText(<span class="string">"e.g.:socks5://127.0.0.1:1080"</span>)</div><div class="line">        self.Proxy_Line.setToolTip(<span class="string">"socks4/5://ip:port"</span>)</div><div class="line">        self.YouTube_URL_Line = QLineEdit(self)</div><div class="line">        self.YouTube_URL_Line.setPlaceholderText(<span class="string">"e.g.:https://www.youtube.com/watch?v=ZSM3w1v-A_Y"</span>)</div><div class="line">        self.YouTube_URL_Line.setToolTip(<span class="string">"YouTube URL"</span>)</div><div class="line">        </div><div class="line">        <span class="comment"># 设置按钮及其快捷键</span></div><div class="line"><span class="comment">#         MyThread = Thread()</span></div><div class="line"><span class="comment">#         MyThread.newText.connect(self.onUpdateText)</span></div><div class="line"><span class="comment">#         MyThread.start()</span></div><div class="line">        self.Apply_Button = QPushButton(<span class="string">'Apply'</span>, self)</div><div class="line">        self.Apply_Button.setToolTip(<span class="string">"Apply Proxy"</span>)</div><div class="line">        self.Start_Button = QPushButton(<span class="string">'Start Donwload'</span>, self)</div><div class="line">        self.Start_Button.setToolTip(<span class="string">"return"</span>)</div><div class="line"><span class="comment">#         self.Start_Button.clicked.connect(lambda :self.MyThread.start())</span></div><div class="line">        self.Clear_Button = QPushButton(<span class="string">'Clear'</span>, self)</div><div class="line">        self.Clear_Button.setToolTip(<span class="string">"esc"</span>)</div><div class="line">        self.Quit_Button = QPushButton(<span class="string">'Quit'</span>, self)</div><div class="line">        self.Quit_Button.setToolTip(<span class="string">"command+q"</span>)</div><div class="line"><span class="comment">#         self.Quit_Button.clicked.connect(lambda :self.MyThread.terminate())</span></div><div class="line">        self.Start_Button.setShortcut(<span class="string">'return'</span>)</div><div class="line">        self.Clear_Button.setShortcut(<span class="string">'esc'</span>)</div><div class="line">        self.Quit_Button.setShortcut(<span class="string">'command+q'</span>)</div><div class="line">        self.Quit_Button.clicked.connect(QCoreApplication.instance().quit)</div><div class="line"><span class="comment">#         self.result = QTextBrowser()</span></div><div class="line">        self.result = QTextEdit(self, readOnly=<span class="keyword">True</span>)</div><div class="line">        self.result.moveCursor(QTextCursor.Start)</div><div class="line">        self.result.ensureCursorVisible()</div><div class="line">        self.result.setLineWrapColumnOrWidth(<span class="number">500</span>)</div><div class="line">        self.result.setLineWrapMode(QTextEdit.FixedPixelWidth)</div><div class="line">        self.result.setFixedWidth(<span class="number">600</span>)</div><div class="line">        self.result.setFixedHeight(<span class="number">400</span>)</div><div class="line">        self.result.setGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)  <span class="comment"># 非必要</span></div><div class="line">        </div><div class="line">        <span class="comment"># 布局设置</span></div><div class="line">        grip = QGridLayout()</div><div class="line">        grip.setSpacing(<span class="number">7</span>)</div><div class="line">        grip.addWidget(self.Proxy_Label, <span class="number">1</span>, <span class="number">0</span>)</div><div class="line">        grip.addWidget(self.Proxy_Line, <span class="number">2</span>, <span class="number">0</span>)</div><div class="line">        grip.addWidget(self.Apply_Button, <span class="number">2</span>, <span class="number">1</span>)</div><div class="line">        grip.addWidget(self.YouTube_URL_Label, <span class="number">3</span>, <span class="number">0</span>)</div><div class="line">        grip.addWidget(self.YouTube_URL_Line, <span class="number">4</span>, <span class="number">0</span>)</div><div class="line">        grip.addWidget(self.Clear_Button, <span class="number">4</span>, <span class="number">1</span>)</div><div class="line">        grip.addWidget(self.combo, <span class="number">5</span>, <span class="number">0</span>)</div><div class="line">        grip.addWidget(self.Start_Button, <span class="number">5</span>, <span class="number">1</span>)</div><div class="line">        grip.addWidget(self.result, <span class="number">6</span>, <span class="number">0</span>)</div><div class="line">        grip.addWidget(self.Quit_Button, <span class="number">7</span>, <span class="number">1</span>)</div><div class="line">        self.setLayout(grip)</div><div class="line">        self.Quit_Button.move(<span class="number">100</span>, <span class="number">100</span>)  <span class="comment"># 非必要</span></div><div class="line">        </div><div class="line">        self.setGeometry(<span class="number">500</span>, <span class="number">300</span>, <span class="number">600</span>, <span class="number">500</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'Mac Youtube-dl Downloader'</span>)</div><div class="line">        self.setWindowIcon(QIcon(<span class="string">'YouTubedl.ico'</span>))</div><div class="line">        self.Clear_Button.clicked.connect(self.Clear_URL_Result)</div><div class="line">        self.Apply_Button.clicked.connect(self.Apply_Proxy)</div><div class="line">        self.Start_Button.clicked.connect(self.Sele_Format)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onUpdateText</span><span class="params">(self, text)</span>:</span></div><div class="line">        cursor = self.result.textCursor()</div><div class="line">        cursor.movePosition(QtGui.QTextCursor.End)</div><div class="line">        cursor.insertText(text)</div><div class="line"><span class="comment">#         QApplication.processEvents()</span></div><div class="line"><span class="comment">#         time.sleep(1)</span></div><div class="line">        self.result.setTextCursor(cursor)</div><div class="line">        self.result.ensureCursorVisible()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        sys.stdout = sys.__stdout__</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Clear_URL_Result</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        清空URL列表以及结果显示处</span></div><div class="line"><span class="string">        """</span></div><div class="line">        self.YouTube_URL_Line.setText(<span class="string">""</span>)</div><div class="line">        self.result.setText(<span class="string">""</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Apply_Proxy</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        应用代理信息</span></div><div class="line"><span class="string">        """</span></div><div class="line"><span class="comment">#         self.MyThread = ThreadWorker()</span></div><div class="line"><span class="comment">#         self.MyThread.start()</span></div><div class="line"><span class="comment">#         sys.stdout = self.MyThread.newText.connect(self.onUpdateText)</span></div><div class="line">        <span class="keyword">return</span> self.add_proxy(self.Proxy_Line.text())</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Sele_Format</span><span class="params">(self, text)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        用于选择音频/视频格式</span></div><div class="line"><span class="string">        """</span></div><div class="line"><span class="comment">#             if self.combo.addItem('Download Music/Audio'):</span></div><div class="line"><span class="comment">#                 self.result.setText(self.down_Music(self.YouTube_URL_Line.text()))</span></div><div class="line"><span class="comment">#             else:</span></div><div class="line"><span class="comment">#                 self.result.setText(self.down_Video(self.YouTube_URL_Line.text()))</span></div><div class="line">        <span class="keyword">if</span> text == <span class="string">'Download Music/Audio'</span>:</div><div class="line">            <span class="keyword">return</span> self.down_Music(self.YouTube_URL_Line.text())</div><div class="line"><span class="comment">#             return self.Working()</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self.down_Video(self.YouTube_URL_Line.text())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = YouTube_dl_MacGUI()</div><div class="line">    sys.exit(app.exec())</div><div class="line"></div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run()</div></pre></td></tr></table></figure><p>简要的添加了代理以及增加链接即可进行下载，默认下载质量最好的。视频格式为<code>.mp4</code>，音乐为<code>.m4a</code>。</p><blockquote><p>如果失效出错了，大多是因为<code>YouTube-dl</code>的版本问题，基本上更新一下就好。</p></blockquote><p>实际上不仅限于下载YouTube上的资源，其中的<code>YouTube-dl</code>支持，基本上都能下载，比如<code>pronhub</code>…实用，实用。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p>可播放<code>.m4a</code>格式的开源播放器：<br><a href="https://quodlibet.readthedocs.io/en/latest/downloads.html#macosx" target="_blank" rel="external">Quod Libet</a></p></li><li><p>其他播放器可参考：<br><a href="https://www.zhihu.com/question/20355565" target="_blank" rel="external">Mac系统上的APE、FLAC播放器有哪些？哪个体验最好？</a></p></li><li><p>格式了解：<br><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%97%E8%A1%A8" target="_blank" rel="external">文件格式列表</a>、<br><a href="https://www.apowersoft.tw/what-is-m4a-format" target="_blank" rel="external">M4A格式百科</a></p></li><li><p>在线下载YouTube资源：<br><a href="https://ytmp3.cc/" target="_blank" rel="external">YouTube to Mp3</a>、<br><a href="https://2conv.com/downloads/mp3/yd_fm0T7_SGee4/" target="_blank" rel="external">2conv.com</a>、<br><a href="https://www.youtubnow.com/watch/?v=ZSM3w1v-A_Y&amp;f=mp4_360p" target="_blank" rel="external">YouTubNow</a></p></li><li><p>代码中主要的一些参考链接：<br><a href="https://blog.csdn.net/u014770372/article/details/76021988" target="_blank" rel="external">python format 用法详解</a>、<br><a href="https://stackoverflow.com/questions/44432276/print-out-python-console-output-to-qtextedit" target="_blank" rel="external">Print out python console output to Qtextedit</a>、<br><a href="https://cloud.tencent.com/developer/ask/201670" target="_blank" rel="external">刷新输出定向到PyQt中的QTextEdit</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因需求自行开发了一个基于&lt;a href=&quot;https://github.com/ytdl-org/youtube-dl#embedding-youtube-dl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YouTube-dl&lt;/a&gt;的下载界面，其中可提供下载最好质量的音频、视频文件，并且实现了添加代理的需求。&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="https://liujunjie11.github.io/categories/Mac/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/categories/Python/"/>
    
      <category term="PyQT5" scheme="https://liujunjie11.github.io/categories/PyQT5/"/>
    
      <category term="实用工具" scheme="https://liujunjie11.github.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Python" scheme="https://liujunjie11.github.io/tags/Python/"/>
    
      <category term="Mac" scheme="https://liujunjie11.github.io/tags/Mac/"/>
    
      <category term="PyQT5" scheme="https://liujunjie11.github.io/tags/PyQT5/"/>
    
  </entry>
  
  <entry>
    <title>心情</title>
    <link href="https://liujunjie11.github.io/2019/04/10/%E5%BF%83%E6%83%85/"/>
    <id>https://liujunjie11.github.io/2019/04/10/心情/</id>
    <published>2019-04-10T06:21:08.000Z</published>
    <updated>2019-04-10T07:31:47.711Z</updated>
    
    <content type="html"><![CDATA[<p>今天天阴沉沉的，先前想说的一些话憋在心里一直没心情写下来，反观倒也不是没心情，人总是矛盾的，对于一个问题，总是在一边认同，又在一边慢慢的否认。越来越感觉自己就是一个被蒙着双眼、随波逐流的人了，而这种感觉无论是从前的我，还是现在的我都是最不情愿接受的结果。</p><a id="more"></a><p>心情处在沮丧和静默的边缘，不光光是内心许久的积压，更多的却是关乎我对于这个真实世界的更进一步的理解与透明。我明显的感觉到，曾经有的一些梦想、幻想开始变得有些动摇，有些甚至于早已灰飞烟灭，在这个丑陋的世界，拥有美好的幻梦是天真的，但是同时也是难得的。我行走在两者之间，有些无法自拔，我也不甘心。</p><p>曾何几时，我是个理想的“共产主义者”，幻想着“人类大家庭”的狂欢与欣喜，那时的我感觉一切都是那么美好，在这个没有多少忧虑的学生时代，我做着无数无比的“奉献大梦”，做一个能为人们奉献自我的人，以为需要的人们创造价值作为我的第一信条，以助人为乐为此生的终生信仰，与此同时，对于未来，我慢慢的变得明朗、乐观了，一切充满着希望，一切都还有希望。如今，我依旧是个理想的“共产主义者”。但是我从未信奉过“共产党”，因为我清楚的知道这是多大的一个自欺欺人的群体啊，在当今的这个世界，“共产主义”永远只能活着梦中，她才是一个真真切切我们永远触不可及的幻梦，就让她活着“乌托邦的世界”吧，从幻梦中给予信奉她的人们以希望，寄托信奉她的人们美好的意愿，这样就足够了。</p><p>我不恨任何有美好初衷的群体，可恨的是那些利用这些善良的人。世界上没有一贯的十全十美，就如同所谓的不完美总是发生在每个人身上以至于被人津津乐道一样。没有上善若水的至高良善之辈，也没有彻彻底底的从恶者，但是从来不会缺少更多的行尸走肉。</p><p>沉默着，无力地一言不发，不说什么幸运，我只是更为深刻地看清了前方的路途与身旁的切身切事，但依然难逃雾里看花的世运。此时此刻的我，依旧与当初爱做梦的我有着美好的初衷，并且乐在其中，不求什么方得终始，只要我还是我，就可以有我想要的一切。至少在我的世界里。</p><p>我不会妥协，也不会肆意认同，我要带着自己的良知，去做我要做的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天天阴沉沉的，先前想说的一些话憋在心里一直没心情写下来，反观倒也不是没心情，人总是矛盾的，对于一个问题，总是在一边认同，又在一边慢慢的否认。越来越感觉自己就是一个被蒙着双眼、随波逐流的人了，而这种感觉无论是从前的我，还是现在的我都是最不情愿接受的结果。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>我們都是木頭人-李怡</title>
    <link href="https://liujunjie11.github.io/2019/03/27/%E6%88%91%E5%80%91%E9%83%BD%E6%98%AF%E6%9C%A8%E9%A0%AD%E4%BA%BA-%E6%9D%8E%E6%80%A1/"/>
    <id>https://liujunjie11.github.io/2019/03/27/我們都是木頭人-李怡/</id>
    <published>2019-03-27T12:43:41.000Z</published>
    <updated>2019-04-01T11:00:36.566Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到李怡先生的一首詩《我們都是木頭人》，感觸頗深，在此紀錄，以此激勵自我。</p><a id="more"></a><blockquote><p>我們都是木頭人/不許講話不許笑/還有一個不許動/就這樣我們頭髮慢慢白了/皮膚變黑了，皺紋越來越多了/就這樣我們走進生命的冬日/天黑得越來越快了/就這樣我的好友，我的兄弟/離得越來越遠了/圍坐身旁的都是陌生人/我們低着頭，像接受懲罰的孩子/血落在這裏/長出來的都是木頭人</p><p>我們都是木頭人/這是我們內在生活的真實形象/他們數數人頭，就知道我們還在/看見我們吃飯/就知道木頭人還乖/他們真是這樣想的……</p><p>我們都是木頭人/我是木頭人，我的妻子是木頭人/我的孩子也會長成木頭人/為何要保留這愚蠢的人形/為何要鍛煉身體，翻跟頭，倒立/為何要發育/這就是我理解的生命，和生命的回報/我們都是木頭人</p><p>所以我們今天還生活在這裏/爬吧，乞求吧，發霉吧/你有嬰兒般細嫩的皮膚有何用/你有含苞欲放的紅唇有何用/你有烏溜溜的黑眼睛有何用/你有健壯的胸肌，你有堅挺的雙乳/又有何用/我們都是木頭人/二十歲被埋葬，三十歲已成白骨/四十歲後在世間遊盪的都是乾屍/與吸血鬼</p><p>是呵，你還活着，你還做夢/你還有三天的路才到達目的地/你的雙手還未被捆綁/你還能背叛與撒謊/看看這些怪物吧/除了繁殖，他們還能做些甚麼/看看恐懼發育成形的脊椎/看看被管制而萎縮的大腦/我們都是木頭人，現在選擇吧……</p><p>選擇吧，我們都是木頭人/死亡才能終止這種存在/大喊救命的木頭人/死於貧困的木頭人/被生活累垮的木頭人/讓貪婪吞噬的木頭人/木頭人能唱的永遠是一支悲哀的歌……</p><p>選擇吧！木頭人，讓木頭燃燒/讓這個騙子集團現出原形/燒毀那些教義/燒毀愚蠢的報紙與教科書/燒毀所有謊話和說謊話的人/瞧，我們自己也冒煙了/這是每一個木頭人的節日</p><p>我必須醒着看到這個結尾/我必須繼續工作，我必須……/我必須贏得所有人的幫助/讓木頭變回木頭，讓人成為人</p><p>你不相信這是真的/木頭人你有好心腸/木頭人你已病入膏肓/我們都是木頭人/不許講話不許笑/還有一個不許動/我就是死也要走在人的大路上」</p></blockquote><p>讀盡，心情久久不能平復。應對當今之世的真實寫照，欲言又止矣…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到李怡先生的一首詩《我們都是木頭人》，感觸頗深，在此紀錄，以此激勵自我。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>常用mysql命令行记录</title>
    <link href="https://liujunjie11.github.io/2019/03/23/%E5%B8%B8%E7%94%A8mysql%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2019/03/23/常用mysql命令行记录/</id>
    <published>2019-03-23T13:16:58.000Z</published>
    <updated>2019-03-28T05:46:37.917Z</updated>
    
    <content type="html"><![CDATA[<p>此文用于记录个人常用的或者是感到疑惑的<em>mysql</em>命令行记录，因为平时用到的<em>mysql</em>实在是少，所以在此做个简要记录以观后效之用。</p><a id="more"></a><h1 id="查看MYSQL默认端口号"><a href="#查看MYSQL默认端口号" class="headerlink" title="查看MYSQL默认端口号"></a>查看MYSQL默认端口号</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHOW GLOBAL VARIABLES LIKE <span class="string">'port'</span>;</div></pre></td></tr></table></figure><h1 id="查询当前所在的数据库"><a href="#查询当前所在的数据库" class="headerlink" title="查询当前所在的数据库"></a>查询当前所在的数据库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT DATABASE();</div></pre></td></tr></table></figure><h1 id="查看数据库中的所有用户"><a href="#查看数据库中的所有用户" class="headerlink" title="查看数据库中的所有用户"></a>查看数据库中的所有用户</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT DISTINCT CONCAT(&apos;User: &apos;&apos;&apos;, user, &apos;&apos;&apos;@&apos;&apos;&apos;,host,&apos;&apos;&apos;:&apos;) AS quert FROM mysql.user;</div></pre></td></tr></table></figure><h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#user_name：要创建用户的名字。</span></div><div class="line"><span class="comment">#host：表示要这个新创建的用户允许从哪台机登陆，如果只允许从本机登陆，则 填　‘localhost’ ，如果允许从远程登陆，则填 ‘%’。</span></div><div class="line"><span class="comment">#password：新创建用户的登陆数据库密码，如果没密码可以不写。</span></div><div class="line"></div><div class="line">CREATE USER <span class="string">'user_name'</span>@<span class="string">'host'</span> IDENTIFIED BY <span class="string">'password'</span>;</div><div class="line"></div><div class="line"><span class="comment">#无密码</span></div><div class="line">CREATE USER <span class="string">'user_name'</span>@<span class="string">'host'</span>;</div></pre></td></tr></table></figure><h1 id="设置与更改用户密码"><a href="#设置与更改用户密码" class="headerlink" title="设置与更改用户密码"></a>设置与更改用户密码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#规范语法</span></div><div class="line">SET  PASSWORD  FOR  ‘username’@‘host’ = PASSWORD(‘newpassword’)； </div><div class="line"></div><div class="line"><span class="comment">#设置当前用户的密码：SET  PASSWORD = PASSWORD('newpassword')；</span></div><div class="line"></div><div class="line">SET  PASSWORD = PASSWORD(‘<span class="number">123456</span>’)；//实例句</div></pre></td></tr></table></figure><h1 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">REVOKE   privileges   ON  database.tablename  FROM  ‘username’@‘host’；</div><div class="line"></div><div class="line"><span class="comment">#若是有先前的语句命令在前的前提下，下方语句才成立。</span></div><div class="line">GRANT  SELECT ON  *.*  FROM  ‘test’@‘localhost’；</div><div class="line">REVOKE  SELECT ON  *.*  FROM  ‘test’@‘localhost’；</div><div class="line"><span class="comment">#两者前后的命令必须一致。</span></div></pre></td></tr></table></figure><h1 id="授权用户"><a href="#授权用户" class="headerlink" title="授权用户"></a>授权用户</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#privileges：表示要授予什么权力，例如可以有 select ， insert ，delete，update等，如果要授予全部权力，则填 ALL</span></div><div class="line"><span class="comment">#databasename.tablename：表示用户的权限能用在哪个库的哪个表中，如果想要用户的权限很作用于所有的数据库所有的表，则填 *.*，*是一个通配符，表示全部。</span></div><div class="line"><span class="comment">#’username‘@‘host’：表示授权给哪个用户。</span></div><div class="line"></div><div class="line">GRANT privileges ON  databasename.tablename  TO  ‘username’@‘host’；</div><div class="line"></div><div class="line">GRANT  select，insert  ON  zje.zje  TO ‘aaa’@‘%’；//表示给用户aaa授权，让aaa能给zje库中的zje表 实行 insert 和 select。</div><div class="line"></div><div class="line">GRANT  ALL  ON  *.*  TO  ‘aaa’@‘%’；//表示给用户aaa授权，让aaa能给所有库所有表实行所有的权力。</div><div class="line"></div><div class="line"><span class="comment">#用以上命令授权的用户不能给其他用户授权，如果想这个用户能够给其他用户授权，就要在后面加上“WITH GRANT OPTION”。</span></div><div class="line">GRANT  ALL  ON   *.*   TO  ’aaa‘@<span class="string">'%'</span>  WITH GRANT OPTION；</div></pre></td></tr></table></figure><h1 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#DROP  USER ‘user_name’@‘host’ </span></div><div class="line">DROP USER <span class="string">'test'</span>@<span class="string">'localhost'</span>;</div></pre></td></tr></table></figure><h1 id="查看用户的表结构"><a href="#查看用户的表结构" class="headerlink" title="查看用户的表结构"></a>查看用户的表结构</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#DESC user_name.user</span></div><div class="line">DESC mysql.user;</div></pre></td></tr></table></figure><h1 id="查看某个用户的权限"><a href="#查看某个用户的权限" class="headerlink" title="查看某个用户的权限"></a>查看某个用户的权限</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#第一种，user='user_name'</span></div><div class="line">SELECT * FROM mysql.user WHERE user=<span class="string">'Django_votingsystem'</span>;</div><div class="line"></div><div class="line"><span class="comment">#第二种，不怎么好用。'user_name'@'host'。</span></div><div class="line">SHOW GRANTS FOR <span class="string">'Django_votingsystem'</span>@<span class="string">'localhost'</span>;</div></pre></td></tr></table></figure><h1 id="mysql安装、验证等最初命令行"><a href="#mysql安装、验证等最初命令行" class="headerlink" title="mysql安装、验证等最初命令行"></a>mysql安装、验证等最初命令行</h1><blockquote><p>可参考：<a href="https://m.w3cschool.cn/mysql/mysql-install.html" target="_blank" rel="external">https://m.w3cschool.cn/mysql/mysql-install.html</a></p></blockquote><h1 id="参考过的文章"><a href="#参考过的文章" class="headerlink" title="参考过的文章"></a>参考过的文章</h1><ul><li><p><a href="https://blog.csdn.net/u014453898/article/details/55064312" target="_blank" rel="external">MYSQL的创建用户，授权用户，删除用户，查看用户</a></p></li><li><p><a href="https://m.w3cschool.cn/mysql/mysql-install.html" target="_blank" rel="external">MySQL教程</a></p></li><li><p><a href="https://dev.mysql.com/doc/" target="_blank" rel="external">MySQL Documentation</a></p></li></ul><blockquote><p><a href="http://www.searchdoc.cn/rdbms/mysql/dev.mysql.com/doc/refman/5.7/en/preface.com.coder114.cn.html" target="_blank" rel="external">MySQL 5.7参考手册中文</a></p></blockquote><ul><li><a href=""></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文用于记录个人常用的或者是感到疑惑的&lt;em&gt;mysql&lt;/em&gt;命令行记录，因为平时用到的&lt;em&gt;mysql&lt;/em&gt;实在是少，所以在此做个简要记录以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://liujunjie11.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://liujunjie11.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>复习：数据库</title>
    <link href="https://liujunjie11.github.io/2019/03/23/%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://liujunjie11.github.io/2019/03/23/复习：数据库/</id>
    <published>2019-03-23T12:13:13.000Z</published>
    <updated>2019-03-24T04:32:22.596Z</updated>
    
    <content type="html"><![CDATA[<p>这是开始为秋招做准备的简单复习，因为之前没怎么好好学习<em>数据库</em>，所以现在学习一番，并且在此做个记录以观后效之用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是开始为秋招做准备的简单复习，因为之前没怎么好好学习&lt;em&gt;数据库&lt;/em&gt;，所以现在学习一番，并且在此做个记录以观后效之用。&lt;/p&gt;

      
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="https://liujunjie11.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="https://liujunjie11.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Python疑惑以及所有使用库问题汇总笔记记录</title>
    <link href="https://liujunjie11.github.io/2019/03/22/Python%E7%96%91%E6%83%91%E4%BB%A5%E5%8F%8A%E6%89%80%E6%9C%89%E4%BD%BF%E7%94%A8%E5%BA%93%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2019/03/22/Python疑惑以及所有使用库问题汇总笔记记录/</id>
    <published>2019-03-22T13:42:53.000Z</published>
    <updated>2019-04-19T13:33:41.002Z</updated>
    
    <content type="html"><![CDATA[<p>此文以记录一些常见的、模糊的<em>Python知识点</em>以及在使用其所有的模块库过程中产生的疑惑为主，在此记录以观后效之用。</p><a id="more"></a><h1 id="Python如何运行程序"><a href="#Python如何运行程序" class="headerlink" title="Python如何运行程序"></a>Python如何运行程序</h1><p>大多数程序员仅知道运行Python就是在文本中输入代码，然后将其交与“解释器”去执行运行。但是，透过表面去确切了解一下这个步骤：第一步是编译成所谓的“字节码”，之后再将其转发到所谓的“虚拟机”中。了解这个步骤可以帮助我们宏观上掌握程序的执行。</p><h2 id="字节码编译"><a href="#字节码编译" class="headerlink" title="字节码编译"></a>字节码编译</h2><p>当程序执行时，Python内部（对大多数用户来说是完全隐藏的）会先将源代码（文中的语句）编译成所谓字节码的形式。概括地说，Python通过把每一条源语句分解为单一步骤来将这些源代码翻译成一组字节码指令，这是一个简单的翻译步骤，而且字节码是源代码底层的、与平台无关的表现形式。另外值得一提的是：这些字节码可以提高执行速度，比起文本文件中的原始的源代码语句，它的运行速度要快得多。</p><p>下面来看看其中的奇妙之处：若是Python进程在机器上拥有写入权限，那么它将把程序的字节码保存为一个以<code>.pyc</code>（<code>.pyc</code>即为编译过的<code>.py</code>源代码)为扩展名的文件，程序运行之后，这些文件会在源代码附近的文件处可看到。实际上Python这样保存字节码是作为一种启动速度的优化。下一次运行程序时，若是在上次保存字节码之后没有修改过源代码，Python将会直接加载上次的<code>.pyc</code>文件并跳过编译的这个步骤。相反的，若是源代码有改动，在保存了之后，运行之时字节码也会重新创建，另外，当Python必须重编译时，它会自动检查源文件和字节码文件的时间戳。</p><blockquote><p>值得注意的是：如果Python无法在机器上写入字节码，程序依然是可以工作的：字节码会在内存中生成并在程序结束时简单地丢弃。尽管这样，由于<code>.pyc</code>文件能够加速启动，所以最好保证在大型程序中可以写入。字节码文件同样是分发Python程序的方法之一：如果Python找到的是<code>.pyc</code>文件，它会很乐意去运行这个程序，尽管这里没有原始的<code>.py</code>源代码文件。</p></blockquote><p>另外因为Python字节码不是机器的二进制代码（例如Intel芯片的指令），字节码仅仅相当于Python定义的一种表现形式。另外，字节码相较二进制，后者更为低级，而Python源代码相较于字节码，后者更为低级。</p><h2 id="Python虚拟机（PVM）"><a href="#Python虚拟机（PVM）" class="headerlink" title="Python虚拟机（PVM）"></a>Python虚拟机（PVM）</h2><p>一旦程序编译成字节码或者是从已保存的<code>.pyc</code>文件中载入，之后的字节码会被发送到通常被称为Python虚拟机（Python Virtual Machine,简写为PVM)上来执行。实际上PVM只是Python整体中的一个组件，可理解为是运行脚本的组件，从技术上来说，就是所谓的“Python解释器”的最后一步。简单的Python代码运行可理解为以下的图片中的样子：</p><p><img src="https://liu-1258031152.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-03-23%20%E4%B8%8A%E5%8D%8810.56.33.png" alt=""></p><blockquote><p>必须要理解的是这些复杂性的运行结构都是有意识地被隐藏起来，字节码的编译时自动完成的，PVM亦只是安装好的Python系统中的一部分，而程序员只是简单的编写、运行即可。关于PVM与Python解释器之间的关系简单的可总结为：<strong>PVM是Python是Python运行时引擎，从技术上讲只是解释器中执行的“最后一步”，而解释器其中还承担着其它的PVM不涉及到的任务，即可理解为PVM的执行功能属于解释器的一个子集。</strong>在此不妨简单的介绍一下Python的解释器：<strong>实际情况来说，Python就是一个名为解释器的软件包，是代码与计算机硬件之间的软件逻辑层，当编写了一段Python代码，Python解释器将读取程序，并按照其中的命令执行，得出结果。</strong>另外可额外说明一下，CPython为当今标准的解释器（这个名字来自它是由可移植的<a href="https://zh.wikipedia.org/wiki/ANSI_C" target="_blank" rel="external"><em>ANSI C/C</em>语言</a>代码编写而成的这个事实）。当然还有其他语言实现的Python解释器，但是由于CPython是这门语言的标准参照实现，所以与其它语言实现的解释器相比，它运行的最快、最完整、最新，而且最健全。</p></blockquote><h2 id="Python的运行速度"><a href="#Python的运行速度" class="headerlink" title="Python的运行速度"></a>Python的运行速度</h2><p>在Python的工作中通常没有<code>build</code>或者是<code>make</code>的步骤：即为代码在写好之后立即运行。加上Python的字节码的特性，PVM循环（而不是CPU芯片）仍然须解释这些字节码，而且字节码指令与CPU指令相比需要做更多的工作，另外与其他的经典的解释器不同，Python中有内部的编译步骤：Python并不需要反复地重分析和重分解每一行语句。另外需要牢记在心的心的是：Python中的运行是发生在实时性之中的，完全不需要先将所有源代码先编译好再丢给解释器去执行（静态语言常常如此)，所有的建立的函数和类的操作以及连接的模块，这些都是在代码运行之时”编译-解释”如此一个步骤进行的。</p><p>这也是为什么Python的运行速度比不上C/C++之类的语言的运行速度的原因（C/C++将源代码编译为二进制机器码，而Python编译为字节码，而前者比后者更为低级，所以运行起来执行速度更快)，Python的运行速度介于传统的编译语言与传统的解释语言之间，并且具有动态的弹性编程体验。</p><blockquote><p>在此简单介绍一下<a href="https://zh.wikipedia.org/wiki/PyPy" target="_blank" rel="external">PyPy</a>：PyPy是原先的<a href="https://zh.wikipedia.org/wiki/Psyco" target="_blank" rel="external">Psyco</a>即时编译器（just-in-time,<a href="https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF" target="_blank" rel="external">JIT</a>）的继任者（即时编译器其实只是PVM的一个扩展，可见上方图的最右边方框所代表的），并将<a href="https://zh.wikipedia.org/wiki/Psyco" target="_blank" rel="external">Psyco</a>纳入一个追求速度的纯Python，也属于CPython标准的另一个实现，更为注重性能。它可将字节码中的部分转换为运行速度更快的二进制机器码（这一切发生在运行时期，而非运行前的编译阶段）。而且即时编译器可通过追踪程序中的对象数据类型，创建针对Python语言动态特性的机器代码，通过这种方式部分地替换字节码，从而达到程序将在运行时越跑越快。此外，一些Python代码在PyPy下运行也会占用更少的内存。值得一提的是：在某些情况下，它利用动态优化的优势可让Python运行得跟C代码一样的快，甚至可以超越。这点对于算法密集和计算密集型的程序尤为明显（CPU密集型）。</p><p>关于什么是CPU密集型、IO密集型可参考：<a href="https://blog.csdn.net/youanyyou/article/details/78990156" target="_blank" rel="external">什么是CPU密集型、IO密集型？</a></p></blockquote><p>另外，由于Python的动态特性以及更为灵活简要等的特性，使得Python相较于C/C++使其达到了属于“高级语言”的行列。</p><h1 id="交互式命令行与文件"><a href="#交互式命令行与文件" class="headerlink" title="交互式命令行与文件"></a>交互式命令行与文件</h1><p>一般在交互式命令行中的代码是实时的，是不会保存的，即运行之后的代码是不会保存的，需要重新输入代码之后才能继续运行；而在文件中是可以永久保存的，另外，我们认为的一般的编写代码的主文件称之为“脚本”（属于于一个顶层程序文件的非正式说法），调用的文件称之为“模块”，<strong>实际上，代码运行的可永久保存的文件通常是称之为模块的，可以直接运行的模块文件是称之为脚本的。</strong></p><p>在交互式命令行中输入的复合式代码运行时需要在结束时的最后一行空出一行（即按下Entry键）以表示复合句结束；而在文件中的空格不是必须的，因为在解释器运行时，空格会被忽略掉一行一行地运行，但是为了代码的美观以及可读性，加上一些空格实际上也是不可少的。</p><h1 id="Python值得一看的函数以及用法"><a href="#Python值得一看的函数以及用法" class="headerlink" title="Python值得一看的函数以及用法"></a>Python值得一看的函数以及用法</h1><h2 id="固定的“一值”列表"><a href="#固定的“一值”列表" class="headerlink" title="固定的“一值”列表"></a>固定的“一值”列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weights = [<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>)] <span class="comment">#256组数字为100的列表</span></div></pre></td></tr></table></figure><h2 id="random模块的权重"><a href="#random模块的权重" class="headerlink" title="random模块的权重"></a>random模块的权重</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>weighted_choices = [(<span class="string">'Red'</span>, <span class="number">3</span>), (<span class="string">'Blue'</span>, <span class="number">2</span>), (<span class="string">'Yellow'</span>, <span class="number">1</span>), (<span class="string">'Green'</span>, <span class="number">4</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>population = [val <span class="keyword">for</span> val, cnt <span class="keyword">in</span> weighted_choices <span class="keyword">for</span> i <span class="keyword">in</span> range(cnt)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>population</div><div class="line">[<span class="string">'Red'</span>, <span class="string">'Red'</span>, <span class="string">'Red'</span>, <span class="string">'Blue'</span>, <span class="string">'Blue'</span>, <span class="string">'Yellow'</span>, <span class="string">'Green'</span>, <span class="string">'Green'</span>, <span class="string">'Green'</span>, <span class="string">'Green'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(population)</div><div class="line"><span class="string">'Green'</span></div></pre></td></tr></table></figure><p>3.6版本新增这种方式中，为了给元素增加权重，按照元素的权重构造了一个新的列表，如上述代码中的population。在population中我们可以看到Red、Blue、Yellow、Green按照权重的方式各自新增元素，这就造成了使用choice()函数，即使是等几率的，出现的结果也会不一样,多的元素当然被选中的机会多.</p><h2 id="itertools-accumulate对权重进行累加"><a href="#itertools-accumulate对权重进行累加" class="headerlink" title="itertools.accumulate对权重进行累加"></a>itertools.accumulate对权重进行累加</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>weights = [<span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cumdist = list(itertools.accumulate(weights))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cumdist</div><div class="line">[<span class="number">5</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>]</div></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.accumulate" target="_blank" rel="external">itertools.accumulate(iterable[, func])</a>即为数字的权重累加，在总数上占几率较少的数字被选中的几率就会小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cumdist = list(itertools.accumulate(weights)) <span class="comment">#数的累加</span></div><div class="line">x = random.random() * cumdist[<span class="number">-1</span>] <span class="comment">#定义的数字/矿</span></div><div class="line">isgold = ore_list[bisect.bisect(cumdist, x)] <span class="comment">#返回定义的数字在列表中的位置，以二分查找的方式</span></div></pre></td></tr></table></figure><p><code>random.random()</code>与最后一个cumdist相乘，<code>random.random()</code>的范围是浮点数0.0-1.0（不含)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> bisect</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line">random.seed(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span><span class="string">'New  Pos Contents'</span></div><div class="line"><span class="keyword">print</span><span class="string">'---  --- --------'</span></div><div class="line"></div><div class="line">l = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">15</span>):</div><div class="line">    r = random.randint(<span class="number">1</span>, <span class="number">100</span>)</div><div class="line">    position = bisect.bisect(l, r)</div><div class="line">    bisect.insort(l, r)</div><div class="line">    <span class="keyword">print</span><span class="string">'%3d  %3d'</span> % (r, position), l</div><div class="line">    </div><div class="line">&gt;&gt;&gt;</div><div class="line">New  Pos Contents</div><div class="line">---  --- --------</div><div class="line"> <span class="number">14</span>    <span class="number">0</span> [<span class="number">14</span>]</div><div class="line"> <span class="number">85</span>    <span class="number">1</span> [<span class="number">14</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">77</span>    <span class="number">1</span> [<span class="number">14</span>, <span class="number">77</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">26</span>    <span class="number">1</span> [<span class="number">14</span>, <span class="number">26</span>, <span class="number">77</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">50</span>    <span class="number">2</span> [<span class="number">14</span>, <span class="number">26</span>, <span class="number">50</span>, <span class="number">77</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">45</span>    <span class="number">2</span> [<span class="number">14</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">77</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">66</span>    <span class="number">4</span> [<span class="number">14</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">79</span>    <span class="number">6</span> [<span class="number">14</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">10</span>    <span class="number">0</span> [<span class="number">10</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">85</span>]</div><div class="line">  <span class="number">3</span>    <span class="number">0</span> [<span class="number">3</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">84</span>    <span class="number">9</span> [<span class="number">3</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">84</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">44</span>    <span class="number">4</span> [<span class="number">3</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">84</span>, <span class="number">85</span>]</div><div class="line"> <span class="number">77</span>    <span class="number">9</span> [<span class="number">3</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">84</span>, <span class="number">85</span>]</div><div class="line">  <span class="number">1</span>    <span class="number">0</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">84</span>, <span class="number">85</span>]</div></pre></td></tr></table></figure><ul><li><a href="http://kuanghy.github.io/2016/06/14/python-bisect" target="_blank" rel="external">Python 二分查找与 bisect 模块</a></li></ul><p>类似的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">random.choices(population, weights=<span class="keyword">None</span>, *, cum_weights=<span class="keyword">None</span>, k=<span class="number">1</span>)</div></pre></td></tr></table></figure><p>3.6版本新增！从population集群中随机抽取K个元素（可重复）。weights是相对权重列表，cum_weights是累计权重，两个参数不能同时存在。</p><h2 id="几种Python执行时间的计算方法"><a href="#几种Python执行时间的计算方法" class="headerlink" title="几种Python执行时间的计算方法"></a>几种Python执行时间的计算方法</h2><blockquote><p>来源：<a href="https://blog.csdn.net/wangshuang1631/article/details/54286551" target="_blank" rel="external">几种Python执行时间的计算方法</a></p></blockquote><p>python脚本使用统计时间的方式是time.clock()，而这种方式统计的是CPU的执行时间，不是程序的执行时间。这样会导致在调度Python脚本执行并监控这个进程，python脚本运行时间远远大于python脚本中自己统计的程序执行时间。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> datetime</div><div class="line">starttime = datetime.datetime.now()</div><div class="line"><span class="comment">#long running</span></div><div class="line"><span class="comment">#do something other</span></div><div class="line">endtime = datetime.datetime.now()</div><div class="line"><span class="keyword">print</span> (endtime - starttime).seconds</div></pre></td></tr></table></figure><p>datetime.datetime.now()获取的是当前日期，在程序执行结束之后，这个方式获得的时间值为程序执行的时间。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">start = time.time()</div><div class="line"><span class="comment">#long running</span></div><div class="line"><span class="comment">#do something other</span></div><div class="line">end = time.time()</div><div class="line"><span class="keyword">print</span> end-start</div></pre></td></tr></table></figure><p>ime.time()获取自纪元以来的当前时间（以秒为单位）。如果系统时钟提供它们，则可能存在秒的分数。所以这个地方返回的是一个浮点型类型。这里获取的也是程序的执行时间。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">start = time.clock()</div><div class="line"><span class="comment">#long running</span></div><div class="line"><span class="comment">#do something other</span></div><div class="line">end = time.clock()</div><div class="line"><span class="keyword">print</span> end-start</div></pre></td></tr></table></figure><p>time.clock()返回程序开始或第一次被调用clock()以来的CPU时间。 这具有与系统记录一样多的精度。返回的也是一个浮点类型。这里获得的是CPU的执行时间。<strong>程序执行时间=cpu时间 + io时间 + 休眠或者等待时间。</strong></p><h1 id="PyQt5问题"><a href="#PyQt5问题" class="headerlink" title="PyQt5问题"></a>PyQt5问题</h1><h2 id="PyQT5模块解读"><a href="#PyQT5模块解读" class="headerlink" title="PyQT5模块解读"></a>PyQT5模块解读</h2><p><strong>QtCore</strong>模块涵盖了包的核心的非GUI功能，此模块被用于处理程序中涉及到的 time、文件、目录、数据类型、文本流、链接、mime、线程或进程等对象。</p><p><strong>QtGui</strong>模块涵盖多种基本图形功能的类; 包括但不限于：窗口集、事件处理、2D图形、基本的图像和界面和字体文本。</p><p><strong>QtWidgets</strong>模块包含了一整套UI元素组件，用于建立符合系统风格的classic界面，非常方便，可以在安装时选择是否使用此功能。</p><p><strong>QtMultimedia</strong>模块包含了一套类库，该类库被用于处理多媒体事件，通过调用API接口访问摄像头、语音设备、收发消息（radio functionality）等。</p><p><strong>QtBluetooth</strong>模块包含了处理蓝牙活动的类库，它的功能包括：扫描设备、连接、交互等行为。</p><p><strong>QtNetwork</strong>模块包含用于网络编程的类库，这组类程序通过提供便捷的TCP/IP 及 UDP 的 c/s 程式码集合，使得基于Qt的网络编程更容易。</p><p><strong>QtPositioning</strong>模块用于获取位置信息，此模块允许使用多种方式达成定位，包括但不限于：卫星、无线网、文字信息。此应用一般用于网络地图定位系统。</p><p><strong>Enginio</strong>模块用于构建客户端的应用程式库，用于在运行时访问 Qt Cloud 服务器托管的应用程序。</p><p><strong>QtWebSockets</strong>模块包含了一组类程序，用以实现websocket协议。</p><p><strong>QtWebKit</strong>包含了用于实现基于webkit2的网络浏览器的类库。</p><p><strong>QtWebKitWidgets</strong>模块包含用于基于WebKit1的Web浏览器实现的类，用于基于QtWidgets的应用程序.</p><p><strong>QtXml</strong>模块包含了用于处理XML的类库，此模块为SAX和DOM API 的实现提供了方法。</p><p><strong>QtSvg</strong>模块通过一组类，为显示矢量图形文件的内容提供了方法。</p><p><strong>QtSql</strong>模块提供了数据库对象的接口以供使用.</p><p><strong>QtTest</strong>模块包含了可以通过单元测试，以调试PyQt5应用程式的功能。</p><h2 id="值得记录的细节"><a href="#值得记录的细节" class="headerlink" title="值得记录的细节"></a>值得记录的细节</h2><h3 id="sys-argv参数"><a href="#sys-argv参数" class="headerlink" title="sys.argv参数"></a>sys.argv参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app = QApplication(sys.argv)</div></pre></td></tr></table></figure><p>每个PyQt5应用程序必须创建一个应用程序对象。<code>sys.argv</code>参数是来自命令行的参数列表。Python脚本可以从shell运行。写了这句话就能让我们的程序从命令行启动。</p><h3 id="QWidget"><a href="#QWidget" class="headerlink" title="QWidget()"></a>QWidget()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">w = QWidget()</div></pre></td></tr></table></figure><p>QWidget小部件是PyQt5中所有用户界面对象的基类。我们提供了QWidget的默认构造函数。默认构造函数没有父类。没有父类口小部件称为窗口。</p><h3 id="主循环-main-loop"><a href="#主循环-main-loop" class="headerlink" title="主循环(main loop)"></a>主循环(main loop)</h3><p>GUI应用程序都是事件驱动的。比如键盘事件、鼠标事件等等。还有一些事件来自于系统内部，比如定时事件、其它文件事件等等。在没有任何事件的情况下，应用程序处于睡眠状态。这种事件驱动机制，GUI应用程序都需要一个主循环(main loop)。主循环(main loop)控制应用程序什么时候进入睡眠状态，什么时候被唤醒。所以主循环(main loop)就是干这个的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>事件处理从这一点开始。主循环(main loop)从窗口系统接收事件并将它们分派到应用程序小部件。如果我们调用<code>exit()</code>方法或者主窗口小部件被破坏，那么主循环(main loop)就会结束。</p><p><code>sys.exit()</code>方法确保一个干净的退出。</p><p><code>exec_()</code>方法有一个下划线。这是因为exec是一个Python关键字。 因此，使用exec_（）。</p><h3 id="setGeometry"><a href="#setGeometry" class="headerlink" title="setGeometry()"></a>setGeometry()</h3><p>组合了<code>resize()</code>和<code>move()</code>方法,它在屏幕上定位窗口并设置它的大小；前两个参数是窗口的x和y位置；第三个是宽度；第四个是窗口的高度。</p><p>三个函数均可结合部件以做绝对定位之用。</p><h3 id="qbtn-clicked-connect-QCoreApplication-instance-quit"><a href="#qbtn-clicked-connect-QCoreApplication-instance-quit" class="headerlink" title="qbtn.clicked.connect(QCoreApplication.instance().quit)"></a>qbtn.clicked.connect(QCoreApplication.instance().quit)</h3><p>PyQt5中的事件处理系统采用信号和槽机制构建。 如果我们点击按钮，点击的信号被发出。槽可以是Qt槽函数或任何Python可调用的函数。QCoreApplication包含主事件循环; 它处理和调度所有事件。<code>instance()</code>方法给我们当前的实例。QCoreApplication是通过QApplication创建的。点击的信号连接到终止应用程序的<code>quit()</code>方法。通信在两个对象之间完成：发送方和接收方。发送方是按钮，接收者是应用对象。</p><h3 id="QLineEdit-部件配合使用"><a href="#QLineEdit-部件配合使用" class="headerlink" title="QLineEdit()部件配合使用"></a>QLineEdit()部件配合使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">self.text = QLineEdit(<span class="string">'在这里输入数字'</span>, self)</div><div class="line">self.text.selectAll()</div><div class="line">self.text.setFocus()</div><div class="line">self.text.setGeometry(<span class="number">80</span>, <span class="number">50</span>, <span class="number">150</span> ,<span class="number">30</span>)</div></pre></td></tr></table></figure><p><code>selectAll()</code>方法则是可以理解为将“在这里输入数字”进行全选，方便输入数字，否则还得手动全选删除默认字符；</p><p><code>setFocus()</code>就是让焦点置于文本栏中，方便用户输入，不然还得手动在文本栏中单击一下，很是麻烦；</p><p><code>setGeometry()</code>就是设置小部件的摆放坐标以及大小。</p><h3 id="QMessageBox的主要使用"><a href="#QMessageBox的主要使用" class="headerlink" title="QMessageBox的主要使用"></a>QMessageBox的主要使用</h3><p><code>QMessageBox.about</code>就是弹出一个对话框，告诉你结果是什么样的；</p><p><code>QMessageBox.question</code>问题询问；</p><p><code>QMessageBox.critical</code>图标打叉；</p><p><code>QMessageBox.warning</code>图标警告；</p><p><code>QMessageBox.information</code>消息询问；</p><p><code>QMessageBox</code>对话框包含类型只是图标不同其他无太大差别。</p><h3 id="QLCDNumber、QDial、QSlider"><a href="#QLCDNumber、QDial、QSlider" class="headerlink" title="QLCDNumber、QDial、QSlider"></a>QLCDNumber、QDial、QSlider</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">lcd = QLCDNumber(self)</div><div class="line">dial = QDial(self)</div><div class="line"></div><div class="line">dial.valueChanged.connect(lcd.display) <span class="comment"># 数字牵动的函数</span></div></pre></td></tr></table></figure><p>依次为屏幕上的数字变化、刻盘、滑动条。</p><h3 id="keyPressEvent-键盘响应"><a href="#keyPressEvent-键盘响应" class="headerlink" title="keyPressEvent()键盘响应"></a>keyPressEvent()键盘响应</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">self.lab = QLabel(<span class="string">'方向'</span>,self)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyPressEvent</span><span class="params">(self, e)</span>:</span></div><div class="line">        <span class="keyword">if</span> e.key() == Qt.Key_Up:</div><div class="line">            self.lab.setText(<span class="string">'↑'</span>)</div><div class="line">        <span class="keyword">elif</span> e.key() == Qt.Key_Down:</div><div class="line">            self.lab.setText(<span class="string">'↓'</span>)</div><div class="line">        <span class="keyword">elif</span> e.key() == Qt.Key_Left:</div><div class="line">            self.lab.setText(<span class="string">'←'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.lab.setText(<span class="string">'→'</span>)</div></pre></td></tr></table></figure><p>按住上、下、左、右方向键的时候，窗口中依次会出现对应方位。</p><h3 id="self-setMouseTracking-True"><a href="#self-setMouseTracking-True" class="headerlink" title="self.setMouseTracking(True)"></a>self.setMouseTracking(True)</h3><p>默认情况下禁用鼠标跟踪，如果启用鼠标跟踪，即使没有按钮被按下，小部件也会接收鼠标移动事件。当然也可以不写，只需要在执行的过程中按照鼠标左键也行。</p><h3 id="QFormLayout表单布局"><a href="#QFormLayout表单布局" class="headerlink" title="QFormLayout表单布局"></a>QFormLayout表单布局</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">formlayout = QFormLayout()</div><div class="line">nameLabel = QLabel(<span class="string">"姓名"</span>)</div><div class="line">nameLineEdit = QLineEdit(<span class="string">""</span>)</div><div class="line">introductionLabel = QLabel(<span class="string">"简介"</span>)</div><div class="line">introductionLineEdit = QTextEdit(<span class="string">""</span>)</div><div class="line"></div><div class="line">formlayout.addRow(nameLabel,nameLineEdit)</div><div class="line">formlayout.addRow(introductionLabel,introductionLineEdit)</div><div class="line">self.setLayout(formlayout)</div></pre></td></tr></table></figure><p>类似于将其一一对应(“姓名”：一空…)。QFormLayout是一个方便的布局类，其中的控件以两列的形式被布局在表单中。左列包括标签，右列包含输入控件，例如：QLineEdit、QSpinBox、QTextEdit等。</p><h2 id="常用函数使用"><a href="#常用函数使用" class="headerlink" title="常用函数使用"></a>常用函数使用</h2><h3 id="clear-、accept-、ignore-函数"><a href="#clear-、accept-、ignore-函数" class="headerlink" title="clear()、accept()、ignore()函数"></a>clear()、accept()、ignore()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 示例</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        reply = QMessageBox.question(self, <span class="string">'确认'</span>, <span class="string">'确认退出吗'</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</div><div class="line">            event.accept()       </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            event.ignore()</div></pre></td></tr></table></figure><p><code>clear()</code>函数：内容清除；</p><p><code>accept()</code>函数：接收并终止应用程序的事件；</p><p><code>ignore()</code>函数：跳过并终止应用程序的事件。</p><h3 id="update-、drawLine-函数"><a href="#update-、drawLine-函数" class="headerlink" title="update()、drawLine()函数"></a>update()、drawLine()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        distance_from_center = round(((event.y() - <span class="number">250</span>)**<span class="number">2</span> + (event.x() - <span class="number">500</span>)**<span class="number">2</span>)**<span class="number">0.5</span>)</div><div class="line">        self.label.setText(<span class="string">'坐标: ( x: %d ,y: %d )'</span> % (event.x(), event.y()) + <span class="string">" 离中心点距离: "</span> + str(distance_from_center))       </div><div class="line">        self.pos = event.pos()</div><div class="line">        self.update()</div></pre></td></tr></table></figure><p><code>update()</code>函数：更新图形；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.pos:</div><div class="line">            q = QPainter(self)</div><div class="line">            q.drawLine(<span class="number">0</span>, <span class="number">0</span>, self.pos.x(), self.pos.y())</div></pre></td></tr></table></figure><p><code>drawLine()</code>方法绘制一条线，需要四个参数，起点的坐标，终点的坐标。可配合鼠标实现。</p><h3 id="sender-、text-函数"><a href="#sender-、text-函数" class="headerlink" title="sender()、text()函数"></a>sender()、text()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 石头剪刀布游戏</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QMessageBox, QWidget, QPushButton)</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.initUI()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.setGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'学点编程吧'</span>)</div><div class="line"></div><div class="line">        bt1 = QPushButton(<span class="string">'剪刀'</span>,self)</div><div class="line">        bt1.setGeometry(<span class="number">30</span>,<span class="number">180</span>,<span class="number">50</span>,<span class="number">50</span>)</div><div class="line"></div><div class="line">        bt2 = QPushButton(<span class="string">'石头'</span>,self)</div><div class="line">        bt2.setGeometry(<span class="number">100</span>,<span class="number">180</span>,<span class="number">50</span>,<span class="number">50</span>)</div><div class="line"></div><div class="line">        bt3 = QPushButton(<span class="string">'布'</span>,self)</div><div class="line">        bt3.setGeometry(<span class="number">170</span>,<span class="number">180</span>,<span class="number">50</span>,<span class="number">50</span>)</div><div class="line"></div><div class="line">        bt1.clicked.connect(self.buttonclicked)</div><div class="line">        bt2.clicked.connect(self.buttonclicked)</div><div class="line">        bt3.clicked.connect(self.buttonclicked)</div><div class="line"></div><div class="line">        self.show()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buttonclicked</span><span class="params">(self)</span>:</span></div><div class="line">        computer = randint(<span class="number">1</span>,<span class="number">3</span>)</div><div class="line">        player = <span class="number">0</span></div><div class="line">        sender = self.sender()</div><div class="line">        <span class="keyword">if</span> sender.text() == <span class="string">'剪刀'</span>:</div><div class="line">            player = <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> sender.text() == <span class="string">'石头'</span>:</div><div class="line">            player = <span class="number">2</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            player = <span class="number">3</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> player == computer:</div><div class="line">            QMessageBox.about(self, <span class="string">'结果'</span>, <span class="string">'平手'</span>)</div><div class="line">        <span class="keyword">elif</span> player == <span class="number">1</span> <span class="keyword">and</span> computer == <span class="number">2</span>:</div><div class="line">            QMessageBox.about(self, <span class="string">'结果'</span>, <span class="string">'电脑：石头，电脑赢了！'</span>)</div><div class="line">        <span class="keyword">elif</span> player == <span class="number">2</span> <span class="keyword">and</span> computer == <span class="number">3</span>:</div><div class="line">            QMessageBox.about(self, <span class="string">'结果'</span>, <span class="string">'电脑：布，电脑赢了！'</span>)</div><div class="line">        <span class="keyword">elif</span> player == <span class="number">3</span> <span class="keyword">and</span> computer == <span class="number">1</span>:</div><div class="line">            QMessageBox.about(self,<span class="string">'结果'</span>,<span class="string">'电脑：剪刀，电脑赢了！'</span>)</div><div class="line">        <span class="keyword">elif</span> computer == <span class="number">1</span> <span class="keyword">and</span> player == <span class="number">2</span>:</div><div class="line">            QMessageBox.about(self,<span class="string">'结果'</span>,<span class="string">'电脑：剪刀，玩家赢了！'</span>)</div><div class="line">        <span class="keyword">elif</span> computer == <span class="number">2</span> <span class="keyword">and</span> player == <span class="number">3</span>:</div><div class="line">            QMessageBox.about(self,<span class="string">'结果'</span>,<span class="string">'电脑：石头，玩家赢了！'</span>)</div><div class="line">        <span class="keyword">elif</span> computer == <span class="number">3</span> <span class="keyword">and</span> player == <span class="number">1</span>:</div><div class="line">            QMessageBox.about(self,<span class="string">'结果'</span>,<span class="string">'电脑：布，玩家赢了！'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p><code>sender()</code>函数方法即为<code>.clicked.connect()</code>一类的函数相接；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sender = self.sender()</div><div class="line">        <span class="keyword">if</span> sender.text() == <span class="string">'剪刀'</span>:</div><div class="line">            player = <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> sender.text() == <span class="string">'石头'</span>:</div><div class="line">            player = <span class="number">2</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            player = <span class="number">3</span></div></pre></td></tr></table></figure><p>在以上代码中，<code>sender()</code>函数可作为实例对象，<code>text()</code>函数主要以文字接收为主。</p><h3 id="自定义信号Signal-函数"><a href="#自定义信号Signal-函数" class="headerlink" title="自定义信号Signal()函数"></a>自定义信号Signal()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 单击鼠标的时候，就会弹出对话框告知我们单击了鼠标。</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QMessageBox)</div><div class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> (pyqtSignal, QObject)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span><span class="params">(QObject)</span>:</span></div><div class="line">    showmouse = pyqtSignal()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.initUI()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.setGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'学点编程吧'</span>)</div><div class="line"></div><div class="line">        self.s = Signal()</div><div class="line">        self.s.showmouse.connect(self.about)</div><div class="line"></div><div class="line">        self.show()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">(self)</span>:</span></div><div class="line">        QMessageBox.about(self,<span class="string">'鼠标'</span>,<span class="string">'你点鼠标了吧！'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, e)</span>:</span></div><div class="line">        self.s.showmouse.emit()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>建一个名为showmouse的新信号。该信号在鼠标按压事件期间发出。 该信号连接到QMainWindow的about()的槽。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span><span class="params">(QObject)</span>:</span></div><div class="line">    showmouse = pyqtSignal()</div></pre></td></tr></table></figure><p>使用pyqtSignal()作为外部Signal类的类属性创建一个信号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.s = Signal()</div><div class="line">self.s.showmouse.connect(self.about)</div></pre></td></tr></table></figure><p>自定义showmouse信号连接到QMainWindow的about()的槽。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, e)</span>:</span></div><div class="line">    self.s.showmouse.emit()</div></pre></td></tr></table></figure><p>当我们用鼠标指针点击窗口时，会发出showmouse信号,调用相应的槽函数。</p><h3 id="addStretch-函数"><a href="#addStretch-函数" class="headerlink" title="addStretch()函数"></a>addStretch()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hbox = QHBoxLayout()</div><div class="line">hbox.addStretch(<span class="number">1</span>)</div><div class="line">hbox.addWidget(bt1)</div><div class="line">hbox.addWidget(bt2)</div><div class="line">hbox.addWidget(bt3)</div><div class="line"></div><div class="line">vbox = QVBoxLayout()</div><div class="line">vbox.addStretch(<span class="number">1</span>)</div><div class="line">vbox.addLayout(hbox)</div><div class="line"></div><div class="line">self.setLayout(vbox)</div></pre></td></tr></table></figure><p>HBoxLayout和一个QVBoxLayout主要以做水平垂直布局之用，<code>addStretch(1)</code>，<code>addStretch()</code>函数的作用是在布局器中增加一个伸缩量，里面的参数表示QSpacerItem的个数，默认值为零，会将你放在layout中的空间压缩成默认的大小。例如用addStretch函数实现将QHBoxLayout的布局器的空白空间分配，<code>addStretch()</code>函数可在设定好的布局前提下将整个窗口进行拉伸(可缩小、放大)。<strong>并非每个布局函数均可使用！！</strong></p><h3 id="QGridLayout-、lcd-display-、zip-函数"><a href="#QGridLayout-、lcd-display-、zip-函数" class="headerlink" title="QGridLayout()、lcd.display()、zip()函数"></a>QGridLayout()、lcd.display()、zip()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 计算机界面核心代码</span></div><div class="line">names = [<span class="string">'Cls'</span>, <span class="string">'Bc'</span>, <span class="string">''</span>, <span class="string">'Close'</span>,</div><div class="line">                 <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'/'</span>,</div><div class="line">                 <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'*'</span>,</div><div class="line">                 <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'-'</span>,</div><div class="line">                 <span class="string">'0'</span>, <span class="string">'.'</span>, <span class="string">'='</span>, <span class="string">'+'</span>]</div><div class="line"></div><div class="line">        positions = [(i,j) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>,<span class="number">9</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>,<span class="number">8</span>)]</div><div class="line">        <span class="keyword">for</span> position, name <span class="keyword">in</span> zip(positions, names):</div><div class="line">            <span class="keyword">if</span> name == <span class="string">''</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            button = QPushButton(name)</div><div class="line">            grid.addWidget(button, *position)</div><div class="line">            button.clicked.connect(self.Cli)</div><div class="line"></div><div class="line">        self.show()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Cli</span><span class="params">(self)</span>:</span></div><div class="line">        sender = self.sender().text()</div><div class="line">        ls = [<span class="string">'/'</span>, <span class="string">'*'</span>, <span class="string">'-'</span>, <span class="string">'='</span>, <span class="string">'+'</span>]</div><div class="line">        <span class="keyword">if</span> sender <span class="keyword">in</span> ls:</div><div class="line">            self.lcd.display(<span class="string">'A'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.lcd.display(sender)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grid = QGridLayout()</div><div class="line">self.setLayout(grid)</div></pre></td></tr></table></figure><p>创建QGridLayout的实例并将其设置为应用程序窗口的布局。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grid.addWidget(self.lcd,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>)</div><div class="line">grid.setSpacing(<span class="number">10</span>)</div></pre></td></tr></table></figure><p>如果我们向窗格添加窗口小部件，我们可以提供窗口小部件的行跨度和列跨度。在我们的例子中，我们使QLCDNumber小部件跨越4行。同时我们创建一个网格布局并在窗口小部件之间设置间距。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">'Cls'</span>, <span class="string">'Bc'</span>, <span class="string">''</span>, <span class="string">'Close'</span>,</div><div class="line">        <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'/'</span>,</div><div class="line">        <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'*'</span>,</div><div class="line">        <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'-'</span>,        </div><div class="line">        <span class="string">'0'</span>, <span class="string">'.'</span>, <span class="string">'='</span>, <span class="string">'+'</span>]</div><div class="line">positions = [(i,j) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>,<span class="number">9</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>,<span class="number">8</span>)]</div></pre></td></tr></table></figure><p>我们创建了19个按钮并指定了具体的坐标位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> name == <span class="string">''</span>: </div><div class="line">   <span class="keyword">continue</span></div><div class="line">button = QPushButton(name)</div><div class="line">grid.addWidget(button, *position)</div><div class="line">button.clicked.connect(self.Cli)</div></pre></td></tr></table></figure><p>使用<code>addWidget()</code>方法创建并添加到布局中的按钮。同时当我们按下按钮的时候调用self.Cli()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Cli</span><span class="params">(self)</span>:</span></div><div class="line">    sender = self.sender().text()</div><div class="line">    ls = [<span class="string">'/'</span>, <span class="string">'*'</span>, <span class="string">'-'</span>, <span class="string">'='</span>, <span class="string">'+'</span>]</div><div class="line">    <span class="keyword">if</span> sender <span class="keyword">in</span> ls:</div><div class="line">        self.lcd.display(<span class="string">'A'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.lcd.display(sender)</div></pre></td></tr></table></figure><p>当我们按下按钮的时候我们会得到按钮上显示的名称，如果是操作符则在LCD上显示“A”，LCD的显示功能有限，否则显示我们按下的信息。</p><p><code>lcd.display()</code>函数结合QLCDNumber较为常见。</p><p>另外解释一下<code>zip()</code>函数：<code>zip()</code>用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。可以使用<code>list()</code>转换来输出列表。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用<code>*</code>号操作符，可以将元组解压为列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">zip 语法：</span></div><div class="line"><span class="string">zip([iterable, ...])</span></div><div class="line"><span class="string">参数说明：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">iterabl -- 一个或多个迭代器;</span></div><div class="line"><span class="string">返回值:</span></div><div class="line"><span class="string">返回一个对象。</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="comment"># 实例</span></div><div class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zipped = zip(a,b)     <span class="comment"># 返回一个对象</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zipped</div><div class="line">&lt;zip object at <span class="number">0x103abc288</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(zipped)  <span class="comment"># list() 转换为列表</span></div><div class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip(a,c))              <span class="comment"># 元素个数与最短的列表一致</span></div><div class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a1, a2 = zip(*zip(a,b))          <span class="comment"># 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(a1)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(a2)</div><div class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure><h3 id="statusBar-、showMessage-函数"><a href="#statusBar-、showMessage-函数" class="headerlink" title="statusBar()、showMessage()函数"></a>statusBar()、showMessage()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.statusBar().showMessage(<span class="string">'准备就绪'</span>)</div></pre></td></tr></table></figure><p>要获取状态栏，我们调用QWidget.QMainWindow类的<code>statusBar()</code>方法。该方法的第一个调用创建一个状态栏。后续调用返回状态栏对象。<code>showMessage()</code>在状态栏上显示一条消息。</p><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><h3 id="简单的菜单"><a href="#简单的菜单" class="headerlink" title="简单的菜单"></a>简单的菜单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QAction, qApp</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.InitUI()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">InitUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.statusBar().showMessage(<span class="string">'准备就绪'</span>)</div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'关注微信公众号：学点编程吧--简单的菜单'</span>)</div><div class="line"></div><div class="line">        exitAct = QAction(QIcon(<span class="string">'exit.png'</span>), <span class="string">'退出(&amp;E)'</span>, self)</div><div class="line">        exitAct.setShortcut(<span class="string">'command+Q'</span>)</div><div class="line">        exitAct.setStatusTip(<span class="string">'退出程序'</span>)</div><div class="line">        exitAct.triggered.connect(qApp.quit)</div><div class="line"></div><div class="line">        menubar = self.menuBar()</div><div class="line">        fileMenu = menubar.addMenu(<span class="string">'文件(&amp;F)'</span>)</div><div class="line">        fileMenu.addAction(exitAct)</div><div class="line"></div><div class="line">        self.show()</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>在上面的例子中，用了一个菜单创建一个菜单。此菜单将包含一个选择时终止应用程序的操作。还创建状态栏。该操作可通过<code>command + Q</code>快捷方式访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exitAct = QAction(QIcon(<span class="string">'exit.png'</span>), <span class="string">'退出(&amp;E)'</span>, self)</div><div class="line">exitAct.setShortcut(<span class="string">'Ctrl+Q'</span>)</div><div class="line">exitAct.setStatusTip(<span class="string">'退出程序'</span>)</div></pre></td></tr></table></figure><p>QAction是使用菜单栏，工具栏或自定义键盘快捷方式执行操作的抽象。在上述三行中，我们创建一个具有特定图标和“退出”标签的动作。此外，为此操作定义了快捷方式。当我们将鼠标指针悬停在菜单项上时，第三行创建状态栏显示在状态栏中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exitAct.triggered.connect(qApp.quit)</div></pre></td></tr></table></figure><p>当我们选择这个特定的动作时，发出触发信号。信号连接到QApplication小部件的quit()方法。 这终止了应用程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">menubar = self.menuBar()</div><div class="line">fileMenu = menubar.addMenu(<span class="string">'文件(&amp;F)'</span>)</div><div class="line">fileMenu.addAction(exitAct)</div></pre></td></tr></table></figure><p><code>menuBar()</code>方法创建一个菜单栏。我们使用<code>addMenu()</code>创建文件菜单，并使用<code>addAction()</code>添加操作。</p><p>上面的代码中我们在退出、文件后面都增加了“&amp;”这个符号，增加这个符号后，当我们按住“Alt+F”的时候就能快速打开文件这个菜单，同理按住“Alt+E”的时候就能退出了。</p><h3 id="子菜单"><a href="#子菜单" class="headerlink" title="子菜单"></a>子菜单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QAction, qApp, QMenu</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.InitUI()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">InitUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.statusBar().showMessage(<span class="string">'准备就绪'</span>)</div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'关注微信公众号：学点编程吧--子菜单'</span>)</div><div class="line"></div><div class="line">        exitAct = QAction(QIcon(<span class="string">'exit.png'</span>), <span class="string">'退出(&amp;E)'</span>, self)</div><div class="line">        exitAct.setShortcut(<span class="string">'Ctrl+Q'</span>)</div><div class="line">        exitAct.setStatusTip(<span class="string">'退出程序'</span>)</div><div class="line">        exitAct.triggered.connect(qApp.quit)</div><div class="line"></div><div class="line">        saveMenu = QMenu(<span class="string">'保存方式(&amp;S)'</span>, self)</div><div class="line">        saveAct = QAction(QIcon(<span class="string">'save.png'</span>),<span class="string">'保存...'</span>, self)</div><div class="line">        saveAct.setShortcut(<span class="string">'Ctrl+S'</span>)</div><div class="line">        saveAct.setStatusTip(<span class="string">'保存文件'</span>)</div><div class="line">        saveasAct = QAction(QIcon(<span class="string">'saveas.png'</span>),<span class="string">'另存为...(&amp;O)'</span>, self)</div><div class="line">        saveasAct.setStatusTip(<span class="string">'文件另存为'</span>)</div><div class="line">        saveMenu.addAction(saveAct)</div><div class="line">        saveMenu.addAction(saveasAct)</div><div class="line"></div><div class="line">        newAct = QAction(QIcon(<span class="string">'new.png'</span>),<span class="string">'新建(&amp;N)'</span>,self)</div><div class="line">        newAct.setShortcut(<span class="string">'Ctrl+N'</span>)</div><div class="line"></div><div class="line">        menubar = self.menuBar()</div><div class="line">        fileMenu = menubar.addMenu(<span class="string">'文件(&amp;F)'</span>)</div><div class="line">        fileMenu.addAction(newAct)</div><div class="line">        fileMenu.addMenu(saveMenu)</div><div class="line">        fileMenu.addSeparator() <span class="comment"># 貌似达成子菜单不可少的函数</span></div><div class="line">        fileMenu.addAction(exitAct)</div><div class="line"></div><div class="line">        self.show()</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>在这个例子中，有三个菜单项：其中两个位于文件菜单中（新建、退出），另一个位于文件的保存子菜单中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">saveMenu = QMenu(<span class="string">'保存方式(&amp;S)'</span>, self)</div></pre></td></tr></table></figure><p>使用QMenu创建新菜单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">saveAct = QAction(QIcon(<span class="string">'save.png'</span>),<span class="string">'保存...'</span>, self)</div><div class="line">saveAct.setShortcut(<span class="string">'Ctrl+S'</span>)</div><div class="line">saveAct.setStatusTip(<span class="string">'保存文件'</span>)</div><div class="line">saveasAct = QAction(QIcon(<span class="string">'saveas.png'</span>),<span class="string">'另存为...(&amp;O)'</span>, self)</div><div class="line">saveasAct.setStatusTip(<span class="string">'文件另存为'</span>)</div><div class="line">saveMenu.addAction(saveAct)</div><div class="line">saveMenu.addAction(saveasAct)</div></pre></td></tr></table></figure><p>两个动作使用addAction()被添加到子菜单中。</p><h3 id="右键菜单-上下文菜单"><a href="#右键菜单-上下文菜单" class="headerlink" title="右键菜单/上下文菜单"></a>右键菜单/上下文菜单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QAction, qApp, QMenu</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.InitUI()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">InitUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.statusBar().showMessage(<span class="string">'准备就绪'</span>)</div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'关注微信公众号：学点编程吧--上下文菜单'</span>)</div><div class="line"></div><div class="line">        exitAct = QAction(QIcon(<span class="string">'exit.png'</span>), <span class="string">'退出(&amp;E)'</span>, self)</div><div class="line">        exitAct.setShortcut(<span class="string">'Ctrl+Q'</span>)</div><div class="line">        exitAct.setStatusTip(<span class="string">'退出程序'</span>)</div><div class="line">        exitAct.triggered.connect(qApp.quit)</div><div class="line"></div><div class="line">        saveMenu = QMenu(<span class="string">'保存方式(&amp;S)'</span>, self)</div><div class="line">        saveAct = QAction(QIcon(<span class="string">'save.png'</span>),<span class="string">'保存...'</span>, self)</div><div class="line">        saveAct.setShortcut(<span class="string">'Ctrl+S'</span>)</div><div class="line">        saveAct.setStatusTip(<span class="string">'保存文件'</span>)</div><div class="line">        saveasAct = QAction(QIcon(<span class="string">'saveas.png'</span>),<span class="string">'另存为...(&amp;O)'</span>, self)</div><div class="line">        saveasAct.setStatusTip(<span class="string">'文件另存为'</span>)</div><div class="line">        saveMenu.addAction(saveAct)</div><div class="line">        saveMenu.addAction(saveasAct)</div><div class="line"></div><div class="line">        newAct = QAction(QIcon(<span class="string">'new.png'</span>),<span class="string">'新建(&amp;N)'</span>,self)</div><div class="line">        newAct.setShortcut(<span class="string">'Ctrl+N'</span>)</div><div class="line">        newAct.setStatusTip(<span class="string">'新建文件'</span>)</div><div class="line"></div><div class="line">        menubar = self.menuBar()</div><div class="line">        fileMenu = menubar.addMenu(<span class="string">'文件(&amp;F)'</span>)</div><div class="line">        fileMenu.addAction(newAct)</div><div class="line">        fileMenu.addMenu(saveMenu)</div><div class="line">        fileMenu.addSeparator()</div><div class="line">        fileMenu.addAction(exitAct)</div><div class="line"></div><div class="line">        self.show()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">contextMenuEvent</span><span class="params">(self, event)</span>:</span></div><div class="line"></div><div class="line">       cmenu = QMenu(self)</div><div class="line"></div><div class="line">       newAct = cmenu.addAction(<span class="string">"新建"</span>)</div><div class="line">       opnAct = cmenu.addAction(<span class="string">"保存"</span>)</div><div class="line">       quitAct = cmenu.addAction(<span class="string">"退出"</span>)</div><div class="line">       action = cmenu.exec_(self.mapToGlobal(event.pos()))</div><div class="line">       <span class="keyword">if</span> action == quitAct:</div><div class="line">           qApp.quit()</div><div class="line">       </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>要使用上下文菜单，必须重新实现contextMenuEvent()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">action = cmenu.exec_(self.mapToGlobal(event.pos()))</div></pre></td></tr></table></figure><p>使用<code>exec_()</code>方法显示上下文菜单。从事件对象获取鼠标指针的坐标。 mapToGlobal()方法将窗口小部件坐标转换为全局屏幕坐标。</p><blockquote><p><code>globalPos()</code>，给出的坐标信息是相对于桌面的，即以桌面左上角为原点。</p><p><code>pos()</code>，是相对于窗口的，以窗口左上角为原点（去除边框）。即pos()给出的是一个相对位置坐标。而globalPos(),给出的是一个绝对坐标。</p></blockquote><p>简单来说可理解为：一个相对于全电脑屏幕，一个仅仅相对于建立的界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> action == quitAct:</div><div class="line">    qApp.quit()</div></pre></td></tr></table></figure><p>如果从上下文菜单返回的操作等于退出操作，终止应用程序。</p><h3 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QAction, qApp, QMenu</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QMainWindow)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.InitUI()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">InitUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.statusBar().showMessage(<span class="string">'准备就绪'</span>)</div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'关注微信公众号：学点编程吧--上下文菜单'</span>)</div><div class="line"></div><div class="line">        exitAct = QAction(QIcon(<span class="string">'exit.png'</span>), <span class="string">'退出(&amp;E)'</span>, self)</div><div class="line">        exitAct.setShortcut(<span class="string">'Ctrl+Q'</span>)</div><div class="line">        exitAct.setStatusTip(<span class="string">'退出程序'</span>)</div><div class="line">        exitAct.triggered.connect(qApp.quit)</div><div class="line"></div><div class="line">        saveMenu = QMenu(<span class="string">'保存方式(&amp;S)'</span>, self)</div><div class="line">        saveAct = QAction(QIcon(<span class="string">'save.png'</span>),<span class="string">'保存...'</span>, self)</div><div class="line">        saveAct.setShortcut(<span class="string">'Ctrl+S'</span>)</div><div class="line">        saveAct.setStatusTip(<span class="string">'保存文件'</span>)</div><div class="line">        saveasAct = QAction(QIcon(<span class="string">'saveas.png'</span>),<span class="string">'另存为...(&amp;O)'</span>, self)</div><div class="line">        saveasAct.setStatusTip(<span class="string">'文件另存为'</span>)</div><div class="line">        saveMenu.addAction(saveAct)</div><div class="line">        saveMenu.addAction(saveasAct)</div><div class="line"></div><div class="line">        newAct = QAction(QIcon(<span class="string">'new.png'</span>),<span class="string">'新建(&amp;N)'</span>,self)</div><div class="line">        newAct.setShortcut(<span class="string">'Ctrl+N'</span>)</div><div class="line">        newAct.setStatusTip(<span class="string">'新建文件'</span>)</div><div class="line"></div><div class="line">        menubar = self.menuBar()</div><div class="line">        fileMenu = menubar.addMenu(<span class="string">'文件(&amp;F)'</span>)</div><div class="line">        fileMenu.addAction(newAct)</div><div class="line">        fileMenu.addMenu(saveMenu)</div><div class="line">        fileMenu.addSeparator()</div><div class="line">        fileMenu.addAction(exitAct)</div><div class="line"></div><div class="line">        toolbar = self.addToolBar(<span class="string">'工具栏'</span>)</div><div class="line">        toolbar.addAction(newAct)</div><div class="line">        toolbar.addAction(exitAct)</div><div class="line">        self.show()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>可以把一些常用的命令放在工具栏上，例如新建、打开、保存等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">toolbar = self.addToolBar(<span class="string">'工具栏'</span>)</div><div class="line">toolbar.addAction(newAct)</div><div class="line">toolbar.addAction(exitAct)</div></pre></td></tr></table></figure><p>工具栏使用addToolBar()方法创建。可使用addAction()向工具栏添加两个动作对象。</p><h2 id="对话框窗口"><a href="#对话框窗口" class="headerlink" title="对话框窗口"></a>对话框窗口</h2><p>对话框窗口或对话框是大多数现代GUI应用程序中不可或缺的一部分。在计算机应用程序中，一个对话框是一个用于“与应用程序”通话的窗口。对话框用于输入数据，修改数据，更改应用程序设置等。</p><h3 id="标准对话框、QInputDialog的主要方法"><a href="#标准对话框、QInputDialog的主要方法" class="headerlink" title="标准对话框、QInputDialog的主要方法"></a>标准对话框、QInputDialog的主要方法</h3><p>提供了一个简单的便利对话框，可以从用户获取单个值。 输入值可以是列表中的字符串，数字或项目。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 可以输入浮点型小数，最小值、最大值可以自己设定。</span></div><div class="line">getDouble(QWidget, str, str, value: float = 0, min: float = -2147483647, max: float = 2147483647, decimals: int = 1, flags: Union[Qt.WindowFlags,Qt.WindowType]=Qt.WindowFlags())-&gt;Tuple[float,bool]</div><div class="line"></div><div class="line"><span class="comment"># 可以输入整数，最小值、最大值可以自己设定，步长也可以自己设定。</span></div><div class="line">getInt(QWidget, str, str, value: int = 0, min: int = -2147483647, max: int = 2147483647, step: int = 1, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()) -&gt; Tuple[int, bool]</div><div class="line"></div><div class="line"><span class="comment"># 输入选择项，待选放到列表中，需提前设定</span></div><div class="line">getItem(QWidget, str, str, Iterable[str], current:int=0,editable:bool=True,flags:Union[Qt.WindowFlags,Qt.WindowType]=Qt.WindowFlags(),inputMethodHints:Union[Qt.InputMethodHints,Qt.InputMethodHint] = Qt.ImhNone) -&gt; Tuple[str, bool]</div><div class="line"></div><div class="line"><span class="comment"># 可以输入富文本，在里面增加一些格式信息。如将文字加粗等操作。</span></div><div class="line">getMultiLineText(QWidget, str, str, text: str = '', flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags(), inputMethodHints: Union[Qt.InputMethodHints, Qt.InputMethodHint] = Qt.ImhNone)-&gt; Tuple[str, bool]</div><div class="line"></div><div class="line"><span class="comment"># 直接获取输入的字符文本数据。</span></div><div class="line">getText(QWidget, str, str, echo: QLineEdit.EchoMode = QLineEdit.Normal,text: str = '', flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags(),inputMethodHints: Union[Qt.InputMethodHints, Qt.InputMethodHint] = Qt.ImhNone) -&gt; Tuple[str, bool]</div></pre></td></tr></table></figure><p>以上为主要使用的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QPushButton, QLabel, QInputDialog, QTextBrowser)</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.initUI()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.setGeometry(<span class="number">500</span>,<span class="number">500</span>,<span class="number">500</span>,<span class="number">550</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'关注微信公众号：学点编程吧--标准输入对话框'</span>)</div><div class="line"></div><div class="line">        self.lb1 = QLabel(<span class="string">'姓名：'</span>,self)</div><div class="line">        self.lb1.move(<span class="number">20</span>,<span class="number">20</span>)</div><div class="line"></div><div class="line">        self.lb2 = QLabel(<span class="string">'年龄：'</span>,self)</div><div class="line">        self.lb2.move(<span class="number">20</span>,<span class="number">80</span>)</div><div class="line"></div><div class="line">        self.lb3 = QLabel(<span class="string">'性别：'</span>,self)</div><div class="line">        self.lb3.move(<span class="number">20</span>,<span class="number">140</span>)</div><div class="line">        </div><div class="line">        self.lb4 = QLabel(<span class="string">'身高（cm）：'</span>,self)</div><div class="line">        self.lb4.move(<span class="number">20</span>,<span class="number">200</span>)</div><div class="line"></div><div class="line">        self.lb5 = QLabel(<span class="string">'基本信息：'</span>,self)</div><div class="line">        self.lb5.move(<span class="number">20</span>,<span class="number">260</span>)</div><div class="line"></div><div class="line">        self.lb6 = QLabel(<span class="string">'学点编程'</span>,self)</div><div class="line">        self.lb6.move(<span class="number">80</span>,<span class="number">20</span>)</div><div class="line"></div><div class="line">        self.lb7 = QLabel(<span class="string">'18'</span>,self)</div><div class="line">        self.lb7.move(<span class="number">80</span>,<span class="number">80</span>)</div><div class="line"></div><div class="line">        self.lb8 = QLabel(<span class="string">'男'</span>,self)</div><div class="line">        self.lb8.move(<span class="number">80</span>,<span class="number">140</span>)</div><div class="line"></div><div class="line">        self.lb9 = QLabel(<span class="string">'175'</span>,self)</div><div class="line">        self.lb9.move(<span class="number">120</span>,<span class="number">200</span>)</div><div class="line"></div><div class="line">        self.tb = QTextBrowser(self)</div><div class="line">        self.tb.move(<span class="number">20</span>,<span class="number">320</span>)</div><div class="line"> </div><div class="line"> self.bt1 = QPushButton(<span class="string">'修改姓名'</span>,self)</div><div class="line">        self.bt1.move(<span class="number">200</span>,<span class="number">20</span>)</div><div class="line"></div><div class="line">        self.bt2 = QPushButton(<span class="string">'修改年龄'</span>,self)</div><div class="line">        self.bt2.move(<span class="number">200</span>,<span class="number">80</span>)        </div><div class="line"></div><div class="line">        self.bt3 = QPushButton(<span class="string">'修改性别'</span>,self)</div><div class="line">        self.bt3.move(<span class="number">200</span>,<span class="number">140</span>)        </div><div class="line"></div><div class="line">        self.bt4 = QPushButton(<span class="string">'修改身高'</span>,self)</div><div class="line">        self.bt4.move(<span class="number">200</span>,<span class="number">200</span>)        </div><div class="line"></div><div class="line">        self.bt5 = QPushButton(<span class="string">'修改信息'</span>,self)</div><div class="line">        self.bt5.move(<span class="number">200</span>,<span class="number">260</span>)</div><div class="line"></div><div class="line">        self.show()</div><div class="line">        </div><div class="line">        self.bt1.clicked.connect(self.showDialog)</div><div class="line">        self.bt2.clicked.connect(self.showDialog)</div><div class="line">        self.bt3.clicked.connect(self.showDialog)</div><div class="line">        self.bt4.clicked.connect(self.showDialog)</div><div class="line">        self.bt5.clicked.connect(self.showDialog)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></div><div class="line">        sender = self.sender()</div><div class="line">        sex = [<span class="string">'男'</span>,<span class="string">'女'</span>]</div><div class="line">        <span class="keyword">if</span> sender == self.bt1:</div><div class="line">            text, ok = QInputDialog.getText(self, <span class="string">'修改姓名'</span>, <span class="string">'请输入姓名：'</span>)</div><div class="line">            <span class="keyword">if</span> ok:</div><div class="line">                self.lb6.setText(text) </div><div class="line">        <span class="keyword">elif</span> sender == self.bt2:</div><div class="line">            text, ok = QInputDialog.getInt(self, <span class="string">'修改年龄'</span>, <span class="string">'请输入年龄：'</span>, min = <span class="number">1</span>) </div><div class="line">            <span class="keyword">if</span> ok:</div><div class="line">                self.lb7.setText(str(text))</div><div class="line">        <span class="keyword">elif</span> sender == self.bt3:</div><div class="line">            text, ok = QInputDialog.getItem(self, <span class="string">'修改性别'</span>, <span class="string">'请选择性别：'</span>,sex)            </div><div class="line">            <span class="keyword">if</span> ok:</div><div class="line">                self.lb8.setText(text)        </div><div class="line">        <span class="keyword">elif</span> sender == self.bt4:</div><div class="line">            text, ok = QInputDialog.getDouble(self, <span class="string">'修改身高'</span>, <span class="string">'请输入身高：'</span>, min = <span class="number">1.0</span>)</div><div class="line">            <span class="keyword">if</span> ok:</div><div class="line">                self.lb9.setText(str(text))</div><div class="line">        <span class="keyword">elif</span> sender == self.bt5:</div><div class="line">            text, ok = QInputDialog.getMultiLineText(self, <span class="string">'修改信息'</span>, <span class="string">'请输入个人信息：'</span>)</div><div class="line">            <span class="keyword">if</span> ok:</div><div class="line">                self.tb.setText(text)</div><div class="line">                </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>该示例具有按钮和标签和文本浏览器。通过按钮显示输入对话框以便获取值。输入的文本将显示在窗口的标签和文本浏览器中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">self.bt1.clicked.connect(self.showDialog)</div><div class="line">self.bt2.clicked.connect(self.showDialog)</div><div class="line">self.bt3.clicked.connect(self.showDialog)</div><div class="line">self.bt4.clicked.connect(self.showDialog)</div><div class="line">self.bt5.clicked.connect(self.showDialog)</div></pre></td></tr></table></figure><p>单击按钮连接对应的槽函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> sender == self.bt1:</div><div class="line">    text, ok = QInputDialog.getText(self, <span class="string">'修改姓名'</span>, <span class="string">'请输入姓名：'</span>)</div></pre></td></tr></table></figure><p>若按下按钮1，此时显示输入对话框。第一个字符串是一个对话标题，第二个是对话框中的一个消息。对话框返回输入的文本和布尔值。如果点击Ok按钮，布尔值为true。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ok:</div><div class="line">    self.lb6.setText(text)</div></pre></td></tr></table></figure><p>如果按下ok键，则对应标签的text值是从对话框接收的文本。</p><h3 id="颜色、字体、打开文件对话框：QColorDialog-QFontDialog-QTextEdit-QFileDialog、QTextEdit"><a href="#颜色、字体、打开文件对话框：QColorDialog-QFontDialog-QTextEdit-QFileDialog、QTextEdit" class="headerlink" title="颜色、字体、打开文件对话框：QColorDialog, QFontDialog, QTextEdit, QFileDialog、QTextEdit"></a>颜色、字体、打开文件对话框：QColorDialog, QFontDialog, QTextEdit, QFileDialog、QTextEdit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication, QPushButton, QColorDialog, QFontDialog, QTextEdit, QFileDialog</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line"></div><div class="line">        self.initUI()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'关注微信公众号：学点编程吧--记得好看点'</span>)</div><div class="line"></div><div class="line"></div><div class="line">        self.tx = QTextEdit(self)</div><div class="line">        self.tx.setGeometry(<span class="number">20</span>, <span class="number">20</span>, <span class="number">300</span>, <span class="number">270</span>)</div><div class="line"></div><div class="line">        self.bt1 = QPushButton(<span class="string">'打开文件'</span>,self)</div><div class="line">        self.bt1.move(<span class="number">350</span>,<span class="number">20</span>)</div><div class="line">        self.bt2 = QPushButton(<span class="string">'选择字体'</span>,self)</div><div class="line">        self.bt2.move(<span class="number">350</span>,<span class="number">70</span>)</div><div class="line">        self.bt3 = QPushButton(<span class="string">'选择颜色'</span>,self)</div><div class="line">        self.bt3.move(<span class="number">350</span>,<span class="number">120</span>)</div><div class="line"></div><div class="line">        self.bt1.clicked.connect(self.openfile)</div><div class="line">        self.bt2.clicked.connect(self.choicefont)</div><div class="line">        self.bt3.clicked.connect(self.choicecolor)</div><div class="line"></div><div class="line">        self.show()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openfile</span><span class="params">(self)</span>:</span></div><div class="line">        fname = QFileDialog.getOpenFileName(self, <span class="string">'打开文件'</span>,<span class="string">'./'</span>)</div><div class="line">        <span class="keyword">if</span> fname[<span class="number">0</span>]:</div><div class="line">            <span class="keyword">with</span> open(fname[<span class="number">0</span>], <span class="string">'r'</span>,encoding=<span class="string">'gb18030'</span>,errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">                self.tx.setText(f.read()) </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choicefont</span><span class="params">(self)</span>:</span></div><div class="line">        font, ok = QFontDialog.getFont() </div><div class="line">        <span class="keyword">if</span> ok:</div><div class="line">            self.tx.setCurrentFont(font)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choicecolor</span><span class="params">(self)</span>:</span></div><div class="line">        col = QColorDialog.getColor()</div><div class="line">        <span class="keyword">if</span> col.isValid():</div><div class="line">            self.tx.setTextColor(col)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>通过上述代码了解到主要是涉及QColorDialog,QFontDialog,QTextEdit, QFileDialog这四个类，其中QColorDialog, QFontDialog, QFileDialog分别负责颜色选择对话框、字体选择对话框、打开文件对话框，QTextEdit则是将刚才提到的类的结果用于呈现。QTextEdit能够呈现富文本，也能够呈现普通输出文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self.bt1.clicked.connect(self.openfile)</div><div class="line">self.bt2.clicked.connect(self.choicefont)</div><div class="line">self.bt3.clicked.connect(self.choicecolor)</div></pre></td></tr></table></figure><p>当单击不同的按钮的时候，会调用对应的槽函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fname = QFileDialog.getOpenFileName(self, <span class="string">'打开文件'</span>,<span class="string">'./'</span>)</div></pre></td></tr></table></figure><p>我们弹出QFileDialog对话框。<code>getOpenFileName()</code>方法中的第一个字符串是标题。第二个字符串指定对话框工作目录。默认情况下，文件过滤器设置为所有文件<code>（*）</code>，即不限制打开文件的类型。该函数返回值类型是元组。如果增加文件过滤，可以改成如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fname = QFileDialog.getOpenFileName(self, <span class="string">'打开文件'</span>,<span class="string">'./'</span>,(<span class="string">"Images (*.png *.xpm *.jpg)"</span>))</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> fname[<span class="number">0</span>]:</div><div class="line">    <span class="keyword">with</span> open(fname[<span class="number">0</span>], <span class="string">'r'</span>,encoding=<span class="string">'gb18030'</span>,errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">        self.tx.setText(f.read())</div></pre></td></tr></table></figure><p>读取所选择的文件名，并将文本编辑小部件的内容设置为文件读取的内容。这里提一下使用with语句来自动调用<code>close()</code>方法，避免由于文件读写时产生<code>IOError</code>，导致<code>close()</code>不会调用，需要<code>try ... finally</code>来实现的不便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font, ok = QFontDialog.getFont()</div></pre></td></tr></table></figure><p>这里弹出字体对话框。<code>getFont()</code>方法返回字体名称以及用户点击按钮的状态。如果用户点击Ok，则等于True;否则是假的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ok:</div><div class="line">    self.tx.setCurrentFont(font)</div></pre></td></tr></table></figure><p>如果用户点击ok键，那么在文本编辑小部件中选择的内容会使用我们选择的字体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">col = QColorDialog.getColor()</div><div class="line"><span class="keyword">if</span> col.isValid():</div><div class="line">    self.tx.setTextColor(col)</div></pre></td></tr></table></figure><p>这段代码的意思和刚才描述的大致相同，弹出颜色选择的对话框。检查颜色是否有效。如果点击“取消”按钮，则不会返回有效的颜色。如果颜色有效，那么在文本编辑小部件中选择的内容会使用选择的颜色。</p><h3 id="QFileDialog打印文案对象QtPrintSupport类-QPageSetupDialog、QPrintDialog、QPrinter"><a href="#QFileDialog打印文案对象QtPrintSupport类-QPageSetupDialog、QPrintDialog、QPrinter" class="headerlink" title="QFileDialog打印文案对象QtPrintSupport类:QPageSetupDialog、QPrintDialog、QPrinter"></a>QFileDialog打印文案对象QtPrintSupport类:QPageSetupDialog、QPrintDialog、QPrinter</h3><p>本知识点主要以一个打印机的例子作为开端学习,用以说明如何打开多文件、保存文件以及打印文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication, QPushButton, QTextEdit, QFileDialog, QDialog</div><div class="line"><span class="keyword">from</span> PyQt5.QtPrintSupport <span class="keyword">import</span> QPageSetupDialog, QPrintDialog, QPrinter</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.printer = QPrinter()</div><div class="line">        self.initUI()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">400</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'关注微信公众号：学点编程吧--保存、打印文件'</span>)</div><div class="line"></div><div class="line"></div><div class="line">        self.tx = QTextEdit(self)</div><div class="line">        self.tx.setGeometry(<span class="number">20</span>, <span class="number">20</span>, <span class="number">300</span>, <span class="number">270</span>)</div><div class="line">        self.bt1 = QPushButton(<span class="string">'打开文件'</span>,self)</div><div class="line">        self.bt1.move(<span class="number">350</span>,<span class="number">20</span>)</div><div class="line">        self.bt2 = QPushButton(<span class="string">'打开多个文件'</span>,self)</div><div class="line">        self.bt2.move(<span class="number">350</span>,<span class="number">70</span>)</div><div class="line">        self.bt5 = QPushButton(<span class="string">'保存文件'</span>,self)</div><div class="line">        self.bt5.move(<span class="number">350</span>,<span class="number">220</span>)</div><div class="line">        self.bt6 = QPushButton(<span class="string">'页面设置'</span>,self)</div><div class="line">        self.bt6.move(<span class="number">350</span>,<span class="number">270</span>)</div><div class="line">        self.bt7 = QPushButton(<span class="string">'打印文档'</span>,self)</div><div class="line">        self.bt7.move(<span class="number">350</span>,<span class="number">320</span>)</div><div class="line"></div><div class="line">        self.bt1.clicked.connect(self.openfile)</div><div class="line">        self.bt2.clicked.connect(self.openfiles)</div><div class="line">        self.bt5.clicked.connect(self.savefile)</div><div class="line">        self.bt6.clicked.connect(self.pagesettings)</div><div class="line">        self.bt7.clicked.connect(self.printdialog)</div><div class="line"></div><div class="line">        self.show()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openfile</span><span class="params">(self)</span>:</span></div><div class="line">        fname = QFileDialog.getOpenFileName(self, <span class="string">'学点编程吧:打开文件'</span>,<span class="string">'./'</span>)</div><div class="line">            <span class="keyword">if</span> fname[<span class="number">0</span>]:</div><div class="line">                <span class="keyword">with</span> open(fname[<span class="number">0</span>], <span class="string">'r'</span>,encoding=<span class="string">'gb18030'</span>,errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">                    self.tx.setText(f.read())</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openfiles</span><span class="params">(self)</span>:</span></div><div class="line">        fnames = QFileDialog.getOpenFileNames(self, <span class="string">'学点编程吧:打开多个文件'</span>,<span class="string">'./'</span>)</div><div class="line">            <span class="keyword">if</span> fnames[<span class="number">0</span>]: </div><div class="line">                <span class="keyword">for</span> fname <span class="keyword">in</span> fnames[<span class="number">0</span>]:</div><div class="line">                    <span class="keyword">with</span> open(fname, <span class="string">'r'</span>,encoding=<span class="string">'gb18030'</span>,errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">                        self.tx.append(f.read())</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">savefile</span><span class="params">(self)</span>:</span></div><div class="line">        fileName = QFileDialog.getSaveFileName(self, <span class="string">'学点编程吧:保存文件'</span>,<span class="string">'./'</span>,<span class="string">"Text files (*.txt)"</span>)</div><div class="line">            <span class="keyword">if</span> fileName[<span class="number">0</span>]:</div><div class="line">                <span class="keyword">with</span> open(fileName[<span class="number">0</span>], <span class="string">'w'</span>,encoding=<span class="string">'gb18030'</span>,errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">                    f.write(self.tx.toPlainText())</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pagesettings</span><span class="params">(self)</span>:</span></div><div class="line">        printsetdialog = QPageSetupDialog(self.printer,self)</div><div class="line">        printsetdialog.exec_()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printdialog</span><span class="params">(self)</span>:</span></div><div class="line">        printdialog = QPrintDialog(self.printer,self)</div><div class="line">        <span class="keyword">if</span> QDialog.Accepted == printdialog.exec_():</div><div class="line">            self.tx.print(self.printer)</div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtPrintSupport <span class="keyword">import</span> QPageSetupDialog, QPrintDialog, QPrinter</div></pre></td></tr></table></figure><p>从类的字面意思可以了解到<code>QPageSetupDialog</code>涉及页面设置的，<code>QPrintDialog</code>涉及打印，而<code>QPrinter</code>类是PyQt的打印主要使用，即打印类。大量和打印相关的函数均会涉及到该类。根据Qt的官方文档的介绍，<code>QPrinter</code>类与其他绘图类（如<code>QWidget</code>和<code>QPixmap</code>）原理几乎完全相同。提供了一组附加功能来管理设备的特定功能，例如方向和分辨率等。可理解为就是高度抽象的虚拟打印机，通过与这台打印交互达到控制本地实际打印机的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.printer = QPrinter()</div><div class="line">        self.initUI()</div></pre></td></tr></table></figure><p>因为下面代码中<code>QPageSetupDialog</code>、<code>QPrintDialog</code>涉及到<code>QPrinter()</code>对象，所以将其在类初始化的时候生成，便于函数的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">openfiles</span><span class="params">(self)</span>:</span></div><div class="line">    fnames = QFileDialog.getOpenFileNames(self, <span class="string">'学点编程吧:打开多个文件'</span>,<span class="string">'./'</span>)</div><div class="line">    <span class="keyword">if</span> fnames[<span class="number">0</span>]:</div><div class="line">        <span class="keyword">for</span> fname <span class="keyword">in</span> fnames[<span class="number">0</span>]:</div><div class="line">            <span class="keyword">with</span> open(fname, <span class="string">'r'</span>,encoding=<span class="string">'gb18030'</span>,errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">                self.tx.append(f.read())</div></pre></td></tr></table></figure><p><code>QFileDialog.getOpenFileNames</code>将返回用户选择的一个或多个现有文件，注意这里返回值是元组。元组的第0个元素则是列表，例如fnames其实是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">([<span class="string">'C:/Users/yangff/Desktop/PyQt5/10/美文.txt'</span>, <span class="string">'C:/Users/yangff/Desktop/PyQt5/10/十九大(new).txt'</span>, <span class="string">'C:/Users/yangff/Desktop/PyQt5/10/十九大.txt'</span>], <span class="string">''</span>)</div></pre></td></tr></table></figure><p>所以才需要通过对fnames[0]进行遍历，分别读取每个文件的内容，然后在<code>QTextEdit</code>显示出来。需要注意的是：使用了<code>QTextEdit</code>的<code>append</code>方法，让每次显示的内容均会存留在QTextEdit上。<strong>这个选择元组中列表数据是与之前对爬取的数据(.json)进行数据清洗类似的操作，而在使用<code>append</code>方法表示依次将所取得的文件全部打印在窗口。</strong>这个函数的第二个参数是对话框的标题，第三个参数是设置打开文件的目录。当然还可以增加第四个，也就是增加一个过滤器，以便仅显示与过滤器匹配的文件。 例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fnames = QFileDialog.getOpenFileNames(self, <span class="string">'学点编程吧:打开多个文件'</span>,<span class="string">'./'</span>,<span class="string">"Text files (*.txt)"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">savefile</span><span class="params">(self)</span>:</span></div><div class="line">    fileName = QFileDialog.getSaveFileName(self, <span class="string">'学点编程吧:保存文件'</span>,<span class="string">'./'</span>,<span class="string">"Text files (*.txt)"</span>)</div><div class="line">    <span class="keyword">if</span> fileName[<span class="number">0</span>]:</div><div class="line">        <span class="keyword">with</span> open(fileName[<span class="number">0</span>], <span class="string">'w'</span>,encoding=<span class="string">'gb18030'</span>,errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(self.tx.toPlainText())</div></pre></td></tr></table></figure><p><code>getSaveFileName()</code>具体的用法与<code>getOpenFileNames()</code>类似，只是用来保存文件的。最后我们使用<code>write</code>函数将<code>QTextEdit</code>的内容保存在文件中。获取的<code>QTextEdit</code>的内容可以使用这个函数<code>toPlainText()</code>(转为纯文本保存)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pagesettings</span><span class="params">(self)</span>:</span></div><div class="line">    printsetdialog = QPageSetupDialog(self.printer,self)</div><div class="line">    printsetdialog.exec_()</div></pre></td></tr></table></figure><p><code>QPageSetupDialog</code>类为打印机上的页面相关选项提供了一个配置对话框。这个就必须使用到<code>QPrinter</code>对象了。<strong>另外说明一下的是exec_()函数，这个函数即为执行脚本文件(如.py)用的，在这里是起到启用QPrinter的代码的意思。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printsetdialog.exec_()</div></pre></td></tr></table></figure><p>这句话就相当于执行确认的页面设置信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printdialog</span><span class="params">(self)</span>:</span></div><div class="line">        printdialog = QPrintDialog(self.printer,self) </div><div class="line">        <span class="keyword">if</span> QDialog.Accepted == printdialog.exec_():</div><div class="line">            self.tx.print(self.printer)</div></pre></td></tr></table></figure><p>这个函数的意思就是调用<code>QPrintDialog</code>准备进行打印了。<code>QPrintDialog</code>类提供了一个用于指定打印机配置的对话框。对话框允许用户更改文档相关设置，如纸张尺寸和方向，打印类型（颜色或灰度),页面范围和打印份数。还提供控制以使用户可以从可用的打印机中进行选择，包括任何配置的网络打印机。通常，<code>QPrintDialog</code>对象使用<code>QPrinter</code>对象构造，并使用<code>exec()</code>函数执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> QDialog.Accepted == printdialog.exec_():</div><div class="line">    self.tx.print(self.printer)</div></pre></td></tr></table></figure><p>在选择好打印机等等后，点击打印（即对话框被用户接受，则<code>QPrinter</code>对象被正确配置为打印），则会调用<code>QTextEdit</code>中的<code>print</code>方法进行相关的打印(内容输出即打印)。</p><h3 id="QFileDialog消息对话框QMessageBox类，QPixmap类：setIconPixmap-、QMessageBox-Warning、QMessageBox-Information、QMessageBox-Question、QMessageBox-Critical"><a href="#QFileDialog消息对话框QMessageBox类，QPixmap类：setIconPixmap-、QMessageBox-Warning、QMessageBox-Information、QMessageBox-Question、QMessageBox-Critical" class="headerlink" title="QFileDialog消息对话框QMessageBox类，QPixmap类：setIconPixmap()、QMessageBox.Warning、QMessageBox.Information、QMessageBox.Question、QMessageBox.Critical"></a>QFileDialog消息对话框QMessageBox类，QPixmap类：setIconPixmap()、QMessageBox.Warning、QMessageBox.Information、QMessageBox.Question、QMessageBox.Critical</h3><p>消息对话框主要涉及QMessageBox类。QMessageBox类提供了一个模态对话框，用于通知用户或询问用户问题并接收答案。消息框显示主要文本以提醒用户情况，信息性文本以进一步解释警报或询问用户一个问题，以及可选的详细文本，以便在用户请求时提供更多数据。消息框还可以显示用于接受用户响应的图标和标准按钮。提供了两个使用<code>QMessageBox</code>的API，基于属性的API和静态函数。调用静态函数是更简单的方法，但是比使用基于属性的API更不灵活，结果信息较少。两种方法在程序中都使用了。一般而言，消息对话框分为五种，分别是提示信息、询问、警告、错误、关于，其中关于又分为两种，一种是一般性关于、另一种是关于Qt的介绍，可以明显看见不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication, QPushButton, QMessageBox, QLabel, QCheckBox</div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(QWidget)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super().__init__()</div><div class="line">        self.initUI()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">330</span>, <span class="number">300</span>)</div><div class="line">        self.setWindowTitle(<span class="string">'关注微信公众号：学点编程吧--消息对话框'</span>)</div><div class="line"></div><div class="line">        self.la = QLabel(<span class="string">'这里将会显示我们选择的按钮信息'</span>,self)</div><div class="line">        self.la.move(<span class="number">20</span>,<span class="number">20</span>)</div><div class="line">        self.bt1 = QPushButton(<span class="string">'提示'</span>,self)</div><div class="line">        self.bt1.move(<span class="number">20</span>,<span class="number">70</span>)</div><div class="line">        self.bt2 = QPushButton(<span class="string">'询问'</span>,self)</div><div class="line">        self.bt2.move(<span class="number">120</span>,<span class="number">70</span>)</div><div class="line">        self.bt3 = QPushButton(<span class="string">'警告'</span>,self)</div><div class="line">        self.bt3.move(<span class="number">220</span>,<span class="number">70</span>)</div><div class="line">        self.bt4 = QPushButton(<span class="string">'错误'</span>,self)</div><div class="line">        self.bt4.move(<span class="number">20</span>,<span class="number">140</span>)</div><div class="line">        self.bt5 = QPushButton(<span class="string">'关于'</span>,self)</div><div class="line">        self.bt5.move(<span class="number">120</span>,<span class="number">140</span>)</div><div class="line">        self.bt6 = QPushButton(<span class="string">'关于Qt'</span>,self)</div><div class="line">        self.bt6.move(<span class="number">220</span>,<span class="number">140</span>)</div><div class="line"></div><div class="line">        self.bt1.clicked.connect(self.info)</div><div class="line">        self.bt2.clicked.connect(self.question)</div><div class="line">        self.bt3.clicked.connect(self.warning)</div><div class="line">        self.bt4.clicked.connect(self.critical)</div><div class="line">        self.bt5.clicked.connect(self.about)</div><div class="line">        self.bt6.clicked.connect(self.aboutqt)</div><div class="line"></div><div class="line">        self.show()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></div><div class="line">        reply = QMessageBox.information(self,<span class="string">'提示'</span>,<span class="string">'这是一个消息提示对话框!'</span>, QMessageBox.Ok | QMessageBox.Close, QMessageBox.Close)</div><div class="line">        <span class="keyword">if</span> reply == QMessageBox.Ok:</div><div class="line">            self.la.setText(<span class="string">'你选择了Ok！'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.la.setText(<span class="string">'你选择了Close！'</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">question</span><span class="params">(self)</span>:</span></div><div class="line">        reply = QMessageBox.question(self,<span class="string">'询问'</span>,<span class="string">'这是一个询问消息对话框，默认是No'</span>, QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.No)</div><div class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</div><div class="line">            self.la.setText(<span class="string">'你选择了Yes！'</span>)</div><div class="line">        <span class="keyword">elif</span> reply == QMessageBox.No:</div><div class="line">            self.la.setText(<span class="string">'你选择了No！'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.la.setText(<span class="string">'你选择了Cancel！'</span>)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># reply = QMessageBox.warning(self,'警告','这是一个警告消息对话框', QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel, QMessageBox.Save)</span></div><div class="line">        cb = QCheckBox(<span class="string">'所有文档都按此操作'</span>)</div><div class="line">        msgBox = QMessageBox()</div><div class="line">        msgBox.setWindowTitle(<span class="string">'警告'</span>)</div><div class="line">        msgBox.setIcon(QMessageBox.Warning)</div><div class="line">        msgBox.setText(<span class="string">'这是一个警告消息对话框'</span>)</div><div class="line">        msgBox.setInformativeText(<span class="string">'出现更改愿意保存吗?'</span>)</div><div class="line">        Save = msgBox.addButton(<span class="string">'保存'</span>, QMessageBox.AcceptRole)</div><div class="line">        NoSave = msgBox.addButton(<span class="string">'取消'</span>, QMessageBox.RejectRole)</div><div class="line">        Cancel = msgBox.addButton(<span class="string">'不保存'</span>, QMessageBox.DestructiveRole)</div><div class="line">        msgBox.setDefaultButton(Save)</div><div class="line">        msgBox.setCheckBox(cb)</div><div class="line">        cb.stateChanged.connect(self.check)</div><div class="line">        reply = msgBox.exec()</div><div class="line">        <span class="keyword">if</span> reply == QMessageBox.AcceptRole:</div><div class="line">            self.la.setText(<span class="string">'你选择了保存！'</span>)</div><div class="line">        <span class="keyword">elif</span> reply == QMessageBox.RejectRole:</div><div class="line">            self.la.setText(<span class="string">'你选择了取消！'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.la.setText(<span class="string">'你选择了不保存！'</span>)</div><div class="line">        </div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># reply = QMessageBox.critical(self,'错误','这是一个错误消息对话框', QMessageBox.Retry | QMessageBox.Abort | QMessageBox.Ignore , QMessageBox.Retry)</span></div><div class="line">        msgBox = QMessageBox()</div><div class="line">        msgBox.setWindowTitle(<span class="string">'错误'</span>)</div><div class="line">        msgBox.setIcon(QMessageBox.Critical)</div><div class="line">        msgBox.setText(<span class="string">"这是一个错误消息对话框"</span>)</div><div class="line">        msgBox.setStandardButtons(QMessageBox.Retry | QMessageBox.Abort | QMessageBox.Ignore)</div><div class="line">        msgBox.setDefaultButton(QMessageBox.Retry)</div><div class="line">        msgBox.setDetailedText(<span class="string">'这是详细的信息：学点编程吧，我爱你！'</span>)</div><div class="line">        reply = msgBox.exec() </div><div class="line"></div><div class="line">        <span class="keyword">if</span> reply == QMessageBox.Retry:</div><div class="line">            self.la.setText(<span class="string">'你选择了Retry！'</span>)</div><div class="line">        <span class="keyword">elif</span> reply == QMessageBox.Abort:</div><div class="line">          self.la.setText(<span class="string">'你选择了Abort！'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.la.setText(<span class="string">'你选择了Ignore！'</span>)</div><div class="line">        </div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment">#QMessageBox.about(self,'关于','这是一个关于消息对话框!')</span></div><div class="line">        msgBox = QMessageBox(QMessageBox.NoIcon, <span class="string">'关于'</span>,<span class="string">'不要意淫了，早点洗洗睡吧!'</span>)</div><div class="line">        msgBox.setIconPixmap(QPixmap(<span class="string">"beauty.png"</span>))</div><div class="line">        msgBox.exec()</div><div class="line">     </div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">aboutqt</span><span class="params">(self)</span>:</span></div><div class="line">        QMessageBox.aboutQt(self,<span class="string">'关于Qt'</span>)</div><div class="line">     </div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.sender().isChecked():</div><div class="line">            self.la.setText(<span class="string">'你打勾了哦'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.la.setText(<span class="string">'怎么又不打了啊'</span>)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QApplication(sys.argv)</div><div class="line">    ex = Example()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>从几个槽函数来开始介绍五种消息对话框，至于界面定义、信号与槽函数调用属于以前的知识点，这里不再重复。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></div><div class="line">    reply = QMessageBox.information(self,<span class="string">'提示'</span>,<span class="string">'这是一个消息提示对话框!'</span>,QMessageBox.Ok | QMessageBox.Close, QMessageBox.Close)</div><div class="line">    <span class="keyword">if</span> reply == QMessageBox.Ok:</div><div class="line">        self.la.setText(<span class="string">'你选择了Ok！'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.la.setText(<span class="string">'你选择了Close！'</span>)</div></pre></td></tr></table></figure><p>这里描述了一个信息提示的对话框。它的函数调用格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QMessageBox.information(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = MessageBox.NoButton)</div></pre></td></tr></table></figure><p>打开包含指定父窗口小部件并给定了标题和文本的信息消息对话框。这句话分别对应了第一、二、三个参数。第四个参数则是我们要在消息对话框上想要显示的按钮。第五个参数defaultButton指定按Enter键时使用的按钮。如果defaultButton是QMessageBox.NoButton，QMessageBox会自动选择合适的默认值(即为默认的按钮选项)。</p><p>当然还有更多的按钮参数可以供我们选择，可查看<a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/" target="_blank" rel="external">官网</a>。这个函数中显示的按钮分别是Ok、Close，默认按钮是Close(即为默认的按钮焦点选项)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> reply == QMessageBox.Ok:</div><div class="line">    self.la.setText(<span class="string">'你选择了Ok！'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    self.la.setText(<span class="string">'你选择了Close！'</span>)</div></pre></td></tr></table></figure><p>标签上的信息会根据我们选择的按钮信息相应的变化，判断是选择了OK还是Close。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">question</span><span class="params">(self)</span>:</span></div><div class="line">    reply = QMessageBox.question(self,<span class="string">'询问'</span>,<span class="string">'这是一个询问消息对话框，默认是No'</span>, QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.No)</div><div class="line">    <span class="keyword">if</span> reply == QMessageBox.Yes:</div><div class="line">        self.la.setText(<span class="string">'你选择了Yes！'</span>)</div><div class="line">    <span class="keyword">elif</span> reply == QMessageBox.No:</div><div class="line">        self.la.setText(<span class="string">'你选择了No！'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.la.setText(<span class="string">'你选择了Cancel！'</span>)</div></pre></td></tr></table></figure><p>这个函数与上一个函数的内容差不多，唯一不同的地方是，产生的消息对话框带了一个“？”。</p><p>两种产生消息对话框的方式，一是调用静态函数的方式(即为直接调用现成的函数如<code>QMessageBox.warning</code>之类的函数)，二则是基于属性的调用(即为自定义静态函数，并且槽函数均为自定义编写)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">warning</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># reply = QMessageBox.warning(self,'警告','这是一个警告消息对话框', QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel, QMessageBox.Save)</span></div><div class="line">    cb = QCheckBox(<span class="string">'所有文档都按此操作'</span>)</div><div class="line">    msgBox = QMessageBox()</div><div class="line">    msgBox.setWindowTitle(<span class="string">'警告'</span>)</div><div class="line">    msgBox.setIcon(QMessageBox.Warning)</div><div class="line">    msgBox.setText(<span class="string">'这是一个警告消息对话框'</span>)</div><div class="line">    msgBox.setInformativeText(<span class="string">'出现更改愿意保存吗?'</span>)</div><div class="line">    Save = msgBox.addButton(<span class="string">'保存'</span>, QMessageBox.AcceptRole)</div><div class="line">    NoSave = msgBox.addButton(<span class="string">'取消'</span>, QMessageBox.RejectRole)</div><div class="line">    Cancel = msgBox.addButton(<span class="string">'不保存'</span>, QMessageBox.DestructiveRole)</div><div class="line">    msgBox.setDefaultButton(Save)</div><div class="line">    msgBox.setCheckBox(cb)</div><div class="line">    cb.stateChanged.connect(self.check)</div><div class="line">    reply = msgBox.exec()</div><div class="line">    <span class="keyword">if</span> reply == QMessageBox.AcceptRole:</div><div class="line">        self.la.setText(<span class="string">'你选择了保存！'</span>)</div><div class="line">    <span class="keyword">elif</span> reply == QMessageBox.RejectRole:</div><div class="line">        self.la.setText(<span class="string">'你选择了取消！'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.la.setText(<span class="string">'你选择了不保存！'</span>)</div></pre></td></tr></table></figure><p>这个函数分别使用了基于属性和静态函数的方式产生消息对话框，当然实际使用时需要注释一种。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cb = QCheckBox(<span class="string">'所有文档都按此操作'</span>)</div></pre></td></tr></table></figure><p>因为要在对话框中增加一个复选框(打勾的框框)，所以新建了一个复选框对象，复选框的内容就是“所有文档都按此操作”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">msgBox.setWindowTitle(<span class="string">'警告'</span>)</div><div class="line">msgBox.setIcon(QMessageBox.Warning)</div><div class="line">msgBox.setText(<span class="string">'这是一个警告消息对话框'</span>)</div><div class="line">msgBox.setInformativeText(<span class="string">'出现更改愿意保存吗?'</span>)</div></pre></td></tr></table></figure><p>这四个语句分别有如下表示：</p><ul><li><p>设置消息对话框的标题：警告。</p></li><li><p>设置消息对话框的图标：<code>QMessageBox.Warning</code>，也就是警告图标，当然也可以选择<code>QMessageBox.Information</code>、<code>QMessageBox.Question</code>、<code>QMessageBox.Critical</code>(静态函数)。</p></li><li><p>设置消息对话框的要显示的消息框文本，如果文本格式设置（QMessageBox.textFormat），文本将被解释为纯文本或富文本。 默认设置为Qt.AutoText，即消息框将尝试自动检测文本的格式。</p></li><li><p>设置消息对话框更完整描述的信息性文本，可以使用Infromative文本来扩展text()以向用户提供更多信息。 在Mac上，此文本以text()下方的小系统字体显示。 在其他平台上，它只是附加到现有文本。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Save = msgBox.addButton(<span class="string">'保存'</span>, QMessageBox.AcceptRole)</div><div class="line">NoSave = msgBox.addButton(<span class="string">'取消'</span>, QMessageBox.RejectRole)</div><div class="line">Cancel = msgBox.addButton(<span class="string">'不保存'</span>, QMessageBox.DestructiveRole)</div><div class="line">msgBox.setDefaultButton(Save)</div></pre></td></tr></table></figure><p>这里实际上是新建了三个按钮，当然是中文的，每个对应着一种事件的角色，是接受、拒绝还是放弃。最后设置了默认的按钮是保存。即焦点是在这个按钮上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msgBox.setCheckBox(cb)</div><div class="line">cb.stateChanged.connect(self.check)</div></pre></td></tr></table></figure><p>需要在消息对话框上设置之前建立的那个复选框。当选择这个复选框的时候产生了<code>stateChanged</code>信号，对应的将连接<code>check()</code>这个槽函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reply = msgBox.exec()</div></pre></td></tr></table></figure><p>这行这个语句让消息对话框能够显示出来，并将选中的按钮返回给reply这个变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> reply == QMessageBox.AcceptRole:</div><div class="line">    self.la.setText(<span class="string">'你选择了保存！'</span>)</div><div class="line"><span class="keyword">elif</span> reply == QMessageBox.RejectRole:</div><div class="line">    self.la.setText(<span class="string">'你选择了取消！'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    self.la.setText(<span class="string">'你选择了不保存！'</span>)</div></pre></td></tr></table></figure><p>当选择不同的按钮时候，则在标签上有不同的显示。</p><ul><li><p>AcceptRole表示点击按钮可以接受对话框；</p></li><li><p>RejectRole表示单击该按钮将导致对话框被拒绝；</p></li><li><p>DestructiveRole表示单击该按钮将导致破坏性更改（例如“丢弃更改”）并关闭对话框。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.sender().isChecked():</div><div class="line">        self.la.setText(<span class="string">'你打勾了哦'</span>) </div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.la.setText(<span class="string">'怎么又不打了啊'</span>)</div><div class="line">```        </div><div class="line"></div><div class="line">`self.sender()`就是传递信号过来的对象，这里就是复选框；`isChecked()`返回的是一个布尔值，也就是判断是否被选中，选中了就显示打勾，否则就是不打勾。</div><div class="line"></div><div class="line">```python</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">critical</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># reply = QMessageBox.critical(self,'错误','这是一个错误消息对话框', QMessageBox.Retry | QMessageBox.Abort | QMessageBox.Ignore , QMessageBox.Retry)</span></div><div class="line">    msgBox = QMessageBox()</div><div class="line">    msgBox.setWindowTitle(<span class="string">'错误'</span>)</div><div class="line">    msgBox.setIcon(QMessageBox.Critical)</div><div class="line">    msgBox.setText(<span class="string">"这是一个错误消息对话框"</span>)</div><div class="line">    msgBox.setStandardButtons(QMessageBox.Retry | QMessageBox.Abort | QMessageBox.Ignore)</div><div class="line">    msgBox.setDefaultButton(QMessageBox.Retry)</div><div class="line">    msgBox.setDetailedText(<span class="string">'这是详细的信息：学点编程吧，我爱你！'</span>)</div><div class="line">    reply = msgBox.exec() </div><div class="line"></div><div class="line">    <span class="keyword">if</span> reply == QMessageBox.Retry:</div><div class="line">        self.la.setText(<span class="string">'你选择了Retry！'</span>) </div><div class="line">    <span class="keyword">elif</span> reply == QMessageBox.Abort:</div><div class="line">        self.la.setText(<span class="string">'你选择了Abort！'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.la.setText(<span class="string">'你选择了Ignore！'</span>)</div></pre></td></tr></table></figure><p>这个函数大部分的使用和上面的差不多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msgBox.setStandardButtons(QMessageBox.Retry | QMessageBox.Abort | QMessageBox.Ignore)</div></pre></td></tr></table></figure><p>表明消息对话框中使用哪些标准按钮。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msgBox.setDetailedText(<span class="string">'这是详细的信息：学点编程吧，我爱你！'</span>)</div></pre></td></tr></table></figure><p>该属性保存要在详细信息区域中显示的文本。文本将被解释为纯文本。默认情况下，此属性包含一个空字符串。只有设置了这个属性，<code>ShowDetails</code>这个按钮才会出来，点击此按钮会呈现设定好的文本内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment">#QMessageBox.about(self,'关于','这是一个关于消息对话框!')</span></div><div class="line">    msgBox = QMessageBox(QMessageBox.NoIcon, <span class="string">'关于'</span>,<span class="string">'不要意淫了，早点洗洗睡吧!'</span>)</div><div class="line">    msgBox.setIconPixmap(QPixmap(<span class="string">"beauty.png"</span>))</div><div class="line">    msgBox.exec()</div></pre></td></tr></table></figure><p>这里用了两种方式建立关于消息对话框，重点说明第二种，即基于属性的。建立了<code>QMessageBox</code>对象，一开始的时候就将标题还有要显示的内容带入了，同时还表明这是一个没有图标的消息对话框。然后对图标进行了设计，使用<code>setIconPixmap()</code>函数，注意参数必须是<code>QPixmap</code>类型的(用于呈现图片管用)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">aboutqt</span><span class="params">(self)</span>:</span></div><div class="line">    QMessageBox.aboutQt(self,<span class="string">'关于Qt'</span>)</div></pre></td></tr></table></figure><p>这里将调用关于Qt的对话框。</p><h2 id="组合框使用QComboBox"><a href="#组合框使用QComboBox" class="headerlink" title="组合框使用QComboBox"></a>组合框使用QComboBox</h2><p>由于时间问题直接贴上学习的地址以观后效之用：<a href="https://zhuanlan.zhihu.com/p/36691866" target="_blank" rel="external">PyQt5系列教程（45）：QComboBox的使用</a></p><p>其中的新颖用法以及常用的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">combox.addItem(QIcon(<span class="string">"./res/latin_b.png"</span>),<span class="string">'这个选项有图标哦'</span>)</div></pre></td></tr></table></figure><p><code>combox.addItem</code>与<code>QIcon</code>的结合使用，下方会显示出来带图标的文字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.label3.setText(combox.currentText())</div></pre></td></tr></table></figure><p>将label3的文本设置为当前选项的值。<code>currentText()</code>属性保存当前文本。如果下拉框是可编辑的，则当前文本是下拉框中显示的值。否则，如果下拉框为空或未设置当前项目，则为当前项目的值或空字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">combox.activated[str].connect(self.zhuangB)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zhuangB</span><span class="params">(self, text)</span>:</span></div><div class="line">    self.label3.setText(text)</div><div class="line">    <span class="keyword">if</span> text == <span class="string">"我要开始装B了"</span>:</div><div class="line">        msgBox = QMessageBox(QMessageBox.NoIcon, <span class="string">'装B'</span>,<span class="string">"让你装B"</span>)</div><div class="line">        msgBox.setIconPixmap(QPixmap(<span class="string">"./res/zhuangB.png"</span>))</div><div class="line">        msgBox.setWindowIcon(QIcon(<span class="string">"./res/latin_b.png"</span>))</div><div class="line">        msgBox.exec()</div><div class="line">```        </div><div class="line">我们选择下拉框下面的项目时发出`activated信号`，这个信号会把选中的值（字符串）传递给槽函数zhuangB()。`activated()`信号在用户选择下拉框中的项目时发送。请注意，即使选择没有改变，也会发送此信号。除了可以传字符串以外，还可以传项目的索引。如：</div><div class="line"></div><div class="line">```python</div><div class="line">combox.activated[int].connect(self.zhuangB)</div></pre></td></tr></table></figure><h2 id="密码输入框：QEvent、-QRegExp、-QKeyEvent、QKeySequence、-QRegExpValidator"><a href="#密码输入框：QEvent、-QRegExp、-QKeyEvent、QKeySequence、-QRegExpValidator" class="headerlink" title="密码输入框：QEvent、 QRegExp、 QKeyEvent、QKeySequence、 QRegExpValidator"></a>密码输入框：QEvent、 QRegExp、 QKeyEvent、QKeySequence、 QRegExpValidator</h2><p>实现了三种密码输入框的方式来进行说明：</p><ul><li>输入的密码不可见；</li><li>输入的密码可见，但是鼠标点击其他控件后，密码不可见；</li><li>输入的密码不可见，同时为了更加的安全，屏蔽了鼠标右键、禁用复制、粘贴快捷键、鼠标在密码框中不可移动，不可全选。就类似在输入QQ密码的时候一样。</li></ul><ul><li>内容来源参考：<a href="https://zhuanlan.zhihu.com/p/30152208" target="_blank" rel="external">PyQt5系列教程（12）：构建我们自己的密码输入框</a></li></ul><h2 id="文本输入栏QLineEdit"><a href="#文本输入栏QLineEdit" class="headerlink" title="文本输入栏QLineEdit"></a>文本输入栏QLineEdit</h2><p><code>QLineEdit</code>小部件是一个单行文本编辑器。行编辑允许用户使用一组有用的编辑功能输入和编辑纯文本行，包括撤消和重做，剪切和粘贴以及拖放。通过更改行编辑的<code>echoMode()</code>，还可以将其用作“只写”字段，以输入密码等输入。文本的长度可以限制为<code>maxLength()</code>。文本可以使用<code>validator()</code>或<code>inputMask()</code>或两者来任意约束。在同一行编辑中在验证器和输入掩码之间切换时，最好清除验证器或输入掩码以防止未定义的行为。相关的类是<code>QTextEdit</code>，它允许多行，富文本编辑。可以使用<code>setText()</code>或<code>insert()</code>来更改文本。文本用<code>text()</code>检索；显示的文本（可参阅EchoMode）使用<code>displayText()</code>检索。可以使用<code>setSelection()</code>或<code>selectAll()</code>选择文本，并且可以使用<code>cut()</code>、<code>copy()</code> 和<code>paste()</code>。文本可以与<code>setAlignment()</code>对齐。</p><ul><li><p>内容可参考：<a href="https://zhuanlan.zhihu.com/p/34008281" target="_blank" rel="external">PyQt5系列教程（27）：QLineEdit 1</a></p></li><li><p>内容可参考：<a href="https://zhuanlan.zhihu.com/p/34075334" target="_blank" rel="external">PyQt5系列教程（28）：QLineEdit 2</a></p></li><li><p>内容可参考：<a href="https://zhuanlan.zhihu.com/p/34139521" target="_blank" rel="external">PyQt5系列教程（29）：QLineEdit 3</a></p></li><li><p>内容可参考：<a href="https://zhuanlan.zhihu.com/p/34165301" target="_blank" rel="external">PyQt5系列教程（30）：QLineEdit 4</a></p></li></ul><h2 id="纯文本输入框QPlainTextEdit"><a href="#纯文本输入框QPlainTextEdit" class="headerlink" title="纯文本输入框QPlainTextEdit"></a>纯文本输入框QPlainTextEdit</h2><ul><li><p>内容可参考：<a href="https://zhuanlan.zhihu.com/p/34323103" target="_blank" rel="external">PyQt5系列教程（31）： QPlainTextEdit</a></p></li><li><p>内容可参考：<a href="https://zhuanlan.zhihu.com/p/34354683" target="_blank" rel="external">PyQt5系列教程（32）： QPlainTextEdit</a></p></li><li><p>内容可参考：<a href="https://zhuanlan.zhihu.com/p/34388102" target="_blank" rel="external">PyQt5系列教程（33）： QPlainTextEdit</a></p></li></ul><h2 id="WYSIWYG-所见即所得-查看器-编辑器QTextEdit"><a href="#WYSIWYG-所见即所得-查看器-编辑器QTextEdit" class="headerlink" title="WYSIWYG(所见即所得)查看器/编辑器QTextEdit"></a>WYSIWYG(所见即所得)查看器/编辑器QTextEdit</h2><p><code>QTextEdit</code>类提供了一个用于编辑和显示纯文本和富文本的小部件。<code>QTextEdit</code>是一款先进的<a href="https://zh.wikipedia.org/wiki/%E6%89%80%E8%A6%8B%E5%8D%B3%E6%89%80%E5%BE%97" target="_blank" rel="external">WYSIWYG查看器/编辑器</a>，支持使用<a href="https://zh.wikipedia.org/wiki/HTML" target="_blank" rel="external">HTML</a>样式标签的丰富文本格式。它经过优化处理大型文档并对用户输入做出快速响应。<code>QTextEdit</code>适用于段落和字符。段落是一个格式化的字符串，它被字符包装以适应窗口小部件的宽度。默认情况下，当阅读纯文本时，一个换行符表示一个段落。文档由零个或多个段落组成。该段中的文字按照该段的对齐方式进行调整。段落以硬换行符分隔。段落中的每个字符都有其自己的属性，例如字体和颜色。<code>QTextEdit</code>可以显示图像，列表和表格。如果文本太大而无法在文本编辑的视口中查看，则会出现滚动条。文本编辑可以加载纯文本和富文本文件。富文本使用<code>HTML 4</code>标记的子集进行描述，在文本小部件中使用HTML标记。小部件自动检测HTML标记并相应地显示丰富的文本。 例如，使用字符串<code>”&lt;b&gt;Hello &lt;/ b&gt; &lt;i&gt;xdbcb8！&lt;/ i&gt;”</code>设置标签的文本属性将导致标签显示如下所示的文本：Helloxdbcb8！<br>如果只需要显示一小段富文本，请使用QLabel。Qt中丰富的文本支持旨在为应用程序添加合理的在线帮助功能提供快速，便携和高效的方式，并为富文本编辑器提供基础。如果发现HTML支持不足以满足需求，可以考虑使用<code>Qt WebKit</code>，它提供了一个全功能的Web浏览器小部件。<code>QTextEdit</code>上鼠标光标的形状默认为<code>Qt.IBeamCursor</code>。它可以通过<code>viewport()</code>的游标属性进行更改。<code>QTextEdit</code>可以显示一个大的HTML子集，包括表格和图像。使用<code>setHtml()</code>设置或替换文本，删除任何现有文本并将其替换为在<code>setHtml()</code>调用中传递的文本。如果使用传统HTML调用<code>setHtml()</code>，然后调用<code>toHtml()</code>，则返回的文本可能具有不同的标记，但呈现相同。整个文本可以用<code>clear()</code>删除。可以使用<code>QTextCursor</code>类或使用函数<code>insertHtml()</code>，<code>insertPlainText()</code>，<code>append()</code>或<code>paste()</code>来插入文本本身。 <code>QTextCursor</code>还能够将表格或列表等复杂对象插入到文档中，并处理创建选择和对选定文本应用更改。<code>setLineWrapMode()</code>函数用于指定想要的换行类型，或者如果不想要换行，则使用<code>NoWrap</code>。调用<code>setLineWrapMode()</code>以设置固定像素宽度<code>FixedPixelWidth</code>或字符列（例如80列）<code>FixedColumnWidth</code>，并使用<code>setLineWrapColumnOrWidth()</code>指定像素或列。如果使用<code>WrapgetWidth WidgetWidth</code>的自动换行，则可以使用<code>setWordWrapMode()</code>指定是否在空白处或任何地方断开。<code>find()</code>函数可用于查找和选择文本中的给定字符串。如果想限制<code>QTextEdit</code>中段落的总数，例如在日志查看器中它通常很有用，那么可以使用<code>QTextDocument</code>的<code>maximumBlockCount</code>属性。</p><ul><li>内容可参考：<a href="https://zhuanlan.zhihu.com/p/34549578" target="_blank" rel="external">PyQt5系列教程（34）：QTextEdit的使用</a></li></ul><h2 id="QTimer类、多线程QThread类、进度条QProgressBar类、QThreadPool、QRunnable"><a href="#QTimer类、多线程QThread类、进度条QProgressBar类、QThreadPool、QRunnable" class="headerlink" title="QTimer类、多线程QThread类、进度条QProgressBar类、QThreadPool、QRunnable"></a>QTimer类、多线程QThread类、进度条QProgressBar类、QThreadPool、QRunnable</h2><p><code>QTimer</code>类提供重复和单次定时器。<code>QTimer</code>类为定时器提供高级编程接口。要使用它，先创建一个<code>QTimer</code>，将其<code>timeout()</code>信号连接到相应的插槽，然后调用<code>start()</code>。从那时起，它将以恒定的间隔发出<code>timeout()</code>信号。</p><ul><li><p>QTimer类更多的内容可参考：<a href="https://zhuanlan.zhihu.com/p/32053936" target="_blank" rel="external">PyQt5系列教程（20）：液晶显示屏</a>、相关官方文档、教程系列中的续文</p></li><li><p><a href="https://doc.qt.io/qt-5/qtimer.html" target="_blank" rel="external">Qt Documentation ：QTimer Class</a></p></li><li><p><a href="https://blog.csdn.net/jia666666/article/details/81672344" target="_blank" rel="external">PyQt5高级界面控件之QTimer（十一）</a></p></li></ul><p>QTimer的替代品和QThread类、进度条QProgressBar的相关知识的更多内容可参考：</p><ul><li><p><a href="https://doc.qt.io/qt-5/qprogressbar.html" target="_blank" rel="external">Qt Documentation ：QProgressBar Class</a></p></li><li><p>内容可参考：<a href="https://zhuanlan.zhihu.com/p/30283367" target="_blank" rel="external">PyQt5系列教程（13）：进度对话框</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/39178265" target="_blank" rel="external">PyQt5系列教程（54）：开局5农民，从荒岛到建立帝国1！</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/39356881" target="_blank" rel="external">PyQt5系列教程（55）：开局5农民，从荒岛到建立帝国2！</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/39441702" target="_blank" rel="external">PyQt5系列教程（56）：开局5农民，从荒岛到建立帝国3！</a></p></li></ul><p><code>QRunnable</code>是所有<code>runnable</code>对象的基类，而<code>QThreadPool</code>类用于管理<code>QThreads</code>集合。<code>QRunnable</code>类是一个接口，用于表示一个任务或要执行的代码，需要重新实现<code>run()</code>函数。<code>QThreadPool</code>管理和循环使用单独的<code>QThread</code>对象，以帮助程序减少创建线程的成本。每个Qt应用程序都有一个全局<code>QThreadPool</code>对象，可以通过调用<code>globalInstance()</code>访问。</p><ul><li><p><a href="https://blog.csdn.net/liang19890820/article/details/52624735" target="_blank" rel="external">Qt 之 QThreadPool 和 QRunnable</a></p></li><li><p><a href="https://doc.qt.io/Qt-5/qrunnable.html" target="_blank" rel="external">Qt Documentation ：QRunnable Class</a></p></li><li><p><a href="https://doc.qt.io/qtforpython/PySide2/QtCore/QRunnable.html" target="_blank" rel="external">QRunnable</a></p></li><li><p><a href="https://www.cnblogs.com/findumars/p/5176160.html" target="_blank" rel="external">Qt新建线程的方法（有QRunnable，QThreadPool，moveToThread和QtConcurrent的例子</a></p></li></ul><p>Qt有两种多线程的方法，其中一种是继承<code>QThread</code>的<code>run</code>函数，另外一种是把一个继承于<code>QObject</code>的类转移到一个<code>Thread</code>里。Qt4.8之前都是使用继承<code>QThread</code>的<code>run</code>这种方法，但是Qt4.8之后，Qt官方建议使用第二种方法。两种方法区别不大，用起来都比较方便，但继承<code>QObject</code>的方法更加灵活。这里要记录的是如何正确的创建一个线程，特别是如何正确的退出一个线程。</p><ul><li><p><a href="https://blog.csdn.net/czyt1988/article/details/64441443" target="_blank" rel="external">Qt使用多线程的一些心得——1.继承QThread的多线程使用方法</a></p></li><li><p><a href="https://doc.qt.io/qt-5/qthread.html" target="_blank" rel="external">Qt Documentation ：QThread Class</a></p></li><li><p><a href="https://blog.csdn.net/qq_34710142/article/details/80936986" target="_blank" rel="external">PyQt5进阶（二）——多线程：QThread &amp; 事件处理</a></p></li><li><p><a href="https://www.cnblogs.com/hhh5460/p/5175322.html" target="_blank" rel="external">PyQt5 笔记（04）：主窗口卡死问题</a></p></li></ul><h2 id="QSettings"><a href="#QSettings" class="headerlink" title="QSettings"></a>QSettings</h2><p>QSettings 类提供平台无关的持久化应用程序设置。</p><p>用户通常期待应用程序在不同会话中保留其设置（窗口大小和位置、设置项等等）。这些信息在 Windows 上经常存储在注册表中，在 Mac OS X 和 iOS 上则保存在 plist 文件中。在 Unix 系统上，由于缺少标准，许多应用程序（包括 KDE 程序）使用 INI 文本文件（来存储设置）。</p><p>QSettings 是围绕这些技术提供的一个抽象层，让你使用一种可移植的方式来存储和恢复应用程序设置。它同时支持自定义存储格式。</p><blockquote><p>来源(<strong>好文</strong>)：<a href="https://blog.mynook.info/post/use-qsettings-in-pyqt5/" target="_blank" rel="external">PyQt5 使用 QSettings</a></p></blockquote><ul><li><p><a href="https://doc.qt.io/qt-5/qsettings.html#details" target="_blank" rel="external">Qt Documentation ：QSettings Class</a></p></li><li><h2 id="QT-Creator的简要使用"><a href="#QT-Creator的简要使用" class="headerlink" title="QT Creator的简要使用"></a>QT Creator的简要使用</h2></li><li><p>可参考：<a href="https://zhuanlan.zhihu.com/p/28130949" target="_blank" rel="external">PyQt5系列教程（3）：小小小程序</a></p></li><li><p>可参考：<a href="https://zhuanlan.zhihu.com/p/28559136" target="_blank" rel="external">PyQt5系列教程（6）：布局</a></p></li><li><p>可参考：<a href="https://zhuanlan.zhihu.com/p/28774180" target="_blank" rel="external">PyQt5系列教程（7）：界面搭建</a></p></li><li><p>可参考：<a href="https://zhuanlan.zhihu.com/p/29795495" target="_blank" rel="external">PyQt5系列教程（11）：今天的消息挺全哦！</a></p></li></ul><h2 id="事件、信号槽简要解释"><a href="#事件、信号槽简要解释" class="headerlink" title="事件、信号槽简要解释"></a>事件、信号槽简要解释</h2><p>GUI应用程序是事件驱动的。事件主要由应用程序的用户生成。但它们也可以通过其他手段产生，例如：网络连接，窗口管理器或定时器。当我们调用应用程序的<code>exec_()</code>方法时，应用程序进入主循环。主循环获取事件并将其发送到对象。</p><p>在事件模型中，有三个参与者：</p><ul><li>事件来源</li><li>事件对象</li><li>事件目标</li></ul><p>事件源是其状态更改的对象。它会生成事件。事件对象（event）将状态更改封装在事件源中。事件目标是要通知的对象。事件源对象将处理事件的任务委托给事件目标。</p><p>PyQt5具有独特的信号和插槽机制来处理事件。信号和槽用于对象之间的通信。发生特定事件时发出信号。槽可以是任何Python可调用的函数。当发射连接的信号时会调用一个槽，槽是对信号作出反应的方法。</p><h2 id="Python调用自定义槽函数的疑惑"><a href="#Python调用自定义槽函数的疑惑" class="headerlink" title="Python调用自定义槽函数的疑惑"></a>Python调用自定义槽函数的疑惑</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span><span class="params">()</span>:</span></div><div class="line"><span class="string">''''''</span></div><div class="line"><span class="string">''''''</span></div><div class="line">self.Start_Button.clicked.connect(self.Sele_Format)</div><div class="line">        self.show()</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Clear_URL_Result</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        清空URL列表以及结果显示处</span></div><div class="line"><span class="string">        """</span></div><div class="line">        self.YouTube_URL_Line.setText(<span class="string">""</span>)</div><div class="line">        self.result.setText(<span class="string">""</span>)</div></pre></td></tr></table></figure><p>规范调用槽函数：即在面向对象之内的<code>self</code>其实只是Python面向对象的基础知识…</p><h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1><ul><li>以上知识参考来源：《Python学习手册》Mark Lutz著</li></ul><blockquote><p>基本上的Python疑惑知识点均来自此书籍，一本很好的参考学习书籍，赞～</p></blockquote><ul><li><a href="https://www.zhihu.com/people/xdbcb8/activities" target="_blank" rel="external">知乎博主：学点编程吧</a></li></ul><blockquote><p>基本上上面关于PyQT5的知识点均来自于此，感谢作者的付出，学习了很多～直接放上作者的代码未经修改是为了方便以后参考之用。</p></blockquote><ul><li><p><a href="http://www.runoob.com/python3/python3-func-zip.html" target="_blank" rel="external">Python3 zip()函数</a></p></li><li><p><a href="https://maicss.gitbooks.io/pyqt5/content/%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86.html" target="_blank" rel="external">PyQT5中文教程</a></p></li><li><p><a href="https://build-system.fman.io/pyqt5-tutorial" target="_blank" rel="external">pyqt5-tutorial</a></p></li><li><p><a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/" target="_blank" rel="external">PyQt5 Reference Guide</a></p></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文以记录一些常见的、模糊的&lt;em&gt;Python知识点&lt;/em&gt;以及在使用其所有的模块库过程中产生的疑惑为主，在此记录以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/categories/Python/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="https://liujunjie11.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>复习：编译器原理</title>
    <link href="https://liujunjie11.github.io/2019/03/20/%E5%A4%8D%E4%B9%A0%EF%BC%9A%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    <id>https://liujunjie11.github.io/2019/03/20/复习：编译器原理/</id>
    <published>2019-03-20T04:47:51.000Z</published>
    <updated>2019-03-24T04:32:10.694Z</updated>
    
    <content type="html"><![CDATA[<p>这是开始为秋招做准备的简单复习，因为之前没怎么好好学习<em>编译器原理</em>，所以现在学习一番，并且在此做个记录以观后效之用。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是开始为秋招做准备的简单复习，因为之前没怎么好好学习&lt;em&gt;编译器原理&lt;/em&gt;，所以现在学习一番，并且在此做个记录以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编译器原理" scheme="https://liujunjie11.github.io/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编译器原理" scheme="https://liujunjie11.github.io/tags/%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>复习：计算机网络</title>
    <link href="https://liujunjie11.github.io/2019/03/20/%E5%A4%8D%E4%B9%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://liujunjie11.github.io/2019/03/20/复习：计算机网络/</id>
    <published>2019-03-20T04:47:23.000Z</published>
    <updated>2019-03-24T04:32:18.098Z</updated>
    
    <content type="html"><![CDATA[<p>这是开始为秋招做准备的简单复习，因为之前没怎么好好学习<em>计算机网络</em>，所以现在学习一番，并且在此做个记录以观后效之用。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是开始为秋招做准备的简单复习，因为之前没怎么好好学习&lt;em&gt;计算机网络&lt;/em&gt;，所以现在学习一番，并且在此做个记录以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机网络" scheme="https://liujunjie11.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机网络" scheme="https://liujunjie11.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>复习：操作系统</title>
    <link href="https://liujunjie11.github.io/2019/03/20/%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://liujunjie11.github.io/2019/03/20/复习：操作系统/</id>
    <published>2019-03-20T04:47:09.000Z</published>
    <updated>2019-03-20T04:50:20.226Z</updated>
    
    <content type="html"><![CDATA[<p>这是开始为秋招做准备的简单复习，因为之前没怎么好好学习<em>操作系统</em>，所以现在学习一番，并且在此做个记录以观后效之用。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是开始为秋招做准备的简单复习，因为之前没怎么好好学习&lt;em&gt;操作系统&lt;/em&gt;，所以现在学习一番，并且在此做个记录以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>复习：数据结构与算法</title>
    <link href="https://liujunjie11.github.io/2019/03/20/%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://liujunjie11.github.io/2019/03/20/复习：数据结构与算法/</id>
    <published>2019-03-20T04:46:55.000Z</published>
    <updated>2019-03-24T04:32:20.274Z</updated>
    
    <content type="html"><![CDATA[<p>这是开始为秋招做准备的简单复习，因为之前没怎么好好学习<em>数据结构与算法</em>，所以现在学习一番，并且在此做个记录以观后效之用。</p><a id="more"></a><blockquote><p>好的公开课推荐：<a href="http://www.52nlp.cn/coursera%E4%B8%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95%E8%AF%BE%E7%A8%8B-%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE-%E6%B1%87%E6%80%BB%E6%8E%A8%E8%8D%90" target="_blank" rel="external">Coursera上数据结构 &amp; 算法课程（公开课）汇总推荐</a></p></blockquote><p>关于一些基础的数据结构知识还是有点印象的，大致回顾一遍就开始刷题了…</p><p>回顾可参考：</p><ul><li><p><a href="http://blog.jobbole.com/110835/" target="_blank" rel="external">技术面试宝典： 很全面的算法和数据结构知识（含代码实现）</a></p></li><li><p><a href="https://hit-alibaba.github.io/interview/basic/algo/" target="_blank" rel="external">数据结构与算法</a></p></li></ul><blockquote><p>另外许多的书籍也是回顾基础知识不错的选择。另外一些视频也行。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是开始为秋招做准备的简单复习，因为之前没怎么好好学习&lt;em&gt;数据结构与算法&lt;/em&gt;，所以现在学习一番，并且在此做个记录以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据结构" scheme="https://liujunjie11.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据结构" scheme="https://liujunjie11.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>考研乱象</title>
    <link href="https://liujunjie11.github.io/2019/03/13/%E8%80%83%E7%A0%94%E4%B9%B1%E8%B1%A1/"/>
    <id>https://liujunjie11.github.io/2019/03/13/考研乱象/</id>
    <published>2019-03-13T09:10:17.000Z</published>
    <updated>2019-03-19T12:16:19.371Z</updated>
    
    <content type="html"><![CDATA[<p>当今的研究生早已满大街都是了，“学历”早就开始了其贬值的进程，是这个社会真的需要更多精进的人才了吗？还只是趋势附炎？还是说这是一场本身由学生自己晾成的大剧？无论怎么说，学历迎来贬值是不可避免的趋势。</p><a id="more"></a><p>不知怎么搞的，文章的开头总是越来越像水文的感觉了，我自己都有点看不过去了…回到正题上，身边的同学们说着要考研啊考研，一些个所谓的培训机构忙着每天找人发传单啊，马不停蹄，我们这一届刚刚开学，每天去上课就看到一大堆的传单比我们先到不知多久了，他们不仅想要培训我们这一届的想要考研的同学们，连大一、大二的都在忙着拉拢…好一个群魔乱舞的考研百家争鸣的现场，真是让我大开眼界了。</p><p>当今的大学生大多在本科期间无所事事，没有学到应有的能力与本领，就想着要通过考研来缓解自我的将要进入社会工作压力，这一点早已随着浮躁的中国社会越发不可收拾了，学生们亦变得越来越急功近利，附炎趋势，早已忘记了自己以后对于社会会带来多少的贡献与付出，心里有一个“钱”字，这种早已在中国社会凸显出来的现象如今正在越发向校园里前进，人们试图给这个现象起个褒义词–”现实”…</p><p>当纯洁的搞学术的地方也变成了培训机构，那么应不应该算是一个国家一个民族的悲哀？先不论中国的应试教育培养了多少的考试机器，培养出来的大多数学生不仅是行动上的矮子，还像个鼠目寸光、发育未全的孩子，在道德品行都是一片空白，附炎趋势，就像是个没有自我思考能力的行尸走肉一般，听众说纷纭，随波逐流。这就是大多数中国”知识分子“的现象，只不过是个旧时代跨越过来改头换面的趋势罢。放眼望去，人为财死，鸟为食亡，除了拿命换钱换取苟且偷生，估计也没什么追求了吧。这是我从生活中看到的，那么真实，那么令人感到悲哀。时代确实变了，本质却没变。</p><p>这个社会像是个大的灯光舞台，多少鱼龙混杂的小丑们争个头破血流也要出场表现一番，能搏得台下的观众一笑是他们最大的欣慰，仅此而已。</p><p>我清楚的意识到，我没有做到平心而论，我更像是世途难堪，在此爆发挤压已久的不快，难以会变得迁怒于他人，难免会变得以偏概全，亦难免会变得人情世故起来。</p><p>现在仔细看看，我写的这些东西真是结构模糊的一篇乱七八糟文…我或许又有一些自以为是了…真的是有些羞愧难当啊…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当今的研究生早已满大街都是了，“学历”早就开始了其贬值的进程，是这个社会真的需要更多精进的人才了吗？还只是趋势附炎？还是说这是一场本身由学生自己晾成的大剧？无论怎么说，学历迎来贬值是不可避免的趋势。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设立标准</title>
    <link href="https://liujunjie11.github.io/2019/03/13/%E8%AE%BE%E7%AB%8B%E6%A0%87%E5%87%86/"/>
    <id>https://liujunjie11.github.io/2019/03/13/设立标准/</id>
    <published>2019-03-13T09:09:58.000Z</published>
    <updated>2019-03-14T02:12:59.813Z</updated>
    
    <content type="html"><![CDATA[<p>曾经我这个不愿接受、不怎么赞同任何“标准”的人，现在居然也想着要为这个世界，为这人世间的人们设立各种“标准”了…</p><a id="more"></a><p>怎么了？心里总是乱糟糟的，人浮于事，曾经在心中默念无数遍，自以为已经是铁石心肠，刀枪不入了，现在仔细想想，真的是一种自我的讽刺。我变成了那个我曾经看不上眼的“那群人”。愚昧、无礼、庸俗…我的心在司空见惯了之后居然会向着他们蠢蠢欲动了，我慢慢的变得越来越像他们，我变得越来越不像自己了，变得愤世嫉俗，变得俗不可耐，变得冷漠无情、无礼…</p><p>物以类聚，人以群分。大多数不过都是人们自己的选择，他们的每一个选择组成了他们今天的自己。这在曾经我的心里再清楚不过，而我居然感知不到却在慢慢的发生的这些变化，我把自己当成了高人一等的圣人了，我把自己当成了远离世俗的隐君子了…但是我忘了，我的的确确永远也离不开“世俗”在我周围的围绕。</p><p>我也确实变成了曾经向往的那个人，不近人情，冷酷冷漠，无礼无教…我是“无法无天”了，曾经在我心中斩钉截铁的所谓的原则呢？被我这个俗人抛弃得一干二净了。整日浑浑沉沉，不思进取，沉默寡言倒也罢了，窃以为已经看破了红尘…是啊，这像我，又好像不像我。</p><p>如今的我是个懒于敷衍，不甘附俗的我，我对于如何变成今天的这般样子再为清楚不过了，但，我又怎能忘记那份过去的初衷呢…对于无辜的人们不以世俗的眼光去看待，不以待世俗之人之举去对待，这应当是我要遵循的原则啊。对于这个国家，这个民族的绝大多数人，我何必要有一种恨铁不成钢的心态呢，这与我的选择本是格格不入的两回事罢，我不喜欢所谓的一般见识，而现在的我对谁都是一般见识了…这是一个需要耐心等待的循规渐进的过程啊，我又如何像要求我自己一样的去要求整个的历史进程呢，可笑的是我啊，庸人自扰了。</p><p>所有的不甘心，所有的抱怨就在此打个结吧，我还是要做我想做的和该做的事，不为这些世俗之事所困扰，不能让这急功近利、浮躁激进的迷雾遮住了双眼，我，这个国家，这个民族，还有很长的一段路要继续走下去。</p><p>我要做我想做的、能做的、该做的事，更加的，不能变得像我所看不上眼的“世俗”如出一辙的样子。我真的是懒于敷衍吧，但又为何变得迁怒他人，迁怒整个国家，整个民族呢？愤世嫉俗，无辜迁怒，这不应当是我的常态。有时，我明显的感觉自己慢慢的变得像个那些我眼中的“俗人”了，喜欢以偏概全了，这或许就是我时常迁怒于无辜之人的缘由了吧。</p><p>终于能明白为何老一辈的人们为何难以改变其固蒂深根的想法的缘由了，当初以自我认同的学识结论，在世间自以为得到确切的认证，但人也慢慢的不可避免沦为人情世故的一员，自身的思维从而也变得难以撼动，这是一个人的本性吧，在俗世中自以为是，真是有一番趣味性。怎么的，我却也不像变为了人情世故中的一员，但是我这求己求习惯了的自尊心却是容易让我变得薄面起来，变得不像是自己了…一个人，总是容易以在狭小界限得出的结论去批判整个大局，所谓的以偏概全形容我再适当不过。不时的自省是应当的，变得麻木不仁可也难免被潜移默化的。我又何尝不也是一个以利益为先的人呢，曾经的我不屑于此，但有些东西确实如此，需要我理性的去判断做出准确的决策，以至于步骤不显得乱七八糟，没有条理性。</p><p>抛开庸人自扰，我不过是不喜欢自己变得麻木不仁罢了！</p><p>独立寰宇，静心立世，尽我所能，此生不愿做个趋势附炎的俗人。有好些话还想继续的说下去，但又欲言而止…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经我这个不愿接受、不怎么赞同任何“标准”的人，现在居然也想着要为这个世界，为这人世间的人们设立各种“标准”了…&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>After Effects CC 2017/2018教程笔记记录</title>
    <link href="https://liujunjie11.github.io/2019/03/12/After-Effects-CC-2017-2018%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2019/03/12/After-Effects-CC-2017-2018教程笔记记录/</id>
    <published>2019-03-12T08:20:25.000Z</published>
    <updated>2019-04-12T03:45:06.964Z</updated>
    
    <content type="html"><![CDATA[<p>如题，这是一文关于<em>After Effects CC 2017/2018</em>的软件使用的教程笔记，最近一直想学习一下这些曾经想学的东西，学习的东西在此做一些记录以观后效之用。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，这是一文关于&lt;em&gt;After Effects CC 2017/2018&lt;/em&gt;的软件使用的教程笔记，最近一直想学习一下这些曾经想学的东西，学习的东西在此做一些记录以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="After Effects CC 2017/2018" scheme="https://liujunjie11.github.io/categories/After-Effects-CC-2017-2018/"/>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="After Effects CC 2017/2018" scheme="https://liujunjie11.github.io/tags/After-Effects-CC-2017-2018/"/>
    
  </entry>
  
  <entry>
    <title>Adobe Premiere(Pro)2018教程笔记记录</title>
    <link href="https://liujunjie11.github.io/2019/03/12/Adobe-Premiere-Pro-2018%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95/"/>
    <id>https://liujunjie11.github.io/2019/03/12/Adobe-Premiere-Pro-2018教程笔记记录/</id>
    <published>2019-03-12T08:19:34.000Z</published>
    <updated>2019-03-12T11:06:58.328Z</updated>
    
    <content type="html"><![CDATA[<p>如题，这是一文关于<em>Adobe Premiere2018</em>或者是<em>Adobe Premiere Pro2018</em>的软件使用的教程笔记，最近一直想学习一下这些曾经想学的东西，学习的东西在此做一些记录以观后效之用。</p><a id="more"></a><h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><p>看的是在<em>YouTube</em>上的<em>Mr. Yuan</em>发布的教程：<a href="https://www.youtube.com/watch?v=5FyFOG5lBog&amp;list=PLdQlQR22jq3VfIxMoBiOd5VwK6CNCUe0Q&amp;index=1" target="_blank" rel="external">《Adobe Premiere2018视频剪辑速成教程》</a></p><blockquote><p>目前的需求不是很多。但是在有限时间学习一下还是很不错的。</p></blockquote><h2 id="简单的介绍"><a href="#简单的介绍" class="headerlink" title="简单的介绍"></a>简单的介绍</h2><p>在左侧“双击”可选择(可多选素材)素材。</p><blockquote><p><a href="https://www.youtube.com/watch?v=5FyFOG5lBog&amp;list=PLdQlQR22jq3VfIxMoBiOd5VwK6CNCUe0Q&amp;index=1" target="_blank" rel="external">《Adobe Premiere2018视频剪辑速成教程》第01课：新建一个项目和素材导入</a></p></blockquote><h2 id="视频素材剪辑"><a href="#视频素材剪辑" class="headerlink" title="视频素材剪辑"></a>视频素材剪辑</h2><p>….</p><p>这个学习先放放，感觉平时用<em>iMovie</em>就足够了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，这是一文关于&lt;em&gt;Adobe Premiere2018&lt;/em&gt;或者是&lt;em&gt;Adobe Premiere Pro2018&lt;/em&gt;的软件使用的教程笔记，最近一直想学习一下这些曾经想学的东西，学习的东西在此做一些记录以观后效之用。&lt;/p&gt;
    
    </summary>
    
      <category term="Adobe Premiere(Pro)2018" scheme="https://liujunjie11.github.io/categories/Adobe-Premiere-Pro-2018/"/>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Adobe Premiere(Pro)2018" scheme="https://liujunjie11.github.io/tags/Adobe-Premiere-Pro-2018/"/>
    
      <category term="笔记" scheme="https://liujunjie11.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
